exports.id = 553;
exports.ids = [553];
exports.modules = {

/***/ 6641:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
    }
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}


/***/ }),

/***/ 1037:
/***/ ((module) => {

"use strict";
/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Bit reading helpers
*/ 
var BROTLI_READ_SIZE = 4096;
var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;
var kBitMask = new Uint32Array([
    0,
    1,
    3,
    7,
    15,
    31,
    63,
    127,
    255,
    511,
    1023,
    2047,
    4095,
    8191,
    16383,
    32767,
    65535,
    131071,
    262143,
    524287,
    1048575,
    2097151,
    4194303,
    8388607,
    16777215
]);
/* Input byte buffer, consist of a ringbuffer and a "slack" region where */ /* bytes from the start of the ringbuffer are copied. */ function BrotliBitReader(input) {
    this.buf_ = new Uint8Array(BROTLI_IBUF_SIZE);
    this.input_ = input; /* input callback */ 
    this.reset();
}
BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;
BrotliBitReader.prototype.reset = function() {
    this.buf_ptr_ = 0; /* next input will write here */ 
    this.val_ = 0; /* pre-fetched bits */ 
    this.pos_ = 0; /* byte position in stream */ 
    this.bit_pos_ = 0; /* current bit-reading position in val_ */ 
    this.bit_end_pos_ = 0; /* bit-reading end position from LSB of val_ */ 
    this.eos_ = 0; /* input stream is finished */ 
    this.readMoreInput();
    for(var i = 0; i < 4; i++){
        this.val_ |= this.buf_[this.pos_] << 8 * i;
        ++this.pos_;
    }
    return this.bit_end_pos_ > 0;
};
/* Fills up the input ringbuffer by calling the input callback.

   Does nothing if there are at least 32 bytes present after current position.

   Returns 0 if either:
    - the input callback returned an error, or
    - there is no more input and the position is past the end of the stream.

   After encountering the end of the input stream, 32 additional zero bytes are
   copied to the ringbuffer, therefore it is safe to call this function after
   every 32 bytes of input is read.
*/ BrotliBitReader.prototype.readMoreInput = function() {
    if (this.bit_end_pos_ > 256) {
        return;
    } else if (this.eos_) {
        if (this.bit_pos_ > this.bit_end_pos_) throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
    } else {
        var dst = this.buf_ptr_;
        var bytes_read = this.input_.read(this.buf_, dst, BROTLI_READ_SIZE);
        if (bytes_read < 0) {
            throw new Error("Unexpected end of input");
        }
        if (bytes_read < BROTLI_READ_SIZE) {
            this.eos_ = 1;
            /* Store 32 bytes of zero after the stream end. */ for(var p = 0; p < 32; p++)this.buf_[dst + bytes_read + p] = 0;
        }
        if (dst === 0) {
            /* Copy the head of the ringbuffer to the slack region. */ for(var p = 0; p < 32; p++)this.buf_[(BROTLI_READ_SIZE << 1) + p] = this.buf_[p];
            this.buf_ptr_ = BROTLI_READ_SIZE;
        } else {
            this.buf_ptr_ = 0;
        }
        this.bit_end_pos_ += bytes_read << 3;
    }
};
/* Guarantees that there are at least 24 bits in the buffer. */ BrotliBitReader.prototype.fillBitWindow = function() {
    while(this.bit_pos_ >= 8){
        this.val_ >>>= 8;
        this.val_ |= this.buf_[this.pos_ & BROTLI_IBUF_MASK] << 24;
        ++this.pos_;
        this.bit_pos_ = this.bit_pos_ - 8 >>> 0;
        this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
    }
};
/* Reads the specified number of bits from Read Buffer. */ BrotliBitReader.prototype.readBits = function(n_bits) {
    if (32 - this.bit_pos_ < n_bits) {
        this.fillBitWindow();
    }
    var val = this.val_ >>> this.bit_pos_ & kBitMask[n_bits];
    this.bit_pos_ += n_bits;
    return val;
};
module.exports = BrotliBitReader;


/***/ }),

/***/ 383:
/***/ ((__unused_webpack_module, exports) => {

/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Lookup table to map the previous two bytes to a context id.

   There are four different context modeling modes defined here:
     CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,
     CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,
     CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,
     CONTEXT_SIGNED: second-order context model tuned for signed integers.

   The context id for the UTF8 context model is calculated as follows. If p1
   and p2 are the previous two bytes, we calcualte the context as

     context = kContextLookup[p1] | kContextLookup[p2 + 256].

   If the previous two bytes are ASCII characters (i.e. < 128), this will be
   equivalent to

     context = 4 * context1(p1) + context2(p2),

   where context1 is based on the previous byte in the following way:

     0  : non-ASCII control
     1  : \t, \n, \r
     2  : space
     3  : other punctuation
     4  : " '
     5  : %
     6  : ( < [ {
     7  : ) > ] }
     8  : , ; :
     9  : .
     10 : =
     11 : number
     12 : upper-case vowel
     13 : upper-case consonant
     14 : lower-case vowel
     15 : lower-case consonant

   and context2 is based on the second last byte:

     0 : control, space
     1 : punctuation
     2 : upper-case letter, number
     3 : lower-case letter

   If the last byte is ASCII, and the second last byte is not (in a valid UTF8
   stream it will be a continuation byte, value between 128 and 191), the
   context is the same as if the second last byte was an ASCII control or space.

   If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
   be a continuation byte and the context id is 2 or 3 depending on the LSB of
   the last byte and to a lesser extent on the second last byte if it is ASCII.

   If the last byte is a UTF8 continuation byte, the second last byte can be:
     - continuation byte: the next byte is probably ASCII or lead byte (assuming
       4-byte UTF8 characters are rare) and the context id is 0 or 1.
     - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
     - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3

   The possible value combinations of the previous two bytes, the range of
   context ids and the type of the next byte is summarized in the table below:

   |--------\-----------------------------------------------------------------|
   |         \                         Last byte                              |
   | Second   \---------------------------------------------------------------|
   | last byte \    ASCII            |   cont. byte        |   lead byte      |
   |            \   (0-127)          |   (128-191)         |   (192-)         |
   |=============|===================|=====================|==================|
   |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
   |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
   |-------------|-------------------|---------------------|------------------|
   |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
   |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
   |-------------|-------------------|---------------------|------------------|
   |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
   |  (192-207)  |                   |  context: 0 - 1     |                  |
   |-------------|-------------------|---------------------|------------------|
   |  lead byte  | not valid         |  next: cont.        |  not valid       |
   |  (208-)     |                   |  context: 2 - 3     |                  |
   |-------------|-------------------|---------------------|------------------|

   The context id for the signed context mode is calculated as:

     context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].

   For any context modeling modes, the context ids can be calculated by |-ing
   together two lookups from one table using context model dependent offsets:

     context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].

   where offset1 and offset2 are dependent on the context mode.
*/ var CONTEXT_LSB6 = 0;
var CONTEXT_MSB6 = 1;
var CONTEXT_UTF8 = 2;
var CONTEXT_SIGNED = 3;
/* Common context lookup table for all context modes. */ exports.lookup = new Uint8Array([
    /* CONTEXT_UTF8, last byte. */ /* ASCII range. */ 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    4,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    8,
    12,
    16,
    12,
    12,
    20,
    12,
    16,
    24,
    28,
    12,
    12,
    32,
    12,
    36,
    12,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    44,
    32,
    32,
    24,
    40,
    28,
    12,
    12,
    48,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    48,
    52,
    52,
    52,
    52,
    52,
    24,
    12,
    28,
    12,
    12,
    12,
    56,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    56,
    60,
    60,
    60,
    60,
    60,
    24,
    12,
    28,
    12,
    0,
    /* UTF8 continuation byte range. */ 0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    0,
    1,
    /* UTF8 lead byte range. */ 2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    2,
    3,
    /* CONTEXT_UTF8 second last byte. */ /* ASCII range. */ 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    1,
    1,
    1,
    1,
    0,
    /* UTF8 continuation byte range. */ 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    /* UTF8 lead byte range. */ 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    /* CONTEXT_SIGNED, second last byte. */ 0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */ 0,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    24,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    40,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    48,
    56,
    /* CONTEXT_LSB6, last byte. */ 0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    /* CONTEXT_MSB6, last byte. */ 0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    9,
    9,
    9,
    9,
    10,
    10,
    10,
    10,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    13,
    13,
    13,
    13,
    14,
    14,
    14,
    14,
    15,
    15,
    15,
    15,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    22,
    22,
    22,
    22,
    23,
    23,
    23,
    23,
    24,
    24,
    24,
    24,
    25,
    25,
    25,
    25,
    26,
    26,
    26,
    26,
    27,
    27,
    27,
    27,
    28,
    28,
    28,
    28,
    29,
    29,
    29,
    29,
    30,
    30,
    30,
    30,
    31,
    31,
    31,
    31,
    32,
    32,
    32,
    32,
    33,
    33,
    33,
    33,
    34,
    34,
    34,
    34,
    35,
    35,
    35,
    35,
    36,
    36,
    36,
    36,
    37,
    37,
    37,
    37,
    38,
    38,
    38,
    38,
    39,
    39,
    39,
    39,
    40,
    40,
    40,
    40,
    41,
    41,
    41,
    41,
    42,
    42,
    42,
    42,
    43,
    43,
    43,
    43,
    44,
    44,
    44,
    44,
    45,
    45,
    45,
    45,
    46,
    46,
    46,
    46,
    47,
    47,
    47,
    47,
    48,
    48,
    48,
    48,
    49,
    49,
    49,
    49,
    50,
    50,
    50,
    50,
    51,
    51,
    51,
    51,
    52,
    52,
    52,
    52,
    53,
    53,
    53,
    53,
    54,
    54,
    54,
    54,
    55,
    55,
    55,
    55,
    56,
    56,
    56,
    56,
    57,
    57,
    57,
    57,
    58,
    58,
    58,
    58,
    59,
    59,
    59,
    59,
    60,
    60,
    60,
    60,
    61,
    61,
    61,
    61,
    62,
    62,
    62,
    62,
    63,
    63,
    63,
    63,
    /* CONTEXT_{M,L}SB6, second last byte, */ 0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
]);
exports.lookupOffsets = new Uint16Array([
    /* CONTEXT_LSB6 */ 1024,
    1536,
    /* CONTEXT_MSB6 */ 1280,
    1536,
    /* CONTEXT_UTF8 */ 0,
    256,
    /* CONTEXT_SIGNED */ 768,
    512
]);


/***/ }),

/***/ 5730:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/ var BrotliInput = (__webpack_require__(6706)/* .BrotliInput */ .g);
var BrotliOutput = (__webpack_require__(6706)/* .BrotliOutput */ .j);
var BrotliBitReader = __webpack_require__(1037);
var BrotliDictionary = __webpack_require__(2948);
var HuffmanCode = (__webpack_require__(9433)/* .HuffmanCode */ .h);
var BrotliBuildHuffmanTable = (__webpack_require__(9433)/* .BrotliBuildHuffmanTable */ .g);
var Context = __webpack_require__(383);
var Prefix = __webpack_require__(7914);
var Transform = __webpack_require__(7621);
var kDefaultCodeLength = 8;
var kCodeLengthRepeatCode = 16;
var kNumLiteralCodes = 256;
var kNumInsertAndCopyCodes = 704;
var kNumBlockLengthCodes = 26;
var kLiteralContextBits = 6;
var kDistanceContextBits = 2;
var HUFFMAN_TABLE_BITS = 8;
var HUFFMAN_TABLE_MASK = 0xff;
/* Maximum possible Huffman table size for an alphabet size of 704, max code
 * length 15 and root table bits 8. */ var HUFFMAN_MAX_TABLE_SIZE = 1080;
var CODE_LENGTH_CODES = 18;
var kCodeLengthCodeOrder = new Uint8Array([
    1,
    2,
    3,
    4,
    0,
    5,
    17,
    6,
    16,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
]);
var NUM_DISTANCE_SHORT_CODES = 16;
var kDistanceShortCodeIndexOffset = new Uint8Array([
    3,
    2,
    1,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2
]);
var kDistanceShortCodeValueOffset = new Int8Array([
    0,
    0,
    0,
    0,
    -1,
    1,
    -2,
    2,
    -3,
    3,
    -1,
    1,
    -2,
    2,
    -3,
    3
]);
var kMaxHuffmanTableSize = new Uint16Array([
    256,
    402,
    436,
    468,
    500,
    534,
    566,
    598,
    630,
    662,
    694,
    726,
    758,
    790,
    822,
    854,
    886,
    920,
    952,
    984,
    1016,
    1048,
    1080
]);
function DecodeWindowBits(br) {
    var n;
    if (br.readBits(1) === 0) {
        return 16;
    }
    n = br.readBits(3);
    if (n > 0) {
        return 17 + n;
    }
    n = br.readBits(3);
    if (n > 0) {
        return 8 + n;
    }
    return 17;
}
/* Decodes a number in the range [0..255], by reading 1 - 11 bits. */ function DecodeVarLenUint8(br) {
    if (br.readBits(1)) {
        var nbits = br.readBits(3);
        if (nbits === 0) {
            return 1;
        } else {
            return br.readBits(nbits) + (1 << nbits);
        }
    }
    return 0;
}
function MetaBlockLength() {
    this.meta_block_length = 0;
    this.input_end = 0;
    this.is_uncompressed = 0;
    this.is_metadata = false;
}
function DecodeMetaBlockLength(br) {
    var out = new MetaBlockLength;
    var size_nibbles;
    var size_bytes;
    var i;
    out.input_end = br.readBits(1);
    if (out.input_end && br.readBits(1)) {
        return out;
    }
    size_nibbles = br.readBits(2) + 4;
    if (size_nibbles === 7) {
        out.is_metadata = true;
        if (br.readBits(1) !== 0) throw new Error("Invalid reserved bit");
        size_bytes = br.readBits(2);
        if (size_bytes === 0) return out;
        for(i = 0; i < size_bytes; i++){
            var next_byte = br.readBits(8);
            if (i + 1 === size_bytes && size_bytes > 1 && next_byte === 0) throw new Error("Invalid size byte");
            out.meta_block_length |= next_byte << i * 8;
        }
    } else {
        for(i = 0; i < size_nibbles; ++i){
            var next_nibble = br.readBits(4);
            if (i + 1 === size_nibbles && size_nibbles > 4 && next_nibble === 0) throw new Error("Invalid size nibble");
            out.meta_block_length |= next_nibble << i * 4;
        }
    }
    ++out.meta_block_length;
    if (!out.input_end && !out.is_metadata) {
        out.is_uncompressed = br.readBits(1);
    }
    return out;
}
/* Decodes the next Huffman code from bit-stream. */ function ReadSymbol(table, index, br) {
    var start_index = index;
    var nbits;
    br.fillBitWindow();
    index += br.val_ >>> br.bit_pos_ & HUFFMAN_TABLE_MASK;
    nbits = table[index].bits - HUFFMAN_TABLE_BITS;
    if (nbits > 0) {
        br.bit_pos_ += HUFFMAN_TABLE_BITS;
        index += table[index].value;
        index += br.val_ >>> br.bit_pos_ & (1 << nbits) - 1;
    }
    br.bit_pos_ += table[index].bits;
    return table[index].value;
}
function ReadHuffmanCodeLengths(code_length_code_lengths, num_symbols, code_lengths, br) {
    var symbol = 0;
    var prev_code_len = kDefaultCodeLength;
    var repeat = 0;
    var repeat_code_len = 0;
    var space = 32768;
    var table = [];
    for(var i = 0; i < 32; i++)table.push(new HuffmanCode(0, 0));
    BrotliBuildHuffmanTable(table, 0, 5, code_length_code_lengths, CODE_LENGTH_CODES);
    while(symbol < num_symbols && space > 0){
        var p = 0;
        var code_len;
        br.readMoreInput();
        br.fillBitWindow();
        p += br.val_ >>> br.bit_pos_ & 31;
        br.bit_pos_ += table[p].bits;
        code_len = table[p].value & 0xff;
        if (code_len < kCodeLengthRepeatCode) {
            repeat = 0;
            code_lengths[symbol++] = code_len;
            if (code_len !== 0) {
                prev_code_len = code_len;
                space -= 32768 >> code_len;
            }
        } else {
            var extra_bits = code_len - 14;
            var old_repeat;
            var repeat_delta;
            var new_len = 0;
            if (code_len === kCodeLengthRepeatCode) {
                new_len = prev_code_len;
            }
            if (repeat_code_len !== new_len) {
                repeat = 0;
                repeat_code_len = new_len;
            }
            old_repeat = repeat;
            if (repeat > 0) {
                repeat -= 2;
                repeat <<= extra_bits;
            }
            repeat += br.readBits(extra_bits) + 3;
            repeat_delta = repeat - old_repeat;
            if (symbol + repeat_delta > num_symbols) {
                throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
            }
            for(var x = 0; x < repeat_delta; x++)code_lengths[symbol + x] = repeat_code_len;
            symbol += repeat_delta;
            if (repeat_code_len !== 0) {
                space -= repeat_delta << 15 - repeat_code_len;
            }
        }
    }
    if (space !== 0) {
        throw new Error("[ReadHuffmanCodeLengths] space = " + space);
    }
    for(; symbol < num_symbols; symbol++)code_lengths[symbol] = 0;
}
function ReadHuffmanCode(alphabet_size, tables, table, br) {
    var table_size = 0;
    var simple_code_or_skip;
    var code_lengths = new Uint8Array(alphabet_size);
    br.readMoreInput();
    /* simple_code_or_skip is used as follows:
     1 for simple code;
     0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */ simple_code_or_skip = br.readBits(2);
    if (simple_code_or_skip === 1) {
        /* Read symbols, codes & code lengths directly. */ var i;
        var max_bits_counter = alphabet_size - 1;
        var max_bits = 0;
        var symbols = new Int32Array(4);
        var num_symbols = br.readBits(2) + 1;
        while(max_bits_counter){
            max_bits_counter >>= 1;
            ++max_bits;
        }
        for(i = 0; i < num_symbols; ++i){
            symbols[i] = br.readBits(max_bits) % alphabet_size;
            code_lengths[symbols[i]] = 2;
        }
        code_lengths[symbols[0]] = 1;
        switch(num_symbols){
            case 1:
                break;
            case 3:
                if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[1] === symbols[2]) {
                    throw new Error("[ReadHuffmanCode] invalid symbols");
                }
                break;
            case 2:
                if (symbols[0] === symbols[1]) {
                    throw new Error("[ReadHuffmanCode] invalid symbols");
                }
                code_lengths[symbols[1]] = 1;
                break;
            case 4:
                if (symbols[0] === symbols[1] || symbols[0] === symbols[2] || symbols[0] === symbols[3] || symbols[1] === symbols[2] || symbols[1] === symbols[3] || symbols[2] === symbols[3]) {
                    throw new Error("[ReadHuffmanCode] invalid symbols");
                }
                if (br.readBits(1)) {
                    code_lengths[symbols[2]] = 3;
                    code_lengths[symbols[3]] = 3;
                } else {
                    code_lengths[symbols[0]] = 2;
                }
                break;
        }
    } else {
        var i;
        var code_length_code_lengths = new Uint8Array(CODE_LENGTH_CODES);
        var space = 32;
        var num_codes = 0;
        /* Static Huffman code for the code length code lengths */ var huff = [
            new HuffmanCode(2, 0),
            new HuffmanCode(2, 4),
            new HuffmanCode(2, 3),
            new HuffmanCode(3, 2),
            new HuffmanCode(2, 0),
            new HuffmanCode(2, 4),
            new HuffmanCode(2, 3),
            new HuffmanCode(4, 1),
            new HuffmanCode(2, 0),
            new HuffmanCode(2, 4),
            new HuffmanCode(2, 3),
            new HuffmanCode(3, 2),
            new HuffmanCode(2, 0),
            new HuffmanCode(2, 4),
            new HuffmanCode(2, 3),
            new HuffmanCode(4, 5)
        ];
        for(i = simple_code_or_skip; i < CODE_LENGTH_CODES && space > 0; ++i){
            var code_len_idx = kCodeLengthCodeOrder[i];
            var p = 0;
            var v;
            br.fillBitWindow();
            p += br.val_ >>> br.bit_pos_ & 15;
            br.bit_pos_ += huff[p].bits;
            v = huff[p].value;
            code_length_code_lengths[code_len_idx] = v;
            if (v !== 0) {
                space -= 32 >> v;
                ++num_codes;
            }
        }
        if (!(num_codes === 1 || space === 0)) throw new Error("[ReadHuffmanCode] invalid num_codes or space");
        ReadHuffmanCodeLengths(code_length_code_lengths, alphabet_size, code_lengths, br);
    }
    table_size = BrotliBuildHuffmanTable(tables, table, HUFFMAN_TABLE_BITS, code_lengths, alphabet_size);
    if (table_size === 0) {
        throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
    }
    return table_size;
}
function ReadBlockLength(table, index, br) {
    var code;
    var nbits;
    code = ReadSymbol(table, index, br);
    nbits = Prefix.kBlockLengthPrefixCode[code].nbits;
    return Prefix.kBlockLengthPrefixCode[code].offset + br.readBits(nbits);
}
function TranslateShortCodes(code, ringbuffer, index) {
    var val;
    if (code < NUM_DISTANCE_SHORT_CODES) {
        index += kDistanceShortCodeIndexOffset[code];
        index &= 3;
        val = ringbuffer[index] + kDistanceShortCodeValueOffset[code];
    } else {
        val = code - NUM_DISTANCE_SHORT_CODES + 1;
    }
    return val;
}
function MoveToFront(v, index) {
    var value = v[index];
    var i = index;
    for(; i; --i)v[i] = v[i - 1];
    v[0] = value;
}
function InverseMoveToFrontTransform(v, v_len) {
    var mtf = new Uint8Array(256);
    var i;
    for(i = 0; i < 256; ++i){
        mtf[i] = i;
    }
    for(i = 0; i < v_len; ++i){
        var index = v[i];
        v[i] = mtf[index];
        if (index) MoveToFront(mtf, index);
    }
}
/* Contains a collection of huffman trees with the same alphabet size. */ function HuffmanTreeGroup(alphabet_size, num_htrees) {
    this.alphabet_size = alphabet_size;
    this.num_htrees = num_htrees;
    this.codes = new Array(num_htrees + num_htrees * kMaxHuffmanTableSize[alphabet_size + 31 >>> 5]);
    this.htrees = new Uint32Array(num_htrees);
}
HuffmanTreeGroup.prototype.decode = function(br) {
    var i;
    var table_size;
    var next = 0;
    for(i = 0; i < this.num_htrees; ++i){
        this.htrees[i] = next;
        table_size = ReadHuffmanCode(this.alphabet_size, this.codes, next, br);
        next += table_size;
    }
};
function DecodeContextMap(context_map_size, br) {
    var out = {
        num_htrees: null,
        context_map: null
    };
    var use_rle_for_zeros;
    var max_run_length_prefix = 0;
    var table;
    var i;
    br.readMoreInput();
    var num_htrees = out.num_htrees = DecodeVarLenUint8(br) + 1;
    var context_map = out.context_map = new Uint8Array(context_map_size);
    if (num_htrees <= 1) {
        return out;
    }
    use_rle_for_zeros = br.readBits(1);
    if (use_rle_for_zeros) {
        max_run_length_prefix = br.readBits(4) + 1;
    }
    table = [];
    for(i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++){
        table[i] = new HuffmanCode(0, 0);
    }
    ReadHuffmanCode(num_htrees + max_run_length_prefix, table, 0, br);
    for(i = 0; i < context_map_size;){
        var code;
        br.readMoreInput();
        code = ReadSymbol(table, 0, br);
        if (code === 0) {
            context_map[i] = 0;
            ++i;
        } else if (code <= max_run_length_prefix) {
            var reps = 1 + (1 << code) + br.readBits(code);
            while(--reps){
                if (i >= context_map_size) {
                    throw new Error("[DecodeContextMap] i >= context_map_size");
                }
                context_map[i] = 0;
                ++i;
            }
        } else {
            context_map[i] = code - max_run_length_prefix;
            ++i;
        }
    }
    if (br.readBits(1)) {
        InverseMoveToFrontTransform(context_map, context_map_size);
    }
    return out;
}
function DecodeBlockType(max_block_type, trees, tree_type, block_types, ringbuffers, indexes, br) {
    var ringbuffer = tree_type * 2;
    var index = tree_type;
    var type_code = ReadSymbol(trees, tree_type * HUFFMAN_MAX_TABLE_SIZE, br);
    var block_type;
    if (type_code === 0) {
        block_type = ringbuffers[ringbuffer + (indexes[index] & 1)];
    } else if (type_code === 1) {
        block_type = ringbuffers[ringbuffer + (indexes[index] - 1 & 1)] + 1;
    } else {
        block_type = type_code - 2;
    }
    if (block_type >= max_block_type) {
        block_type -= max_block_type;
    }
    block_types[tree_type] = block_type;
    ringbuffers[ringbuffer + (indexes[index] & 1)] = block_type;
    ++indexes[index];
}
function CopyUncompressedBlockToOutput(output, len, pos, ringbuffer, ringbuffer_mask, br) {
    var rb_size = ringbuffer_mask + 1;
    var rb_pos = pos & ringbuffer_mask;
    var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
    var nbytes;
    /* For short lengths copy byte-by-byte */ if (len < 8 || br.bit_pos_ + (len << 3) < br.bit_end_pos_) {
        while(len-- > 0){
            br.readMoreInput();
            ringbuffer[rb_pos++] = br.readBits(8);
            if (rb_pos === rb_size) {
                output.write(ringbuffer, rb_size);
                rb_pos = 0;
            }
        }
        return;
    }
    if (br.bit_end_pos_ < 32) {
        throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
    }
    /* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */ while(br.bit_pos_ < 32){
        ringbuffer[rb_pos] = br.val_ >>> br.bit_pos_;
        br.bit_pos_ += 8;
        ++rb_pos;
        --len;
    }
    /* Copy remaining bytes from br.buf_ to ringbuffer. */ nbytes = br.bit_end_pos_ - br.bit_pos_ >> 3;
    if (br_pos + nbytes > BrotliBitReader.IBUF_MASK) {
        var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
        for(var x = 0; x < tail; x++)ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
        nbytes -= tail;
        rb_pos += tail;
        len -= tail;
        br_pos = 0;
    }
    for(var x = 0; x < nbytes; x++)ringbuffer[rb_pos + x] = br.buf_[br_pos + x];
    rb_pos += nbytes;
    len -= nbytes;
    /* If we wrote past the logical end of the ringbuffer, copy the tail of the
     ringbuffer to its beginning and flush the ringbuffer to the output. */ if (rb_pos >= rb_size) {
        output.write(ringbuffer, rb_size);
        rb_pos -= rb_size;
        for(var x = 0; x < rb_pos; x++)ringbuffer[x] = ringbuffer[rb_size + x];
    }
    /* If we have more to copy than the remaining size of the ringbuffer, then we
     first fill the ringbuffer from the input and then flush the ringbuffer to
     the output */ while(rb_pos + len >= rb_size){
        nbytes = rb_size - rb_pos;
        if (br.input_.read(ringbuffer, rb_pos, nbytes) < nbytes) {
            throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
        }
        output.write(ringbuffer, rb_size);
        len -= nbytes;
        rb_pos = 0;
    }
    /* Copy straight from the input onto the ringbuffer. The ringbuffer will be
     flushed to the output at a later time. */ if (br.input_.read(ringbuffer, rb_pos, len) < len) {
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
    }
    /* Restore the state of the bit reader. */ br.reset();
}
/* Advances the bit reader position to the next byte boundary and verifies
   that any skipped bits are set to zero. */ function JumpToByteBoundary(br) {
    var new_bit_pos = br.bit_pos_ + 7 & ~7;
    var pad_bits = br.readBits(new_bit_pos - br.bit_pos_);
    return pad_bits == 0;
}
function BrotliDecompressedSize(buffer) {
    var input = new BrotliInput(buffer);
    var br = new BrotliBitReader(input);
    DecodeWindowBits(br);
    var out = DecodeMetaBlockLength(br);
    return out.meta_block_length;
}
__webpack_unused_export__ = BrotliDecompressedSize;
function BrotliDecompressBuffer(buffer, output_size) {
    var input = new BrotliInput(buffer);
    if (output_size == null) {
        output_size = BrotliDecompressedSize(buffer);
    }
    var output_buffer = new Uint8Array(output_size);
    var output = new BrotliOutput(output_buffer);
    BrotliDecompress(input, output);
    if (output.pos < output.buffer.length) {
        output.buffer = output.buffer.subarray(0, output.pos);
    }
    return output.buffer;
}
exports.BrotliDecompressBuffer = BrotliDecompressBuffer;
function BrotliDecompress(input, output) {
    var i;
    var pos = 0;
    var input_end = 0;
    var window_bits = 0;
    var max_backward_distance;
    var max_distance = 0;
    var ringbuffer_size;
    var ringbuffer_mask;
    var ringbuffer;
    var ringbuffer_end;
    /* This ring buffer holds a few past copy distances that will be used by */ /* some special distance codes. */ var dist_rb = [
        16,
        15,
        11,
        4
    ];
    var dist_rb_idx = 0;
    /* The previous 2 bytes used for context. */ var prev_byte1 = 0;
    var prev_byte2 = 0;
    var hgroup = [
        new HuffmanTreeGroup(0, 0),
        new HuffmanTreeGroup(0, 0),
        new HuffmanTreeGroup(0, 0)
    ];
    var block_type_trees;
    var block_len_trees;
    var br;
    /* We need the slack region for the following reasons:
       - always doing two 8-byte copies for fast backward copying
       - transforms
       - flushing the input ringbuffer when decoding uncompressed blocks */ var kRingBufferWriteAheadSlack = 128 + BrotliBitReader.READ_SIZE;
    br = new BrotliBitReader(input);
    /* Decode window size. */ window_bits = DecodeWindowBits(br);
    max_backward_distance = (1 << window_bits) - 16;
    ringbuffer_size = 1 << window_bits;
    ringbuffer_mask = ringbuffer_size - 1;
    ringbuffer = new Uint8Array(ringbuffer_size + kRingBufferWriteAheadSlack + BrotliDictionary.maxDictionaryWordLength);
    ringbuffer_end = ringbuffer_size;
    block_type_trees = [];
    block_len_trees = [];
    for(var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++){
        block_type_trees[x] = new HuffmanCode(0, 0);
        block_len_trees[x] = new HuffmanCode(0, 0);
    }
    while(!input_end){
        var meta_block_remaining_len = 0;
        var is_uncompressed;
        var block_length = [
            1 << 28,
            1 << 28,
            1 << 28
        ];
        var block_type = [
            0
        ];
        var num_block_types = [
            1,
            1,
            1
        ];
        var block_type_rb = [
            0,
            1,
            0,
            1,
            0,
            1
        ];
        var block_type_rb_index = [
            0
        ];
        var distance_postfix_bits;
        var num_direct_distance_codes;
        var distance_postfix_mask;
        var num_distance_codes;
        var context_map = null;
        var context_modes = null;
        var num_literal_htrees;
        var dist_context_map = null;
        var num_dist_htrees;
        var context_offset = 0;
        var context_map_slice = null;
        var literal_htree_index = 0;
        var dist_context_offset = 0;
        var dist_context_map_slice = null;
        var dist_htree_index = 0;
        var context_lookup_offset1 = 0;
        var context_lookup_offset2 = 0;
        var context_mode;
        var htree_command;
        for(i = 0; i < 3; ++i){
            hgroup[i].codes = null;
            hgroup[i].htrees = null;
        }
        br.readMoreInput();
        var _out = DecodeMetaBlockLength(br);
        meta_block_remaining_len = _out.meta_block_length;
        if (pos + meta_block_remaining_len > output.buffer.length) {
            /* We need to grow the output buffer to fit the additional data. */ var tmp = new Uint8Array(pos + meta_block_remaining_len);
            tmp.set(output.buffer);
            output.buffer = tmp;
        }
        input_end = _out.input_end;
        is_uncompressed = _out.is_uncompressed;
        if (_out.is_metadata) {
            JumpToByteBoundary(br);
            for(; meta_block_remaining_len > 0; --meta_block_remaining_len){
                br.readMoreInput();
                /* Read one byte and ignore it. */ br.readBits(8);
            }
            continue;
        }
        if (meta_block_remaining_len === 0) {
            continue;
        }
        if (is_uncompressed) {
            br.bit_pos_ = br.bit_pos_ + 7 & ~7;
            CopyUncompressedBlockToOutput(output, meta_block_remaining_len, pos, ringbuffer, ringbuffer_mask, br);
            pos += meta_block_remaining_len;
            continue;
        }
        for(i = 0; i < 3; ++i){
            num_block_types[i] = DecodeVarLenUint8(br) + 1;
            if (num_block_types[i] >= 2) {
                ReadHuffmanCode(num_block_types[i] + 2, block_type_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                ReadHuffmanCode(kNumBlockLengthCodes, block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                block_length[i] = ReadBlockLength(block_len_trees, i * HUFFMAN_MAX_TABLE_SIZE, br);
                block_type_rb_index[i] = 1;
            }
        }
        br.readMoreInput();
        distance_postfix_bits = br.readBits(2);
        num_direct_distance_codes = NUM_DISTANCE_SHORT_CODES + (br.readBits(4) << distance_postfix_bits);
        distance_postfix_mask = (1 << distance_postfix_bits) - 1;
        num_distance_codes = num_direct_distance_codes + (48 << distance_postfix_bits);
        context_modes = new Uint8Array(num_block_types[0]);
        for(i = 0; i < num_block_types[0]; ++i){
            br.readMoreInput();
            context_modes[i] = br.readBits(2) << 1;
        }
        var _o1 = DecodeContextMap(num_block_types[0] << kLiteralContextBits, br);
        num_literal_htrees = _o1.num_htrees;
        context_map = _o1.context_map;
        var _o2 = DecodeContextMap(num_block_types[2] << kDistanceContextBits, br);
        num_dist_htrees = _o2.num_htrees;
        dist_context_map = _o2.context_map;
        hgroup[0] = new HuffmanTreeGroup(kNumLiteralCodes, num_literal_htrees);
        hgroup[1] = new HuffmanTreeGroup(kNumInsertAndCopyCodes, num_block_types[1]);
        hgroup[2] = new HuffmanTreeGroup(num_distance_codes, num_dist_htrees);
        for(i = 0; i < 3; ++i){
            hgroup[i].decode(br);
        }
        context_map_slice = 0;
        dist_context_map_slice = 0;
        context_mode = context_modes[block_type[0]];
        context_lookup_offset1 = Context.lookupOffsets[context_mode];
        context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
        htree_command = hgroup[1].htrees[0];
        while(meta_block_remaining_len > 0){
            var cmd_code;
            var range_idx;
            var insert_code;
            var copy_code;
            var insert_length;
            var copy_length;
            var distance_code;
            var distance;
            var context;
            var j;
            var copy_dst;
            br.readMoreInput();
            if (block_length[1] === 0) {
                DecodeBlockType(num_block_types[1], block_type_trees, 1, block_type, block_type_rb, block_type_rb_index, br);
                block_length[1] = ReadBlockLength(block_len_trees, HUFFMAN_MAX_TABLE_SIZE, br);
                htree_command = hgroup[1].htrees[block_type[1]];
            }
            --block_length[1];
            cmd_code = ReadSymbol(hgroup[1].codes, htree_command, br);
            range_idx = cmd_code >> 6;
            if (range_idx >= 2) {
                range_idx -= 2;
                distance_code = -1;
            } else {
                distance_code = 0;
            }
            insert_code = Prefix.kInsertRangeLut[range_idx] + (cmd_code >> 3 & 7);
            copy_code = Prefix.kCopyRangeLut[range_idx] + (cmd_code & 7);
            insert_length = Prefix.kInsertLengthPrefixCode[insert_code].offset + br.readBits(Prefix.kInsertLengthPrefixCode[insert_code].nbits);
            copy_length = Prefix.kCopyLengthPrefixCode[copy_code].offset + br.readBits(Prefix.kCopyLengthPrefixCode[copy_code].nbits);
            prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
            for(j = 0; j < insert_length; ++j){
                br.readMoreInput();
                if (block_length[0] === 0) {
                    DecodeBlockType(num_block_types[0], block_type_trees, 0, block_type, block_type_rb, block_type_rb_index, br);
                    block_length[0] = ReadBlockLength(block_len_trees, 0, br);
                    context_offset = block_type[0] << kLiteralContextBits;
                    context_map_slice = context_offset;
                    context_mode = context_modes[block_type[0]];
                    context_lookup_offset1 = Context.lookupOffsets[context_mode];
                    context_lookup_offset2 = Context.lookupOffsets[context_mode + 1];
                }
                context = Context.lookup[context_lookup_offset1 + prev_byte1] | Context.lookup[context_lookup_offset2 + prev_byte2];
                literal_htree_index = context_map[context_map_slice + context];
                --block_length[0];
                prev_byte2 = prev_byte1;
                prev_byte1 = ReadSymbol(hgroup[0].codes, hgroup[0].htrees[literal_htree_index], br);
                ringbuffer[pos & ringbuffer_mask] = prev_byte1;
                if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                    output.write(ringbuffer, ringbuffer_size);
                }
                ++pos;
            }
            meta_block_remaining_len -= insert_length;
            if (meta_block_remaining_len <= 0) break;
            if (distance_code < 0) {
                var context;
                br.readMoreInput();
                if (block_length[2] === 0) {
                    DecodeBlockType(num_block_types[2], block_type_trees, 2, block_type, block_type_rb, block_type_rb_index, br);
                    block_length[2] = ReadBlockLength(block_len_trees, 2 * HUFFMAN_MAX_TABLE_SIZE, br);
                    dist_context_offset = block_type[2] << kDistanceContextBits;
                    dist_context_map_slice = dist_context_offset;
                }
                --block_length[2];
                context = (copy_length > 4 ? 3 : copy_length - 2) & 0xff;
                dist_htree_index = dist_context_map[dist_context_map_slice + context];
                distance_code = ReadSymbol(hgroup[2].codes, hgroup[2].htrees[dist_htree_index], br);
                if (distance_code >= num_direct_distance_codes) {
                    var nbits;
                    var postfix;
                    var offset;
                    distance_code -= num_direct_distance_codes;
                    postfix = distance_code & distance_postfix_mask;
                    distance_code >>= distance_postfix_bits;
                    nbits = (distance_code >> 1) + 1;
                    offset = (2 + (distance_code & 1) << nbits) - 4;
                    distance_code = num_direct_distance_codes + (offset + br.readBits(nbits) << distance_postfix_bits) + postfix;
                }
            }
            /* Convert the distance code to the actual distance by possibly looking */ /* up past distnaces from the ringbuffer. */ distance = TranslateShortCodes(distance_code, dist_rb, dist_rb_idx);
            if (distance < 0) {
                throw new Error("[BrotliDecompress] invalid distance");
            }
            if (pos < max_backward_distance && max_distance !== max_backward_distance) {
                max_distance = pos;
            } else {
                max_distance = max_backward_distance;
            }
            copy_dst = pos & ringbuffer_mask;
            if (distance > max_distance) {
                if (copy_length >= BrotliDictionary.minDictionaryWordLength && copy_length <= BrotliDictionary.maxDictionaryWordLength) {
                    var offset = BrotliDictionary.offsetsByLength[copy_length];
                    var word_id = distance - max_distance - 1;
                    var shift = BrotliDictionary.sizeBitsByLength[copy_length];
                    var mask = (1 << shift) - 1;
                    var word_idx = word_id & mask;
                    var transform_idx = word_id >> shift;
                    offset += word_idx * copy_length;
                    if (transform_idx < Transform.kNumTransforms) {
                        var len = Transform.transformDictionaryWord(ringbuffer, copy_dst, offset, copy_length, transform_idx);
                        copy_dst += len;
                        pos += len;
                        meta_block_remaining_len -= len;
                        if (copy_dst >= ringbuffer_end) {
                            output.write(ringbuffer, ringbuffer_size);
                            for(var _x = 0; _x < copy_dst - ringbuffer_end; _x++)ringbuffer[_x] = ringbuffer[ringbuffer_end + _x];
                        }
                    } else {
                        throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                    }
                } else {
                    throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                }
            } else {
                if (distance_code > 0) {
                    dist_rb[dist_rb_idx & 3] = distance;
                    ++dist_rb_idx;
                }
                if (copy_length > meta_block_remaining_len) {
                    throw new Error("Invalid backward reference. pos: " + pos + " distance: " + distance + " len: " + copy_length + " bytes left: " + meta_block_remaining_len);
                }
                for(j = 0; j < copy_length; ++j){
                    ringbuffer[pos & ringbuffer_mask] = ringbuffer[pos - distance & ringbuffer_mask];
                    if ((pos & ringbuffer_mask) === ringbuffer_mask) {
                        output.write(ringbuffer, ringbuffer_size);
                    }
                    ++pos;
                    --meta_block_remaining_len;
                }
            }
            /* When we get here, we must have inserted at least one literal and */ /* made a copy of at least length two, therefore accessing the last 2 */ /* bytes is valid. */ prev_byte1 = ringbuffer[pos - 1 & ringbuffer_mask];
            prev_byte2 = ringbuffer[pos - 2 & ringbuffer_mask];
        }
        /* Protect pos from overflow, wrap it around at every GB of input data */ pos &= 0x3fffffff;
    }
    output.write(ringbuffer, pos & ringbuffer_mask);
}
__webpack_unused_export__ = BrotliDecompress;
BrotliDictionary.init();


/***/ }),

/***/ 6832:
/***/ ((__unused_webpack_module, exports) => {

/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Collection of static dictionary words.
*/ exports.dictionary = new Uint8Array([
    0x74,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x64,
    0x61,
    0x74,
    0x61,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x73,
    0x69,
    0x74,
    0x65,
    0x63,
    0x69,
    0x74,
    0x79,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x66,
    0x72,
    0x65,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x74,
    0x65,
    0x78,
    0x74,
    0x79,
    0x65,
    0x61,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x6c,
    0x6f,
    0x76,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x76,
    0x69,
    0x65,
    0x77,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x70,
    0x61,
    0x67,
    0x65,
    0x64,
    0x61,
    0x79,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x65,
    0x61,
    0x63,
    0x68,
    0x61,
    0x72,
    0x65,
    0x61,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x74,
    0x72,
    0x75,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x75,
    0x70,
    0x6f,
    0x6e,
    0x68,
    0x69,
    0x67,
    0x68,
    0x64,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x6e,
    0x65,
    0x78,
    0x74,
    0x63,
    0x61,
    0x73,
    0x65,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x68,
    0x65,
    0x72,
    0x65,
    0x77,
    0x68,
    0x61,
    0x74,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x62,
    0x61,
    0x73,
    0x65,
    0x68,
    0x65,
    0x6c,
    0x64,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x75,
    0x73,
    0x65,
    0x72,
    0x27,
    0x29,
    0x20,
    0x2b,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x77,
    0x69,
    0x74,
    0x68,
    0x4e,
    0x65,
    0x77,
    0x73,
    0x72,
    0x65,
    0x61,
    0x64,
    0x77,
    0x65,
    0x72,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x68,
    0x61,
    0x76,
    0x65,
    0x67,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x74,
    0x68,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x6c,
    0x75,
    0x73,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x66,
    0x69,
    0x6c,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x68,
    0x69,
    0x73,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x67,
    0x6f,
    0x6f,
    0x64,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x77,
    0x61,
    0x79,
    0x73,
    0x77,
    0x65,
    0x73,
    0x74,
    0x6a,
    0x6f,
    0x62,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x64,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x68,
    0x75,
    0x73,
    0x65,
    0x73,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x74,
    0x65,
    0x61,
    0x6d,
    0x61,
    0x72,
    0x6d,
    0x79,
    0x66,
    0x6f,
    0x6f,
    0x64,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x74,
    0x77,
    0x61,
    0x72,
    0x64,
    0x62,
    0x65,
    0x73,
    0x74,
    0x66,
    0x69,
    0x72,
    0x65,
    0x50,
    0x61,
    0x67,
    0x65,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x61,
    0x77,
    0x61,
    0x79,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x67,
    0x69,
    0x76,
    0x65,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x66,
    0x65,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x72,
    0x6f,
    0x63,
    0x6b,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x68,
    0x69,
    0x64,
    0x65,
    0x64,
    0x69,
    0x65,
    0x64,
    0x48,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x75,
    0x6c,
    0x65,
    0x68,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x6a,
    0x61,
    0x78,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x63,
    0x6c,
    0x75,
    0x62,
    0x6c,
    0x61,
    0x77,
    0x73,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x68,
    0x61,
    0x6c,
    0x66,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x75,
    0x63,
    0x68,
    0x7a,
    0x6f,
    0x6e,
    0x65,
    0x31,
    0x30,
    0x30,
    0x25,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x61,
    0x72,
    0x65,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x63,
    0x65,
    0x62,
    0x6c,
    0x75,
    0x65,
    0x66,
    0x6f,
    0x75,
    0x72,
    0x77,
    0x65,
    0x65,
    0x6b,
    0x66,
    0x61,
    0x63,
    0x65,
    0x68,
    0x6f,
    0x70,
    0x65,
    0x67,
    0x61,
    0x76,
    0x65,
    0x68,
    0x61,
    0x72,
    0x64,
    0x6c,
    0x6f,
    0x73,
    0x74,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x6b,
    0x6b,
    0x65,
    0x70,
    0x74,
    0x70,
    0x61,
    0x73,
    0x73,
    0x73,
    0x68,
    0x69,
    0x70,
    0x72,
    0x6f,
    0x6f,
    0x6d,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x54,
    0x79,
    0x70,
    0x65,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x61,
    0x76,
    0x65,
    0x6b,
    0x65,
    0x65,
    0x70,
    0x66,
    0x6c,
    0x61,
    0x67,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x6f,
    0x6c,
    0x64,
    0x66,
    0x69,
    0x76,
    0x65,
    0x74,
    0x6f,
    0x6f,
    0x6b,
    0x72,
    0x61,
    0x74,
    0x65,
    0x74,
    0x6f,
    0x77,
    0x6e,
    0x6a,
    0x75,
    0x6d,
    0x70,
    0x74,
    0x68,
    0x75,
    0x73,
    0x64,
    0x61,
    0x72,
    0x6b,
    0x63,
    0x61,
    0x72,
    0x64,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x66,
    0x65,
    0x61,
    0x72,
    0x73,
    0x74,
    0x61,
    0x79,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x74,
    0x68,
    0x61,
    0x74,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x74,
    0x61,
    0x6c,
    0x6b,
    0x73,
    0x68,
    0x6f,
    0x70,
    0x76,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x65,
    0x65,
    0x70,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x62,
    0x6f,
    0x72,
    0x6e,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x66,
    0x65,
    0x6c,
    0x6c,
    0x72,
    0x6f,
    0x73,
    0x65,
    0x75,
    0x72,
    0x6c,
    0x28,
    0x73,
    0x6b,
    0x69,
    0x6e,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x61,
    0x63,
    0x74,
    0x73,
    0x61,
    0x67,
    0x65,
    0x73,
    0x6d,
    0x65,
    0x65,
    0x74,
    0x67,
    0x6f,
    0x6c,
    0x64,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x76,
    0x61,
    0x72,
    0x79,
    0x66,
    0x65,
    0x6c,
    0x74,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x64,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x56,
    0x69,
    0x65,
    0x77,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x31,
    0x2e,
    0x30,
    0x22,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x73,
    0x74,
    0x6f,
    0x70,
    0x65,
    0x6c,
    0x73,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x75,
    0x72,
    0x70,
    0x61,
    0x63,
    0x6b,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x70,
    0x61,
    0x73,
    0x74,
    0x63,
    0x73,
    0x73,
    0x3f,
    0x67,
    0x72,
    0x61,
    0x79,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x72,
    0x69,
    0x64,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x74,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x73,
    0x61,
    0x69,
    0x64,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x76,
    0x61,
    0x72,
    0x20,
    0x66,
    0x65,
    0x65,
    0x6c,
    0x6a,
    0x6f,
    0x68,
    0x6e,
    0x72,
    0x69,
    0x63,
    0x6b,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x66,
    0x61,
    0x73,
    0x74,
    0x27,
    0x55,
    0x41,
    0x2d,
    0x64,
    0x65,
    0x61,
    0x64,
    0x3c,
    0x2f,
    0x62,
    0x3e,
    0x70,
    0x6f,
    0x6f,
    0x72,
    0x62,
    0x69,
    0x6c,
    0x6c,
    0x74,
    0x79,
    0x70,
    0x65,
    0x55,
    0x2e,
    0x53,
    0x2e,
    0x77,
    0x6f,
    0x6f,
    0x64,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x32,
    0x70,
    0x78,
    0x3b,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x77,
    0x69,
    0x64,
    0x65,
    0x77,
    0x61,
    0x6e,
    0x74,
    0x77,
    0x61,
    0x6c,
    0x6c,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x5b,
    0x30,
    0x5d,
    0x3b,
    0x70,
    0x61,
    0x75,
    0x6c,
    0x77,
    0x61,
    0x76,
    0x65,
    0x73,
    0x75,
    0x72,
    0x65,
    0x24,
    0x28,
    0x27,
    0x23,
    0x77,
    0x61,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x73,
    0x73,
    0x61,
    0x72,
    0x6d,
    0x73,
    0x67,
    0x6f,
    0x65,
    0x73,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x70,
    0x61,
    0x69,
    0x64,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x72,
    0x6f,
    0x6f,
    0x74,
    0x77,
    0x61,
    0x6c,
    0x6b,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x77,
    0x69,
    0x66,
    0x65,
    0x78,
    0x6d,
    0x6c,
    0x22,
    0x73,
    0x6f,
    0x6e,
    0x67,
    0x74,
    0x65,
    0x73,
    0x74,
    0x32,
    0x30,
    0x70,
    0x78,
    0x6b,
    0x69,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x61,
    0x66,
    0x65,
    0x73,
    0x74,
    0x61,
    0x72,
    0x6d,
    0x61,
    0x70,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x62,
    0x61,
    0x62,
    0x79,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x73,
    0x61,
    0x79,
    0x73,
    0x34,
    0x70,
    0x78,
    0x3b,
    0x36,
    0x70,
    0x78,
    0x3b,
    0x61,
    0x72,
    0x74,
    0x73,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x77,
    0x69,
    0x6b,
    0x69,
    0x68,
    0x65,
    0x61,
    0x74,
    0x73,
    0x74,
    0x65,
    0x70,
    0x74,
    0x72,
    0x69,
    0x70,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x6c,
    0x61,
    0x6b,
    0x65,
    0x77,
    0x65,
    0x61,
    0x6b,
    0x74,
    0x6f,
    0x6c,
    0x64,
    0x46,
    0x6f,
    0x72,
    0x6d,
    0x63,
    0x61,
    0x73,
    0x74,
    0x66,
    0x61,
    0x6e,
    0x73,
    0x62,
    0x61,
    0x6e,
    0x6b,
    0x76,
    0x65,
    0x72,
    0x79,
    0x72,
    0x75,
    0x6e,
    0x73,
    0x6a,
    0x75,
    0x6c,
    0x79,
    0x74,
    0x61,
    0x73,
    0x6b,
    0x31,
    0x70,
    0x78,
    0x3b,
    0x67,
    0x6f,
    0x61,
    0x6c,
    0x67,
    0x72,
    0x65,
    0x77,
    0x73,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x67,
    0x65,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x74,
    0x73,
    0x35,
    0x70,
    0x78,
    0x3b,
    0x2e,
    0x6a,
    0x73,
    0x3f,
    0x34,
    0x30,
    0x70,
    0x78,
    0x69,
    0x66,
    0x20,
    0x28,
    0x73,
    0x6f,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x61,
    0x74,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x74,
    0x75,
    0x62,
    0x65,
    0x7a,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x65,
    0x64,
    0x66,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x67,
    0x69,
    0x66,
    0x74,
    0x68,
    0x61,
    0x72,
    0x6d,
    0x31,
    0x38,
    0x70,
    0x78,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x68,
    0x69,
    0x6c,
    0x6c,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x7a,
    0x6f,
    0x6f,
    0x6d,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x65,
    0x61,
    0x73,
    0x79,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x66,
    0x69,
    0x6c,
    0x6c,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x63,
    0x6f,
    0x73,
    0x74,
    0x33,
    0x70,
    0x78,
    0x3b,
    0x6a,
    0x61,
    0x63,
    0x6b,
    0x74,
    0x61,
    0x67,
    0x73,
    0x62,
    0x69,
    0x74,
    0x73,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x69,
    0x74,
    0x6b,
    0x6e,
    0x65,
    0x77,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x67,
    0x72,
    0x6f,
    0x77,
    0x4a,
    0x53,
    0x4f,
    0x4e,
    0x64,
    0x75,
    0x74,
    0x79,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x61,
    0x6c,
    0x65,
    0x79,
    0x6f,
    0x75,
    0x20,
    0x6c,
    0x6f,
    0x74,
    0x73,
    0x70,
    0x61,
    0x69,
    0x6e,
    0x6a,
    0x61,
    0x7a,
    0x7a,
    0x63,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x79,
    0x65,
    0x73,
    0x66,
    0x69,
    0x73,
    0x68,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x72,
    0x69,
    0x73,
    0x6b,
    0x74,
    0x61,
    0x62,
    0x73,
    0x70,
    0x72,
    0x65,
    0x76,
    0x31,
    0x30,
    0x70,
    0x78,
    0x72,
    0x69,
    0x73,
    0x65,
    0x32,
    0x35,
    0x70,
    0x78,
    0x42,
    0x6c,
    0x75,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x33,
    0x30,
    0x30,
    0x2c,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x61,
    0x72,
    0x6e,
    0x77,
    0x69,
    0x6c,
    0x64,
    0x62,
    0x6f,
    0x78,
    0x2e,
    0x66,
    0x61,
    0x69,
    0x72,
    0x6c,
    0x61,
    0x63,
    0x6b,
    0x76,
    0x65,
    0x72,
    0x73,
    0x70,
    0x61,
    0x69,
    0x72,
    0x6a,
    0x75,
    0x6e,
    0x65,
    0x74,
    0x65,
    0x63,
    0x68,
    0x69,
    0x66,
    0x28,
    0x21,
    0x70,
    0x69,
    0x63,
    0x6b,
    0x65,
    0x76,
    0x69,
    0x6c,
    0x24,
    0x28,
    0x22,
    0x23,
    0x77,
    0x61,
    0x72,
    0x6d,
    0x6c,
    0x6f,
    0x72,
    0x64,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x70,
    0x75,
    0x6c,
    0x6c,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x69,
    0x64,
    0x65,
    0x61,
    0x64,
    0x72,
    0x61,
    0x77,
    0x68,
    0x75,
    0x67,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x74,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x62,
    0x75,
    0x72,
    0x6e,
    0x68,
    0x72,
    0x65,
    0x66,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x6b,
    0x65,
    0x79,
    0x73,
    0x74,
    0x69,
    0x63,
    0x6b,
    0x68,
    0x6f,
    0x75,
    0x72,
    0x6c,
    0x6f,
    0x73,
    0x73,
    0x66,
    0x75,
    0x65,
    0x6c,
    0x31,
    0x32,
    0x70,
    0x78,
    0x73,
    0x75,
    0x69,
    0x74,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x52,
    0x53,
    0x53,
    0x22,
    0x61,
    0x67,
    0x65,
    0x64,
    0x67,
    0x72,
    0x65,
    0x79,
    0x47,
    0x45,
    0x54,
    0x22,
    0x65,
    0x61,
    0x73,
    0x65,
    0x61,
    0x69,
    0x6d,
    0x73,
    0x67,
    0x69,
    0x72,
    0x6c,
    0x61,
    0x69,
    0x64,
    0x73,
    0x38,
    0x70,
    0x78,
    0x3b,
    0x6e,
    0x61,
    0x76,
    0x79,
    0x67,
    0x72,
    0x69,
    0x64,
    0x74,
    0x69,
    0x70,
    0x73,
    0x23,
    0x39,
    0x39,
    0x39,
    0x77,
    0x61,
    0x72,
    0x73,
    0x6c,
    0x61,
    0x64,
    0x79,
    0x63,
    0x61,
    0x72,
    0x73,
    0x29,
    0x3b,
    0x20,
    0x7d,
    0x70,
    0x68,
    0x70,
    0x3f,
    0x68,
    0x65,
    0x6c,
    0x6c,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x77,
    0x68,
    0x6f,
    0x6d,
    0x7a,
    0x68,
    0x3a,
    0xe5,
    0x2a,
    0x2f,
    0x0d,
    0x0a,
    0x20,
    0x31,
    0x30,
    0x30,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x2e,
    0x0a,
    0x0a,
    0x41,
    0x37,
    0x70,
    0x78,
    0x3b,
    0x70,
    0x75,
    0x73,
    0x68,
    0x63,
    0x68,
    0x61,
    0x74,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x63,
    0x72,
    0x65,
    0x77,
    0x2a,
    0x2f,
    0x3c,
    0x2f,
    0x68,
    0x61,
    0x73,
    0x68,
    0x37,
    0x35,
    0x70,
    0x78,
    0x66,
    0x6c,
    0x61,
    0x74,
    0x72,
    0x61,
    0x72,
    0x65,
    0x20,
    0x26,
    0x26,
    0x20,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x74,
    0x6f,
    0x6c,
    0x61,
    0x69,
    0x64,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x73,
    0x6b,
    0x69,
    0x70,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x74,
    0x73,
    0x70,
    0x6c,
    0x6f,
    0x74,
    0x34,
    0x30,
    0x30,
    0x2c,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x63,
    0x6f,
    0x6f,
    0x6c,
    0x66,
    0x65,
    0x65,
    0x74,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x3c,
    0x62,
    0x72,
    0x3e,
    0x65,
    0x72,
    0x69,
    0x63,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x67,
    0x75,
    0x69,
    0x64,
    0x62,
    0x65,
    0x6c,
    0x6c,
    0x64,
    0x65,
    0x73,
    0x63,
    0x68,
    0x61,
    0x69,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6f,
    0x6d,
    0x2f,
    0x69,
    0x6d,
    0x67,
    0x26,
    0x23,
    0x38,
    0x32,
    0x6c,
    0x75,
    0x63,
    0x6b,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x30,
    0x30,
    0x30,
    0x3b,
    0x74,
    0x69,
    0x6e,
    0x79,
    0x67,
    0x6f,
    0x6e,
    0x65,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x73,
    0x65,
    0x6c,
    0x6c,
    0x64,
    0x72,
    0x75,
    0x67,
    0x46,
    0x52,
    0x45,
    0x45,
    0x6e,
    0x6f,
    0x64,
    0x65,
    0x6e,
    0x69,
    0x63,
    0x6b,
    0x3f,
    0x69,
    0x64,
    0x3d,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x6e,
    0x75,
    0x6c,
    0x6c,
    0x76,
    0x61,
    0x73,
    0x74,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x52,
    0x53,
    0x53,
    0x20,
    0x77,
    0x65,
    0x61,
    0x72,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x75,
    0x6b,
    0x65,
    0x6e,
    0x61,
    0x73,
    0x61,
    0x63,
    0x61,
    0x70,
    0x65,
    0x77,
    0x69,
    0x73,
    0x68,
    0x67,
    0x75,
    0x6c,
    0x66,
    0x54,
    0x32,
    0x33,
    0x3a,
    0x68,
    0x69,
    0x74,
    0x73,
    0x73,
    0x6c,
    0x6f,
    0x74,
    0x67,
    0x61,
    0x74,
    0x65,
    0x6b,
    0x69,
    0x63,
    0x6b,
    0x62,
    0x6c,
    0x75,
    0x72,
    0x74,
    0x68,
    0x65,
    0x79,
    0x31,
    0x35,
    0x70,
    0x78,
    0x27,
    0x27,
    0x29,
    0x3b,
    0x29,
    0x3b,
    0x22,
    0x3e,
    0x6d,
    0x73,
    0x69,
    0x65,
    0x77,
    0x69,
    0x6e,
    0x73,
    0x62,
    0x69,
    0x72,
    0x64,
    0x73,
    0x6f,
    0x72,
    0x74,
    0x62,
    0x65,
    0x74,
    0x61,
    0x73,
    0x65,
    0x65,
    0x6b,
    0x54,
    0x31,
    0x38,
    0x3a,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x74,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x36,
    0x30,
    0x70,
    0x78,
    0x66,
    0x61,
    0x72,
    0x6d,
    0xe2,
    0x80,
    0x99,
    0x73,
    0x62,
    0x6f,
    0x79,
    0x73,
    0x5b,
    0x30,
    0x5d,
    0x2e,
    0x27,
    0x29,
    0x3b,
    0x22,
    0x50,
    0x4f,
    0x53,
    0x54,
    0x62,
    0x65,
    0x61,
    0x72,
    0x6b,
    0x69,
    0x64,
    0x73,
    0x29,
    0x3b,
    0x7d,
    0x7d,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x28,
    0x55,
    0x4b,
    0x29,
    0x71,
    0x75,
    0x61,
    0x64,
    0x7a,
    0x68,
    0x3a,
    0xe6,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x2d,
    0x2d,
    0x2d,
    0x2d,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x27,
    0x29,
    0x3b,
    0x0d,
    0x6c,
    0x69,
    0x66,
    0x74,
    0x54,
    0x31,
    0x39,
    0x3a,
    0x76,
    0x69,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x79,
    0x64,
    0x65,
    0x62,
    0x74,
    0x3e,
    0x52,
    0x53,
    0x53,
    0x70,
    0x6f,
    0x6f,
    0x6c,
    0x6e,
    0x65,
    0x63,
    0x6b,
    0x62,
    0x6c,
    0x6f,
    0x77,
    0x54,
    0x31,
    0x36,
    0x3a,
    0x64,
    0x6f,
    0x6f,
    0x72,
    0x65,
    0x76,
    0x61,
    0x6c,
    0x54,
    0x31,
    0x37,
    0x3a,
    0x6c,
    0x65,
    0x74,
    0x73,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x70,
    0x6f,
    0x6c,
    0x6c,
    0x6e,
    0x6f,
    0x76,
    0x61,
    0x63,
    0x6f,
    0x6c,
    0x73,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x20,
    0xe2,
    0x80,
    0x94,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x72,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6c,
    0x6c,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x3c,
    0x68,
    0x33,
    0x3e,
    0x70,
    0x6f,
    0x75,
    0x72,
    0x66,
    0x61,
    0x64,
    0x65,
    0x70,
    0x69,
    0x6e,
    0x6b,
    0x3c,
    0x74,
    0x72,
    0x3e,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x29,
    0x7c,
    0x21,
    0x28,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x7a,
    0x68,
    0x3a,
    0xe8,
    0x62,
    0x61,
    0x72,
    0x73,
    0x68,
    0x65,
    0x61,
    0x72,
    0x30,
    0x30,
    0x29,
    0x3b,
    0x6d,
    0x69,
    0x6c,
    0x6b,
    0x20,
    0x2d,
    0x2d,
    0x3e,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x66,
    0x72,
    0x65,
    0x64,
    0x64,
    0x69,
    0x73,
    0x6b,
    0x77,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6f,
    0x69,
    0x6c,
    0x70,
    0x75,
    0x74,
    0x73,
    0x2f,
    0x6a,
    0x73,
    0x2f,
    0x68,
    0x6f,
    0x6c,
    0x79,
    0x54,
    0x32,
    0x32,
    0x3a,
    0x49,
    0x53,
    0x42,
    0x4e,
    0x54,
    0x32,
    0x30,
    0x3a,
    0x61,
    0x64,
    0x61,
    0x6d,
    0x73,
    0x65,
    0x65,
    0x73,
    0x3c,
    0x68,
    0x32,
    0x3e,
    0x6a,
    0x73,
    0x6f,
    0x6e,
    0x27,
    0x2c,
    0x20,
    0x27,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x54,
    0x32,
    0x31,
    0x3a,
    0x20,
    0x52,
    0x53,
    0x53,
    0x6c,
    0x6f,
    0x6f,
    0x70,
    0x61,
    0x73,
    0x69,
    0x61,
    0x6d,
    0x6f,
    0x6f,
    0x6e,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x73,
    0x6f,
    0x75,
    0x6c,
    0x4c,
    0x49,
    0x4e,
    0x45,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x61,
    0x72,
    0x74,
    0x54,
    0x31,
    0x34,
    0x3a,
    0x3c,
    0x68,
    0x31,
    0x3e,
    0x38,
    0x30,
    0x70,
    0x78,
    0x21,
    0x2d,
    0x2d,
    0x3c,
    0x39,
    0x70,
    0x78,
    0x3b,
    0x54,
    0x30,
    0x34,
    0x3a,
    0x6d,
    0x69,
    0x6b,
    0x65,
    0x3a,
    0x34,
    0x36,
    0x5a,
    0x6e,
    0x69,
    0x63,
    0x65,
    0x69,
    0x6e,
    0x63,
    0x68,
    0x59,
    0x6f,
    0x72,
    0x6b,
    0x72,
    0x69,
    0x63,
    0x65,
    0x7a,
    0x68,
    0x3a,
    0xe4,
    0x27,
    0x29,
    0x29,
    0x3b,
    0x70,
    0x75,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x6e,
    0x65,
    0x62,
    0x6f,
    0x6e,
    0x64,
    0x3a,
    0x33,
    0x37,
    0x5a,
    0x5f,
    0x6f,
    0x66,
    0x5f,
    0x27,
    0x5d,
    0x29,
    0x3b,
    0x30,
    0x30,
    0x30,
    0x2c,
    0x7a,
    0x68,
    0x3a,
    0xe7,
    0x74,
    0x61,
    0x6e,
    0x6b,
    0x79,
    0x61,
    0x72,
    0x64,
    0x62,
    0x6f,
    0x77,
    0x6c,
    0x62,
    0x75,
    0x73,
    0x68,
    0x3a,
    0x35,
    0x36,
    0x5a,
    0x4a,
    0x61,
    0x76,
    0x61,
    0x33,
    0x30,
    0x70,
    0x78,
    0x0a,
    0x7c,
    0x7d,
    0x0a,
    0x25,
    0x43,
    0x33,
    0x25,
    0x3a,
    0x33,
    0x34,
    0x5a,
    0x6a,
    0x65,
    0x66,
    0x66,
    0x45,
    0x58,
    0x50,
    0x49,
    0x63,
    0x61,
    0x73,
    0x68,
    0x76,
    0x69,
    0x73,
    0x61,
    0x67,
    0x6f,
    0x6c,
    0x66,
    0x73,
    0x6e,
    0x6f,
    0x77,
    0x7a,
    0x68,
    0x3a,
    0xe9,
    0x71,
    0x75,
    0x65,
    0x72,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x73,
    0x69,
    0x63,
    0x6b,
    0x6d,
    0x65,
    0x61,
    0x74,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x64,
    0x65,
    0x6c,
    0x6c,
    0x68,
    0x69,
    0x72,
    0x65,
    0x70,
    0x69,
    0x63,
    0x73,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x3a,
    0x33,
    0x36,
    0x5a,
    0x48,
    0x54,
    0x54,
    0x50,
    0x2d,
    0x32,
    0x30,
    0x31,
    0x66,
    0x6f,
    0x74,
    0x6f,
    0x77,
    0x6f,
    0x6c,
    0x66,
    0x45,
    0x4e,
    0x44,
    0x20,
    0x78,
    0x62,
    0x6f,
    0x78,
    0x3a,
    0x35,
    0x34,
    0x5a,
    0x42,
    0x4f,
    0x44,
    0x59,
    0x64,
    0x69,
    0x63,
    0x6b,
    0x3b,
    0x0a,
    0x7d,
    0x0a,
    0x65,
    0x78,
    0x69,
    0x74,
    0x3a,
    0x33,
    0x35,
    0x5a,
    0x76,
    0x61,
    0x72,
    0x73,
    0x62,
    0x65,
    0x61,
    0x74,
    0x27,
    0x7d,
    0x29,
    0x3b,
    0x64,
    0x69,
    0x65,
    0x74,
    0x39,
    0x39,
    0x39,
    0x3b,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x7d,
    0x7d,
    0x3c,
    0x2f,
    0x5b,
    0x69,
    0x5d,
    0x2e,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x6b,
    0x6d,
    0xc2,
    0xb2,
    0x77,
    0x69,
    0x72,
    0x65,
    0x74,
    0x6f,
    0x79,
    0x73,
    0x61,
    0x64,
    0x64,
    0x73,
    0x73,
    0x65,
    0x61,
    0x6c,
    0x61,
    0x6c,
    0x65,
    0x78,
    0x3b,
    0x0a,
    0x09,
    0x7d,
    0x65,
    0x63,
    0x68,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x65,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x30,
    0x30,
    0x35,
    0x29,
    0x74,
    0x6f,
    0x6e,
    0x79,
    0x6a,
    0x65,
    0x77,
    0x73,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x67,
    0x73,
    0x72,
    0x6f,
    0x6f,
    0x66,
    0x30,
    0x30,
    0x30,
    0x29,
    0x20,
    0x32,
    0x30,
    0x30,
    0x77,
    0x69,
    0x6e,
    0x65,
    0x67,
    0x65,
    0x61,
    0x72,
    0x64,
    0x6f,
    0x67,
    0x73,
    0x62,
    0x6f,
    0x6f,
    0x74,
    0x67,
    0x61,
    0x72,
    0x79,
    0x63,
    0x75,
    0x74,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x78,
    0x6d,
    0x6c,
    0x63,
    0x6f,
    0x63,
    0x6b,
    0x67,
    0x61,
    0x6e,
    0x67,
    0x24,
    0x28,
    0x27,
    0x2e,
    0x35,
    0x30,
    0x70,
    0x78,
    0x50,
    0x68,
    0x2e,
    0x44,
    0x6d,
    0x69,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x6b,
    0x6d,
    0x69,
    0x6c,
    0x65,
    0x72,
    0x79,
    0x61,
    0x6e,
    0x75,
    0x6e,
    0x69,
    0x78,
    0x64,
    0x69,
    0x73,
    0x63,
    0x29,
    0x3b,
    0x7d,
    0x0a,
    0x64,
    0x75,
    0x73,
    0x74,
    0x63,
    0x6c,
    0x69,
    0x70,
    0x29,
    0x2e,
    0x0a,
    0x0a,
    0x37,
    0x30,
    0x70,
    0x78,
    0x2d,
    0x32,
    0x30,
    0x30,
    0x44,
    0x56,
    0x44,
    0x73,
    0x37,
    0x5d,
    0x3e,
    0x3c,
    0x74,
    0x61,
    0x70,
    0x65,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x69,
    0x2b,
    0x2b,
    0x29,
    0x77,
    0x61,
    0x67,
    0x65,
    0x65,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x70,
    0x74,
    0x73,
    0x68,
    0x6f,
    0x6c,
    0x65,
    0x46,
    0x41,
    0x51,
    0x73,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x2d,
    0x32,
    0x36,
    0x54,
    0x6c,
    0x61,
    0x62,
    0x73,
    0x70,
    0x65,
    0x74,
    0x73,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x62,
    0x75,
    0x6c,
    0x6b,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x3b,
    0x7d,
    0x0d,
    0x0a,
    0x48,
    0x45,
    0x41,
    0x44,
    0x5b,
    0x30,
    0x5d,
    0x29,
    0x61,
    0x62,
    0x62,
    0x72,
    0x6a,
    0x75,
    0x61,
    0x6e,
    0x28,
    0x31,
    0x39,
    0x38,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x74,
    0x77,
    0x69,
    0x6e,
    0x3c,
    0x2f,
    0x69,
    0x3e,
    0x73,
    0x6f,
    0x6e,
    0x79,
    0x67,
    0x75,
    0x79,
    0x73,
    0x66,
    0x75,
    0x63,
    0x6b,
    0x70,
    0x69,
    0x70,
    0x65,
    0x7c,
    0x2d,
    0x0a,
    0x21,
    0x30,
    0x30,
    0x32,
    0x29,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x5b,
    0x31,
    0x5d,
    0x3b,
    0x5b,
    0x5d,
    0x3b,
    0x0a,
    0x4c,
    0x6f,
    0x67,
    0x20,
    0x73,
    0x61,
    0x6c,
    0x74,
    0x0d,
    0x0a,
    0x09,
    0x09,
    0x62,
    0x61,
    0x6e,
    0x67,
    0x74,
    0x72,
    0x69,
    0x6d,
    0x62,
    0x61,
    0x74,
    0x68,
    0x29,
    0x7b,
    0x0d,
    0x0a,
    0x30,
    0x30,
    0x70,
    0x78,
    0x0a,
    0x7d,
    0x29,
    0x3b,
    0x6b,
    0x6f,
    0x3a,
    0xec,
    0x66,
    0x65,
    0x65,
    0x73,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x20,
    0x5b,
    0x5d,
    0x3b,
    0x74,
    0x6f,
    0x6c,
    0x6c,
    0x70,
    0x6c,
    0x75,
    0x67,
    0x28,
    0x29,
    0x7b,
    0x0a,
    0x7b,
    0x0d,
    0x0a,
    0x20,
    0x2e,
    0x6a,
    0x73,
    0x27,
    0x32,
    0x30,
    0x30,
    0x70,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x62,
    0x6f,
    0x61,
    0x74,
    0x2e,
    0x4a,
    0x50,
    0x47,
    0x29,
    0x3b,
    0x0a,
    0x7d,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x29,
    0x3b,
    0x0a,
    0x0a,
    0x27,
    0x29,
    0x3b,
    0x0a,
    0x0d,
    0x0a,
    0x7d,
    0x0d,
    0x32,
    0x30,
    0x31,
    0x34,
    0x32,
    0x30,
    0x31,
    0x35,
    0x32,
    0x30,
    0x31,
    0x36,
    0x32,
    0x30,
    0x31,
    0x37,
    0x32,
    0x30,
    0x31,
    0x38,
    0x32,
    0x30,
    0x31,
    0x39,
    0x32,
    0x30,
    0x32,
    0x30,
    0x32,
    0x30,
    0x32,
    0x31,
    0x32,
    0x30,
    0x32,
    0x32,
    0x32,
    0x30,
    0x32,
    0x33,
    0x32,
    0x30,
    0x32,
    0x34,
    0x32,
    0x30,
    0x32,
    0x35,
    0x32,
    0x30,
    0x32,
    0x36,
    0x32,
    0x30,
    0x32,
    0x37,
    0x32,
    0x30,
    0x32,
    0x38,
    0x32,
    0x30,
    0x32,
    0x39,
    0x32,
    0x30,
    0x33,
    0x30,
    0x32,
    0x30,
    0x33,
    0x31,
    0x32,
    0x30,
    0x33,
    0x32,
    0x32,
    0x30,
    0x33,
    0x33,
    0x32,
    0x30,
    0x33,
    0x34,
    0x32,
    0x30,
    0x33,
    0x35,
    0x32,
    0x30,
    0x33,
    0x36,
    0x32,
    0x30,
    0x33,
    0x37,
    0x32,
    0x30,
    0x31,
    0x33,
    0x32,
    0x30,
    0x31,
    0x32,
    0x32,
    0x30,
    0x31,
    0x31,
    0x32,
    0x30,
    0x31,
    0x30,
    0x32,
    0x30,
    0x30,
    0x39,
    0x32,
    0x30,
    0x30,
    0x38,
    0x32,
    0x30,
    0x30,
    0x37,
    0x32,
    0x30,
    0x30,
    0x36,
    0x32,
    0x30,
    0x30,
    0x35,
    0x32,
    0x30,
    0x30,
    0x34,
    0x32,
    0x30,
    0x30,
    0x33,
    0x32,
    0x30,
    0x30,
    0x32,
    0x32,
    0x30,
    0x30,
    0x31,
    0x32,
    0x30,
    0x30,
    0x30,
    0x31,
    0x39,
    0x39,
    0x39,
    0x31,
    0x39,
    0x39,
    0x38,
    0x31,
    0x39,
    0x39,
    0x37,
    0x31,
    0x39,
    0x39,
    0x36,
    0x31,
    0x39,
    0x39,
    0x35,
    0x31,
    0x39,
    0x39,
    0x34,
    0x31,
    0x39,
    0x39,
    0x33,
    0x31,
    0x39,
    0x39,
    0x32,
    0x31,
    0x39,
    0x39,
    0x31,
    0x31,
    0x39,
    0x39,
    0x30,
    0x31,
    0x39,
    0x38,
    0x39,
    0x31,
    0x39,
    0x38,
    0x38,
    0x31,
    0x39,
    0x38,
    0x37,
    0x31,
    0x39,
    0x38,
    0x36,
    0x31,
    0x39,
    0x38,
    0x35,
    0x31,
    0x39,
    0x38,
    0x34,
    0x31,
    0x39,
    0x38,
    0x33,
    0x31,
    0x39,
    0x38,
    0x32,
    0x31,
    0x39,
    0x38,
    0x31,
    0x31,
    0x39,
    0x38,
    0x30,
    0x31,
    0x39,
    0x37,
    0x39,
    0x31,
    0x39,
    0x37,
    0x38,
    0x31,
    0x39,
    0x37,
    0x37,
    0x31,
    0x39,
    0x37,
    0x36,
    0x31,
    0x39,
    0x37,
    0x35,
    0x31,
    0x39,
    0x37,
    0x34,
    0x31,
    0x39,
    0x37,
    0x33,
    0x31,
    0x39,
    0x37,
    0x32,
    0x31,
    0x39,
    0x37,
    0x31,
    0x31,
    0x39,
    0x37,
    0x30,
    0x31,
    0x39,
    0x36,
    0x39,
    0x31,
    0x39,
    0x36,
    0x38,
    0x31,
    0x39,
    0x36,
    0x37,
    0x31,
    0x39,
    0x36,
    0x36,
    0x31,
    0x39,
    0x36,
    0x35,
    0x31,
    0x39,
    0x36,
    0x34,
    0x31,
    0x39,
    0x36,
    0x33,
    0x31,
    0x39,
    0x36,
    0x32,
    0x31,
    0x39,
    0x36,
    0x31,
    0x31,
    0x39,
    0x36,
    0x30,
    0x31,
    0x39,
    0x35,
    0x39,
    0x31,
    0x39,
    0x35,
    0x38,
    0x31,
    0x39,
    0x35,
    0x37,
    0x31,
    0x39,
    0x35,
    0x36,
    0x31,
    0x39,
    0x35,
    0x35,
    0x31,
    0x39,
    0x35,
    0x34,
    0x31,
    0x39,
    0x35,
    0x33,
    0x31,
    0x39,
    0x35,
    0x32,
    0x31,
    0x39,
    0x35,
    0x31,
    0x31,
    0x39,
    0x35,
    0x30,
    0x31,
    0x30,
    0x30,
    0x30,
    0x31,
    0x30,
    0x32,
    0x34,
    0x31,
    0x33,
    0x39,
    0x34,
    0x30,
    0x30,
    0x30,
    0x30,
    0x39,
    0x39,
    0x39,
    0x39,
    0x63,
    0x6f,
    0x6d,
    0x6f,
    0x6d,
    0xc3,
    0xa1,
    0x73,
    0x65,
    0x73,
    0x74,
    0x65,
    0x65,
    0x73,
    0x74,
    0x61,
    0x70,
    0x65,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x6f,
    0x68,
    0x61,
    0x63,
    0x65,
    0x63,
    0x61,
    0x64,
    0x61,
    0x61,
    0xc3,
    0xb1,
    0x6f,
    0x62,
    0x69,
    0x65,
    0x6e,
    0x64,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x73,
    0xc3,
    0xad,
    0x76,
    0x69,
    0x64,
    0x61,
    0x63,
    0x61,
    0x73,
    0x6f,
    0x6f,
    0x74,
    0x72,
    0x6f,
    0x66,
    0x6f,
    0x72,
    0x6f,
    0x73,
    0x6f,
    0x6c,
    0x6f,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x63,
    0x75,
    0x61,
    0x6c,
    0x64,
    0x69,
    0x6a,
    0x6f,
    0x73,
    0x69,
    0x64,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x70,
    0x6f,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x62,
    0x65,
    0x61,
    0x6c,
    0x67,
    0x6f,
    0x71,
    0x75,
    0xc3,
    0xa9,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x61,
    0x64,
    0x61,
    0x74,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x63,
    0x6f,
    0x63,
    0x61,
    0x73,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x6f,
    0x61,
    0x67,
    0x75,
    0x61,
    0x70,
    0x75,
    0x65,
    0x73,
    0x75,
    0x6e,
    0x6f,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x69,
    0x63,
    0x65,
    0x6c,
    0x75,
    0x69,
    0x73,
    0x65,
    0x6c,
    0x6c,
    0x61,
    0x6d,
    0x61,
    0x79,
    0x6f,
    0x7a,
    0x6f,
    0x6e,
    0x61,
    0x61,
    0x6d,
    0x6f,
    0x72,
    0x70,
    0x69,
    0x73,
    0x6f,
    0x6f,
    0x62,
    0x72,
    0x61,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x6f,
    0x64,
    0x69,
    0x6f,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x61,
    0x63,
    0x61,
    0x73,
    0x69,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd0,
    0x9d,
    0xd0,
    0xb0,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd0,
    0x92,
    0xd1,
    0x8b,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0x9d,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0x9f,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xa0,
    0xd0,
    0xa4,
    0xd0,
    0x9d,
    0xd0,
    0xb5,
    0xd0,
    0x9c,
    0xd1,
    0x8b,
    0xd1,
    0x82,
    0xd1,
    0x8b,
    0xd0,
    0x9e,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0x97,
    0xd0,
    0xb0,
    0xd0,
    0x94,
    0xd0,
    0xb0,
    0xd0,
    0x9d,
    0xd1,
    0x83,
    0xd0,
    0x9e,
    0xd0,
    0xb1,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0x98,
    0xd0,
    0xb7,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xbd,
    0xd1,
    0x83,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd0,
    0xa2,
    0xd1,
    0x8b,
    0xd1,
    0x83,
    0xd0,
    0xb6,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x89,
    0xd9,
    0x87,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd8,
    0xa8,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa5,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd9,
    0x8a,
    0xd8,
    0xa3,
    0xd9,
    0x8a,
    0xd9,
    0x82,
    0xd8,
    0xaf,
    0xd9,
    0x87,
    0xd9,
    0x84,
    0xd8,
    0xab,
    0xd9,
    0x85,
    0xd8,
    0xa8,
    0xd9,
    0x87,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xa8,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x8a,
    0xd8,
    0xa8,
    0xd9,
    0x83,
    0xd8,
    0xb4,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa3,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd9,
    0x86,
    0xd8,
    0xad,
    0xd8,
    0xa8,
    0xd9,
    0x87,
    0xd9,
    0x85,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd9,
    0x88,
    0xd8,
    0xb4,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x77,
    0x68,
    0x69,
    0x74,
    0x65,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x62,
    0x6c,
    0x61,
    0x63,
    0x6b,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x6d,
    0x75,
    0x73,
    0x69,
    0x63,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x62,
    0x6f,
    0x61,
    0x72,
    0x64,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x73,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x79,
    0x77,
    0x61,
    0x74,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x64,
    0x65,
    0x61,
    0x74,
    0x68,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x70,
    0x68,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x69,
    0x67,
    0x68,
    0x74,
    0x65,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x67,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x66,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x6c,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x67,
    0x75,
    0x69,
    0x64,
    0x65,
    0x72,
    0x61,
    0x64,
    0x69,
    0x6f,
    0x73,
    0x68,
    0x61,
    0x72,
    0x65,
    0x77,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x6d,
    0x6f,
    0x6e,
    0x65,
    0x79,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x79,
    0x6f,
    0x75,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x66,
    0x72,
    0x6f,
    0x6e,
    0x74,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x77,
    0x61,
    0x74,
    0x63,
    0x68,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x70,
    0x72,
    0x69,
    0x63,
    0x65,
    0x72,
    0x75,
    0x6c,
    0x65,
    0x73,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x76,
    0x69,
    0x73,
    0x69,
    0x74,
    0x69,
    0x73,
    0x73,
    0x75,
    0x65,
    0x61,
    0x72,
    0x65,
    0x61,
    0x73,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x68,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x74,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x73,
    0x70,
    0x65,
    0x65,
    0x64,
    0x73,
    0x74,
    0x75,
    0x64,
    0x79,
    0x74,
    0x72,
    0x61,
    0x64,
    0x65,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x73,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x61,
    0x64,
    0x64,
    0x65,
    0x64,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x6c,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6f,
    0x76,
    0x65,
    0x66,
    0x6c,
    0x61,
    0x73,
    0x68,
    0x66,
    0x69,
    0x78,
    0x65,
    0x64,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x76,
    0x69,
    0x65,
    0x77,
    0x73,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x72,
    0x69,
    0x76,
    0x65,
    0x72,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x73,
    0x71,
    0x75,
    0x69,
    0x63,
    0x6b,
    0x73,
    0x68,
    0x61,
    0x70,
    0x65,
    0x68,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x67,
    0x6f,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x74,
    0x68,
    0x69,
    0x72,
    0x64,
    0x62,
    0x61,
    0x73,
    0x69,
    0x63,
    0x70,
    0x65,
    0x61,
    0x63,
    0x65,
    0x73,
    0x74,
    0x61,
    0x67,
    0x65,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x69,
    0x64,
    0x65,
    0x61,
    0x73,
    0x77,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x70,
    0x61,
    0x67,
    0x65,
    0x73,
    0x75,
    0x73,
    0x65,
    0x72,
    0x73,
    0x64,
    0x72,
    0x69,
    0x76,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x62,
    0x72,
    0x65,
    0x61,
    0x6b,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x76,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x69,
    0x74,
    0x65,
    0x73,
    0x6d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x65,
    0x61,
    0x72,
    0x74,
    0x68,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x74,
    0x68,
    0x72,
    0x65,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x70,
    0x61,
    0x72,
    0x74,
    0x79,
    0x43,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x73,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x75,
    0x73,
    0x61,
    0x67,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x74,
    0x79,
    0x6f,
    0x75,
    0x72,
    0x20,
    0x62,
    0x69,
    0x72,
    0x74,
    0x68,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x70,
    0x74,
    0x79,
    0x70,
    0x65,
    0x73,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x79,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x70,
    0x70,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x79,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x73,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x65,
    0x78,
    0x74,
    0x72,
    0x61,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x74,
    0x72,
    0x61,
    0x63,
    0x6b,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x62,
    0x65,
    0x67,
    0x61,
    0x6e,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x70,
    0x61,
    0x70,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x6e,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x73,
    0x47,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x62,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x61,
    0x75,
    0x64,
    0x69,
    0x6f,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x2f,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x64,
    0x63,
    0x61,
    0x73,
    0x65,
    0x73,
    0x64,
    0x61,
    0x69,
    0x6c,
    0x79,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6a,
    0x75,
    0x64,
    0x67,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x73,
    0x65,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x73,
    0x6e,
    0x65,
    0x76,
    0x65,
    0x72,
    0x62,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x63,
    0x6f,
    0x61,
    0x73,
    0x74,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x65,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x63,
    0x79,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x73,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x71,
    0x75,
    0x65,
    0x65,
    0x6e,
    0x70,
    0x69,
    0x65,
    0x63,
    0x65,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x72,
    0x70,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x63,
    0x61,
    0x63,
    0x68,
    0x65,
    0x63,
    0x69,
    0x76,
    0x69,
    0x6c,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x74,
    0x6f,
    0x75,
    0x63,
    0x68,
    0x62,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x79,
    0x61,
    0x6c,
    0x61,
    0x73,
    0x6b,
    0x65,
    0x64,
    0x77,
    0x68,
    0x6f,
    0x6c,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x63,
    0x6b,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x66,
    0x61,
    0x69,
    0x74,
    0x68,
    0x68,
    0x65,
    0x61,
    0x72,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x79,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x70,
    0x65,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x64,
    0x6d,
    0x69,
    0x67,
    0x68,
    0x74,
    0x61,
    0x6c,
    0x62,
    0x75,
    0x6d,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x6b,
    0x62,
    0x6c,
    0x6f,
    0x6f,
    0x64,
    0x61,
    0x72,
    0x72,
    0x61,
    0x79,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x74,
    0x72,
    0x75,
    0x73,
    0x74,
    0x63,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x75,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x65,
    0x53,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x4c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x70,
    0x70,
    0x79,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3a,
    0x66,
    0x72,
    0x65,
    0x73,
    0x68,
    0x71,
    0x75,
    0x69,
    0x74,
    0x65,
    0x66,
    0x69,
    0x6c,
    0x6d,
    0x73,
    0x67,
    0x72,
    0x61,
    0x64,
    0x65,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x73,
    0x75,
    0x72,
    0x62,
    0x61,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x68,
    0x74,
    0x62,
    0x61,
    0x73,
    0x69,
    0x73,
    0x68,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x3b,
    0x72,
    0x6f,
    0x75,
    0x74,
    0x65,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x6d,
    0x69,
    0x78,
    0x65,
    0x64,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x59,
    0x6f,
    0x75,
    0x72,
    0x20,
    0x73,
    0x6c,
    0x69,
    0x64,
    0x65,
    0x74,
    0x6f,
    0x70,
    0x69,
    0x63,
    0x62,
    0x72,
    0x6f,
    0x77,
    0x6e,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x72,
    0x61,
    0x77,
    0x6e,
    0x73,
    0x70,
    0x6c,
    0x69,
    0x74,
    0x72,
    0x65,
    0x61,
    0x63,
    0x68,
    0x52,
    0x69,
    0x67,
    0x68,
    0x74,
    0x64,
    0x61,
    0x74,
    0x65,
    0x73,
    0x6d,
    0x61,
    0x72,
    0x63,
    0x68,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x6f,
    0x64,
    0x73,
    0x4c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x64,
    0x6f,
    0x75,
    0x62,
    0x74,
    0x61,
    0x73,
    0x79,
    0x6e,
    0x63,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x63,
    0x68,
    0x69,
    0x65,
    0x66,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x6e,
    0x6f,
    0x76,
    0x65,
    0x6c,
    0x31,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6c,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x43,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x53,
    0x70,
    0x61,
    0x63,
    0x65,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x6a,
    0x61,
    0x6d,
    0x65,
    0x73,
    0x65,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x74,
    0x77,
    0x69,
    0x63,
    0x65,
    0x30,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x53,
    0x74,
    0x61,
    0x72,
    0x74,
    0x70,
    0x61,
    0x6e,
    0x65,
    0x6c,
    0x73,
    0x6f,
    0x6e,
    0x67,
    0x73,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x68,
    0x69,
    0x66,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x73,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x73,
    0x77,
    0x65,
    0x65,
    0x6b,
    0x73,
    0x61,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x6d,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x65,
    0x73,
    0x6d,
    0x61,
    0x72,
    0x74,
    0x61,
    0x6c,
    0x70,
    0x68,
    0x61,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x73,
    0x72,
    0x61,
    0x74,
    0x65,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x73,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x73,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x65,
    0x78,
    0x74,
    0x73,
    0x73,
    0x74,
    0x61,
    0x72,
    0x73,
    0x77,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3c,
    0x2f,
    0x68,
    0x33,
    0x3e,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x68,
    0x65,
    0x61,
    0x72,
    0x64,
    0x50,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x74,
    0x6f,
    0x6b,
    0x65,
    0x6e,
    0x73,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x28,
    0x74,
    0x68,
    0x69,
    0x73,
    0x62,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x68,
    0x69,
    0x70,
    0x73,
    0x73,
    0x74,
    0x61,
    0x66,
    0x66,
    0x74,
    0x72,
    0x69,
    0x65,
    0x64,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x79,
    0x66,
    0x61,
    0x63,
    0x74,
    0x73,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x2f,
    0x2f,
    0x2d,
    0x2d,
    0x3e,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x67,
    0x79,
    0x70,
    0x74,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x31,
    0x35,
    0x70,
    0x78,
    0x3b,
    0x45,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x74,
    0x72,
    0x75,
    0x65,
    0x22,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x73,
    0x70,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x6c,
    0x6f,
    0x67,
    0x73,
    0x62,
    0x6f,
    0x78,
    0x22,
    0x3e,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x6c,
    0x65,
    0x61,
    0x76,
    0x65,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x61,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x73,
    0x67,
    0x75,
    0x65,
    0x73,
    0x74,
    0x3c,
    0x2f,
    0x68,
    0x34,
    0x3e,
    0x72,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x61,
    0x76,
    0x79,
    0x74,
    0x72,
    0x75,
    0x65,
    0x2c,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x73,
    0x61,
    0x77,
    0x61,
    0x72,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x68,
    0x61,
    0x73,
    0x65,
    0x3e,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x65,
    0x6e,
    0x5f,
    0x55,
    0x53,
    0x26,
    0x23,
    0x33,
    0x39,
    0x3b,
    0x32,
    0x30,
    0x30,
    0x70,
    0x78,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x6a,
    0x6f,
    0x79,
    0x61,
    0x6a,
    0x61,
    0x78,
    0x2e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6d,
    0x69,
    0x74,
    0x68,
    0x55,
    0x2e,
    0x53,
    0x2e,
    0x20,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x73,
    0x70,
    0x65,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x61,
    0x76,
    0x22,
    0x3e,
    0x63,
    0x68,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x64,
    0x6f,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x53,
    0x68,
    0x61,
    0x72,
    0x65,
    0x31,
    0x39,
    0x39,
    0x30,
    0x73,
    0x72,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x73,
    0x6a,
    0x61,
    0x70,
    0x61,
    0x6e,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x73,
    0x74,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x3c,
    0x2f,
    0x68,
    0x32,
    0x3e,
    0x61,
    0x62,
    0x75,
    0x73,
    0x65,
    0x61,
    0x6c,
    0x65,
    0x72,
    0x74,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x22,
    0x2d,
    0x2f,
    0x2f,
    0x57,
    0x63,
    0x61,
    0x72,
    0x64,
    0x73,
    0x68,
    0x69,
    0x6c,
    0x6c,
    0x73,
    0x74,
    0x65,
    0x61,
    0x6d,
    0x73,
    0x50,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x74,
    0x72,
    0x75,
    0x74,
    0x68,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x6e,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x3f,
    0x73,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x75,
    0x69,
    0x73,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x6f,
    0x66,
    0x62,
    0x72,
    0x69,
    0x65,
    0x66,
    0x72,
    0x6f,
    0x77,
    0x22,
    0x3e,
    0x67,
    0x65,
    0x6e,
    0x72,
    0x65,
    0x74,
    0x72,
    0x75,
    0x63,
    0x6b,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x73,
    0x56,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x46,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x2e,
    0x6e,
    0x65,
    0x74,
    0x2f,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x3c,
    0x74,
    0x72,
    0x79,
    0x20,
    0x7b,
    0x0a,
    0x76,
    0x61,
    0x72,
    0x20,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x73,
    0x74,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x69,
    0x6e,
    0x61,
    0x64,
    0x75,
    0x6c,
    0x74,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x73,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x6d,
    0x61,
    0x67,
    0x69,
    0x63,
    0x6d,
    0x6f,
    0x74,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x65,
    0x69,
    0x72,
    0x32,
    0x35,
    0x30,
    0x70,
    0x78,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x74,
    0x73,
    0x74,
    0x65,
    0x70,
    0x73,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x67,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x73,
    0x69,
    0x64,
    0x65,
    0x73,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x68,
    0x6f,
    0x74,
    0x65,
    0x6c,
    0x61,
    0x77,
    0x61,
    0x72,
    0x64,
    0x6d,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x73,
    0x70,
    0x61,
    0x72,
    0x69,
    0x73,
    0x67,
    0x69,
    0x76,
    0x65,
    0x73,
    0x64,
    0x75,
    0x74,
    0x63,
    0x68,
    0x74,
    0x65,
    0x78,
    0x61,
    0x73,
    0x66,
    0x72,
    0x75,
    0x69,
    0x74,
    0x6e,
    0x75,
    0x6c,
    0x6c,
    0x2c,
    0x7c,
    0x7c,
    0x5b,
    0x5d,
    0x3b,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x50,
    0x4f,
    0x53,
    0x54,
    0x22,
    0x6f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x3c,
    0x62,
    0x72,
    0x2f,
    0x3e,
    0x66,
    0x6c,
    0x6f,
    0x6f,
    0x72,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x64,
    0x65,
    0x70,
    0x74,
    0x68,
    0x20,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x62,
    0x61,
    0x6e,
    0x6b,
    0x73,
    0x63,
    0x61,
    0x74,
    0x63,
    0x68,
    0x63,
    0x68,
    0x61,
    0x72,
    0x74,
    0x32,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x73,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x35,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x75,
    0x72,
    0x6c,
    0x3d,
    0x22,
    0x70,
    0x61,
    0x72,
    0x6b,
    0x73,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x4d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x2e,
    0x2e,
    0x2e,
    0x3c,
    0x2f,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x62,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x63,
    0x61,
    0x72,
    0x72,
    0x79,
    0x64,
    0x72,
    0x61,
    0x66,
    0x74,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x70,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x2e,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x72,
    0x64,
    0x65,
    0x6c,
    0x61,
    0x79,
    0x64,
    0x72,
    0x65,
    0x61,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x64,
    0x72,
    0x75,
    0x67,
    0x73,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x61,
    0x70,
    0x72,
    0x69,
    0x6c,
    0x69,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x65,
    0x78,
    0x61,
    0x63,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x56,
    0x69,
    0x65,
    0x77,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x73,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x20,
    0x28,
    0x32,
    0x30,
    0x30,
    0x73,
    0x61,
    0x76,
    0x65,
    0x64,
    0x5f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x67,
    0x6f,
    0x61,
    0x6c,
    0x73,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6b,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x33,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x77,
    0x68,
    0x6f,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x73,
    0x65,
    0x28,
    0x29,
    0x3b,
    0x22,
    0x20,
    0x42,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x6c,
    0x69,
    0x6e,
    0x75,
    0x78,
    0x6a,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x70,
    0x69,
    0x78,
    0x65,
    0x6c,
    0x27,
    0x29,
    0x3b,
    0x22,
    0x3e,
    0x29,
    0x3b,
    0x69,
    0x66,
    0x28,
    0x2d,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x64,
    0x61,
    0x76,
    0x69,
    0x64,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x65,
    0x46,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x72,
    0x61,
    0x69,
    0x73,
    0x65,
    0x62,
    0x6f,
    0x78,
    0x65,
    0x73,
    0x54,
    0x72,
    0x61,
    0x63,
    0x6b,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x3c,
    0x2f,
    0x65,
    0x6d,
    0x3e,
    0x62,
    0x61,
    0x72,
    0x22,
    0x3e,
    0x2e,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x74,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x63,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x68,
    0x65,
    0x6e,
    0x72,
    0x79,
    0x32,
    0x34,
    0x70,
    0x78,
    0x3b,
    0x73,
    0x65,
    0x74,
    0x75,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x79,
    0x73,
    0x68,
    0x61,
    0x72,
    0x70,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x73,
    0x74,
    0x65,
    0x77,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x74,
    0x68,
    0x69,
    0x73,
    0x2e,
    0x72,
    0x65,
    0x73,
    0x65,
    0x74,
    0x77,
    0x68,
    0x65,
    0x65,
    0x6c,
    0x67,
    0x69,
    0x72,
    0x6c,
    0x73,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x2f,
    0x31,
    0x30,
    0x30,
    0x25,
    0x3b,
    0x63,
    0x6c,
    0x75,
    0x62,
    0x73,
    0x73,
    0x74,
    0x75,
    0x66,
    0x66,
    0x62,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x76,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x20,
    0x31,
    0x30,
    0x30,
    0x30,
    0x6b,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x7d,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x71,
    0x75,
    0x65,
    0x75,
    0x65,
    0x3d,
    0x20,
    0x7b,
    0x7d,
    0x3b,
    0x38,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x7b,
    0x0d,
    0x0a,
    0x09,
    0x09,
    0x61,
    0x68,
    0x65,
    0x61,
    0x64,
    0x63,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x69,
    0x72,
    0x69,
    0x73,
    0x68,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x20,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x74,
    0x73,
    0x46,
    0x6f,
    0x72,
    0x6d,
    0x22,
    0x79,
    0x61,
    0x68,
    0x6f,
    0x6f,
    0x29,
    0x5b,
    0x30,
    0x5d,
    0x3b,
    0x41,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x73,
    0x3c,
    0x2f,
    0x68,
    0x31,
    0x3e,
    0x64,
    0x65,
    0x62,
    0x75,
    0x67,
    0x74,
    0x61,
    0x73,
    0x6b,
    0x73,
    0x55,
    0x52,
    0x4c,
    0x20,
    0x3d,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x31,
    0x32,
    0x70,
    0x78,
    0x3b,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x73,
    0x30,
    0x78,
    0x36,
    0x30,
    0x30,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x22,
    0x73,
    0x70,
    0x61,
    0x69,
    0x6e,
    0x62,
    0x65,
    0x61,
    0x63,
    0x68,
    0x74,
    0x61,
    0x78,
    0x65,
    0x73,
    0x6d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x6c,
    0x2d,
    0x2d,
    0x3e,
    0x3c,
    0x2f,
    0x67,
    0x69,
    0x66,
    0x74,
    0x73,
    0x73,
    0x74,
    0x65,
    0x76,
    0x65,
    0x2d,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x2e,
    0x7d,
    0x29,
    0x3b,
    0x0a,
    0x09,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x28,
    0x31,
    0x39,
    0x39,
    0x46,
    0x41,
    0x51,
    0x3c,
    0x2f,
    0x72,
    0x6f,
    0x67,
    0x65,
    0x72,
    0x66,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x32,
    0x38,
    0x70,
    0x78,
    0x3b,
    0x66,
    0x65,
    0x65,
    0x64,
    0x73,
    0x3c,
    0x68,
    0x31,
    0x3e,
    0x3c,
    0x73,
    0x63,
    0x6f,
    0x74,
    0x74,
    0x74,
    0x65,
    0x73,
    0x74,
    0x73,
    0x32,
    0x32,
    0x70,
    0x78,
    0x3b,
    0x64,
    0x72,
    0x69,
    0x6e,
    0x6b,
    0x29,
    0x20,
    0x7c,
    0x7c,
    0x20,
    0x6c,
    0x65,
    0x77,
    0x69,
    0x73,
    0x73,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x23,
    0x30,
    0x33,
    0x39,
    0x3b,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6c,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x77,
    0x61,
    0x73,
    0x74,
    0x65,
    0x30,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x6a,
    0x61,
    0x3a,
    0xe3,
    0x82,
    0x73,
    0x69,
    0x6d,
    0x6f,
    0x6e,
    0x3c,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x79,
    0x6d,
    0x65,
    0x65,
    0x74,
    0x73,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x63,
    0x68,
    0x65,
    0x61,
    0x70,
    0x74,
    0x69,
    0x67,
    0x68,
    0x74,
    0x42,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x29,
    0x20,
    0x21,
    0x3d,
    0x20,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x63,
    0x6c,
    0x69,
    0x70,
    0x73,
    0x72,
    0x6f,
    0x6f,
    0x6d,
    0x73,
    0x6f,
    0x6e,
    0x6b,
    0x65,
    0x79,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x2e,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x66,
    0x75,
    0x6e,
    0x6e,
    0x79,
    0x74,
    0x72,
    0x65,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x2f,
    0x22,
    0x31,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x77,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x53,
    0x54,
    0x41,
    0x52,
    0x54,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x20,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x2c,
    0x20,
    0x32,
    0x30,
    0x31,
    0x29,
    0x3b,
    0x0a,
    0x7d,
    0x0a,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x2e,
    0x76,
    0x69,
    0x72,
    0x75,
    0x73,
    0x63,
    0x68,
    0x61,
    0x69,
    0x72,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x77,
    0x6f,
    0x72,
    0x73,
    0x74,
    0x50,
    0x61,
    0x67,
    0x65,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x61,
    0x74,
    0x63,
    0x68,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x0a,
    0x6f,
    0x2d,
    0x63,
    0x61,
    0x63,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x73,
    0x74,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x20,
    0x61,
    0x73,
    0x69,
    0x61,
    0x6e,
    0x69,
    0x2b,
    0x2b,
    0x29,
    0x7b,
    0x61,
    0x64,
    0x6f,
    0x62,
    0x65,
    0x27,
    0x29,
    0x5b,
    0x30,
    0x5d,
    0x69,
    0x64,
    0x3d,
    0x31,
    0x30,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x3b,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x20,
    0x2e,
    0x32,
    0x2e,
    0x6d,
    0x69,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x6b,
    0x65,
    0x76,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x61,
    0x63,
    0x68,
    0x43,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x62,
    0x72,
    0x75,
    0x63,
    0x65,
    0x32,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x55,
    0x52,
    0x4c,
    0x29,
    0x2b,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x7c,
    0x73,
    0x75,
    0x69,
    0x74,
    0x65,
    0x73,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x68,
    0x61,
    0x72,
    0x72,
    0x79,
    0x31,
    0x32,
    0x30,
    0x22,
    0x20,
    0x73,
    0x77,
    0x65,
    0x65,
    0x74,
    0x74,
    0x72,
    0x3e,
    0x0d,
    0x0a,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x64,
    0x69,
    0x65,
    0x67,
    0x6f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x20,
    0x73,
    0x77,
    0x69,
    0x73,
    0x73,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x0a,
    0x23,
    0x66,
    0x66,
    0x66,
    0x3b,
    0x22,
    0x3e,
    0x4c,
    0x6f,
    0x67,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x22,
    0x74,
    0x72,
    0x65,
    0x61,
    0x74,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x29,
    0x20,
    0x26,
    0x26,
    0x20,
    0x31,
    0x34,
    0x70,
    0x78,
    0x3b,
    0x73,
    0x6c,
    0x65,
    0x65,
    0x70,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x64,
    0x6a,
    0x61,
    0x3a,
    0xe3,
    0x83,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x63,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x22,
    0x77,
    0x6f,
    0x72,
    0x73,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x74,
    0x73,
    0x2d,
    0x62,
    0x6f,
    0x78,
    0x2d,
    0x64,
    0x65,
    0x6c,
    0x74,
    0x61,
    0x0a,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x62,
    0x65,
    0x61,
    0x72,
    0x73,
    0x3a,
    0x34,
    0x38,
    0x5a,
    0x3c,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2d,
    0x72,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x20,
    0x73,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x62,
    0x61,
    0x6b,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x70,
    0x73,
    0x3d,
    0x20,
    0x22,
    0x22,
    0x3b,
    0x70,
    0x68,
    0x70,
    0x22,
    0x3e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x31,
    0x33,
    0x70,
    0x78,
    0x3b,
    0x62,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x68,
    0x65,
    0x6c,
    0x6c,
    0x6f,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3d,
    0x6f,
    0x3d,
    0x25,
    0x32,
    0x46,
    0x20,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x6d,
    0x61,
    0x79,
    0x62,
    0x65,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x69,
    0x6d,
    0x67,
    0x22,
    0x3e,
    0x2c,
    0x20,
    0x66,
    0x6a,
    0x73,
    0x69,
    0x6d,
    0x67,
    0x22,
    0x20,
    0x22,
    0x29,
    0x5b,
    0x30,
    0x5d,
    0x4d,
    0x54,
    0x6f,
    0x70,
    0x42,
    0x54,
    0x79,
    0x70,
    0x65,
    0x22,
    0x6e,
    0x65,
    0x77,
    0x6c,
    0x79,
    0x44,
    0x61,
    0x6e,
    0x73,
    0x6b,
    0x63,
    0x7a,
    0x65,
    0x63,
    0x68,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6c,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x73,
    0x3c,
    0x2f,
    0x68,
    0x35,
    0x3e,
    0x66,
    0x61,
    0x71,
    0x22,
    0x3e,
    0x7a,
    0x68,
    0x2d,
    0x63,
    0x6e,
    0x31,
    0x30,
    0x29,
    0x3b,
    0x0a,
    0x2d,
    0x31,
    0x22,
    0x29,
    0x3b,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x62,
    0x6c,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x6c,
    0x79,
    0x64,
    0x61,
    0x76,
    0x69,
    0x73,
    0x2e,
    0x6a,
    0x73,
    0x27,
    0x3b,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x21,
    0x73,
    0x74,
    0x65,
    0x65,
    0x6c,
    0x20,
    0x79,
    0x6f,
    0x75,
    0x20,
    0x68,
    0x32,
    0x3e,
    0x0d,
    0x0a,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6a,
    0x65,
    0x73,
    0x75,
    0x73,
    0x31,
    0x30,
    0x30,
    0x25,
    0x20,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x2e,
    0x0d,
    0x0a,
    0x09,
    0x0d,
    0x0a,
    0x77,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x72,
    0x69,
    0x73,
    0x6b,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x2d,
    0x6c,
    0x69,
    0x6b,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x76,
    0x65,
    0x67,
    0x61,
    0x73,
    0x64,
    0x61,
    0x6e,
    0x73,
    0x6b,
    0x65,
    0x65,
    0x73,
    0x74,
    0x69,
    0x73,
    0x68,
    0x71,
    0x69,
    0x70,
    0x73,
    0x75,
    0x6f,
    0x6d,
    0x69,
    0x73,
    0x6f,
    0x62,
    0x72,
    0x65,
    0x64,
    0x65,
    0x73,
    0x64,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x74,
    0x6f,
    0x64,
    0x6f,
    0x73,
    0x70,
    0x75,
    0x65,
    0x64,
    0x65,
    0x61,
    0xc3,
    0xb1,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x74,
    0xc3,
    0xa1,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x68,
    0x61,
    0x73,
    0x74,
    0x61,
    0x6f,
    0x74,
    0x72,
    0x6f,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x65,
    0x64,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x76,
    0x6f,
    0x68,
    0x61,
    0x63,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6d,
    0x69,
    0x73,
    0x6d,
    0x6f,
    0x6d,
    0x65,
    0x6a,
    0x6f,
    0x72,
    0x6d,
    0x75,
    0x6e,
    0x64,
    0x6f,
    0x61,
    0x71,
    0x75,
    0xc3,
    0xad,
    0x64,
    0xc3,
    0xad,
    0x61,
    0x73,
    0x73,
    0xc3,
    0xb3,
    0x6c,
    0x6f,
    0x61,
    0x79,
    0x75,
    0x64,
    0x61,
    0x66,
    0x65,
    0x63,
    0x68,
    0x61,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x6f,
    0x73,
    0x64,
    0x61,
    0x74,
    0x6f,
    0x73,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x73,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x6f,
    0x61,
    0x68,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x75,
    0x67,
    0x61,
    0x72,
    0x6d,
    0x61,
    0x79,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x61,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x74,
    0x61,
    0x73,
    0x70,
    0x61,
    0xc3,
    0xad,
    0x73,
    0x6e,
    0x75,
    0x65,
    0x76,
    0x61,
    0x73,
    0x61,
    0x6c,
    0x75,
    0x64,
    0x66,
    0x6f,
    0x72,
    0x6f,
    0x73,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x6f,
    0x71,
    0x75,
    0x69,
    0x65,
    0x6e,
    0x6d,
    0x65,
    0x73,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x65,
    0x72,
    0xc3,
    0xa1,
    0x76,
    0x65,
    0x63,
    0x65,
    0x73,
    0x64,
    0x65,
    0x63,
    0x69,
    0x72,
    0x6a,
    0x6f,
    0x73,
    0xc3,
    0xa9,
    0x65,
    0x73,
    0x74,
    0x61,
    0x72,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x72,
    0x75,
    0x70,
    0x6f,
    0x68,
    0x65,
    0x63,
    0x68,
    0x6f,
    0x65,
    0x6c,
    0x6c,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x67,
    0x6f,
    0x61,
    0x6d,
    0x69,
    0x67,
    0x6f,
    0x63,
    0x6f,
    0x73,
    0x61,
    0x73,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x69,
    0x73,
    0x6d,
    0x61,
    0x61,
    0x69,
    0x72,
    0x65,
    0x73,
    0x6a,
    0x75,
    0x6c,
    0x69,
    0x6f,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x73,
    0x68,
    0x61,
    0x63,
    0x69,
    0x61,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x6a,
    0x75,
    0x6e,
    0x69,
    0x6f,
    0x6c,
    0x69,
    0x62,
    0x72,
    0x65,
    0x70,
    0x75,
    0x6e,
    0x74,
    0x6f,
    0x62,
    0x75,
    0x65,
    0x6e,
    0x6f,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x62,
    0x72,
    0x69,
    0x6c,
    0x62,
    0x75,
    0x65,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x78,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x72,
    0x7a,
    0x6f,
    0x73,
    0x61,
    0x62,
    0x65,
    0x72,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x67,
    0x6f,
    0x63,
    0xc3,
    0xb3,
    0x6d,
    0x6f,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x6f,
    0x6a,
    0x75,
    0x65,
    0x67,
    0x6f,
    0x70,
    0x65,
    0x72,
    0xc3,
    0xba,
    0x68,
    0x61,
    0x62,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x79,
    0x6e,
    0x75,
    0x6e,
    0x63,
    0x61,
    0x6d,
    0x75,
    0x6a,
    0x65,
    0x72,
    0x76,
    0x61,
    0x6c,
    0x6f,
    0x72,
    0x66,
    0x75,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x62,
    0x72,
    0x6f,
    0x67,
    0x75,
    0x73,
    0x74,
    0x61,
    0x69,
    0x67,
    0x75,
    0x61,
    0x6c,
    0x76,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x63,
    0x61,
    0x73,
    0x6f,
    0x73,
    0x67,
    0x75,
    0xc3,
    0xad,
    0x61,
    0x70,
    0x75,
    0x65,
    0x64,
    0x6f,
    0x73,
    0x6f,
    0x6d,
    0x6f,
    0x73,
    0x61,
    0x76,
    0x69,
    0x73,
    0x6f,
    0x75,
    0x73,
    0x74,
    0x65,
    0x64,
    0x64,
    0x65,
    0x62,
    0x65,
    0x6e,
    0x6e,
    0x6f,
    0x63,
    0x68,
    0x65,
    0x62,
    0x75,
    0x73,
    0x63,
    0x61,
    0x66,
    0x61,
    0x6c,
    0x74,
    0x61,
    0x65,
    0x75,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x72,
    0x69,
    0x65,
    0x64,
    0x69,
    0x63,
    0x68,
    0x6f,
    0x63,
    0x75,
    0x72,
    0x73,
    0x6f,
    0x63,
    0x6c,
    0x61,
    0x76,
    0x65,
    0x63,
    0x61,
    0x73,
    0x61,
    0x73,
    0x6c,
    0x65,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x6c,
    0x61,
    0x7a,
    0x6f,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x6f,
    0x6f,
    0x62,
    0x72,
    0x61,
    0x73,
    0x76,
    0x69,
    0x73,
    0x74,
    0x61,
    0x61,
    0x70,
    0x6f,
    0x79,
    0x6f,
    0x6a,
    0x75,
    0x6e,
    0x74,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x74,
    0x61,
    0x76,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x63,
    0x72,
    0x65,
    0x61,
    0x72,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x6f,
    0x68,
    0x65,
    0x6d,
    0x6f,
    0x73,
    0x63,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x63,
    0x61,
    0x72,
    0x67,
    0x6f,
    0x70,
    0x69,
    0x73,
    0x6f,
    0x73,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x6e,
    0x68,
    0x61,
    0x63,
    0x65,
    0x6e,
    0xc3,
    0xa1,
    0x72,
    0x65,
    0x61,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x72,
    0x63,
    0x61,
    0x70,
    0x75,
    0x65,
    0x64,
    0x61,
    0x70,
    0x61,
    0x70,
    0x65,
    0x6c,
    0x6d,
    0x65,
    0x6e,
    0x6f,
    0x72,
    0xc3,
    0xba,
    0x74,
    0x69,
    0x6c,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x6f,
    0x6a,
    0x6f,
    0x72,
    0x67,
    0x65,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x74,
    0x61,
    0x72,
    0x64,
    0x65,
    0x6e,
    0x61,
    0x64,
    0x69,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x63,
    0x61,
    0x73,
    0x69,
    0x67,
    0x75,
    0x65,
    0x65,
    0x6c,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x67,
    0x6c,
    0x6f,
    0x63,
    0x6f,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x6d,
    0x61,
    0x64,
    0x72,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x69,
    0xc3,
    0xb1,
    0x6f,
    0x71,
    0x75,
    0x65,
    0x64,
    0x61,
    0x70,
    0x61,
    0x73,
    0x61,
    0x72,
    0x62,
    0x61,
    0x6e,
    0x63,
    0x6f,
    0x68,
    0x69,
    0x6a,
    0x6f,
    0x73,
    0x76,
    0x69,
    0x61,
    0x6a,
    0x65,
    0x70,
    0x61,
    0x62,
    0x6c,
    0x6f,
    0xc3,
    0xa9,
    0x73,
    0x74,
    0x65,
    0x76,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x65,
    0x69,
    0x6e,
    0x6f,
    0x64,
    0x65,
    0x6a,
    0x61,
    0x72,
    0x66,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x63,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x72,
    0x61,
    0x63,
    0x61,
    0x75,
    0x73,
    0x61,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x6f,
    0x73,
    0x6c,
    0x75,
    0x6e,
    0x65,
    0x73,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x73,
    0x76,
    0x69,
    0x6c,
    0x6c,
    0x61,
    0x76,
    0x65,
    0x6e,
    0x64,
    0x6f,
    0x70,
    0x65,
    0x73,
    0x61,
    0x72,
    0x74,
    0x69,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x67,
    0x61,
    0x6d,
    0x61,
    0x72,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x76,
    0x61,
    0x70,
    0x61,
    0x64,
    0x72,
    0x65,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x6f,
    0x76,
    0x61,
    0x6d,
    0x6f,
    0x73,
    0x7a,
    0x6f,
    0x6e,
    0x61,
    0x73,
    0x61,
    0x6d,
    0x62,
    0x6f,
    0x73,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x61,
    0x61,
    0x62,
    0x75,
    0x73,
    0x6f,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x61,
    0x73,
    0x75,
    0x62,
    0x69,
    0x72,
    0x72,
    0x69,
    0x6f,
    0x6a,
    0x61,
    0x76,
    0x69,
    0x76,
    0x69,
    0x72,
    0x67,
    0x72,
    0x61,
    0x64,
    0x6f,
    0x63,
    0x68,
    0x69,
    0x63,
    0x61,
    0x61,
    0x6c,
    0x6c,
    0xc3,
    0xad,
    0x6a,
    0x6f,
    0x76,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x68,
    0x61,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x61,
    0x6c,
    0x69,
    0x72,
    0x73,
    0x75,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x73,
    0x6f,
    0x73,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x6c,
    0x6c,
    0x61,
    0x6d,
    0x61,
    0x62,
    0x75,
    0x73,
    0x63,
    0x6f,
    0xc3,
    0xa9,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x6e,
    0x65,
    0x67,
    0x72,
    0x6f,
    0x70,
    0x6c,
    0x61,
    0x7a,
    0x61,
    0x68,
    0x75,
    0x6d,
    0x6f,
    0x72,
    0x70,
    0x61,
    0x67,
    0x61,
    0x72,
    0x6a,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x73,
    0x62,
    0x6f,
    0x6c,
    0x73,
    0x61,
    0x62,
    0x61,
    0xc3,
    0xb1,
    0x6f,
    0x68,
    0x61,
    0x62,
    0x6c,
    0x61,
    0x6c,
    0x75,
    0x63,
    0x68,
    0x61,
    0xc3,
    0x81,
    0x72,
    0x65,
    0x61,
    0x64,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x6a,
    0x75,
    0x67,
    0x61,
    0x72,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x73,
    0x76,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x61,
    0x6c,
    0x6c,
    0xc3,
    0xa1,
    0x63,
    0x61,
    0x72,
    0x67,
    0x61,
    0x64,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x6f,
    0x65,
    0x73,
    0x74,
    0xc3,
    0xa9,
    0x67,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x61,
    0x63,
    0x6f,
    0x73,
    0x74,
    0x6f,
    0x66,
    0x69,
    0x63,
    0x68,
    0x61,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x61,
    0x68,
    0x6f,
    0x67,
    0x61,
    0x72,
    0x61,
    0x72,
    0x74,
    0x65,
    0x73,
    0x6c,
    0x65,
    0x79,
    0x65,
    0x73,
    0x61,
    0x71,
    0x75,
    0x65,
    0x6c,
    0x6d,
    0x75,
    0x73,
    0x65,
    0x6f,
    0x62,
    0x61,
    0x73,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x63,
    0x6f,
    0x73,
    0x6d,
    0x69,
    0x74,
    0x61,
    0x64,
    0x63,
    0x69,
    0x65,
    0x6c,
    0x6f,
    0x63,
    0x68,
    0x69,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x65,
    0x64,
    0x6f,
    0x67,
    0x61,
    0x6e,
    0x61,
    0x72,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x6f,
    0x65,
    0x74,
    0x61,
    0x70,
    0x61,
    0x64,
    0x65,
    0x62,
    0x65,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x61,
    0x72,
    0x65,
    0x64,
    0x65,
    0x73,
    0x73,
    0x69,
    0x65,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x64,
    0x75,
    0x64,
    0x61,
    0x73,
    0x64,
    0x65,
    0x73,
    0x65,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x6a,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x65,
    0x61,
    0x61,
    0x67,
    0x75,
    0x61,
    0x73,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x64,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6d,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x73,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x75,
    0x6d,
    0x66,
    0x69,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x73,
    0x63,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x73,
    0x65,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x74,
    0x72,
    0x61,
    0x76,
    0x65,
    0x6c,
    0x69,
    0x73,
    0x73,
    0x75,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x73,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x6f,
    0x64,
    0x75,
    0x6c,
    0x65,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x77,
    0x69,
    0x74,
    0x63,
    0x68,
    0x70,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x73,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x74,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x6e,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x65,
    0x69,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x66,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x6c,
    0x61,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x72,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x64,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x64,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x64,
    0x6f,
    0x75,
    0x62,
    0x6c,
    0x65,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x73,
    0x73,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x6d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x73,
    0x75,
    0x6e,
    0x69,
    0x71,
    0x75,
    0x65,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x67,
    0x79,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x66,
    0x69,
    0x67,
    0x75,
    0x72,
    0x65,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x6f,
    0x66,
    0x66,
    0x73,
    0x65,
    0x74,
    0x6c,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x72,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x73,
    0x75,
    0x70,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x68,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x73,
    0x73,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x6c,
    0x66,
    0x75,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x68,
    0x61,
    0x64,
    0x6f,
    0x77,
    0x64,
    0x65,
    0x62,
    0x61,
    0x74,
    0x65,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x73,
    0x4f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x6c,
    0x65,
    0x61,
    0x67,
    0x75,
    0x65,
    0x63,
    0x68,
    0x72,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x69,
    0x63,
    0x65,
    0x73,
    0x68,
    0x61,
    0x72,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x71,
    0x75,
    0x61,
    0x72,
    0x65,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x73,
    0x74,
    0x77,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x70,
    0x65,
    0x61,
    0x74,
    0x4c,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x64,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x65,
    0x63,
    0x75,
    0x72,
    0x65,
    0x70,
    0x61,
    0x73,
    0x73,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x67,
    0x67,
    0x6c,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x73,
    0x64,
    0x65,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x63,
    0x63,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x73,
    0x74,
    0x72,
    0x65,
    0x61,
    0x6d,
    0x79,
    0x65,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x6b,
    0x73,
    0x74,
    0x72,
    0x65,
    0x65,
    0x74,
    0x66,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x22,
    0x3e,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x65,
    0x64,
    0x75,
    0x73,
    0x65,
    0x66,
    0x75,
    0x6c,
    0x76,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x79,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x73,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x65,
    0x63,
    0x72,
    0x65,
    0x74,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x64,
    0x61,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x73,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x76,
    0x69,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x65,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x52,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x6d,
    0x75,
    0x73,
    0x65,
    0x75,
    0x6d,
    0x6d,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x73,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x6c,
    0x79,
    0x6d,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x22,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x75,
    0x72,
    0x76,
    0x65,
    0x79,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x79,
    0x6d,
    0x62,
    0x6f,
    0x6c,
    0x6d,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x65,
    0x65,
    0x63,
    0x68,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x43,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x73,
    0x6d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x67,
    0x72,
    0x6f,
    0x77,
    0x74,
    0x68,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x63,
    0x79,
    0x6d,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x63,
    0x61,
    0x72,
    0x65,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6c,
    0x63,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6d,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x70,
    0x69,
    0x63,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x66,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x79,
    0x72,
    0x61,
    0x69,
    0x73,
    0x65,
    0x64,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x65,
    0x63,
    0x68,
    0x6f,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x68,
    0x75,
    0x72,
    0x63,
    0x68,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x72,
    0x6e,
    0x65,
    0x72,
    0x6f,
    0x75,
    0x74,
    0x70,
    0x75,
    0x74,
    0x6d,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x79,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x6c,
    0x73,
    0x4e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x72,
    0x73,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x65,
    0x64,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x73,
    0x69,
    0x6c,
    0x76,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x62,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x62,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x65,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x73,
    0x47,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x77,
    0x69,
    0x64,
    0x67,
    0x65,
    0x74,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x62,
    0x75,
    0x64,
    0x67,
    0x65,
    0x74,
    0x6e,
    0x6f,
    0x77,
    0x72,
    0x61,
    0x70,
    0x63,
    0x72,
    0x65,
    0x64,
    0x69,
    0x74,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x73,
    0x65,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x61,
    0x66,
    0x65,
    0x74,
    0x79,
    0x63,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x70,
    0x69,
    0x72,
    0x69,
    0x74,
    0x2d,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x72,
    0x65,
    0x61,
    0x64,
    0x6d,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x65,
    0x64,
    0x72,
    0x75,
    0x73,
    0x73,
    0x69,
    0x61,
    0x70,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x53,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x62,
    0x72,
    0x6f,
    0x6b,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x73,
    0x63,
    0x68,
    0x61,
    0x72,
    0x67,
    0x65,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x65,
    0x66,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x2d,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x65,
    0x64,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x65,
    0x64,
    0x43,
    0x68,
    0x75,
    0x72,
    0x63,
    0x68,
    0x69,
    0x6d,
    0x70,
    0x61,
    0x63,
    0x74,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x61,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x73,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x22,
    0x3e,
    0x29,
    0x7b,
    0x76,
    0x61,
    0x72,
    0x20,
    0x70,
    0x72,
    0x65,
    0x66,
    0x69,
    0x78,
    0x6f,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x48,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x2e,
    0x70,
    0x75,
    0x73,
    0x68,
    0x28,
    0x63,
    0x6f,
    0x75,
    0x70,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x65,
    0x6e,
    0x62,
    0x72,
    0x69,
    0x64,
    0x67,
    0x65,
    0x6c,
    0x61,
    0x75,
    0x6e,
    0x63,
    0x68,
    0x52,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x74,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x42,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x61,
    0x75,
    0x74,
    0x79,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x67,
    0x6f,
    0x74,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x65,
    0x64,
    0x43,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x79,
    0x53,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x73,
    0x76,
    0x69,
    0x65,
    0x77,
    0x65,
    0x64,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x65,
    0x41,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x6d,
    0x61,
    0x7a,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x64,
    0x76,
    0x69,
    0x63,
    0x65,
    0x69,
    0x6e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3a,
    0x20,
    0x54,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x73,
    0x42,
    0x45,
    0x47,
    0x49,
    0x4e,
    0x20,
    0x4d,
    0x65,
    0x78,
    0x69,
    0x63,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x73,
    0x73,
    0x65,
    0x74,
    0x73,
    0x45,
    0x6d,
    0x70,
    0x69,
    0x72,
    0x65,
    0x53,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x6c,
    0x65,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x61,
    0x6c,
    0x53,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x2e,
    0x0a,
    0x0a,
    0x4f,
    0x6e,
    0x65,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x22,
    0x3e,
    0x50,
    0x68,
    0x69,
    0x6c,
    0x69,
    0x70,
    0x61,
    0x77,
    0x61,
    0x72,
    0x64,
    0x73,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x73,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x73,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x53,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x77,
    0x65,
    0x65,
    0x6b,
    0x6c,
    0x79,
    0x20,
    0x28,
    0x65,
    0x2e,
    0x67,
    0x2e,
    0x62,
    0x65,
    0x68,
    0x69,
    0x6e,
    0x64,
    0x64,
    0x6f,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x6c,
    0x6f,
    0x67,
    0x67,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x62,
    0x3e,
    0x3c,
    0x2f,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x61,
    0x73,
    0x73,
    0x69,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x73,
    0x73,
    0x75,
    0x65,
    0x64,
    0x33,
    0x30,
    0x30,
    0x70,
    0x78,
    0x7c,
    0x63,
    0x61,
    0x6e,
    0x61,
    0x64,
    0x61,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x73,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x42,
    0x72,
    0x61,
    0x7a,
    0x69,
    0x6c,
    0x73,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x22,
    0x3e,
    0x62,
    0x65,
    0x79,
    0x6f,
    0x6e,
    0x64,
    0x2d,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x65,
    0x46,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x3c,
    0x2f,
    0x68,
    0x31,
    0x3e,
    0x0a,
    0x5f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x22,
    0x6c,
    0x65,
    0x61,
    0x76,
    0x65,
    0x73,
    0x73,
    0x74,
    0x72,
    0x65,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0d,
    0x0a,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x65,
    0x72,
    0x4f,
    0x78,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x73,
    0x75,
    0x72,
    0x76,
    0x69,
    0x76,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x66,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x65,
    0x44,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x3e,
    0x6c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x73,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x6b,
    0x73,
    0x68,
    0x69,
    0x67,
    0x68,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x79,
    0x6f,
    0x6e,
    0x65,
    0x41,
    0x66,
    0x72,
    0x69,
    0x63,
    0x61,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x50,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x77,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x63,
    0x65,
    0x73,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x7c,
    0x7c,
    0x20,
    0x7b,
    0x7d,
    0x3b,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x22,
    0x3e,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x79,
    0x77,
    0x72,
    0x61,
    0x70,
    0x22,
    0x3e,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x65,
    0x64,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x75,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x75,
    0x74,
    0x65,
    0x62,
    0x65,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x31,
    0x35,
    0x30,
    0x70,
    0x78,
    0x7c,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x65,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x22,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x65,
    0x64,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3b,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x6c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x31,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x75,
    0x70,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x2e,
    0x41,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x70,
    0x61,
    0x70,
    0x65,
    0x72,
    0x73,
    0x73,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x48,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x6c,
    0x69,
    0x64,
    0x65,
    0x72,
    0x55,
    0x54,
    0x46,
    0x2d,
    0x38,
    0x22,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x20,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x2e,
    0x20,
    0x57,
    0x69,
    0x74,
    0x68,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x6f,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x69,
    0x74,
    0x6a,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x61,
    0x6e,
    0x6e,
    0x75,
    0x61,
    0x6c,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x62,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x66,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x69,
    0x2b,
    0x2b,
    0x29,
    0x20,
    0x7b,
    0x69,
    0x73,
    0x72,
    0x61,
    0x65,
    0x6c,
    0x73,
    0x61,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x63,
    0x69,
    0x64,
    0x65,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x22,
    0x3e,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x65,
    0x62,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x70,
    0x69,
    0x65,
    0x63,
    0x65,
    0x73,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x3b,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x3e,
    0x3c,
    0x72,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x2d,
    0x2d,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x70,
    0x61,
    0x63,
    0x69,
    0x74,
    0x79,
    0x73,
    0x65,
    0x78,
    0x75,
    0x61,
    0x6c,
    0x62,
    0x75,
    0x72,
    0x65,
    0x61,
    0x75,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x22,
    0x20,
    0x31,
    0x30,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x6f,
    0x62,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x73,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x2c,
    0x20,
    0x49,
    0x6e,
    0x63,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x64,
    0x79,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x22,
    0x20,
    0x6c,
    0x79,
    0x72,
    0x69,
    0x63,
    0x73,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x79,
    0x2e,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x79,
    0x5f,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x2e,
    0x46,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x6c,
    0x73,
    0x65,
    0x20,
    0x69,
    0x66,
    0x50,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x74,
    0x75,
    0x72,
    0x6b,
    0x65,
    0x79,
    0x29,
    0x3b,
    0x76,
    0x61,
    0x72,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x67,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x73,
    0x44,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x7d,
    0x65,
    0x6c,
    0x73,
    0x65,
    0x7b,
    0x69,
    0x6e,
    0x73,
    0x65,
    0x72,
    0x74,
    0x42,
    0x6c,
    0x6f,
    0x67,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x2e,
    0x66,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x31,
    0x30,
    0x70,
    0x78,
    0x20,
    0x30,
    0x70,
    0x72,
    0x61,
    0x67,
    0x6d,
    0x61,
    0x66,
    0x72,
    0x69,
    0x64,
    0x61,
    0x79,
    0x6a,
    0x75,
    0x6e,
    0x69,
    0x6f,
    0x72,
    0x64,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x72,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x73,
    0x70,
    0x6c,
    0x75,
    0x67,
    0x69,
    0x6e,
    0x35,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x20,
    0x70,
    0x61,
    0x67,
    0x65,
    0x22,
    0x3e,
    0x62,
    0x6f,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x2e,
    0x74,
    0x65,
    0x73,
    0x74,
    0x28,
    0x61,
    0x76,
    0x61,
    0x74,
    0x61,
    0x72,
    0x74,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x5f,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x73,
    0x73,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2c,
    0x66,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x73,
    0x68,
    0x61,
    0x72,
    0x65,
    0x73,
    0x72,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x65,
    0x72,
    0x74,
    0x28,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x53,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x22,
    0x3e,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x22,
    0x3e,
    0x0a,
    0x2a,
    0x20,
    0x54,
    0x68,
    0x65,
    0x54,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x73,
    0x65,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x6a,
    0x65,
    0x72,
    0x73,
    0x65,
    0x79,
    0x4e,
    0x65,
    0x77,
    0x73,
    0x3c,
    0x2f,
    0x76,
    0x65,
    0x72,
    0x69,
    0x66,
    0x79,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x6a,
    0x75,
    0x72,
    0x79,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x43,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x53,
    0x54,
    0x41,
    0x52,
    0x54,
    0x20,
    0x61,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x5f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x74,
    0x68,
    0x72,
    0x65,
    0x61,
    0x64,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x70,
    0x6f,
    0x63,
    0x6b,
    0x65,
    0x74,
    0x62,
    0x6f,
    0x78,
    0x22,
    0x3e,
    0x0a,
    0x53,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x20,
    0x44,
    0x61,
    0x76,
    0x69,
    0x64,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x41,
    0x70,
    0x72,
    0x69,
    0x6c,
    0x20,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x72,
    0x69,
    0x76,
    0x65,
    0x72,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x22,
    0x3e,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x22,
    0x3e,
    0x62,
    0x6f,
    0x61,
    0x72,
    0x64,
    0x73,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x73,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x75,
    0x73,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x7c,
    0x7c,
    0x20,
    0x5b,
    0x5d,
    0x3b,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x2e,
    0x67,
    0x75,
    0x69,
    0x74,
    0x61,
    0x72,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x68,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x4f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x22,
    0x20,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x73,
    0x77,
    0x69,
    0x6c,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x66,
    0x73,
    0x77,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x43,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6c,
    0x79,
    0x20,
    0x79,
    0x6f,
    0x75,
    0x72,
    0x20,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x0a,
    0x0a,
    0x57,
    0x68,
    0x69,
    0x6c,
    0x74,
    0x61,
    0x79,
    0x6c,
    0x6f,
    0x72,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x3a,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x72,
    0x74,
    0x66,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x68,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x22,
    0x29,
    0x20,
    0x2b,
    0x20,
    0x22,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x62,
    0x75,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x4d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x22,
    0x3e,
    0x6f,
    0x70,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x35,
    0x70,
    0x78,
    0x3b,
    0x22,
    0x3e,
    0x76,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x20,
    0x63,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x6d,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x68,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x3c,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x3e,
    0x6b,
    0x61,
    0x6e,
    0x73,
    0x61,
    0x73,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x3d,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x68,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x30,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x20,
    0x0a,
    0x0a,
    0x49,
    0x6e,
    0x20,
    0x20,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x50,
    0x6f,
    0x6c,
    0x73,
    0x6b,
    0x69,
    0x2d,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x6a,
    0x6f,
    0x72,
    0x64,
    0x61,
    0x6e,
    0x42,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x53,
    0x74,
    0x61,
    0x72,
    0x74,
    0x20,
    0x2d,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x32,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x22,
    0x3e,
    0x30,
    0x31,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x2d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x73,
    0x65,
    0x6e,
    0x69,
    0x6f,
    0x72,
    0x49,
    0x53,
    0x42,
    0x4e,
    0x20,
    0x30,
    0x30,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x20,
    0x67,
    0x75,
    0x69,
    0x64,
    0x65,
    0x73,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x29,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x70,
    0x61,
    0x69,
    0x72,
    0x2e,
    0x78,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x2d,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x72,
    0x65,
    0x67,
    0x45,
    0x78,
    0x70,
    0x3a,
    0x68,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x70,
    0x68,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x0d,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0a,
    0x09,
    0x76,
    0x61,
    0x72,
    0x20,
    0x3e,
    0x27,
    0x29,
    0x3b,
    0x0a,
    0x09,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x0a,
    0x62,
    0x61,
    0x68,
    0x61,
    0x73,
    0x61,
    0x62,
    0x72,
    0x61,
    0x73,
    0x69,
    0x6c,
    0x67,
    0x61,
    0x6c,
    0x65,
    0x67,
    0x6f,
    0x6d,
    0x61,
    0x67,
    0x79,
    0x61,
    0x72,
    0x70,
    0x6f,
    0x6c,
    0x73,
    0x6b,
    0x69,
    0x73,
    0x72,
    0x70,
    0x73,
    0x6b,
    0x69,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbd,
    0x93,
    0xe7,
    0xb9,
    0x81,
    0xe9,
    0xab,
    0x94,
    0xe4,
    0xbf,
    0xa1,
    0xe6,
    0x81,
    0xaf,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0x9b,
    0xbd,
    0xe6,
    0x88,
    0x91,
    0xe4,
    0xbb,
    0xac,
    0xe4,
    0xb8,
    0x80,
    0xe4,
    0xb8,
    0xaa,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0x8f,
    0xb8,
    0xe7,
    0xae,
    0xa1,
    0xe7,
    0x90,
    0x86,
    0xe8,
    0xae,
    0xba,
    0xe5,
    0x9d,
    0x9b,
    0xe5,
    0x8f,
    0xaf,
    0xe4,
    0xbb,
    0xa5,
    0xe6,
    0x9c,
    0x8d,
    0xe5,
    0x8a,
    0xa1,
    0xe6,
    0x97,
    0xb6,
    0xe9,
    0x97,
    0xb4,
    0xe4,
    0xb8,
    0xaa,
    0xe4,
    0xba,
    0xba,
    0xe4,
    0xba,
    0xa7,
    0xe5,
    0x93,
    0x81,
    0xe8,
    0x87,
    0xaa,
    0xe5,
    0xb7,
    0xb1,
    0xe4,
    0xbc,
    0x81,
    0xe4,
    0xb8,
    0x9a,
    0xe6,
    0x9f,
    0xa5,
    0xe7,
    0x9c,
    0x8b,
    0xe5,
    0xb7,
    0xa5,
    0xe4,
    0xbd,
    0x9c,
    0xe8,
    0x81,
    0x94,
    0xe7,
    0xb3,
    0xbb,
    0xe6,
    0xb2,
    0xa1,
    0xe6,
    0x9c,
    0x89,
    0xe7,
    0xbd,
    0x91,
    0xe7,
    0xab,
    0x99,
    0xe6,
    0x89,
    0x80,
    0xe6,
    0x9c,
    0x89,
    0xe8,
    0xaf,
    0x84,
    0xe8,
    0xae,
    0xba,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0xbf,
    0x83,
    0xe6,
    0x96,
    0x87,
    0xe7,
    0xab,
    0xa0,
    0xe7,
    0x94,
    0xa8,
    0xe6,
    0x88,
    0xb7,
    0xe9,
    0xa6,
    0x96,
    0xe9,
    0xa1,
    0xb5,
    0xe4,
    0xbd,
    0x9c,
    0xe8,
    0x80,
    0x85,
    0xe6,
    0x8a,
    0x80,
    0xe6,
    0x9c,
    0xaf,
    0xe9,
    0x97,
    0xae,
    0xe9,
    0xa2,
    0x98,
    0xe7,
    0x9b,
    0xb8,
    0xe5,
    0x85,
    0xb3,
    0xe4,
    0xb8,
    0x8b,
    0xe8,
    0xbd,
    0xbd,
    0xe6,
    0x90,
    0x9c,
    0xe7,
    0xb4,
    0xa2,
    0xe4,
    0xbd,
    0xbf,
    0xe7,
    0x94,
    0xa8,
    0xe8,
    0xbd,
    0xaf,
    0xe4,
    0xbb,
    0xb6,
    0xe5,
    0x9c,
    0xa8,
    0xe7,
    0xba,
    0xbf,
    0xe4,
    0xb8,
    0xbb,
    0xe9,
    0xa2,
    0x98,
    0xe8,
    0xb5,
    0x84,
    0xe6,
    0x96,
    0x99,
    0xe8,
    0xa7,
    0x86,
    0xe9,
    0xa2,
    0x91,
    0xe5,
    0x9b,
    0x9e,
    0xe5,
    0xa4,
    0x8d,
    0xe6,
    0xb3,
    0xa8,
    0xe5,
    0x86,
    0x8c,
    0xe7,
    0xbd,
    0x91,
    0xe7,
    0xbb,
    0x9c,
    0xe6,
    0x94,
    0xb6,
    0xe8,
    0x97,
    0x8f,
    0xe5,
    0x86,
    0x85,
    0xe5,
    0xae,
    0xb9,
    0xe6,
    0x8e,
    0xa8,
    0xe8,
    0x8d,
    0x90,
    0xe5,
    0xb8,
    0x82,
    0xe5,
    0x9c,
    0xba,
    0xe6,
    0xb6,
    0x88,
    0xe6,
    0x81,
    0xaf,
    0xe7,
    0xa9,
    0xba,
    0xe9,
    0x97,
    0xb4,
    0xe5,
    0x8f,
    0x91,
    0xe5,
    0xb8,
    0x83,
    0xe4,
    0xbb,
    0x80,
    0xe4,
    0xb9,
    0x88,
    0xe5,
    0xa5,
    0xbd,
    0xe5,
    0x8f,
    0x8b,
    0xe7,
    0x94,
    0x9f,
    0xe6,
    0xb4,
    0xbb,
    0xe5,
    0x9b,
    0xbe,
    0xe7,
    0x89,
    0x87,
    0xe5,
    0x8f,
    0x91,
    0xe5,
    0xb1,
    0x95,
    0xe5,
    0xa6,
    0x82,
    0xe6,
    0x9e,
    0x9c,
    0xe6,
    0x89,
    0x8b,
    0xe6,
    0x9c,
    0xba,
    0xe6,
    0x96,
    0xb0,
    0xe9,
    0x97,
    0xbb,
    0xe6,
    0x9c,
    0x80,
    0xe6,
    0x96,
    0xb0,
    0xe6,
    0x96,
    0xb9,
    0xe5,
    0xbc,
    0x8f,
    0xe5,
    0x8c,
    0x97,
    0xe4,
    0xba,
    0xac,
    0xe6,
    0x8f,
    0x90,
    0xe4,
    0xbe,
    0x9b,
    0xe5,
    0x85,
    0xb3,
    0xe4,
    0xba,
    0x8e,
    0xe6,
    0x9b,
    0xb4,
    0xe5,
    0xa4,
    0x9a,
    0xe8,
    0xbf,
    0x99,
    0xe4,
    0xb8,
    0xaa,
    0xe7,
    0xb3,
    0xbb,
    0xe7,
    0xbb,
    0x9f,
    0xe7,
    0x9f,
    0xa5,
    0xe9,
    0x81,
    0x93,
    0xe6,
    0xb8,
    0xb8,
    0xe6,
    0x88,
    0x8f,
    0xe5,
    0xb9,
    0xbf,
    0xe5,
    0x91,
    0x8a,
    0xe5,
    0x85,
    0xb6,
    0xe4,
    0xbb,
    0x96,
    0xe5,
    0x8f,
    0x91,
    0xe8,
    0xa1,
    0xa8,
    0xe5,
    0xae,
    0x89,
    0xe5,
    0x85,
    0xa8,
    0xe7,
    0xac,
    0xac,
    0xe4,
    0xb8,
    0x80,
    0xe4,
    0xbc,
    0x9a,
    0xe5,
    0x91,
    0x98,
    0xe8,
    0xbf,
    0x9b,
    0xe8,
    0xa1,
    0x8c,
    0xe7,
    0x82,
    0xb9,
    0xe5,
    0x87,
    0xbb,
    0xe7,
    0x89,
    0x88,
    0xe6,
    0x9d,
    0x83,
    0xe7,
    0x94,
    0xb5,
    0xe5,
    0xad,
    0x90,
    0xe4,
    0xb8,
    0x96,
    0xe7,
    0x95,
    0x8c,
    0xe8,
    0xae,
    0xbe,
    0xe8,
    0xae,
    0xa1,
    0xe5,
    0x85,
    0x8d,
    0xe8,
    0xb4,
    0xb9,
    0xe6,
    0x95,
    0x99,
    0xe8,
    0x82,
    0xb2,
    0xe5,
    0x8a,
    0xa0,
    0xe5,
    0x85,
    0xa5,
    0xe6,
    0xb4,
    0xbb,
    0xe5,
    0x8a,
    0xa8,
    0xe4,
    0xbb,
    0x96,
    0xe4,
    0xbb,
    0xac,
    0xe5,
    0x95,
    0x86,
    0xe5,
    0x93,
    0x81,
    0xe5,
    0x8d,
    0x9a,
    0xe5,
    0xae,
    0xa2,
    0xe7,
    0x8e,
    0xb0,
    0xe5,
    0x9c,
    0xa8,
    0xe4,
    0xb8,
    0x8a,
    0xe6,
    0xb5,
    0xb7,
    0xe5,
    0xa6,
    0x82,
    0xe4,
    0xbd,
    0x95,
    0xe5,
    0xb7,
    0xb2,
    0xe7,
    0xbb,
    0x8f,
    0xe7,
    0x95,
    0x99,
    0xe8,
    0xa8,
    0x80,
    0xe8,
    0xaf,
    0xa6,
    0xe7,
    0xbb,
    0x86,
    0xe7,
    0xa4,
    0xbe,
    0xe5,
    0x8c,
    0xba,
    0xe7,
    0x99,
    0xbb,
    0xe5,
    0xbd,
    0x95,
    0xe6,
    0x9c,
    0xac,
    0xe7,
    0xab,
    0x99,
    0xe9,
    0x9c,
    0x80,
    0xe8,
    0xa6,
    0x81,
    0xe4,
    0xbb,
    0xb7,
    0xe6,
    0xa0,
    0xbc,
    0xe6,
    0x94,
    0xaf,
    0xe6,
    0x8c,
    0x81,
    0xe5,
    0x9b,
    0xbd,
    0xe9,
    0x99,
    0x85,
    0xe9,
    0x93,
    0xbe,
    0xe6,
    0x8e,
    0xa5,
    0xe5,
    0x9b,
    0xbd,
    0xe5,
    0xae,
    0xb6,
    0xe5,
    0xbb,
    0xba,
    0xe8,
    0xae,
    0xbe,
    0xe6,
    0x9c,
    0x8b,
    0xe5,
    0x8f,
    0x8b,
    0xe9,
    0x98,
    0x85,
    0xe8,
    0xaf,
    0xbb,
    0xe6,
    0xb3,
    0x95,
    0xe5,
    0xbe,
    0x8b,
    0xe4,
    0xbd,
    0x8d,
    0xe7,
    0xbd,
    0xae,
    0xe7,
    0xbb,
    0x8f,
    0xe6,
    0xb5,
    0x8e,
    0xe9,
    0x80,
    0x89,
    0xe6,
    0x8b,
    0xa9,
    0xe8,
    0xbf,
    0x99,
    0xe6,
    0xa0,
    0xb7,
    0xe5,
    0xbd,
    0x93,
    0xe5,
    0x89,
    0x8d,
    0xe5,
    0x88,
    0x86,
    0xe7,
    0xb1,
    0xbb,
    0xe6,
    0x8e,
    0x92,
    0xe8,
    0xa1,
    0x8c,
    0xe5,
    0x9b,
    0xa0,
    0xe4,
    0xb8,
    0xba,
    0xe4,
    0xba,
    0xa4,
    0xe6,
    0x98,
    0x93,
    0xe6,
    0x9c,
    0x80,
    0xe5,
    0x90,
    0x8e,
    0xe9,
    0x9f,
    0xb3,
    0xe4,
    0xb9,
    0x90,
    0xe4,
    0xb8,
    0x8d,
    0xe8,
    0x83,
    0xbd,
    0xe9,
    0x80,
    0x9a,
    0xe8,
    0xbf,
    0x87,
    0xe8,
    0xa1,
    0x8c,
    0xe4,
    0xb8,
    0x9a,
    0xe7,
    0xa7,
    0x91,
    0xe6,
    0x8a,
    0x80,
    0xe5,
    0x8f,
    0xaf,
    0xe8,
    0x83,
    0xbd,
    0xe8,
    0xae,
    0xbe,
    0xe5,
    0xa4,
    0x87,
    0xe5,
    0x90,
    0x88,
    0xe4,
    0xbd,
    0x9c,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0xae,
    0xb6,
    0xe7,
    0xa4,
    0xbe,
    0xe4,
    0xbc,
    0x9a,
    0xe7,
    0xa0,
    0x94,
    0xe7,
    0xa9,
    0xb6,
    0xe4,
    0xb8,
    0x93,
    0xe4,
    0xb8,
    0x9a,
    0xe5,
    0x85,
    0xa8,
    0xe9,
    0x83,
    0xa8,
    0xe9,
    0xa1,
    0xb9,
    0xe7,
    0x9b,
    0xae,
    0xe8,
    0xbf,
    0x99,
    0xe9,
    0x87,
    0x8c,
    0xe8,
    0xbf,
    0x98,
    0xe6,
    0x98,
    0xaf,
    0xe5,
    0xbc,
    0x80,
    0xe5,
    0xa7,
    0x8b,
    0xe6,
    0x83,
    0x85,
    0xe5,
    0x86,
    0xb5,
    0xe7,
    0x94,
    0xb5,
    0xe8,
    0x84,
    0x91,
    0xe6,
    0x96,
    0x87,
    0xe4,
    0xbb,
    0xb6,
    0xe5,
    0x93,
    0x81,
    0xe7,
    0x89,
    0x8c,
    0xe5,
    0xb8,
    0xae,
    0xe5,
    0x8a,
    0xa9,
    0xe6,
    0x96,
    0x87,
    0xe5,
    0x8c,
    0x96,
    0xe8,
    0xb5,
    0x84,
    0xe6,
    0xba,
    0x90,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0xad,
    0xa6,
    0xe5,
    0xad,
    0xa6,
    0xe4,
    0xb9,
    0xa0,
    0xe5,
    0x9c,
    0xb0,
    0xe5,
    0x9d,
    0x80,
    0xe6,
    0xb5,
    0x8f,
    0xe8,
    0xa7,
    0x88,
    0xe6,
    0x8a,
    0x95,
    0xe8,
    0xb5,
    0x84,
    0xe5,
    0xb7,
    0xa5,
    0xe7,
    0xa8,
    0x8b,
    0xe8,
    0xa6,
    0x81,
    0xe6,
    0xb1,
    0x82,
    0xe6,
    0x80,
    0x8e,
    0xe4,
    0xb9,
    0x88,
    0xe6,
    0x97,
    0xb6,
    0xe5,
    0x80,
    0x99,
    0xe5,
    0x8a,
    0x9f,
    0xe8,
    0x83,
    0xbd,
    0xe4,
    0xb8,
    0xbb,
    0xe8,
    0xa6,
    0x81,
    0xe7,
    0x9b,
    0xae,
    0xe5,
    0x89,
    0x8d,
    0xe8,
    0xb5,
    0x84,
    0xe8,
    0xae,
    0xaf,
    0xe5,
    0x9f,
    0x8e,
    0xe5,
    0xb8,
    0x82,
    0xe6,
    0x96,
    0xb9,
    0xe6,
    0xb3,
    0x95,
    0xe7,
    0x94,
    0xb5,
    0xe5,
    0xbd,
    0xb1,
    0xe6,
    0x8b,
    0x9b,
    0xe8,
    0x81,
    0x98,
    0xe5,
    0xa3,
    0xb0,
    0xe6,
    0x98,
    0x8e,
    0xe4,
    0xbb,
    0xbb,
    0xe4,
    0xbd,
    0x95,
    0xe5,
    0x81,
    0xa5,
    0xe5,
    0xba,
    0xb7,
    0xe6,
    0x95,
    0xb0,
    0xe6,
    0x8d,
    0xae,
    0xe7,
    0xbe,
    0x8e,
    0xe5,
    0x9b,
    0xbd,
    0xe6,
    0xb1,
    0xbd,
    0xe8,
    0xbd,
    0xa6,
    0xe4,
    0xbb,
    0x8b,
    0xe7,
    0xbb,
    0x8d,
    0xe4,
    0xbd,
    0x86,
    0xe6,
    0x98,
    0xaf,
    0xe4,
    0xba,
    0xa4,
    0xe6,
    0xb5,
    0x81,
    0xe7,
    0x94,
    0x9f,
    0xe4,
    0xba,
    0xa7,
    0xe6,
    0x89,
    0x80,
    0xe4,
    0xbb,
    0xa5,
    0xe7,
    0x94,
    0xb5,
    0xe8,
    0xaf,
    0x9d,
    0xe6,
    0x98,
    0xbe,
    0xe7,
    0xa4,
    0xba,
    0xe4,
    0xb8,
    0x80,
    0xe4,
    0xba,
    0x9b,
    0xe5,
    0x8d,
    0x95,
    0xe4,
    0xbd,
    0x8d,
    0xe4,
    0xba,
    0xba,
    0xe5,
    0x91,
    0x98,
    0xe5,
    0x88,
    0x86,
    0xe6,
    0x9e,
    0x90,
    0xe5,
    0x9c,
    0xb0,
    0xe5,
    0x9b,
    0xbe,
    0xe6,
    0x97,
    0x85,
    0xe6,
    0xb8,
    0xb8,
    0xe5,
    0xb7,
    0xa5,
    0xe5,
    0x85,
    0xb7,
    0xe5,
    0xad,
    0xa6,
    0xe7,
    0x94,
    0x9f,
    0xe7,
    0xb3,
    0xbb,
    0xe5,
    0x88,
    0x97,
    0xe7,
    0xbd,
    0x91,
    0xe5,
    0x8f,
    0x8b,
    0xe5,
    0xb8,
    0x96,
    0xe5,
    0xad,
    0x90,
    0xe5,
    0xaf,
    0x86,
    0xe7,
    0xa0,
    0x81,
    0xe9,
    0xa2,
    0x91,
    0xe9,
    0x81,
    0x93,
    0xe6,
    0x8e,
    0xa7,
    0xe5,
    0x88,
    0xb6,
    0xe5,
    0x9c,
    0xb0,
    0xe5,
    0x8c,
    0xba,
    0xe5,
    0x9f,
    0xba,
    0xe6,
    0x9c,
    0xac,
    0xe5,
    0x85,
    0xa8,
    0xe5,
    0x9b,
    0xbd,
    0xe7,
    0xbd,
    0x91,
    0xe4,
    0xb8,
    0x8a,
    0xe9,
    0x87,
    0x8d,
    0xe8,
    0xa6,
    0x81,
    0xe7,
    0xac,
    0xac,
    0xe4,
    0xba,
    0x8c,
    0xe5,
    0x96,
    0x9c,
    0xe6,
    0xac,
    0xa2,
    0xe8,
    0xbf,
    0x9b,
    0xe5,
    0x85,
    0xa5,
    0xe5,
    0x8f,
    0x8b,
    0xe6,
    0x83,
    0x85,
    0xe8,
    0xbf,
    0x99,
    0xe4,
    0xba,
    0x9b,
    0xe8,
    0x80,
    0x83,
    0xe8,
    0xaf,
    0x95,
    0xe5,
    0x8f,
    0x91,
    0xe7,
    0x8e,
    0xb0,
    0xe5,
    0x9f,
    0xb9,
    0xe8,
    0xae,
    0xad,
    0xe4,
    0xbb,
    0xa5,
    0xe4,
    0xb8,
    0x8a,
    0xe6,
    0x94,
    0xbf,
    0xe5,
    0xba,
    0x9c,
    0xe6,
    0x88,
    0x90,
    0xe4,
    0xb8,
    0xba,
    0xe7,
    0x8e,
    0xaf,
    0xe5,
    0xa2,
    0x83,
    0xe9,
    0xa6,
    0x99,
    0xe6,
    0xb8,
    0xaf,
    0xe5,
    0x90,
    0x8c,
    0xe6,
    0x97,
    0xb6,
    0xe5,
    0xa8,
    0xb1,
    0xe4,
    0xb9,
    0x90,
    0xe5,
    0x8f,
    0x91,
    0xe9,
    0x80,
    0x81,
    0xe4,
    0xb8,
    0x80,
    0xe5,
    0xae,
    0x9a,
    0xe5,
    0xbc,
    0x80,
    0xe5,
    0x8f,
    0x91,
    0xe4,
    0xbd,
    0x9c,
    0xe5,
    0x93,
    0x81,
    0xe6,
    0xa0,
    0x87,
    0xe5,
    0x87,
    0x86,
    0xe6,
    0xac,
    0xa2,
    0xe8,
    0xbf,
    0x8e,
    0xe8,
    0xa7,
    0xa3,
    0xe5,
    0x86,
    0xb3,
    0xe5,
    0x9c,
    0xb0,
    0xe6,
    0x96,
    0xb9,
    0xe4,
    0xb8,
    0x80,
    0xe4,
    0xb8,
    0x8b,
    0xe4,
    0xbb,
    0xa5,
    0xe5,
    0x8f,
    0x8a,
    0xe8,
    0xb4,
    0xa3,
    0xe4,
    0xbb,
    0xbb,
    0xe6,
    0x88,
    0x96,
    0xe8,
    0x80,
    0x85,
    0xe5,
    0xae,
    0xa2,
    0xe6,
    0x88,
    0xb7,
    0xe4,
    0xbb,
    0xa3,
    0xe8,
    0xa1,
    0xa8,
    0xe7,
    0xa7,
    0xaf,
    0xe5,
    0x88,
    0x86,
    0xe5,
    0xa5,
    0xb3,
    0xe4,
    0xba,
    0xba,
    0xe6,
    0x95,
    0xb0,
    0xe7,
    0xa0,
    0x81,
    0xe9,
    0x94,
    0x80,
    0xe5,
    0x94,
    0xae,
    0xe5,
    0x87,
    0xba,
    0xe7,
    0x8e,
    0xb0,
    0xe7,
    0xa6,
    0xbb,
    0xe7,
    0xba,
    0xbf,
    0xe5,
    0xba,
    0x94,
    0xe7,
    0x94,
    0xa8,
    0xe5,
    0x88,
    0x97,
    0xe8,
    0xa1,
    0xa8,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0x90,
    0x8c,
    0xe7,
    0xbc,
    0x96,
    0xe8,
    0xbe,
    0x91,
    0xe7,
    0xbb,
    0x9f,
    0xe8,
    0xae,
    0xa1,
    0xe6,
    0x9f,
    0xa5,
    0xe8,
    0xaf,
    0xa2,
    0xe4,
    0xb8,
    0x8d,
    0xe8,
    0xa6,
    0x81,
    0xe6,
    0x9c,
    0x89,
    0xe5,
    0x85,
    0xb3,
    0xe6,
    0x9c,
    0xba,
    0xe6,
    0x9e,
    0x84,
    0xe5,
    0xbe,
    0x88,
    0xe5,
    0xa4,
    0x9a,
    0xe6,
    0x92,
    0xad,
    0xe6,
    0x94,
    0xbe,
    0xe7,
    0xbb,
    0x84,
    0xe7,
    0xbb,
    0x87,
    0xe6,
    0x94,
    0xbf,
    0xe7,
    0xad,
    0x96,
    0xe7,
    0x9b,
    0xb4,
    0xe6,
    0x8e,
    0xa5,
    0xe8,
    0x83,
    0xbd,
    0xe5,
    0x8a,
    0x9b,
    0xe6,
    0x9d,
    0xa5,
    0xe6,
    0xba,
    0x90,
    0xe6,
    0x99,
    0x82,
    0xe9,
    0x96,
    0x93,
    0xe7,
    0x9c,
    0x8b,
    0xe5,
    0x88,
    0xb0,
    0xe7,
    0x83,
    0xad,
    0xe9,
    0x97,
    0xa8,
    0xe5,
    0x85,
    0xb3,
    0xe9,
    0x94,
    0xae,
    0xe4,
    0xb8,
    0x93,
    0xe5,
    0x8c,
    0xba,
    0xe9,
    0x9d,
    0x9e,
    0xe5,
    0xb8,
    0xb8,
    0xe8,
    0x8b,
    0xb1,
    0xe8,
    0xaf,
    0xad,
    0xe7,
    0x99,
    0xbe,
    0xe5,
    0xba,
    0xa6,
    0xe5,
    0xb8,
    0x8c,
    0xe6,
    0x9c,
    0x9b,
    0xe7,
    0xbe,
    0x8e,
    0xe5,
    0xa5,
    0xb3,
    0xe6,
    0xaf,
    0x94,
    0xe8,
    0xbe,
    0x83,
    0xe7,
    0x9f,
    0xa5,
    0xe8,
    0xaf,
    0x86,
    0xe8,
    0xa7,
    0x84,
    0xe5,
    0xae,
    0x9a,
    0xe5,
    0xbb,
    0xba,
    0xe8,
    0xae,
    0xae,
    0xe9,
    0x83,
    0xa8,
    0xe9,
    0x97,
    0xa8,
    0xe6,
    0x84,
    0x8f,
    0xe8,
    0xa7,
    0x81,
    0xe7,
    0xb2,
    0xbe,
    0xe5,
    0xbd,
    0xa9,
    0xe6,
    0x97,
    0xa5,
    0xe6,
    0x9c,
    0xac,
    0xe6,
    0x8f,
    0x90,
    0xe9,
    0xab,
    0x98,
    0xe5,
    0x8f,
    0x91,
    0xe8,
    0xa8,
    0x80,
    0xe6,
    0x96,
    0xb9,
    0xe9,
    0x9d,
    0xa2,
    0xe5,
    0x9f,
    0xba,
    0xe9,
    0x87,
    0x91,
    0xe5,
    0xa4,
    0x84,
    0xe7,
    0x90,
    0x86,
    0xe6,
    0x9d,
    0x83,
    0xe9,
    0x99,
    0x90,
    0xe5,
    0xbd,
    0xb1,
    0xe7,
    0x89,
    0x87,
    0xe9,
    0x93,
    0xb6,
    0xe8,
    0xa1,
    0x8c,
    0xe8,
    0xbf,
    0x98,
    0xe6,
    0x9c,
    0x89,
    0xe5,
    0x88,
    0x86,
    0xe4,
    0xba,
    0xab,
    0xe7,
    0x89,
    0xa9,
    0xe5,
    0x93,
    0x81,
    0xe7,
    0xbb,
    0x8f,
    0xe8,
    0x90,
    0xa5,
    0xe6,
    0xb7,
    0xbb,
    0xe5,
    0x8a,
    0xa0,
    0xe4,
    0xb8,
    0x93,
    0xe5,
    0xae,
    0xb6,
    0xe8,
    0xbf,
    0x99,
    0xe7,
    0xa7,
    0x8d,
    0xe8,
    0xaf,
    0x9d,
    0xe9,
    0xa2,
    0x98,
    0xe8,
    0xb5,
    0xb7,
    0xe6,
    0x9d,
    0xa5,
    0xe4,
    0xb8,
    0x9a,
    0xe5,
    0x8a,
    0xa1,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0x91,
    0x8a,
    0xe8,
    0xae,
    0xb0,
    0xe5,
    0xbd,
    0x95,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbb,
    0x8b,
    0xe8,
    0xb4,
    0xa8,
    0xe9,
    0x87,
    0x8f,
    0xe7,
    0x94,
    0xb7,
    0xe4,
    0xba,
    0xba,
    0xe5,
    0xbd,
    0xb1,
    0xe5,
    0x93,
    0x8d,
    0xe5,
    0xbc,
    0x95,
    0xe7,
    0x94,
    0xa8,
    0xe6,
    0x8a,
    0xa5,
    0xe5,
    0x91,
    0x8a,
    0xe9,
    0x83,
    0xa8,
    0xe5,
    0x88,
    0x86,
    0xe5,
    0xbf,
    0xab,
    0xe9,
    0x80,
    0x9f,
    0xe5,
    0x92,
    0xa8,
    0xe8,
    0xaf,
    0xa2,
    0xe6,
    0x97,
    0xb6,
    0xe5,
    0xb0,
    0x9a,
    0xe6,
    0xb3,
    0xa8,
    0xe6,
    0x84,
    0x8f,
    0xe7,
    0x94,
    0xb3,
    0xe8,
    0xaf,
    0xb7,
    0xe5,
    0xad,
    0xa6,
    0xe6,
    0xa0,
    0xa1,
    0xe5,
    0xba,
    0x94,
    0xe8,
    0xaf,
    0xa5,
    0xe5,
    0x8e,
    0x86,
    0xe5,
    0x8f,
    0xb2,
    0xe5,
    0x8f,
    0xaa,
    0xe6,
    0x98,
    0xaf,
    0xe8,
    0xbf,
    0x94,
    0xe5,
    0x9b,
    0x9e,
    0xe8,
    0xb4,
    0xad,
    0xe4,
    0xb9,
    0xb0,
    0xe5,
    0x90,
    0x8d,
    0xe7,
    0xa7,
    0xb0,
    0xe4,
    0xb8,
    0xba,
    0xe4,
    0xba,
    0x86,
    0xe6,
    0x88,
    0x90,
    0xe5,
    0x8a,
    0x9f,
    0xe8,
    0xaf,
    0xb4,
    0xe6,
    0x98,
    0x8e,
    0xe4,
    0xbe,
    0x9b,
    0xe5,
    0xba,
    0x94,
    0xe5,
    0xad,
    0xa9,
    0xe5,
    0xad,
    0x90,
    0xe4,
    0xb8,
    0x93,
    0xe9,
    0xa2,
    0x98,
    0xe7,
    0xa8,
    0x8b,
    0xe5,
    0xba,
    0x8f,
    0xe4,
    0xb8,
    0x80,
    0xe8,
    0x88,
    0xac,
    0xe6,
    0x9c,
    0x83,
    0xe5,
    0x93,
    0xa1,
    0xe5,
    0x8f,
    0xaa,
    0xe6,
    0x9c,
    0x89,
    0xe5,
    0x85,
    0xb6,
    0xe5,
    0xae,
    0x83,
    0xe4,
    0xbf,
    0x9d,
    0xe6,
    0x8a,
    0xa4,
    0xe8,
    0x80,
    0x8c,
    0xe4,
    0xb8,
    0x94,
    0xe4,
    0xbb,
    0x8a,
    0xe5,
    0xa4,
    0xa9,
    0xe7,
    0xaa,
    0x97,
    0xe5,
    0x8f,
    0xa3,
    0xe5,
    0x8a,
    0xa8,
    0xe6,
    0x80,
    0x81,
    0xe7,
    0x8a,
    0xb6,
    0xe6,
    0x80,
    0x81,
    0xe7,
    0x89,
    0xb9,
    0xe5,
    0x88,
    0xab,
    0xe8,
    0xae,
    0xa4,
    0xe4,
    0xb8,
    0xba,
    0xe5,
    0xbf,
    0x85,
    0xe9,
    0xa1,
    0xbb,
    0xe6,
    0x9b,
    0xb4,
    0xe6,
    0x96,
    0xb0,
    0xe5,
    0xb0,
    0x8f,
    0xe8,
    0xaf,
    0xb4,
    0xe6,
    0x88,
    0x91,
    0xe5,
    0x80,
    0x91,
    0xe4,
    0xbd,
    0x9c,
    0xe4,
    0xb8,
    0xba,
    0xe5,
    0xaa,
    0x92,
    0xe4,
    0xbd,
    0x93,
    0xe5,
    0x8c,
    0x85,
    0xe6,
    0x8b,
    0xac,
    0xe9,
    0x82,
    0xa3,
    0xe4,
    0xb9,
    0x88,
    0xe4,
    0xb8,
    0x80,
    0xe6,
    0xa0,
    0xb7,
    0xe5,
    0x9b,
    0xbd,
    0xe5,
    0x86,
    0x85,
    0xe6,
    0x98,
    0xaf,
    0xe5,
    0x90,
    0xa6,
    0xe6,
    0xa0,
    0xb9,
    0xe6,
    0x8d,
    0xae,
    0xe7,
    0x94,
    0xb5,
    0xe8,
    0xa7,
    0x86,
    0xe5,
    0xad,
    0xa6,
    0xe9,
    0x99,
    0xa2,
    0xe5,
    0x85,
    0xb7,
    0xe6,
    0x9c,
    0x89,
    0xe8,
    0xbf,
    0x87,
    0xe7,
    0xa8,
    0x8b,
    0xe7,
    0x94,
    0xb1,
    0xe4,
    0xba,
    0x8e,
    0xe4,
    0xba,
    0xba,
    0xe6,
    0x89,
    0x8d,
    0xe5,
    0x87,
    0xba,
    0xe6,
    0x9d,
    0xa5,
    0xe4,
    0xb8,
    0x8d,
    0xe8,
    0xbf,
    0x87,
    0xe6,
    0xad,
    0xa3,
    0xe5,
    0x9c,
    0xa8,
    0xe6,
    0x98,
    0x8e,
    0xe6,
    0x98,
    0x9f,
    0xe6,
    0x95,
    0x85,
    0xe4,
    0xba,
    0x8b,
    0xe5,
    0x85,
    0xb3,
    0xe7,
    0xb3,
    0xbb,
    0xe6,
    0xa0,
    0x87,
    0xe9,
    0xa2,
    0x98,
    0xe5,
    0x95,
    0x86,
    0xe5,
    0x8a,
    0xa1,
    0xe8,
    0xbe,
    0x93,
    0xe5,
    0x85,
    0xa5,
    0xe4,
    0xb8,
    0x80,
    0xe7,
    0x9b,
    0xb4,
    0xe5,
    0x9f,
    0xba,
    0xe7,
    0xa1,
    0x80,
    0xe6,
    0x95,
    0x99,
    0xe5,
    0xad,
    0xa6,
    0xe4,
    0xba,
    0x86,
    0xe8,
    0xa7,
    0xa3,
    0xe5,
    0xbb,
    0xba,
    0xe7,
    0xad,
    0x91,
    0xe7,
    0xbb,
    0x93,
    0xe6,
    0x9e,
    0x9c,
    0xe5,
    0x85,
    0xa8,
    0xe7,
    0x90,
    0x83,
    0xe9,
    0x80,
    0x9a,
    0xe7,
    0x9f,
    0xa5,
    0xe8,
    0xae,
    0xa1,
    0xe5,
    0x88,
    0x92,
    0xe5,
    0xaf,
    0xb9,
    0xe4,
    0xba,
    0x8e,
    0xe8,
    0x89,
    0xba,
    0xe6,
    0x9c,
    0xaf,
    0xe7,
    0x9b,
    0xb8,
    0xe5,
    0x86,
    0x8c,
    0xe5,
    0x8f,
    0x91,
    0xe7,
    0x94,
    0x9f,
    0xe7,
    0x9c,
    0x9f,
    0xe7,
    0x9a,
    0x84,
    0xe5,
    0xbb,
    0xba,
    0xe7,
    0xab,
    0x8b,
    0xe7,
    0xad,
    0x89,
    0xe7,
    0xba,
    0xa7,
    0xe7,
    0xb1,
    0xbb,
    0xe5,
    0x9e,
    0x8b,
    0xe7,
    0xbb,
    0x8f,
    0xe9,
    0xaa,
    0x8c,
    0xe5,
    0xae,
    0x9e,
    0xe7,
    0x8e,
    0xb0,
    0xe5,
    0x88,
    0xb6,
    0xe4,
    0xbd,
    0x9c,
    0xe6,
    0x9d,
    0xa5,
    0xe8,
    0x87,
    0xaa,
    0xe6,
    0xa0,
    0x87,
    0xe7,
    0xad,
    0xbe,
    0xe4,
    0xbb,
    0xa5,
    0xe4,
    0xb8,
    0x8b,
    0xe5,
    0x8e,
    0x9f,
    0xe5,
    0x88,
    0x9b,
    0xe6,
    0x97,
    0xa0,
    0xe6,
    0xb3,
    0x95,
    0xe5,
    0x85,
    0xb6,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0x80,
    0x8b,
    0xe4,
    0xba,
    0xba,
    0xe4,
    0xb8,
    0x80,
    0xe5,
    0x88,
    0x87,
    0xe6,
    0x8c,
    0x87,
    0xe5,
    0x8d,
    0x97,
    0xe5,
    0x85,
    0xb3,
    0xe9,
    0x97,
    0xad,
    0xe9,
    0x9b,
    0x86,
    0xe5,
    0x9b,
    0xa2,
    0xe7,
    0xac,
    0xac,
    0xe4,
    0xb8,
    0x89,
    0xe5,
    0x85,
    0xb3,
    0xe6,
    0xb3,
    0xa8,
    0xe5,
    0x9b,
    0xa0,
    0xe6,
    0xad,
    0xa4,
    0xe7,
    0x85,
    0xa7,
    0xe7,
    0x89,
    0x87,
    0xe6,
    0xb7,
    0xb1,
    0xe5,
    0x9c,
    0xb3,
    0xe5,
    0x95,
    0x86,
    0xe4,
    0xb8,
    0x9a,
    0xe5,
    0xb9,
    0xbf,
    0xe5,
    0xb7,
    0x9e,
    0xe6,
    0x97,
    0xa5,
    0xe6,
    0x9c,
    0x9f,
    0xe9,
    0xab,
    0x98,
    0xe7,
    0xba,
    0xa7,
    0xe6,
    0x9c,
    0x80,
    0xe8,
    0xbf,
    0x91,
    0xe7,
    0xbb,
    0xbc,
    0xe5,
    0x90,
    0x88,
    0xe8,
    0xa1,
    0xa8,
    0xe7,
    0xa4,
    0xba,
    0xe4,
    0xb8,
    0x93,
    0xe8,
    0xbe,
    0x91,
    0xe8,
    0xa1,
    0x8c,
    0xe4,
    0xb8,
    0xba,
    0xe4,
    0xba,
    0xa4,
    0xe9,
    0x80,
    0x9a,
    0xe8,
    0xaf,
    0x84,
    0xe4,
    0xbb,
    0xb7,
    0xe8,
    0xa7,
    0x89,
    0xe5,
    0xbe,
    0x97,
    0xe7,
    0xb2,
    0xbe,
    0xe5,
    0x8d,
    0x8e,
    0xe5,
    0xae,
    0xb6,
    0xe5,
    0xba,
    0xad,
    0xe5,
    0xae,
    0x8c,
    0xe6,
    0x88,
    0x90,
    0xe6,
    0x84,
    0x9f,
    0xe8,
    0xa7,
    0x89,
    0xe5,
    0xae,
    0x89,
    0xe8,
    0xa3,
    0x85,
    0xe5,
    0xbe,
    0x97,
    0xe5,
    0x88,
    0xb0,
    0xe9,
    0x82,
    0xae,
    0xe4,
    0xbb,
    0xb6,
    0xe5,
    0x88,
    0xb6,
    0xe5,
    0xba,
    0xa6,
    0xe9,
    0xa3,
    0x9f,
    0xe5,
    0x93,
    0x81,
    0xe8,
    0x99,
    0xbd,
    0xe7,
    0x84,
    0xb6,
    0xe8,
    0xbd,
    0xac,
    0xe8,
    0xbd,
    0xbd,
    0xe6,
    0x8a,
    0xa5,
    0xe4,
    0xbb,
    0xb7,
    0xe8,
    0xae,
    0xb0,
    0xe8,
    0x80,
    0x85,
    0xe6,
    0x96,
    0xb9,
    0xe6,
    0xa1,
    0x88,
    0xe8,
    0xa1,
    0x8c,
    0xe6,
    0x94,
    0xbf,
    0xe4,
    0xba,
    0xba,
    0xe6,
    0xb0,
    0x91,
    0xe7,
    0x94,
    0xa8,
    0xe5,
    0x93,
    0x81,
    0xe4,
    0xb8,
    0x9c,
    0xe8,
    0xa5,
    0xbf,
    0xe6,
    0x8f,
    0x90,
    0xe5,
    0x87,
    0xba,
    0xe9,
    0x85,
    0x92,
    0xe5,
    0xba,
    0x97,
    0xe7,
    0x84,
    0xb6,
    0xe5,
    0x90,
    0x8e,
    0xe4,
    0xbb,
    0x98,
    0xe6,
    0xac,
    0xbe,
    0xe7,
    0x83,
    0xad,
    0xe7,
    0x82,
    0xb9,
    0xe4,
    0xbb,
    0xa5,
    0xe5,
    0x89,
    0x8d,
    0xe5,
    0xae,
    0x8c,
    0xe5,
    0x85,
    0xa8,
    0xe5,
    0x8f,
    0x91,
    0xe5,
    0xb8,
    0x96,
    0xe8,
    0xae,
    0xbe,
    0xe7,
    0xbd,
    0xae,
    0xe9,
    0xa2,
    0x86,
    0xe5,
    0xaf,
    0xbc,
    0xe5,
    0xb7,
    0xa5,
    0xe4,
    0xb8,
    0x9a,
    0xe5,
    0x8c,
    0xbb,
    0xe9,
    0x99,
    0xa2,
    0xe7,
    0x9c,
    0x8b,
    0xe7,
    0x9c,
    0x8b,
    0xe7,
    0xbb,
    0x8f,
    0xe5,
    0x85,
    0xb8,
    0xe5,
    0x8e,
    0x9f,
    0xe5,
    0x9b,
    0xa0,
    0xe5,
    0xb9,
    0xb3,
    0xe5,
    0x8f,
    0xb0,
    0xe5,
    0x90,
    0x84,
    0xe7,
    0xa7,
    0x8d,
    0xe5,
    0xa2,
    0x9e,
    0xe5,
    0x8a,
    0xa0,
    0xe6,
    0x9d,
    0x90,
    0xe6,
    0x96,
    0x99,
    0xe6,
    0x96,
    0xb0,
    0xe5,
    0xa2,
    0x9e,
    0xe4,
    0xb9,
    0x8b,
    0xe5,
    0x90,
    0x8e,
    0xe8,
    0x81,
    0x8c,
    0xe4,
    0xb8,
    0x9a,
    0xe6,
    0x95,
    0x88,
    0xe6,
    0x9e,
    0x9c,
    0xe4,
    0xbb,
    0x8a,
    0xe5,
    0xb9,
    0xb4,
    0xe8,
    0xae,
    0xba,
    0xe6,
    0x96,
    0x87,
    0xe6,
    0x88,
    0x91,
    0xe5,
    0x9b,
    0xbd,
    0xe5,
    0x91,
    0x8a,
    0xe8,
    0xaf,
    0x89,
    0xe7,
    0x89,
    0x88,
    0xe4,
    0xb8,
    0xbb,
    0xe4,
    0xbf,
    0xae,
    0xe6,
    0x94,
    0xb9,
    0xe5,
    0x8f,
    0x82,
    0xe4,
    0xb8,
    0x8e,
    0xe6,
    0x89,
    0x93,
    0xe5,
    0x8d,
    0xb0,
    0xe5,
    0xbf,
    0xab,
    0xe4,
    0xb9,
    0x90,
    0xe6,
    0x9c,
    0xba,
    0xe6,
    0xa2,
    0xb0,
    0xe8,
    0xa7,
    0x82,
    0xe7,
    0x82,
    0xb9,
    0xe5,
    0xad,
    0x98,
    0xe5,
    0x9c,
    0xa8,
    0xe7,
    0xb2,
    0xbe,
    0xe7,
    0xa5,
    0x9e,
    0xe8,
    0x8e,
    0xb7,
    0xe5,
    0xbe,
    0x97,
    0xe5,
    0x88,
    0xa9,
    0xe7,
    0x94,
    0xa8,
    0xe7,
    0xbb,
    0xa7,
    0xe7,
    0xbb,
    0xad,
    0xe4,
    0xbd,
    0xa0,
    0xe4,
    0xbb,
    0xac,
    0xe8,
    0xbf,
    0x99,
    0xe4,
    0xb9,
    0x88,
    0xe6,
    0xa8,
    0xa1,
    0xe5,
    0xbc,
    0x8f,
    0xe8,
    0xaf,
    0xad,
    0xe8,
    0xa8,
    0x80,
    0xe8,
    0x83,
    0xbd,
    0xe5,
    0xa4,
    0x9f,
    0xe9,
    0x9b,
    0x85,
    0xe8,
    0x99,
    0x8e,
    0xe6,
    0x93,
    0x8d,
    0xe4,
    0xbd,
    0x9c,
    0xe9,
    0xa3,
    0x8e,
    0xe6,
    0xa0,
    0xbc,
    0xe4,
    0xb8,
    0x80,
    0xe8,
    0xb5,
    0xb7,
    0xe7,
    0xa7,
    0x91,
    0xe5,
    0xad,
    0xa6,
    0xe4,
    0xbd,
    0x93,
    0xe8,
    0x82,
    0xb2,
    0xe7,
    0x9f,
    0xad,
    0xe4,
    0xbf,
    0xa1,
    0xe6,
    0x9d,
    0xa1,
    0xe4,
    0xbb,
    0xb6,
    0xe6,
    0xb2,
    0xbb,
    0xe7,
    0x96,
    0x97,
    0xe8,
    0xbf,
    0x90,
    0xe5,
    0x8a,
    0xa8,
    0xe4,
    0xba,
    0xa7,
    0xe4,
    0xb8,
    0x9a,
    0xe4,
    0xbc,
    0x9a,
    0xe8,
    0xae,
    0xae,
    0xe5,
    0xaf,
    0xbc,
    0xe8,
    0x88,
    0xaa,
    0xe5,
    0x85,
    0x88,
    0xe7,
    0x94,
    0x9f,
    0xe8,
    0x81,
    0x94,
    0xe7,
    0x9b,
    0x9f,
    0xe5,
    0x8f,
    0xaf,
    0xe6,
    0x98,
    0xaf,
    0xe5,
    0x95,
    0x8f,
    0xe9,
    0xa1,
    0x8c,
    0xe7,
    0xbb,
    0x93,
    0xe6,
    0x9e,
    0x84,
    0xe4,
    0xbd,
    0x9c,
    0xe7,
    0x94,
    0xa8,
    0xe8,
    0xb0,
    0x83,
    0xe6,
    0x9f,
    0xa5,
    0xe8,
    0xb3,
    0x87,
    0xe6,
    0x96,
    0x99,
    0xe8,
    0x87,
    0xaa,
    0xe5,
    0x8a,
    0xa8,
    0xe8,
    0xb4,
    0x9f,
    0xe8,
    0xb4,
    0xa3,
    0xe5,
    0x86,
    0x9c,
    0xe4,
    0xb8,
    0x9a,
    0xe8,
    0xae,
    0xbf,
    0xe9,
    0x97,
    0xae,
    0xe5,
    0xae,
    0x9e,
    0xe6,
    0x96,
    0xbd,
    0xe6,
    0x8e,
    0xa5,
    0xe5,
    0x8f,
    0x97,
    0xe8,
    0xae,
    0xa8,
    0xe8,
    0xae,
    0xba,
    0xe9,
    0x82,
    0xa3,
    0xe4,
    0xb8,
    0xaa,
    0xe5,
    0x8f,
    0x8d,
    0xe9,
    0xa6,
    0x88,
    0xe5,
    0x8a,
    0xa0,
    0xe5,
    0xbc,
    0xba,
    0xe5,
    0xa5,
    0xb3,
    0xe6,
    0x80,
    0xa7,
    0xe8,
    0x8c,
    0x83,
    0xe5,
    0x9b,
    0xb4,
    0xe6,
    0x9c,
    0x8d,
    0xe5,
    0x8b,
    0x99,
    0xe4,
    0xbc,
    0x91,
    0xe9,
    0x97,
    0xb2,
    0xe4,
    0xbb,
    0x8a,
    0xe6,
    0x97,
    0xa5,
    0xe5,
    0xae,
    0xa2,
    0xe6,
    0x9c,
    0x8d,
    0xe8,
    0xa7,
    0x80,
    0xe7,
    0x9c,
    0x8b,
    0xe5,
    0x8f,
    0x82,
    0xe5,
    0x8a,
    0xa0,
    0xe7,
    0x9a,
    0x84,
    0xe8,
    0xaf,
    0x9d,
    0xe4,
    0xb8,
    0x80,
    0xe7,
    0x82,
    0xb9,
    0xe4,
    0xbf,
    0x9d,
    0xe8,
    0xaf,
    0x81,
    0xe5,
    0x9b,
    0xbe,
    0xe4,
    0xb9,
    0xa6,
    0xe6,
    0x9c,
    0x89,
    0xe6,
    0x95,
    0x88,
    0xe6,
    0xb5,
    0x8b,
    0xe8,
    0xaf,
    0x95,
    0xe7,
    0xa7,
    0xbb,
    0xe5,
    0x8a,
    0xa8,
    0xe6,
    0x89,
    0x8d,
    0xe8,
    0x83,
    0xbd,
    0xe5,
    0x86,
    0xb3,
    0xe5,
    0xae,
    0x9a,
    0xe8,
    0x82,
    0xa1,
    0xe7,
    0xa5,
    0xa8,
    0xe4,
    0xb8,
    0x8d,
    0xe6,
    0x96,
    0xad,
    0xe9,
    0x9c,
    0x80,
    0xe6,
    0xb1,
    0x82,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0xbe,
    0x97,
    0xe5,
    0x8a,
    0x9e,
    0xe6,
    0xb3,
    0x95,
    0xe4,
    0xb9,
    0x8b,
    0xe9,
    0x97,
    0xb4,
    0xe9,
    0x87,
    0x87,
    0xe7,
    0x94,
    0xa8,
    0xe8,
    0x90,
    0xa5,
    0xe9,
    0x94,
    0x80,
    0xe6,
    0x8a,
    0x95,
    0xe8,
    0xaf,
    0x89,
    0xe7,
    0x9b,
    0xae,
    0xe6,
    0xa0,
    0x87,
    0xe7,
    0x88,
    0xb1,
    0xe6,
    0x83,
    0x85,
    0xe6,
    0x91,
    0x84,
    0xe5,
    0xbd,
    0xb1,
    0xe6,
    0x9c,
    0x89,
    0xe4,
    0xba,
    0x9b,
    0xe8,
    0xa4,
    0x87,
    0xe8,
    0xa3,
    0xbd,
    0xe6,
    0x96,
    0x87,
    0xe5,
    0xad,
    0xa6,
    0xe6,
    0x9c,
    0xba,
    0xe4,
    0xbc,
    0x9a,
    0xe6,
    0x95,
    0xb0,
    0xe5,
    0xad,
    0x97,
    0xe8,
    0xa3,
    0x85,
    0xe4,
    0xbf,
    0xae,
    0xe8,
    0xb4,
    0xad,
    0xe7,
    0x89,
    0xa9,
    0xe5,
    0x86,
    0x9c,
    0xe6,
    0x9d,
    0x91,
    0xe5,
    0x85,
    0xa8,
    0xe9,
    0x9d,
    0xa2,
    0xe7,
    0xb2,
    0xbe,
    0xe5,
    0x93,
    0x81,
    0xe5,
    0x85,
    0xb6,
    0xe5,
    0xae,
    0x9e,
    0xe4,
    0xba,
    0x8b,
    0xe6,
    0x83,
    0x85,
    0xe6,
    0xb0,
    0xb4,
    0xe5,
    0xb9,
    0xb3,
    0xe6,
    0x8f,
    0x90,
    0xe7,
    0xa4,
    0xba,
    0xe4,
    0xb8,
    0x8a,
    0xe5,
    0xb8,
    0x82,
    0xe8,
    0xb0,
    0xa2,
    0xe8,
    0xb0,
    0xa2,
    0xe6,
    0x99,
    0xae,
    0xe9,
    0x80,
    0x9a,
    0xe6,
    0x95,
    0x99,
    0xe5,
    0xb8,
    0x88,
    0xe4,
    0xb8,
    0x8a,
    0xe4,
    0xbc,
    0xa0,
    0xe7,
    0xb1,
    0xbb,
    0xe5,
    0x88,
    0xab,
    0xe6,
    0xad,
    0x8c,
    0xe6,
    0x9b,
    0xb2,
    0xe6,
    0x8b,
    0xa5,
    0xe6,
    0x9c,
    0x89,
    0xe5,
    0x88,
    0x9b,
    0xe6,
    0x96,
    0xb0,
    0xe9,
    0x85,
    0x8d,
    0xe4,
    0xbb,
    0xb6,
    0xe5,
    0x8f,
    0xaa,
    0xe8,
    0xa6,
    0x81,
    0xe6,
    0x97,
    0xb6,
    0xe4,
    0xbb,
    0xa3,
    0xe8,
    0xb3,
    0x87,
    0xe8,
    0xa8,
    0x8a,
    0xe8,
    0xbe,
    0xbe,
    0xe5,
    0x88,
    0xb0,
    0xe4,
    0xba,
    0xba,
    0xe7,
    0x94,
    0x9f,
    0xe8,
    0xae,
    0xa2,
    0xe9,
    0x98,
    0x85,
    0xe8,
    0x80,
    0x81,
    0xe5,
    0xb8,
    0x88,
    0xe5,
    0xb1,
    0x95,
    0xe7,
    0xa4,
    0xba,
    0xe5,
    0xbf,
    0x83,
    0xe7,
    0x90,
    0x86,
    0xe8,
    0xb4,
    0xb4,
    0xe5,
    0xad,
    0x90,
    0xe7,
    0xb6,
    0xb2,
    0xe7,
    0xab,
    0x99,
    0xe4,
    0xb8,
    0xbb,
    0xe9,
    0xa1,
    0x8c,
    0xe8,
    0x87,
    0xaa,
    0xe7,
    0x84,
    0xb6,
    0xe7,
    0xba,
    0xa7,
    0xe5,
    0x88,
    0xab,
    0xe7,
    0xae,
    0x80,
    0xe5,
    0x8d,
    0x95,
    0xe6,
    0x94,
    0xb9,
    0xe9,
    0x9d,
    0xa9,
    0xe9,
    0x82,
    0xa3,
    0xe4,
    0xba,
    0x9b,
    0xe6,
    0x9d,
    0xa5,
    0xe8,
    0xaf,
    0xb4,
    0xe6,
    0x89,
    0x93,
    0xe5,
    0xbc,
    0x80,
    0xe4,
    0xbb,
    0xa3,
    0xe7,
    0xa0,
    0x81,
    0xe5,
    0x88,
    0xa0,
    0xe9,
    0x99,
    0xa4,
    0xe8,
    0xaf,
    0x81,
    0xe5,
    0x88,
    0xb8,
    0xe8,
    0x8a,
    0x82,
    0xe7,
    0x9b,
    0xae,
    0xe9,
    0x87,
    0x8d,
    0xe7,
    0x82,
    0xb9,
    0xe6,
    0xac,
    0xa1,
    0xe6,
    0x95,
    0xb8,
    0xe5,
    0xa4,
    0x9a,
    0xe5,
    0xb0,
    0x91,
    0xe8,
    0xa7,
    0x84,
    0xe5,
    0x88,
    0x92,
    0xe8,
    0xb5,
    0x84,
    0xe9,
    0x87,
    0x91,
    0xe6,
    0x89,
    0xbe,
    0xe5,
    0x88,
    0xb0,
    0xe4,
    0xbb,
    0xa5,
    0xe5,
    0x90,
    0x8e,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0x85,
    0xa8,
    0xe4,
    0xb8,
    0xbb,
    0xe9,
    0xa1,
    0xb5,
    0xe6,
    0x9c,
    0x80,
    0xe4,
    0xbd,
    0xb3,
    0xe5,
    0x9b,
    0x9e,
    0xe7,
    0xad,
    0x94,
    0xe5,
    0xa4,
    0xa9,
    0xe4,
    0xb8,
    0x8b,
    0xe4,
    0xbf,
    0x9d,
    0xe9,
    0x9a,
    0x9c,
    0xe7,
    0x8e,
    0xb0,
    0xe4,
    0xbb,
    0xa3,
    0xe6,
    0xa3,
    0x80,
    0xe6,
    0x9f,
    0xa5,
    0xe6,
    0x8a,
    0x95,
    0xe7,
    0xa5,
    0xa8,
    0xe5,
    0xb0,
    0x8f,
    0xe6,
    0x97,
    0xb6,
    0xe6,
    0xb2,
    0x92,
    0xe6,
    0x9c,
    0x89,
    0xe6,
    0xad,
    0xa3,
    0xe5,
    0xb8,
    0xb8,
    0xe7,
    0x94,
    0x9a,
    0xe8,
    0x87,
    0xb3,
    0xe4,
    0xbb,
    0xa3,
    0xe7,
    0x90,
    0x86,
    0xe7,
    0x9b,
    0xae,
    0xe5,
    0xbd,
    0x95,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0xbc,
    0x80,
    0xe5,
    0xa4,
    0x8d,
    0xe5,
    0x88,
    0xb6,
    0xe9,
    0x87,
    0x91,
    0xe8,
    0x9e,
    0x8d,
    0xe5,
    0xb9,
    0xb8,
    0xe7,
    0xa6,
    0x8f,
    0xe7,
    0x89,
    0x88,
    0xe6,
    0x9c,
    0xac,
    0xe5,
    0xbd,
    0xa2,
    0xe6,
    0x88,
    0x90,
    0xe5,
    0x87,
    0x86,
    0xe5,
    0xa4,
    0x87,
    0xe8,
    0xa1,
    0x8c,
    0xe6,
    0x83,
    0x85,
    0xe5,
    0x9b,
    0x9e,
    0xe5,
    0x88,
    0xb0,
    0xe6,
    0x80,
    0x9d,
    0xe6,
    0x83,
    0xb3,
    0xe6,
    0x80,
    0x8e,
    0xe6,
    0xa0,
    0xb7,
    0xe5,
    0x8d,
    0x8f,
    0xe8,
    0xae,
    0xae,
    0xe8,
    0xae,
    0xa4,
    0xe8,
    0xaf,
    0x81,
    0xe6,
    0x9c,
    0x80,
    0xe5,
    0xa5,
    0xbd,
    0xe4,
    0xba,
    0xa7,
    0xe7,
    0x94,
    0x9f,
    0xe6,
    0x8c,
    0x89,
    0xe7,
    0x85,
    0xa7,
    0xe6,
    0x9c,
    0x8d,
    0xe8,
    0xa3,
    0x85,
    0xe5,
    0xb9,
    0xbf,
    0xe4,
    0xb8,
    0x9c,
    0xe5,
    0x8a,
    0xa8,
    0xe6,
    0xbc,
    0xab,
    0xe9,
    0x87,
    0x87,
    0xe8,
    0xb4,
    0xad,
    0xe6,
    0x96,
    0xb0,
    0xe6,
    0x89,
    0x8b,
    0xe7,
    0xbb,
    0x84,
    0xe5,
    0x9b,
    0xbe,
    0xe9,
    0x9d,
    0xa2,
    0xe6,
    0x9d,
    0xbf,
    0xe5,
    0x8f,
    0x82,
    0xe8,
    0x80,
    0x83,
    0xe6,
    0x94,
    0xbf,
    0xe6,
    0xb2,
    0xbb,
    0xe5,
    0xae,
    0xb9,
    0xe6,
    0x98,
    0x93,
    0xe5,
    0xa4,
    0xa9,
    0xe5,
    0x9c,
    0xb0,
    0xe5,
    0x8a,
    0xaa,
    0xe5,
    0x8a,
    0x9b,
    0xe4,
    0xba,
    0xba,
    0xe4,
    0xbb,
    0xac,
    0xe5,
    0x8d,
    0x87,
    0xe7,
    0xba,
    0xa7,
    0xe9,
    0x80,
    0x9f,
    0xe5,
    0xba,
    0xa6,
    0xe4,
    0xba,
    0xba,
    0xe7,
    0x89,
    0xa9,
    0xe8,
    0xb0,
    0x83,
    0xe6,
    0x95,
    0xb4,
    0xe6,
    0xb5,
    0x81,
    0xe8,
    0xa1,
    0x8c,
    0xe9,
    0x80,
    0xa0,
    0xe6,
    0x88,
    0x90,
    0xe6,
    0x96,
    0x87,
    0xe5,
    0xad,
    0x97,
    0xe9,
    0x9f,
    0xa9,
    0xe5,
    0x9b,
    0xbd,
    0xe8,
    0xb4,
    0xb8,
    0xe6,
    0x98,
    0x93,
    0xe5,
    0xbc,
    0x80,
    0xe5,
    0xb1,
    0x95,
    0xe7,
    0x9b,
    0xb8,
    0xe9,
    0x97,
    0x9c,
    0xe8,
    0xa1,
    0xa8,
    0xe7,
    0x8e,
    0xb0,
    0xe5,
    0xbd,
    0xb1,
    0xe8,
    0xa7,
    0x86,
    0xe5,
    0xa6,
    0x82,
    0xe6,
    0xad,
    0xa4,
    0xe7,
    0xbe,
    0x8e,
    0xe5,
    0xae,
    0xb9,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0xb0,
    0x8f,
    0xe6,
    0x8a,
    0xa5,
    0xe9,
    0x81,
    0x93,
    0xe6,
    0x9d,
    0xa1,
    0xe6,
    0xac,
    0xbe,
    0xe5,
    0xbf,
    0x83,
    0xe6,
    0x83,
    0x85,
    0xe8,
    0xae,
    0xb8,
    0xe5,
    0xa4,
    0x9a,
    0xe6,
    0xb3,
    0x95,
    0xe8,
    0xa7,
    0x84,
    0xe5,
    0xae,
    0xb6,
    0xe5,
    0xb1,
    0x85,
    0xe4,
    0xb9,
    0xa6,
    0xe5,
    0xba,
    0x97,
    0xe8,
    0xbf,
    0x9e,
    0xe6,
    0x8e,
    0xa5,
    0xe7,
    0xab,
    0x8b,
    0xe5,
    0x8d,
    0xb3,
    0xe4,
    0xb8,
    0xbe,
    0xe6,
    0x8a,
    0xa5,
    0xe6,
    0x8a,
    0x80,
    0xe5,
    0xb7,
    0xa7,
    0xe5,
    0xa5,
    0xa5,
    0xe8,
    0xbf,
    0x90,
    0xe7,
    0x99,
    0xbb,
    0xe5,
    0x85,
    0xa5,
    0xe4,
    0xbb,
    0xa5,
    0xe6,
    0x9d,
    0xa5,
    0xe7,
    0x90,
    0x86,
    0xe8,
    0xae,
    0xba,
    0xe4,
    0xba,
    0x8b,
    0xe4,
    0xbb,
    0xb6,
    0xe8,
    0x87,
    0xaa,
    0xe7,
    0x94,
    0xb1,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0x8d,
    0x8e,
    0xe5,
    0x8a,
    0x9e,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0xa6,
    0x88,
    0xe5,
    0xa6,
    0x88,
    0xe7,
    0x9c,
    0x9f,
    0xe6,
    0xad,
    0xa3,
    0xe4,
    0xb8,
    0x8d,
    0xe9,
    0x94,
    0x99,
    0xe5,
    0x85,
    0xa8,
    0xe6,
    0x96,
    0x87,
    0xe5,
    0x90,
    0x88,
    0xe5,
    0x90,
    0x8c,
    0xe4,
    0xbb,
    0xb7,
    0xe5,
    0x80,
    0xbc,
    0xe5,
    0x88,
    0xab,
    0xe4,
    0xba,
    0xba,
    0xe7,
    0x9b,
    0x91,
    0xe7,
    0x9d,
    0xa3,
    0xe5,
    0x85,
    0xb7,
    0xe4,
    0xbd,
    0x93,
    0xe4,
    0xb8,
    0x96,
    0xe7,
    0xba,
    0xaa,
    0xe5,
    0x9b,
    0xa2,
    0xe9,
    0x98,
    0x9f,
    0xe5,
    0x88,
    0x9b,
    0xe4,
    0xb8,
    0x9a,
    0xe6,
    0x89,
    0xbf,
    0xe6,
    0x8b,
    0x85,
    0xe5,
    0xa2,
    0x9e,
    0xe9,
    0x95,
    0xbf,
    0xe6,
    0x9c,
    0x89,
    0xe4,
    0xba,
    0xba,
    0xe4,
    0xbf,
    0x9d,
    0xe6,
    0x8c,
    0x81,
    0xe5,
    0x95,
    0x86,
    0xe5,
    0xae,
    0xb6,
    0xe7,
    0xbb,
    0xb4,
    0xe4,
    0xbf,
    0xae,
    0xe5,
    0x8f,
    0xb0,
    0xe6,
    0xb9,
    0xbe,
    0xe5,
    0xb7,
    0xa6,
    0xe5,
    0x8f,
    0xb3,
    0xe8,
    0x82,
    0xa1,
    0xe4,
    0xbb,
    0xbd,
    0xe7,
    0xad,
    0x94,
    0xe6,
    0xa1,
    0x88,
    0xe5,
    0xae,
    0x9e,
    0xe9,
    0x99,
    0x85,
    0xe7,
    0x94,
    0xb5,
    0xe4,
    0xbf,
    0xa1,
    0xe7,
    0xbb,
    0x8f,
    0xe7,
    0x90,
    0x86,
    0xe7,
    0x94,
    0x9f,
    0xe5,
    0x91,
    0xbd,
    0xe5,
    0xae,
    0xa3,
    0xe4,
    0xbc,
    0xa0,
    0xe4,
    0xbb,
    0xbb,
    0xe5,
    0x8a,
    0xa1,
    0xe6,
    0xad,
    0xa3,
    0xe5,
    0xbc,
    0x8f,
    0xe7,
    0x89,
    0xb9,
    0xe8,
    0x89,
    0xb2,
    0xe4,
    0xb8,
    0x8b,
    0xe6,
    0x9d,
    0xa5,
    0xe5,
    0x8d,
    0x8f,
    0xe4,
    0xbc,
    0x9a,
    0xe5,
    0x8f,
    0xaa,
    0xe8,
    0x83,
    0xbd,
    0xe5,
    0xbd,
    0x93,
    0xe7,
    0x84,
    0xb6,
    0xe9,
    0x87,
    0x8d,
    0xe6,
    0x96,
    0xb0,
    0xe5,
    0x85,
    0xa7,
    0xe5,
    0xae,
    0xb9,
    0xe6,
    0x8c,
    0x87,
    0xe5,
    0xaf,
    0xbc,
    0xe8,
    0xbf,
    0x90,
    0xe8,
    0xa1,
    0x8c,
    0xe6,
    0x97,
    0xa5,
    0xe5,
    0xbf,
    0x97,
    0xe8,
    0xb3,
    0xa3,
    0xe5,
    0xae,
    0xb6,
    0xe8,
    0xb6,
    0x85,
    0xe8,
    0xbf,
    0x87,
    0xe5,
    0x9c,
    0x9f,
    0xe5,
    0x9c,
    0xb0,
    0xe6,
    0xb5,
    0x99,
    0xe6,
    0xb1,
    0x9f,
    0xe6,
    0x94,
    0xaf,
    0xe4,
    0xbb,
    0x98,
    0xe6,
    0x8e,
    0xa8,
    0xe5,
    0x87,
    0xba,
    0xe7,
    0xab,
    0x99,
    0xe9,
    0x95,
    0xbf,
    0xe6,
    0x9d,
    0xad,
    0xe5,
    0xb7,
    0x9e,
    0xe6,
    0x89,
    0xa7,
    0xe8,
    0xa1,
    0x8c,
    0xe5,
    0x88,
    0xb6,
    0xe9,
    0x80,
    0xa0,
    0xe4,
    0xb9,
    0x8b,
    0xe4,
    0xb8,
    0x80,
    0xe6,
    0x8e,
    0xa8,
    0xe5,
    0xb9,
    0xbf,
    0xe7,
    0x8e,
    0xb0,
    0xe5,
    0x9c,
    0xba,
    0xe6,
    0x8f,
    0x8f,
    0xe8,
    0xbf,
    0xb0,
    0xe5,
    0x8f,
    0x98,
    0xe5,
    0x8c,
    0x96,
    0xe4,
    0xbc,
    0xa0,
    0xe7,
    0xbb,
    0x9f,
    0xe6,
    0xad,
    0x8c,
    0xe6,
    0x89,
    0x8b,
    0xe4,
    0xbf,
    0x9d,
    0xe9,
    0x99,
    0xa9,
    0xe8,
    0xaf,
    0xbe,
    0xe7,
    0xa8,
    0x8b,
    0xe5,
    0x8c,
    0xbb,
    0xe7,
    0x96,
    0x97,
    0xe7,
    0xbb,
    0x8f,
    0xe8,
    0xbf,
    0x87,
    0xe8,
    0xbf,
    0x87,
    0xe5,
    0x8e,
    0xbb,
    0xe4,
    0xb9,
    0x8b,
    0xe5,
    0x89,
    0x8d,
    0xe6,
    0x94,
    0xb6,
    0xe5,
    0x85,
    0xa5,
    0xe5,
    0xb9,
    0xb4,
    0xe5,
    0xba,
    0xa6,
    0xe6,
    0x9d,
    0x82,
    0xe5,
    0xbf,
    0x97,
    0xe7,
    0xbe,
    0x8e,
    0xe4,
    0xb8,
    0xbd,
    0xe6,
    0x9c,
    0x80,
    0xe9,
    0xab,
    0x98,
    0xe7,
    0x99,
    0xbb,
    0xe9,
    0x99,
    0x86,
    0xe6,
    0x9c,
    0xaa,
    0xe6,
    0x9d,
    0xa5,
    0xe5,
    0x8a,
    0xa0,
    0xe5,
    0xb7,
    0xa5,
    0xe5,
    0x85,
    0x8d,
    0xe8,
    0xb4,
    0xa3,
    0xe6,
    0x95,
    0x99,
    0xe7,
    0xa8,
    0x8b,
    0xe7,
    0x89,
    0x88,
    0xe5,
    0x9d,
    0x97,
    0xe8,
    0xba,
    0xab,
    0xe4,
    0xbd,
    0x93,
    0xe9,
    0x87,
    0x8d,
    0xe5,
    0xba,
    0x86,
    0xe5,
    0x87,
    0xba,
    0xe5,
    0x94,
    0xae,
    0xe6,
    0x88,
    0x90,
    0xe6,
    0x9c,
    0xac,
    0xe5,
    0xbd,
    0xa2,
    0xe5,
    0xbc,
    0x8f,
    0xe5,
    0x9c,
    0x9f,
    0xe8,
    0xb1,
    0x86,
    0xe5,
    0x87,
    0xba,
    0xe5,
    0x83,
    0xb9,
    0xe4,
    0xb8,
    0x9c,
    0xe6,
    0x96,
    0xb9,
    0xe9,
    0x82,
    0xae,
    0xe7,
    0xae,
    0xb1,
    0xe5,
    0x8d,
    0x97,
    0xe4,
    0xba,
    0xac,
    0xe6,
    0xb1,
    0x82,
    0xe8,
    0x81,
    0x8c,
    0xe5,
    0x8f,
    0x96,
    0xe5,
    0xbe,
    0x97,
    0xe8,
    0x81,
    0x8c,
    0xe4,
    0xbd,
    0x8d,
    0xe7,
    0x9b,
    0xb8,
    0xe4,
    0xbf,
    0xa1,
    0xe9,
    0xa1,
    0xb5,
    0xe9,
    0x9d,
    0xa2,
    0xe5,
    0x88,
    0x86,
    0xe9,
    0x92,
    0x9f,
    0xe7,
    0xbd,
    0x91,
    0xe9,
    0xa1,
    0xb5,
    0xe7,
    0xa1,
    0xae,
    0xe5,
    0xae,
    0x9a,
    0xe5,
    0x9b,
    0xbe,
    0xe4,
    0xbe,
    0x8b,
    0xe7,
    0xbd,
    0x91,
    0xe5,
    0x9d,
    0x80,
    0xe7,
    0xa7,
    0xaf,
    0xe6,
    0x9e,
    0x81,
    0xe9,
    0x94,
    0x99,
    0xe8,
    0xaf,
    0xaf,
    0xe7,
    0x9b,
    0xae,
    0xe7,
    0x9a,
    0x84,
    0xe5,
    0xae,
    0x9d,
    0xe8,
    0xb4,
    0x9d,
    0xe6,
    0x9c,
    0xba,
    0xe5,
    0x85,
    0xb3,
    0xe9,
    0xa3,
    0x8e,
    0xe9,
    0x99,
    0xa9,
    0xe6,
    0x8e,
    0x88,
    0xe6,
    0x9d,
    0x83,
    0xe7,
    0x97,
    0x85,
    0xe6,
    0xaf,
    0x92,
    0xe5,
    0xae,
    0xa0,
    0xe7,
    0x89,
    0xa9,
    0xe9,
    0x99,
    0xa4,
    0xe4,
    0xba,
    0x86,
    0xe8,
    0xa9,
    0x95,
    0xe8,
    0xab,
    0x96,
    0xe7,
    0x96,
    0xbe,
    0xe7,
    0x97,
    0x85,
    0xe5,
    0x8f,
    0x8a,
    0xe6,
    0x97,
    0xb6,
    0xe6,
    0xb1,
    0x82,
    0xe8,
    0xb4,
    0xad,
    0xe7,
    0xab,
    0x99,
    0xe7,
    0x82,
    0xb9,
    0xe5,
    0x84,
    0xbf,
    0xe7,
    0xab,
    0xa5,
    0xe6,
    0xaf,
    0x8f,
    0xe5,
    0xa4,
    0xa9,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0xa4,
    0xae,
    0xe8,
    0xae,
    0xa4,
    0xe8,
    0xaf,
    0x86,
    0xe6,
    0xaf,
    0x8f,
    0xe4,
    0xb8,
    0xaa,
    0xe5,
    0xa4,
    0xa9,
    0xe6,
    0xb4,
    0xa5,
    0xe5,
    0xad,
    0x97,
    0xe4,
    0xbd,
    0x93,
    0xe5,
    0x8f,
    0xb0,
    0xe7,
    0x81,
    0xa3,
    0xe7,
    0xbb,
    0xb4,
    0xe6,
    0x8a,
    0xa4,
    0xe6,
    0x9c,
    0xac,
    0xe9,
    0xa1,
    0xb5,
    0xe4,
    0xb8,
    0xaa,
    0xe6,
    0x80,
    0xa7,
    0xe5,
    0xae,
    0x98,
    0xe6,
    0x96,
    0xb9,
    0xe5,
    0xb8,
    0xb8,
    0xe8,
    0xa7,
    0x81,
    0xe7,
    0x9b,
    0xb8,
    0xe6,
    0x9c,
    0xba,
    0xe6,
    0x88,
    0x98,
    0xe7,
    0x95,
    0xa5,
    0xe5,
    0xba,
    0x94,
    0xe5,
    0xbd,
    0x93,
    0xe5,
    0xbe,
    0x8b,
    0xe5,
    0xb8,
    0x88,
    0xe6,
    0x96,
    0xb9,
    0xe4,
    0xbe,
    0xbf,
    0xe6,
    0xa0,
    0xa1,
    0xe5,
    0x9b,
    0xad,
    0xe8,
    0x82,
    0xa1,
    0xe5,
    0xb8,
    0x82,
    0xe6,
    0x88,
    0xbf,
    0xe5,
    0xb1,
    0x8b,
    0xe6,
    0xa0,
    0x8f,
    0xe7,
    0x9b,
    0xae,
    0xe5,
    0x91,
    0x98,
    0xe5,
    0xb7,
    0xa5,
    0xe5,
    0xaf,
    0xbc,
    0xe8,
    0x87,
    0xb4,
    0xe7,
    0xaa,
    0x81,
    0xe7,
    0x84,
    0xb6,
    0xe9,
    0x81,
    0x93,
    0xe5,
    0x85,
    0xb7,
    0xe6,
    0x9c,
    0xac,
    0xe7,
    0xbd,
    0x91,
    0xe7,
    0xbb,
    0x93,
    0xe5,
    0x90,
    0x88,
    0xe6,
    0xa1,
    0xa3,
    0xe6,
    0xa1,
    0x88,
    0xe5,
    0x8a,
    0xb3,
    0xe5,
    0x8a,
    0xa8,
    0xe5,
    0x8f,
    0xa6,
    0xe5,
    0xa4,
    0x96,
    0xe7,
    0xbe,
    0x8e,
    0xe5,
    0x85,
    0x83,
    0xe5,
    0xbc,
    0x95,
    0xe8,
    0xb5,
    0xb7,
    0xe6,
    0x94,
    0xb9,
    0xe5,
    0x8f,
    0x98,
    0xe7,
    0xac,
    0xac,
    0xe5,
    0x9b,
    0x9b,
    0xe4,
    0xbc,
    0x9a,
    0xe8,
    0xae,
    0xa1,
    0xe8,
    0xaa,
    0xaa,
    0xe6,
    0x98,
    0x8e,
    0xe9,
    0x9a,
    0x90,
    0xe7,
    0xa7,
    0x81,
    0xe5,
    0xae,
    0x9d,
    0xe5,
    0xae,
    0x9d,
    0xe8,
    0xa7,
    0x84,
    0xe8,
    0x8c,
    0x83,
    0xe6,
    0xb6,
    0x88,
    0xe8,
    0xb4,
    0xb9,
    0xe5,
    0x85,
    0xb1,
    0xe5,
    0x90,
    0x8c,
    0xe5,
    0xbf,
    0x98,
    0xe8,
    0xae,
    0xb0,
    0xe4,
    0xbd,
    0x93,
    0xe7,
    0xb3,
    0xbb,
    0xe5,
    0xb8,
    0xa6,
    0xe6,
    0x9d,
    0xa5,
    0xe5,
    0x90,
    0x8d,
    0xe5,
    0xad,
    0x97,
    0xe7,
    0x99,
    0xbc,
    0xe8,
    0xa1,
    0xa8,
    0xe5,
    0xbc,
    0x80,
    0xe6,
    0x94,
    0xbe,
    0xe5,
    0x8a,
    0xa0,
    0xe7,
    0x9b,
    0x9f,
    0xe5,
    0x8f,
    0x97,
    0xe5,
    0x88,
    0xb0,
    0xe4,
    0xba,
    0x8c,
    0xe6,
    0x89,
    0x8b,
    0xe5,
    0xa4,
    0xa7,
    0xe9,
    0x87,
    0x8f,
    0xe6,
    0x88,
    0x90,
    0xe4,
    0xba,
    0xba,
    0xe6,
    0x95,
    0xb0,
    0xe9,
    0x87,
    0x8f,
    0xe5,
    0x85,
    0xb1,
    0xe4,
    0xba,
    0xab,
    0xe5,
    0x8c,
    0xba,
    0xe5,
    0x9f,
    0x9f,
    0xe5,
    0xa5,
    0xb3,
    0xe5,
    0xad,
    0xa9,
    0xe5,
    0x8e,
    0x9f,
    0xe5,
    0x88,
    0x99,
    0xe6,
    0x89,
    0x80,
    0xe5,
    0x9c,
    0xa8,
    0xe7,
    0xbb,
    0x93,
    0xe6,
    0x9d,
    0x9f,
    0xe9,
    0x80,
    0x9a,
    0xe4,
    0xbf,
    0xa1,
    0xe8,
    0xb6,
    0x85,
    0xe7,
    0xba,
    0xa7,
    0xe9,
    0x85,
    0x8d,
    0xe7,
    0xbd,
    0xae,
    0xe5,
    0xbd,
    0x93,
    0xe6,
    0x97,
    0xb6,
    0xe4,
    0xbc,
    0x98,
    0xe7,
    0xa7,
    0x80,
    0xe6,
    0x80,
    0xa7,
    0xe6,
    0x84,
    0x9f,
    0xe6,
    0x88,
    0xbf,
    0xe4,
    0xba,
    0xa7,
    0xe9,
    0x81,
    0x8a,
    0xe6,
    0x88,
    0xb2,
    0xe5,
    0x87,
    0xba,
    0xe5,
    0x8f,
    0xa3,
    0xe6,
    0x8f,
    0x90,
    0xe4,
    0xba,
    0xa4,
    0xe5,
    0xb0,
    0xb1,
    0xe4,
    0xb8,
    0x9a,
    0xe4,
    0xbf,
    0x9d,
    0xe5,
    0x81,
    0xa5,
    0xe7,
    0xa8,
    0x8b,
    0xe5,
    0xba,
    0xa6,
    0xe5,
    0x8f,
    0x82,
    0xe6,
    0x95,
    0xb0,
    0xe4,
    0xba,
    0x8b,
    0xe4,
    0xb8,
    0x9a,
    0xe6,
    0x95,
    0xb4,
    0xe4,
    0xb8,
    0xaa,
    0xe5,
    0xb1,
    0xb1,
    0xe4,
    0xb8,
    0x9c,
    0xe6,
    0x83,
    0x85,
    0xe6,
    0x84,
    0x9f,
    0xe7,
    0x89,
    0xb9,
    0xe6,
    0xae,
    0x8a,
    0xe5,
    0x88,
    0x86,
    0xe9,
    0xa1,
    0x9e,
    0xe6,
    0x90,
    0x9c,
    0xe5,
    0xb0,
    0x8b,
    0xe5,
    0xb1,
    0x9e,
    0xe4,
    0xba,
    0x8e,
    0xe9,
    0x97,
    0xa8,
    0xe6,
    0x88,
    0xb7,
    0xe8,
    0xb4,
    0xa2,
    0xe5,
    0x8a,
    0xa1,
    0xe5,
    0xa3,
    0xb0,
    0xe9,
    0x9f,
    0xb3,
    0xe5,
    0x8f,
    0x8a,
    0xe5,
    0x85,
    0xb6,
    0xe8,
    0xb4,
    0xa2,
    0xe7,
    0xbb,
    0x8f,
    0xe5,
    0x9d,
    0x9a,
    0xe6,
    0x8c,
    0x81,
    0xe5,
    0xb9,
    0xb2,
    0xe9,
    0x83,
    0xa8,
    0xe6,
    0x88,
    0x90,
    0xe7,
    0xab,
    0x8b,
    0xe5,
    0x88,
    0xa9,
    0xe7,
    0x9b,
    0x8a,
    0xe8,
    0x80,
    0x83,
    0xe8,
    0x99,
    0x91,
    0xe6,
    0x88,
    0x90,
    0xe9,
    0x83,
    0xbd,
    0xe5,
    0x8c,
    0x85,
    0xe8,
    0xa3,
    0x85,
    0xe7,
    0x94,
    0xa8,
    0xe6,
    0x88,
    0xb6,
    0xe6,
    0xaf,
    0x94,
    0xe8,
    0xb5,
    0x9b,
    0xe6,
    0x96,
    0x87,
    0xe6,
    0x98,
    0x8e,
    0xe6,
    0x8b,
    0x9b,
    0xe5,
    0x95,
    0x86,
    0xe5,
    0xae,
    0x8c,
    0xe6,
    0x95,
    0xb4,
    0xe7,
    0x9c,
    0x9f,
    0xe6,
    0x98,
    0xaf,
    0xe7,
    0x9c,
    0xbc,
    0xe7,
    0x9d,
    0x9b,
    0xe4,
    0xbc,
    0x99,
    0xe4,
    0xbc,
    0xb4,
    0xe5,
    0xa8,
    0x81,
    0xe6,
    0x9c,
    0x9b,
    0xe9,
    0xa2,
    0x86,
    0xe5,
    0x9f,
    0x9f,
    0xe5,
    0x8d,
    0xab,
    0xe7,
    0x94,
    0x9f,
    0xe4,
    0xbc,
    0x98,
    0xe6,
    0x83,
    0xa0,
    0xe8,
    0xab,
    0x96,
    0xe5,
    0xa3,
    0x87,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0x85,
    0xb1,
    0xe8,
    0x89,
    0xaf,
    0xe5,
    0xa5,
    0xbd,
    0xe5,
    0x85,
    0x85,
    0xe5,
    0x88,
    0x86,
    0xe7,
    0xac,
    0xa6,
    0xe5,
    0x90,
    0x88,
    0xe9,
    0x99,
    0x84,
    0xe4,
    0xbb,
    0xb6,
    0xe7,
    0x89,
    0xb9,
    0xe7,
    0x82,
    0xb9,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0x8f,
    0xaf,
    0xe8,
    0x8b,
    0xb1,
    0xe6,
    0x96,
    0x87,
    0xe8,
    0xb5,
    0x84,
    0xe4,
    0xba,
    0xa7,
    0xe6,
    0xa0,
    0xb9,
    0xe6,
    0x9c,
    0xac,
    0xe6,
    0x98,
    0x8e,
    0xe6,
    0x98,
    0xbe,
    0xe5,
    0xaf,
    0x86,
    0xe7,
    0xa2,
    0xbc,
    0xe5,
    0x85,
    0xac,
    0xe4,
    0xbc,
    0x97,
    0xe6,
    0xb0,
    0x91,
    0xe6,
    0x97,
    0x8f,
    0xe6,
    0x9b,
    0xb4,
    0xe5,
    0x8a,
    0xa0,
    0xe4,
    0xba,
    0xab,
    0xe5,
    0x8f,
    0x97,
    0xe5,
    0x90,
    0x8c,
    0xe5,
    0xad,
    0xa6,
    0xe5,
    0x90,
    0xaf,
    0xe5,
    0x8a,
    0xa8,
    0xe9,
    0x80,
    0x82,
    0xe5,
    0x90,
    0x88,
    0xe5,
    0x8e,
    0x9f,
    0xe6,
    0x9d,
    0xa5,
    0xe9,
    0x97,
    0xae,
    0xe7,
    0xad,
    0x94,
    0xe6,
    0x9c,
    0xac,
    0xe6,
    0x96,
    0x87,
    0xe7,
    0xbe,
    0x8e,
    0xe9,
    0xa3,
    0x9f,
    0xe7,
    0xbb,
    0xbf,
    0xe8,
    0x89,
    0xb2,
    0xe7,
    0xa8,
    0xb3,
    0xe5,
    0xae,
    0x9a,
    0xe7,
    0xbb,
    0x88,
    0xe4,
    0xba,
    0x8e,
    0xe7,
    0x94,
    0x9f,
    0xe7,
    0x89,
    0xa9,
    0xe4,
    0xbe,
    0x9b,
    0xe6,
    0xb1,
    0x82,
    0xe6,
    0x90,
    0x9c,
    0xe7,
    0x8b,
    0x90,
    0xe5,
    0x8a,
    0x9b,
    0xe9,
    0x87,
    0x8f,
    0xe4,
    0xb8,
    0xa5,
    0xe9,
    0x87,
    0x8d,
    0xe6,
    0xb0,
    0xb8,
    0xe8,
    0xbf,
    0x9c,
    0xe5,
    0x86,
    0x99,
    0xe7,
    0x9c,
    0x9f,
    0xe6,
    0x9c,
    0x89,
    0xe9,
    0x99,
    0x90,
    0xe7,
    0xab,
    0x9e,
    0xe4,
    0xba,
    0x89,
    0xe5,
    0xaf,
    0xb9,
    0xe8,
    0xb1,
    0xa1,
    0xe8,
    0xb4,
    0xb9,
    0xe7,
    0x94,
    0xa8,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0xa5,
    0xbd,
    0xe7,
    0xbb,
    0x9d,
    0xe5,
    0xaf,
    0xb9,
    0xe5,
    0x8d,
    0x81,
    0xe5,
    0x88,
    0x86,
    0xe4,
    0xbf,
    0x83,
    0xe8,
    0xbf,
    0x9b,
    0xe7,
    0x82,
    0xb9,
    0xe8,
    0xaf,
    0x84,
    0xe5,
    0xbd,
    0xb1,
    0xe9,
    0x9f,
    0xb3,
    0xe4,
    0xbc,
    0x98,
    0xe5,
    0x8a,
    0xbf,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0xb0,
    0x91,
    0xe6,
    0xac,
    0xa3,
    0xe8,
    0xb5,
    0x8f,
    0xe5,
    0xb9,
    0xb6,
    0xe4,
    0xb8,
    0x94,
    0xe6,
    0x9c,
    0x89,
    0xe7,
    0x82,
    0xb9,
    0xe6,
    0x96,
    0xb9,
    0xe5,
    0x90,
    0x91,
    0xe5,
    0x85,
    0xa8,
    0xe6,
    0x96,
    0xb0,
    0xe4,
    0xbf,
    0xa1,
    0xe7,
    0x94,
    0xa8,
    0xe8,
    0xae,
    0xbe,
    0xe6,
    0x96,
    0xbd,
    0xe5,
    0xbd,
    0xa2,
    0xe8,
    0xb1,
    0xa1,
    0xe8,
    0xb5,
    0x84,
    0xe6,
    0xa0,
    0xbc,
    0xe7,
    0xaa,
    0x81,
    0xe7,
    0xa0,
    0xb4,
    0xe9,
    0x9a,
    0x8f,
    0xe7,
    0x9d,
    0x80,
    0xe9,
    0x87,
    0x8d,
    0xe5,
    0xa4,
    0xa7,
    0xe4,
    0xba,
    0x8e,
    0xe6,
    0x98,
    0xaf,
    0xe6,
    0xaf,
    0x95,
    0xe4,
    0xb8,
    0x9a,
    0xe6,
    0x99,
    0xba,
    0xe8,
    0x83,
    0xbd,
    0xe5,
    0x8c,
    0x96,
    0xe5,
    0xb7,
    0xa5,
    0xe5,
    0xae,
    0x8c,
    0xe7,
    0xbe,
    0x8e,
    0xe5,
    0x95,
    0x86,
    0xe5,
    0x9f,
    0x8e,
    0xe7,
    0xbb,
    0x9f,
    0xe4,
    0xb8,
    0x80,
    0xe5,
    0x87,
    0xba,
    0xe7,
    0x89,
    0x88,
    0xe6,
    0x89,
    0x93,
    0xe9,
    0x80,
    0xa0,
    0xe7,
    0x94,
    0xa2,
    0xe5,
    0x93,
    0x81,
    0xe6,
    0xa6,
    0x82,
    0xe5,
    0x86,
    0xb5,
    0xe7,
    0x94,
    0xa8,
    0xe4,
    0xba,
    0x8e,
    0xe4,
    0xbf,
    0x9d,
    0xe7,
    0x95,
    0x99,
    0xe5,
    0x9b,
    0xa0,
    0xe7,
    0xb4,
    0xa0,
    0xe4,
    0xb8,
    0xad,
    0xe5,
    0x9c,
    0x8b,
    0xe5,
    0xad,
    0x98,
    0xe5,
    0x82,
    0xa8,
    0xe8,
    0xb4,
    0xb4,
    0xe5,
    0x9b,
    0xbe,
    0xe6,
    0x9c,
    0x80,
    0xe6,
    0x84,
    0x9b,
    0xe9,
    0x95,
    0xbf,
    0xe6,
    0x9c,
    0x9f,
    0xe5,
    0x8f,
    0xa3,
    0xe4,
    0xbb,
    0xb7,
    0xe7,
    0x90,
    0x86,
    0xe8,
    0xb4,
    0xa2,
    0xe5,
    0x9f,
    0xba,
    0xe5,
    0x9c,
    0xb0,
    0xe5,
    0xae,
    0x89,
    0xe6,
    0x8e,
    0x92,
    0xe6,
    0xad,
    0xa6,
    0xe6,
    0xb1,
    0x89,
    0xe9,
    0x87,
    0x8c,
    0xe9,
    0x9d,
    0xa2,
    0xe5,
    0x88,
    0x9b,
    0xe5,
    0xbb,
    0xba,
    0xe5,
    0xa4,
    0xa9,
    0xe7,
    0xa9,
    0xba,
    0xe9,
    0xa6,
    0x96,
    0xe5,
    0x85,
    0x88,
    0xe5,
    0xae,
    0x8c,
    0xe5,
    0x96,
    0x84,
    0xe9,
    0xa9,
    0xb1,
    0xe5,
    0x8a,
    0xa8,
    0xe4,
    0xb8,
    0x8b,
    0xe9,
    0x9d,
    0xa2,
    0xe4,
    0xb8,
    0x8d,
    0xe5,
    0x86,
    0x8d,
    0xe8,
    0xaf,
    0x9a,
    0xe4,
    0xbf,
    0xa1,
    0xe6,
    0x84,
    0x8f,
    0xe4,
    0xb9,
    0x89,
    0xe9,
    0x98,
    0xb3,
    0xe5,
    0x85,
    0x89,
    0xe8,
    0x8b,
    0xb1,
    0xe5,
    0x9b,
    0xbd,
    0xe6,
    0xbc,
    0x82,
    0xe4,
    0xba,
    0xae,
    0xe5,
    0x86,
    0x9b,
    0xe4,
    0xba,
    0x8b,
    0xe7,
    0x8e,
    0xa9,
    0xe5,
    0xae,
    0xb6,
    0xe7,
    0xbe,
    0xa4,
    0xe4,
    0xbc,
    0x97,
    0xe5,
    0x86,
    0x9c,
    0xe6,
    0xb0,
    0x91,
    0xe5,
    0x8d,
    0xb3,
    0xe5,
    0x8f,
    0xaf,
    0xe5,
    0x90,
    0x8d,
    0xe7,
    0xa8,
    0xb1,
    0xe5,
    0xae,
    0xb6,
    0xe5,
    0x85,
    0xb7,
    0xe5,
    0x8a,
    0xa8,
    0xe7,
    0x94,
    0xbb,
    0xe6,
    0x83,
    0xb3,
    0xe5,
    0x88,
    0xb0,
    0xe6,
    0xb3,
    0xa8,
    0xe6,
    0x98,
    0x8e,
    0xe5,
    0xb0,
    0x8f,
    0xe5,
    0xad,
    0xa6,
    0xe6,
    0x80,
    0xa7,
    0xe8,
    0x83,
    0xbd,
    0xe8,
    0x80,
    0x83,
    0xe7,
    0xa0,
    0x94,
    0xe7,
    0xa1,
    0xac,
    0xe4,
    0xbb,
    0xb6,
    0xe8,
    0xa7,
    0x82,
    0xe7,
    0x9c,
    0x8b,
    0xe6,
    0xb8,
    0x85,
    0xe6,
    0xa5,
    0x9a,
    0xe6,
    0x90,
    0x9e,
    0xe7,
    0xac,
    0x91,
    0xe9,
    0xa6,
    0x96,
    0xe9,
    0xa0,
    0x81,
    0xe9,
    0xbb,
    0x84,
    0xe9,
    0x87,
    0x91,
    0xe9,
    0x80,
    0x82,
    0xe7,
    0x94,
    0xa8,
    0xe6,
    0xb1,
    0x9f,
    0xe8,
    0x8b,
    0x8f,
    0xe7,
    0x9c,
    0x9f,
    0xe5,
    0xae,
    0x9e,
    0xe4,
    0xb8,
    0xbb,
    0xe7,
    0xae,
    0xa1,
    0xe9,
    0x98,
    0xb6,
    0xe6,
    0xae,
    0xb5,
    0xe8,
    0xa8,
    0xbb,
    0xe5,
    0x86,
    0x8a,
    0xe7,
    0xbf,
    0xbb,
    0xe8,
    0xaf,
    0x91,
    0xe6,
    0x9d,
    0x83,
    0xe5,
    0x88,
    0xa9,
    0xe5,
    0x81,
    0x9a,
    0xe5,
    0xa5,
    0xbd,
    0xe4,
    0xbc,
    0xbc,
    0xe4,
    0xb9,
    0x8e,
    0xe9,
    0x80,
    0x9a,
    0xe8,
    0xae,
    0xaf,
    0xe6,
    0x96,
    0xbd,
    0xe5,
    0xb7,
    0xa5,
    0xe7,
    0x8b,
    0x80,
    0xe6,
    0x85,
    0x8b,
    0xe4,
    0xb9,
    0x9f,
    0xe8,
    0xae,
    0xb8,
    0xe7,
    0x8e,
    0xaf,
    0xe4,
    0xbf,
    0x9d,
    0xe5,
    0x9f,
    0xb9,
    0xe5,
    0x85,
    0xbb,
    0xe6,
    0xa6,
    0x82,
    0xe5,
    0xbf,
    0xb5,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0x9e,
    0x8b,
    0xe6,
    0x9c,
    0xba,
    0xe7,
    0xa5,
    0xa8,
    0xe7,
    0x90,
    0x86,
    0xe8,
    0xa7,
    0xa3,
    0xe5,
    0x8c,
    0xbf,
    0xe5,
    0x90,
    0x8d,
    0x63,
    0x75,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x65,
    0x6e,
    0x76,
    0x69,
    0x61,
    0x72,
    0x6d,
    0x61,
    0x64,
    0x72,
    0x69,
    0x64,
    0x62,
    0x75,
    0x73,
    0x63,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x74,
    0x69,
    0x65,
    0x6d,
    0x70,
    0x6f,
    0x70,
    0x6f,
    0x72,
    0x71,
    0x75,
    0x65,
    0x63,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x65,
    0x73,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x75,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x6a,
    0x75,
    0x65,
    0x67,
    0x6f,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x65,
    0x73,
    0x74,
    0xc3,
    0xa1,
    0x6e,
    0x6e,
    0x6f,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x6e,
    0x70,
    0x65,
    0x72,
    0x66,
    0x69,
    0x6c,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x61,
    0x6d,
    0x69,
    0x67,
    0x6f,
    0x73,
    0x63,
    0x69,
    0x75,
    0x64,
    0x61,
    0x64,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x61,
    0x75,
    0x6e,
    0x71,
    0x75,
    0x65,
    0x70,
    0x75,
    0x65,
    0x64,
    0x65,
    0x73,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x63,
    0x69,
    0x6f,
    0x73,
    0x65,
    0x67,
    0xc3,
    0xba,
    0x6e,
    0x62,
    0x75,
    0x65,
    0x6e,
    0x6f,
    0x73,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x72,
    0x70,
    0x75,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x68,
    0x61,
    0x62,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x67,
    0x6f,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x75,
    0x65,
    0x76,
    0x6f,
    0x73,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x6f,
    0x73,
    0x63,
    0x61,
    0x72,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x71,
    0x75,
    0x69,
    0x70,
    0x6f,
    0x6e,
    0x69,
    0xc3,
    0xb1,
    0x6f,
    0x73,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x6f,
    0x73,
    0x61,
    0x6c,
    0x67,
    0x75,
    0x6e,
    0x61,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x6f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x72,
    0x61,
    0x72,
    0x72,
    0x69,
    0x62,
    0x61,
    0x6d,
    0x61,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x68,
    0x6f,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x64,
    0x61,
    0x64,
    0x63,
    0x61,
    0x6d,
    0x62,
    0x69,
    0x6f,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x61,
    0x73,
    0x66,
    0x75,
    0x65,
    0x72,
    0x6f,
    0x6e,
    0x70,
    0x61,
    0x73,
    0x61,
    0x64,
    0x6f,
    0x6c,
    0xc3,
    0xad,
    0x6e,
    0x65,
    0x61,
    0x70,
    0x61,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x76,
    0x61,
    0x73,
    0x63,
    0x75,
    0x72,
    0x73,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x61,
    0x71,
    0x75,
    0x69,
    0x65,
    0x72,
    0x6f,
    0x6c,
    0x69,
    0x62,
    0x72,
    0x6f,
    0x73,
    0x63,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x6f,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x69,
    0x67,
    0x75,
    0x65,
    0x6c,
    0x76,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x73,
    0x63,
    0x75,
    0x61,
    0x74,
    0x72,
    0x6f,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x67,
    0x72,
    0x75,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x72,
    0xc3,
    0xa1,
    0x6e,
    0x65,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x6f,
    0x73,
    0x66,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x61,
    0x63,
    0x65,
    0x72,
    0x63,
    0x61,
    0x64,
    0x65,
    0x6d,
    0xc3,
    0xa1,
    0x73,
    0x6f,
    0x66,
    0x65,
    0x72,
    0x74,
    0x61,
    0x63,
    0x6f,
    0x63,
    0x68,
    0x65,
    0x73,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x6c,
    0x6f,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x74,
    0x72,
    0x61,
    0x73,
    0x61,
    0x6c,
    0x67,
    0xc3,
    0xba,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x61,
    0x63,
    0x75,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x65,
    0x63,
    0x75,
    0x65,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x6f,
    0x70,
    0x72,
    0x65,
    0x6e,
    0x73,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x72,
    0x76,
    0x69,
    0x61,
    0x6a,
    0x65,
    0x73,
    0x64,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x6f,
    0x6d,
    0x75,
    0x72,
    0x63,
    0x69,
    0x61,
    0x70,
    0x6f,
    0x64,
    0x72,
    0xc3,
    0xa1,
    0x70,
    0x75,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x64,
    0x69,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x70,
    0x75,
    0x65,
    0x62,
    0x6c,
    0x6f,
    0x71,
    0x75,
    0x69,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x65,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x69,
    0x6f,
    0x63,
    0x72,
    0x69,
    0x73,
    0x69,
    0x73,
    0x63,
    0x69,
    0x65,
    0x72,
    0x74,
    0x6f,
    0x73,
    0x65,
    0x67,
    0x75,
    0x72,
    0x6f,
    0x6d,
    0x75,
    0x65,
    0x72,
    0x74,
    0x65,
    0x66,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x63,
    0x65,
    0x72,
    0x72,
    0x61,
    0x72,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x65,
    0x66,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x70,
    0x61,
    0x72,
    0x74,
    0x65,
    0x73,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x64,
    0x61,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x69,
    0x61,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x63,
    0x65,
    0x74,
    0x69,
    0x65,
    0x72,
    0x72,
    0x61,
    0x65,
    0x2d,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x73,
    0x66,
    0x75,
    0x74,
    0x75,
    0x72,
    0x6f,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x74,
    0x6f,
    0x73,
    0x65,
    0x67,
    0x75,
    0x69,
    0x72,
    0x72,
    0x69,
    0x65,
    0x73,
    0x67,
    0x6f,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x73,
    0x6d,
    0x69,
    0x73,
    0x6d,
    0x6f,
    0x73,
    0xc3,
    0xba,
    0x6e,
    0x69,
    0x63,
    0x6f,
    0x63,
    0x61,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x73,
    0x72,
    0x61,
    0x7a,
    0xc3,
    0xb3,
    0x6e,
    0x64,
    0x65,
    0x62,
    0x69,
    0x64,
    0x6f,
    0x70,
    0x72,
    0x75,
    0x65,
    0x62,
    0x61,
    0x74,
    0x6f,
    0x6c,
    0x65,
    0x64,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0xc3,
    0xad,
    0x61,
    0x6a,
    0x65,
    0x73,
    0xc3,
    0xba,
    0x73,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x6f,
    0x63,
    0x6f,
    0x63,
    0x69,
    0x6e,
    0x61,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x63,
    0xc3,
    0xa1,
    0x64,
    0x69,
    0x7a,
    0x68,
    0x61,
    0x62,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x61,
    0x66,
    0x75,
    0x65,
    0x72,
    0x7a,
    0x61,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x6f,
    0x67,
    0x75,
    0x65,
    0x72,
    0x72,
    0x61,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x72,
    0xc3,
    0xa9,
    0x78,
    0x69,
    0x74,
    0x6f,
    0x6c,
    0xc3,
    0xb3,
    0x70,
    0x65,
    0x7a,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x76,
    0xc3,
    0xad,
    0x64,
    0x65,
    0x6f,
    0x65,
    0x76,
    0x69,
    0x74,
    0x61,
    0x72,
    0x70,
    0x61,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x74,
    0x72,
    0x6f,
    0x73,
    0x6a,
    0x61,
    0x76,
    0x69,
    0x65,
    0x72,
    0x70,
    0x61,
    0x64,
    0x72,
    0x65,
    0x73,
    0x66,
    0xc3,
    0xa1,
    0x63,
    0x69,
    0x6c,
    0x63,
    0x61,
    0x62,
    0x65,
    0x7a,
    0x61,
    0xc3,
    0xa1,
    0x72,
    0x65,
    0x61,
    0x73,
    0x73,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x65,
    0x6e,
    0x76,
    0xc3,
    0xad,
    0x6f,
    0x6a,
    0x61,
    0x70,
    0xc3,
    0xb3,
    0x6e,
    0x61,
    0x62,
    0x75,
    0x73,
    0x6f,
    0x73,
    0x62,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x65,
    0x78,
    0x74,
    0x6f,
    0x73,
    0x6c,
    0x6c,
    0x65,
    0x76,
    0x61,
    0x72,
    0x70,
    0x75,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x66,
    0x75,
    0x65,
    0x72,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0xc3,
    0xba,
    0x6e,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x65,
    0x73,
    0x68,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0x69,
    0x64,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x62,
    0x61,
    0x6f,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x74,
    0xc3,
    0xa1,
    0x73,
    0x65,
    0x64,
    0x69,
    0x74,
    0x61,
    0x72,
    0x63,
    0x72,
    0x65,
    0x61,
    0x64,
    0x6f,
    0xd0,
    0xb4,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd1,
    0x87,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb5,
    0xd1,
    0x89,
    0xd0,
    0xb5,
    0xd1,
    0x83,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd0,
    0x9a,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb1,
    0xd0,
    0xb5,
    0xd0,
    0xb7,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0x92,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xad,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb3,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0x94,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd0,
    0x9f,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xba,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xa1,
    0xd0,
    0xa8,
    0xd0,
    0x90,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x8f,
    0xd0,
    0xa7,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd0,
    0xa2,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb4,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd1,
    0x83,
    0xd0,
    0x92,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x83,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb4,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd1,
    0x8f,
    0xd0,
    0x92,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0x92,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb1,
    0xd0,
    0x9e,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb8,
    0xd1,
    0x80,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd0,
    0x9e,
    0xd0,
    0x9e,
    0xd0,
    0x9e,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x86,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0x9e,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xb4,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x94,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbe,
    0x6a,
    0x61,
    0x67,
    0x72,
    0x61,
    0x6e,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x93,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd8,
    0xa5,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd9,
    0x87,
    0xd8,
    0xb0,
    0xd8,
    0xa7,
    0xd8,
    0xa2,
    0xd8,
    0xae,
    0xd8,
    0xb1,
    0xd8,
    0xb9,
    0xd8,
    0xaf,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd9,
    0x87,
    0xd8,
    0xb0,
    0xd9,
    0x87,
    0xd8,
    0xb5,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xba,
    0xd9,
    0x8a,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xb6,
    0xd8,
    0xb0,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x87,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0xd8,
    0xad,
    0xd8,
    0xaa,
    0xd9,
    0x89,
    0xd9,
    0x82,
    0xd8,
    0xa8,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd8,
    0xae,
    0xd8,
    0xb1,
    0xd9,
    0x81,
    0xd9,
    0x82,
    0xd8,
    0xb7,
    0xd8,
    0xb9,
    0xd8,
    0xa8,
    0xd8,
    0xaf,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0xd8,
    0xa5,
    0xd8,
    0xb0,
    0xd8,
    0xa7,
    0xd9,
    0x83,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xaf,
    0xd8,
    0xa5,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd9,
    0x87,
    0xd8,
    0xa8,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd9,
    0x83,
    0xd9,
    0x8a,
    0xd9,
    0x81,
    0xd8,
    0xa8,
    0xd8,
    0xad,
    0xd8,
    0xab,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd9,
    0x88,
    0xd9,
    0x87,
    0xd9,
    0x88,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd9,
    0x86,
    0xd8,
    0xaf,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xb3,
    0xd8,
    0xb9,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd8,
    0xb5,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xb0,
    0xd8,
    0xa8,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd9,
    0x85,
    0xd8,
    0xab,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd9,
    0x8a,
    0xd8,
    0xab,
    0xd9,
    0x85,
    0xd8,
    0xb5,
    0xd8,
    0xb1,
    0xd8,
    0xb4,
    0xd8,
    0xb1,
    0xd8,
    0xad,
    0xd8,
    0xad,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xb0,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd8,
    0xa3,
    0xd8,
    0xa8,
    0xd9,
    0x88,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd8,
    0xb5,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd9,
    0x88,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x86,
    0xd8,
    0xae,
    0xd9,
    0x8a,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xa1,
    0xd9,
    0x88,
    0xd9,
    0x87,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd8,
    0xb5,
    0xd8,
    0xb5,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x82,
    0xd9,
    0x85,
    0xd8,
    0xa3,
    0xd8,
    0xad,
    0xd8,
    0xaf,
    0xd9,
    0x86,
    0xd8,
    0xad,
    0xd9,
    0x86,
    0xd8,
    0xb9,
    0xd8,
    0xaf,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xa3,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd8,
    0xac,
    0xd8,
    0xa8,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd8,
    0xaa,
    0xd8,
    0xac,
    0xd9,
    0x87,
    0xd8,
    0xa9,
    0xd8,
    0xb3,
    0xd9,
    0x86,
    0xd8,
    0xa9,
    0xd9,
    0x8a,
    0xd8,
    0xaa,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd8,
    0xb1,
    0xd8,
    0xa9,
    0xd8,
    0xba,
    0xd8,
    0xb2,
    0xd8,
    0xa9,
    0xd9,
    0x86,
    0xd9,
    0x81,
    0xd8,
    0xb3,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xaa,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd9,
    0x84,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x82,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xb9,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd8,
    0xa3,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd9,
    0x8a,
    0xd8,
    0xa1,
    0xd9,
    0x86,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xa3,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd8,
    0xa8,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd8,
    0xb0,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xa8,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd9,
    0x85,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x83,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd9,
    0x81,
    0xd9,
    0x82,
    0xd8,
    0xaf,
    0xd8,
    0xad,
    0xd8,
    0xb3,
    0xd9,
    0x86,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa3,
    0xd9,
    0x87,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd9,
    0x87,
    0xd8,
    0xb1,
    0xd9,
    0x82,
    0xd8,
    0xb7,
    0xd8,
    0xb1,
    0xd8,
    0xb7,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x69,
    0x6c,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x68,
    0x69,
    0x6d,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x64,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x61,
    0x73,
    0x68,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x72,
    0x75,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x77,
    0x72,
    0x69,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x73,
    0x76,
    0x69,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x77,
    0x65,
    0x6c,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x75,
    0x6e,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x6e,
    0x65,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x79,
    0x64,
    0x79,
    0x6e,
    0x61,
    0x6d,
    0x69,
    0x63,
    0x62,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x76,
    0x61,
    0x63,
    0x79,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x77,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x66,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x6c,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x76,
    0x69,
    0x73,
    0x69,
    0x74,
    0x65,
    0x64,
    0x77,
    0x65,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x63,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x79,
    0x6f,
    0x75,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x62,
    0x72,
    0x61,
    0x72,
    0x79,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x72,
    0x66,
    0x75,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x6d,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x65,
    0x6d,
    0x69,
    0x6e,
    0x75,
    0x74,
    0x65,
    0x73,
    0x70,
    0x72,
    0x69,
    0x76,
    0x61,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x65,
    0x74,
    0x79,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x64,
    0x74,
    0x72,
    0x69,
    0x67,
    0x67,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x73,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6e,
    0x65,
    0x72,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x70,
    0x65,
    0x72,
    0x66,
    0x65,
    0x63,
    0x74,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x73,
    0x6b,
    0x65,
    0x65,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x2c,
    0x6a,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x73,
    0x75,
    0x72,
    0x66,
    0x61,
    0x63,
    0x65,
    0x73,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x65,
    0x78,
    0x70,
    0x69,
    0x72,
    0x65,
    0x73,
    0x72,
    0x65,
    0x76,
    0x69,
    0x65,
    0x77,
    0x73,
    0x62,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x50,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x61,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x76,
    0x69,
    0x6c,
    0x6c,
    0x61,
    0x67,
    0x65,
    0x53,
    0x70,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x68,
    0x67,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x79,
    0x64,
    0x65,
    0x63,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x6d,
    0x65,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x65,
    0x73,
    0x73,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x66,
    0x69,
    0x67,
    0x75,
    0x72,
    0x65,
    0x73,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x73,
    0x70,
    0x75,
    0x74,
    0x65,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x65,
    0x72,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x64,
    0x69,
    0x67,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x70,
    0x69,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x41,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x64,
    0x74,
    0x72,
    0x61,
    0x66,
    0x66,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x64,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x76,
    0x69,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x2f,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x65,
    0x73,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x20,
    0x62,
    0x65,
    0x73,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x6c,
    0x73,
    0x56,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x65,
    0x70,
    0x69,
    0x73,
    0x6f,
    0x64,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x67,
    0x72,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x62,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x79,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x3c,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x0d,
    0x0a,
    0x77,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x63,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x67,
    0x65,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x64,
    0x65,
    0x73,
    0x6b,
    0x74,
    0x6f,
    0x70,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x64,
    0x70,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x75,
    0x6e,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x44,
    0x69,
    0x67,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x63,
    0x61,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x57,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x75,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x72,
    0x65,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x41,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x69,
    0x64,
    0x64,
    0x65,
    0x63,
    0x61,
    0x64,
    0x65,
    0x73,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x20,
    0x61,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x6c,
    0x73,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x41,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x67,
    0x65,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x73,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x63,
    0x61,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x73,
    0x63,
    0x61,
    0x70,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x73,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x3d,
    0x31,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x3d,
    0x20,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x43,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x75,
    0x70,
    0x64,
    0x61,
    0x74,
    0x65,
    0x64,
    0x53,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x4e,
    0x65,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x77,
    0x61,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x62,
    0x61,
    0x72,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x44,
    0x65,
    0x75,
    0x74,
    0x73,
    0x63,
    0x68,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x65,
    0x72,
    0x73,
    0x71,
    0x75,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x79,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x65,
    0x78,
    0x61,
    0x63,
    0x74,
    0x6c,
    0x79,
    0x73,
    0x65,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x73,
    0x65,
    0x61,
    0x73,
    0x65,
    0x53,
    0x6f,
    0x63,
    0x69,
    0x65,
    0x74,
    0x79,
    0x77,
    0x65,
    0x61,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x78,
    0x68,
    0x69,
    0x62,
    0x69,
    0x74,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x21,
    0x2d,
    0x2d,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x65,
    0x64,
    0x6f,
    0x75,
    0x74,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x6b,
    0x73,
    0x64,
    0x65,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x28,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x70,
    0x75,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x49,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x68,
    0x65,
    0x61,
    0x76,
    0x69,
    0x6c,
    0x79,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x73,
    0x2d,
    0x31,
    0x27,
    0x5d,
    0x29,
    0x3b,
    0x0a,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x43,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x68,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x72,
    0x61,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x77,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x63,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x41,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x74,
    0x75,
    0x6e,
    0x69,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x6a,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x79,
    0x73,
    0x69,
    0x64,
    0x65,
    0x62,
    0x61,
    0x72,
    0x43,
    0x68,
    0x69,
    0x63,
    0x61,
    0x67,
    0x6f,
    0x68,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x79,
    0x47,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x70,
    0x61,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x2c,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x61,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x66,
    0x65,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x72,
    0x72,
    0x69,
    0x76,
    0x65,
    0x64,
    0x70,
    0x61,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x6c,
    0x79,
    0x2e,
    0x0a,
    0x0a,
    0x54,
    0x68,
    0x65,
    0x20,
    0x62,
    0x75,
    0x74,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x64,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x79,
    0x42,
    0x72,
    0x69,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x43,
    0x68,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x6c,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x49,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x22,
    0x20,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2d,
    0x66,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x72,
    0x65,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x69,
    0x73,
    0x4c,
    0x69,
    0x62,
    0x72,
    0x61,
    0x72,
    0x79,
    0x68,
    0x75,
    0x73,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x63,
    0x74,
    0x61,
    0x66,
    0x66,
    0x61,
    0x69,
    0x72,
    0x73,
    0x43,
    0x68,
    0x61,
    0x72,
    0x6c,
    0x65,
    0x73,
    0x72,
    0x61,
    0x64,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x62,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x64,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x75,
    0x6d,
    0x70,
    0x61,
    0x63,
    0x6b,
    0x61,
    0x67,
    0x65,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x45,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5d,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x4d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x78,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x2d,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x77,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x6b,
    0x69,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x46,
    0x69,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x78,
    0x79,
    0x6f,
    0x75,
    0x20,
    0x61,
    0x72,
    0x65,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x78,
    0x69,
    0x6d,
    0x75,
    0x6d,
    0x68,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x61,
    0x70,
    0x69,
    0x64,
    0x6c,
    0x79,
    0x63,
    0x6c,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x6f,
    0x6d,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x67,
    0x65,
    0x64,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x73,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x70,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x75,
    0x6c,
    0x61,
    0x64,
    0x79,
    0x6e,
    0x61,
    0x73,
    0x74,
    0x79,
    0x68,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x53,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x75,
    0x65,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x79,
    0x52,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x62,
    0x72,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6c,
    0x64,
    0x69,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x6c,
    0x79,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x2e,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x41,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x45,
    0x64,
    0x77,
    0x61,
    0x72,
    0x64,
    0x20,
    0x73,
    0x65,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x52,
    0x6f,
    0x62,
    0x65,
    0x72,
    0x74,
    0x20,
    0x65,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x50,
    0x61,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x75,
    0x70,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x77,
    0x65,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x41,
    0x6e,
    0x67,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x5f,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x64,
    0x61,
    0x63,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x73,
    0x73,
    0x69,
    0x76,
    0x65,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x3a,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x74,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x62,
    0x69,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x62,
    0x65,
    0x6e,
    0x65,
    0x66,
    0x69,
    0x74,
    0x64,
    0x72,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x74,
    0x75,
    0x64,
    0x69,
    0x65,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x6d,
    0x75,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x68,
    0x61,
    0x70,
    0x73,
    0x6d,
    0x6f,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x73,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x72,
    0x65,
    0x76,
    0x65,
    0x72,
    0x73,
    0x65,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x63,
    0x68,
    0x69,
    0x65,
    0x76,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x74,
    0x75,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x6f,
    0x6e,
    0x65,
    0x65,
    0x78,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x3a,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x70,
    0x65,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x77,
    0x61,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x20,
    0x41,
    0x75,
    0x67,
    0x75,
    0x73,
    0x74,
    0x73,
    0x79,
    0x6d,
    0x62,
    0x6f,
    0x6c,
    0x73,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x79,
    0x6d,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x73,
    0x6d,
    0x75,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x70,
    0x61,
    0x79,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x72,
    0x6f,
    0x75,
    0x62,
    0x6c,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x65,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x73,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6d,
    0x6f,
    0x6e,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x27,
    0x27,
    0x54,
    0x68,
    0x65,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x64,
    0x61,
    0x70,
    0x74,
    0x65,
    0x64,
    0x47,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x79,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x65,
    0x6e,
    0x68,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x63,
    0x61,
    0x72,
    0x65,
    0x65,
    0x72,
    0x73,
    0x29,
    0x2e,
    0x20,
    0x54,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x65,
    0x64,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x20,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x6c,
    0x65,
    0x45,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x78,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x43,
    0x68,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x6c,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x6e,
    0x65,
    0x75,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x5f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x3e,
    0x73,
    0x65,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x77,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x63,
    0x61,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x77,
    0x65,
    0x62,
    0x6b,
    0x69,
    0x74,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x4a,
    0x75,
    0x73,
    0x74,
    0x69,
    0x63,
    0x65,
    0x63,
    0x68,
    0x61,
    0x70,
    0x74,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6d,
    0x73,
    0x54,
    0x68,
    0x6f,
    0x6d,
    0x61,
    0x73,
    0x20,
    0x6d,
    0x6f,
    0x7a,
    0x69,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x65,
    0x73,
    0x65,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x3a,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x2c,
    0x68,
    0x75,
    0x6e,
    0x64,
    0x72,
    0x65,
    0x64,
    0x4f,
    0x6c,
    0x79,
    0x6d,
    0x70,
    0x69,
    0x63,
    0x5f,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x73,
    0x72,
    0x65,
    0x61,
    0x63,
    0x68,
    0x65,
    0x64,
    0x63,
    0x68,
    0x72,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x64,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x65,
    0x64,
    0x70,
    0x72,
    0x65,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x65,
    0x69,
    0x74,
    0x68,
    0x65,
    0x72,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6c,
    0x79,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2e,
    0x77,
    0x6f,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x68,
    0x69,
    0x67,
    0x68,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x61,
    0x64,
    0x75,
    0x74,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x71,
    0x75,
    0x61,
    0x72,
    0x74,
    0x65,
    0x72,
    0x43,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x74,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x65,
    0x78,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x42,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x65,
    0x72,
    0x6c,
    0x69,
    0x62,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x7d,
    0x20,
    0x63,
    0x61,
    0x74,
    0x63,
    0x68,
    0x50,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x68,
    0x69,
    0x64,
    0x65,
    0x28,
    0x29,
    0x3b,
    0x46,
    0x6c,
    0x6f,
    0x72,
    0x69,
    0x64,
    0x61,
    0x61,
    0x6e,
    0x73,
    0x77,
    0x65,
    0x72,
    0x73,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x45,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x66,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x73,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x66,
    0x72,
    0x65,
    0x65,
    0x64,
    0x6f,
    0x6d,
    0x53,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x2d,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x46,
    0x75,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x21,
    0x3d,
    0x20,
    0x6e,
    0x75,
    0x6c,
    0x6c,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x44,
    0x65,
    0x6e,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x28,
    0x30,
    0x29,
    0x2f,
    0x61,
    0x6c,
    0x6c,
    0x2e,
    0x6a,
    0x73,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x53,
    0x74,
    0x65,
    0x70,
    0x68,
    0x65,
    0x6e,
    0x0a,
    0x0a,
    0x57,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x6f,
    0x62,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x3c,
    0x2f,
    0x68,
    0x32,
    0x3e,
    0x0d,
    0x0a,
    0x4d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x6e,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x73,
    0x2e,
    0x0a,
    0x0a,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x0a,
    0x0a,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x61,
    0x72,
    0x74,
    0x69,
    0x73,
    0x74,
    0x73,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x65,
    0x64,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x66,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x74,
    0x69,
    0x63,
    0x6b,
    0x65,
    0x74,
    0x73,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6c,
    0x77,
    0x69,
    0x74,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x69,
    0x63,
    0x65,
    0x47,
    0x65,
    0x6f,
    0x72,
    0x67,
    0x65,
    0x20,
    0x42,
    0x65,
    0x6c,
    0x67,
    0x69,
    0x75,
    0x6d,
    0x2e,
    0x2e,
    0x2e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x74,
    0x77,
    0x69,
    0x74,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x77,
    0x61,
    0x69,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x61,
    0x72,
    0x66,
    0x61,
    0x72,
    0x65,
    0x20,
    0x4f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x68,
    0x72,
    0x61,
    0x73,
    0x65,
    0x73,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x76,
    0x69,
    0x76,
    0x65,
    0x73,
    0x63,
    0x68,
    0x6f,
    0x6c,
    0x61,
    0x72,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x69,
    0x67,
    0x6e,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x6c,
    0x6f,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x20,
    0x61,
    0x73,
    0x47,
    0x65,
    0x6f,
    0x72,
    0x67,
    0x69,
    0x61,
    0x73,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x3c,
    0x73,
    0x74,
    0x6f,
    0x70,
    0x70,
    0x65,
    0x64,
    0x31,
    0x27,
    0x5d,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3a,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x64,
    0x31,
    0x30,
    0x30,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x3c,
    0x2f,
    0x68,
    0x33,
    0x3e,
    0x0a,
    0x20,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x20,
    0x77,
    0x65,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x30,
    0x30,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x6d,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x63,
    0x68,
    0x6f,
    0x66,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x65,
    0x72,
    0x68,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x69,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x72,
    0x69,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x26,
    0x72,
    0x61,
    0x71,
    0x75,
    0x6f,
    0x3b,
    0x70,
    0x6c,
    0x75,
    0x73,
    0x6f,
    0x6e,
    0x65,
    0x68,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x28,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x44,
    0x6f,
    0x75,
    0x67,
    0x6c,
    0x61,
    0x73,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x69,
    0x72,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x41,
    0x6e,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x56,
    0x69,
    0x65,
    0x74,
    0x6e,
    0x61,
    0x6d,
    0x76,
    0x65,
    0x68,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x63,
    0x72,
    0x79,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x3d,
    0x57,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x65,
    0x6e,
    0x6a,
    0x6f,
    0x79,
    0x65,
    0x64,
    0x61,
    0x20,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x64,
    0x3c,
    0x61,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x69,
    0x67,
    0x6e,
    0x20,
    0x41,
    0x6c,
    0x6c,
    0x20,
    0x72,
    0x69,
    0x68,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x44,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x72,
    0x65,
    0x74,
    0x69,
    0x72,
    0x65,
    0x64,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3b,
    0x62,
    0x61,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x65,
    0x65,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x61,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x61,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x75,
    0x63,
    0x74,
    0x67,
    0x65,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4a,
    0x61,
    0x6e,
    0x75,
    0x61,
    0x72,
    0x79,
    0x68,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x73,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x3a,
    0x68,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x46,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x68,
    0x20,
    0x6c,
    0x61,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x78,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x6d,
    0x69,
    0x65,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x66,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x64,
    0x65,
    0x63,
    0x69,
    0x64,
    0x65,
    0x64,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x2f,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x66,
    0x73,
    0x2d,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x3a,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x63,
    0x2e,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x22,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x76,
    0x69,
    0x6f,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x22,
    0x3e,
    0x63,
    0x69,
    0x72,
    0x63,
    0x75,
    0x69,
    0x74,
    0x46,
    0x69,
    0x6e,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x69,
    0x73,
    0x74,
    0x73,
    0x68,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x31,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x22,
    0x3e,
    0x61,
    0x73,
    0x20,
    0x73,
    0x75,
    0x63,
    0x68,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x20,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x20,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6d,
    0x79,
    0x73,
    0x74,
    0x65,
    0x72,
    0x79,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x72,
    0x61,
    0x69,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x72,
    0x64,
    0x65,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6e,
    0x75,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x4a,
    0x65,
    0x77,
    0x69,
    0x73,
    0x68,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x74,
    0x42,
    0x72,
    0x69,
    0x74,
    0x69,
    0x73,
    0x68,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x73,
    0x70,
    0x72,
    0x65,
    0x64,
    0x69,
    0x63,
    0x74,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x73,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x77,
    0x61,
    0x73,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x75,
    0x69,
    0x63,
    0x69,
    0x64,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x69,
    0x63,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x73,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x73,
    0x53,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x66,
    0x69,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x69,
    0x63,
    0x77,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x50,
    0x72,
    0x69,
    0x76,
    0x61,
    0x63,
    0x79,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x53,
    0x77,
    0x65,
    0x64,
    0x69,
    0x73,
    0x68,
    0x62,
    0x72,
    0x69,
    0x65,
    0x66,
    0x6c,
    0x79,
    0x50,
    0x65,
    0x72,
    0x73,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x6f,
    0x20,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x43,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x64,
    0x65,
    0x70,
    0x69,
    0x63,
    0x74,
    0x73,
    0x63,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x6e,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x73,
    0x6e,
    0x65,
    0x78,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x61,
    0x70,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x76,
    0x69,
    0x73,
    0x65,
    0x64,
    0x6a,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x28,
    0x2d,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x3e,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x53,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x73,
    0x54,
    0x75,
    0x72,
    0x6b,
    0x69,
    0x73,
    0x68,
    0x79,
    0x6f,
    0x75,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x2e,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x28,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0a,
    0x0a,
    0x62,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x3d,
    0x52,
    0x69,
    0x63,
    0x68,
    0x61,
    0x72,
    0x64,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x70,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x0d,
    0x0a,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x75,
    0x6c,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x73,
    0x73,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x73,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x65,
    0x63,
    0x75,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x74,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x74,
    0x6f,
    0x44,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x3a,
    0x20,
    0x74,
    0x72,
    0x75,
    0x65,
    0x2c,
    0x63,
    0x68,
    0x61,
    0x72,
    0x74,
    0x65,
    0x72,
    0x74,
    0x6f,
    0x75,
    0x72,
    0x69,
    0x73,
    0x6d,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x63,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x69,
    0x6e,
    0x3c,
    0x2f,
    0x68,
    0x31,
    0x3e,
    0x0d,
    0x0a,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x2e,
    0x3f,
    0x78,
    0x6d,
    0x6c,
    0x20,
    0x76,
    0x65,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x69,
    0x72,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x2d,
    0x2d,
    0x3e,
    0x29,
    0x2e,
    0x61,
    0x74,
    0x74,
    0x72,
    0x28,
    0x72,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x23,
    0x66,
    0x66,
    0x66,
    0x66,
    0x66,
    0x66,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x56,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x50,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x64,
    0x65,
    0x73,
    0x70,
    0x69,
    0x74,
    0x65,
    0x64,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x20,
    0x68,
    0x65,
    0x6c,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x4a,
    0x6f,
    0x73,
    0x65,
    0x70,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x74,
    0x72,
    0x65,
    0x61,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x73,
    0x3c,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x61,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x6e,
    0x27,
    0x74,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x48,
    0x75,
    0x6e,
    0x67,
    0x61,
    0x72,
    0x79,
    0x41,
    0x69,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x65,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x4d,
    0x69,
    0x63,
    0x68,
    0x61,
    0x65,
    0x6c,
    0x53,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x73,
    0x50,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x2c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x65,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x22,
    0x3e,
    0x0a,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x47,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x6e,
    0x20,
    0x41,
    0x66,
    0x66,
    0x61,
    0x69,
    0x72,
    0x73,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x79,
    0x69,
    0x64,
    0x65,
    0x61,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x61,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x73,
    0x74,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x2e,
    0x73,
    0x72,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x63,
    0x61,
    0x72,
    0x74,
    0x6f,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x4d,
    0x75,
    0x73,
    0x6c,
    0x69,
    0x6d,
    0x73,
    0x57,
    0x68,
    0x61,
    0x74,
    0x20,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x76,
    0x65,
    0x61,
    0x6c,
    0x73,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x65,
    0x64,
    0x2c,
    0x65,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x2f,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x5f,
    0x61,
    0x6f,
    0x75,
    0x74,
    0x64,
    0x6f,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x65,
    0x28,
    0x41,
    0x75,
    0x73,
    0x74,
    0x72,
    0x69,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x74,
    0x69,
    0x63,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x2c,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x69,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x48,
    0x65,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x49,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x41,
    0x63,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x79,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x44,
    0x61,
    0x6e,
    0x69,
    0x65,
    0x6c,
    0x20,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x22,
    0x3e,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x75,
    0x74,
    0x69,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x41,
    0x62,
    0x72,
    0x61,
    0x68,
    0x61,
    0x6d,
    0x28,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x7b,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x70,
    0x75,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x29,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x28,
    0x7c,
    0x7c,
    0x20,
    0x5b,
    0x5d,
    0x3b,
    0x0a,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5b,
    0x20,
    0x2a,
    0x6b,
    0x69,
    0x74,
    0x63,
    0x68,
    0x65,
    0x6e,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x64,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x27,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x74,
    0x73,
    0x69,
    0x66,
    0x28,
    0x74,
    0x79,
    0x70,
    0x65,
    0x49,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x26,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x3b,
    0x20,
    0x22,
    0x3e,
    0x54,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x62,
    0x6f,
    0x72,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x4f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x67,
    0x6f,
    0x69,
    0x6e,
    0x67,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x69,
    0x66,
    0x79,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x73,
    0x66,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x69,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x77,
    0x6e,
    0x61,
    0x73,
    0x73,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6e,
    0x76,
    0x69,
    0x74,
    0x65,
    0x64,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x77,
    0x6e,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x74,
    0x64,
    0x69,
    0x61,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x64,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x65,
    0x72,
    0x70,
    0x68,
    0x70,
    0x3f,
    0x69,
    0x64,
    0x3d,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x68,
    0x6f,
    0x6c,
    0x29,
    0x3b,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x76,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6c,
    0x73,
    0x72,
    0x65,
    0x76,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x41,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x61,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x69,
    0x64,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x64,
    0x69,
    0x6c,
    0x6c,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x77,
    0x61,
    0x6c,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x73,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x66,
    0x79,
    0x6d,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x73,
    0x75,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x65,
    0x78,
    0x74,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x44,
    0x65,
    0x66,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x64,
    0x69,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x0a,
    0x09,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x63,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x73,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x4c,
    0x69,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x42,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x3f,
    0x61,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6b,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x6b,
    0x74,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x79,
    0x27,
    0x73,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x77,
    0x65,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x41,
    0x6c,
    0x6c,
    0x20,
    0x52,
    0x69,
    0x67,
    0x3b,
    0x0a,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x72,
    0x61,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x41,
    0x6c,
    0x73,
    0x6f,
    0x2c,
    0x20,
    0x63,
    0x72,
    0x75,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x22,
    0x3e,
    0x64,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x66,
    0x69,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x78,
    0x61,
    0x73,
    0x20,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2c,
    0x20,
    0x73,
    0x2c,
    0x20,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x3d,
    0x20,
    0x0a,
    0x0d,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x74,
    0x6f,
    0x77,
    0x61,
    0x72,
    0x64,
    0x73,
    0x52,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x50,
    0x72,
    0x69,
    0x76,
    0x61,
    0x74,
    0x65,
    0x46,
    0x6f,
    0x72,
    0x65,
    0x69,
    0x67,
    0x6e,
    0x50,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x65,
    0x72,
    0x63,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x73,
    0x56,
    0x69,
    0x72,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x73,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x50,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x3b,
    0x70,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x74,
    0x79,
    0x63,
    0x68,
    0x61,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x4c,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x73,
    0x41,
    0x6e,
    0x74,
    0x68,
    0x6f,
    0x6e,
    0x79,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x6e,
    0x22,
    0x20,
    0x52,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x45,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x79,
    0x72,
    0x65,
    0x61,
    0x63,
    0x68,
    0x65,
    0x73,
    0x63,
    0x75,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x67,
    0x72,
    0x61,
    0x76,
    0x69,
    0x74,
    0x79,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x43,
    0x68,
    0x61,
    0x70,
    0x74,
    0x65,
    0x72,
    0x2d,
    0x73,
    0x68,
    0x61,
    0x64,
    0x6f,
    0x77,
    0x4e,
    0x6f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x64,
    0x69,
    0x75,
    0x6d,
    0x77,
    0x69,
    0x64,
    0x67,
    0x65,
    0x74,
    0x73,
    0x76,
    0x61,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x72,
    0x61,
    0x76,
    0x65,
    0x6c,
    0x73,
    0x68,
    0x65,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x79,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x61,
    0x72,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x61,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x79,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x64,
    0x61,
    0x69,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x74,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x0a,
    0x0a,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x27,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x27,
    0x63,
    0x68,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x6b,
    0x65,
    0x79,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x74,
    0x20,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x63,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x28,
    0x74,
    0x68,
    0x69,
    0x73,
    0x29,
    0x3b,
    0x41,
    0x6e,
    0x64,
    0x72,
    0x65,
    0x77,
    0x20,
    0x75,
    0x6e,
    0x69,
    0x71,
    0x75,
    0x65,
    0x20,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x33,
    0x30,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x3b,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x70,
    0x6c,
    0x75,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x20,
    0x68,
    0x65,
    0x72,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x53,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x46,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x74,
    0x72,
    0x65,
    0x73,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x73,
    0x44,
    0x75,
    0x6b,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x69,
    0x74,
    0x77,
    0x68,
    0x61,
    0x74,
    0x20,
    0x69,
    0x73,
    0x68,
    0x61,
    0x72,
    0x6d,
    0x6f,
    0x6e,
    0x79,
    0x61,
    0x20,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x22,
    0x3a,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x69,
    0x6e,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x65,
    0x6e,
    0x75,
    0x22,
    0x3e,
    0x0a,
    0x6d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x6c,
    0x79,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6c,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x53,
    0x75,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x64,
    0x61,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6c,
    0x6f,
    0x79,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x66,
    0x69,
    0x74,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x77,
    0x61,
    0x73,
    0x65,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x6f,
    0x72,
    0x73,
    0x75,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x53,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x68,
    0x65,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x52,
    0x75,
    0x73,
    0x73,
    0x69,
    0x61,
    0x6e,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x65,
    0x73,
    0x74,
    0x41,
    0x6c,
    0x62,
    0x65,
    0x72,
    0x74,
    0x61,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x22,
    0x3e,
    0x2e,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x64,
    0x6f,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x66,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x62,
    0x61,
    0x6e,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x62,
    0x65,
    0x6e,
    0x65,
    0x61,
    0x74,
    0x68,
    0x44,
    0x65,
    0x73,
    0x70,
    0x69,
    0x74,
    0x65,
    0x43,
    0x61,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x29,
    0x2c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x61,
    0x64,
    0x66,
    0x69,
    0x66,
    0x74,
    0x65,
    0x65,
    0x6e,
    0x61,
    0x73,
    0x20,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x2e,
    0x79,
    0x61,
    0x68,
    0x6f,
    0x6f,
    0x2e,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x66,
    0x69,
    0x67,
    0x68,
    0x74,
    0x65,
    0x72,
    0x6f,
    0x62,
    0x73,
    0x63,
    0x75,
    0x72,
    0x65,
    0x72,
    0x65,
    0x66,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x63,
    0x3d,
    0x20,
    0x4d,
    0x61,
    0x74,
    0x68,
    0x2e,
    0x65,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x6c,
    0x65,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x72,
    0x6f,
    0x72,
    0x79,
    0x65,
    0x61,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x62,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x72,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x74,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x20,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x68,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x63,
    0x6c,
    0x6f,
    0x75,
    0x64,
    0x66,
    0x72,
    0x77,
    0x61,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x4d,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x31,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x42,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x74,
    0x76,
    0x69,
    0x72,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x22,
    0x3e,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x64,
    0x45,
    0x4e,
    0x44,
    0x20,
    0x2d,
    0x2d,
    0x3e,
    0x66,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x61,
    0x77,
    0x61,
    0x72,
    0x64,
    0x65,
    0x64,
    0x4c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x48,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x20,
    0x66,
    0x61,
    0x69,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x77,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x79,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x6c,
    0x41,
    0x66,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x22,
    0x3e,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x66,
    0x61,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x73,
    0x42,
    0x72,
    0x61,
    0x73,
    0x69,
    0x6c,
    0x29,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x73,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x47,
    0x72,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x70,
    0x75,
    0x72,
    0x73,
    0x75,
    0x65,
    0x64,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x73,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x75,
    0x70,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x73,
    0x61,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x69,
    0x66,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x68,
    0x65,
    0x65,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x70,
    0x75,
    0x73,
    0x68,
    0x28,
    0x66,
    0x75,
    0x41,
    0x75,
    0x67,
    0x75,
    0x73,
    0x74,
    0x20,
    0x55,
    0x54,
    0x46,
    0x2d,
    0x38,
    0x22,
    0x3e,
    0x46,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x73,
    0x79,
    0x69,
    0x6e,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x6a,
    0x75,
    0x72,
    0x65,
    0x64,
    0x55,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x66,
    0x61,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x75,
    0x72,
    0x65,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x64,
    0x65,
    0x66,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x4d,
    0x65,
    0x64,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6b,
    0x65,
    0x79,
    0x43,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x69,
    0x78,
    0x74,
    0x65,
    0x65,
    0x6e,
    0x49,
    0x73,
    0x6c,
    0x61,
    0x6d,
    0x69,
    0x63,
    0x23,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x30,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x72,
    0x65,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x28,
    0x74,
    0x79,
    0x70,
    0x65,
    0x6f,
    0x66,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x20,
    0x3d,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x65,
    0x72,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x50,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x73,
    0x74,
    0x65,
    0x72,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x3c,
    0x74,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x66,
    0x75,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x76,
    0x69,
    0x65,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x63,
    0x72,
    0x69,
    0x63,
    0x6b,
    0x65,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x68,
    0x65,
    0x74,
    0x73,
    0x68,
    0x69,
    0x66,
    0x74,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x52,
    0x75,
    0x73,
    0x73,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x63,
    0x74,
    0x61,
    0x6c,
    0x67,
    0x65,
    0x62,
    0x72,
    0x61,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x2d,
    0x62,
    0x75,
    0x6c,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x0a,
    0x20,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x29,
    0x2e,
    0x76,
    0x61,
    0x6c,
    0x28,
    0x29,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x29,
    0x3b,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x62,
    0x61,
    0x6e,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x6e,
    0x61,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x41,
    0x72,
    0x69,
    0x7a,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x72,
    0x65,
    0x64,
    0x69,
    0x74,
    0x73,
    0x29,
    0x3b,
    0x0a,
    0x7d,
    0x29,
    0x3b,
    0x0a,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x43,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x73,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x42,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x68,
    0x61,
    0x72,
    0x67,
    0x65,
    0x64,
    0x54,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x3e,
    0x43,
    0x61,
    0x70,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x65,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x67,
    0x6f,
    0x64,
    0x64,
    0x65,
    0x73,
    0x73,
    0x54,
    0x61,
    0x67,
    0x20,
    0x2d,
    0x2d,
    0x3e,
    0x41,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x62,
    0x75,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x52,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x70,
    0x61,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x69,
    0x6e,
    0x3d,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x26,
    0x4c,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6c,
    0x6e,
    0x77,
    0x65,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x4a,
    0x75,
    0x64,
    0x61,
    0x69,
    0x73,
    0x6d,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x27,
    0x5d,
    0x29,
    0x3b,
    0x0a,
    0x20,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x6e,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x27,
    0x2c,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x0a,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x61,
    0x72,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x73,
    0x74,
    0x72,
    0x65,
    0x65,
    0x74,
    0x73,
    0x42,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x72,
    0x64,
    0x61,
    0x73,
    0x73,
    0x65,
    0x72,
    0x74,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x73,
    0x79,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x72,
    0x62,
    0x6f,
    0x75,
    0x72,
    0x46,
    0x72,
    0x65,
    0x65,
    0x64,
    0x6f,
    0x6d,
    0x6a,
    0x65,
    0x77,
    0x65,
    0x6c,
    0x72,
    0x79,
    0x2f,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x2e,
    0x2e,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x6f,
    0x6e,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x22,
    0x20,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x20,
    0x70,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x63,
    0x72,
    0x6f,
    0x6e,
    0x79,
    0x6d,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x72,
    0x30,
    0x30,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x61,
    0x73,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x2f,
    0x2a,
    0x20,
    0x3c,
    0x21,
    0x5b,
    0x43,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x3d,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x73,
    0x74,
    0x20,
    0x70,
    0x69,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x65,
    0x64,
    0x75,
    0x73,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x4d,
    0x61,
    0x74,
    0x74,
    0x68,
    0x65,
    0x77,
    0x74,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x73,
    0x64,
    0x61,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x64,
    0x77,
    0x61,
    0x79,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6c,
    0x61,
    0x77,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x61,
    0x73,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x7d,
    0x63,
    0x61,
    0x74,
    0x63,
    0x68,
    0x28,
    0x73,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x62,
    0x6f,
    0x78,
    0x77,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x63,
    0x69,
    0x74,
    0x69,
    0x7a,
    0x65,
    0x6e,
    0x49,
    0x20,
    0x64,
    0x6f,
    0x6e,
    0x27,
    0x74,
    0x72,
    0x65,
    0x74,
    0x72,
    0x65,
    0x61,
    0x74,
    0x2e,
    0x20,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x77,
    0x77,
    0x2e,
    0x22,
    0x29,
    0x3b,
    0x0a,
    0x62,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x61,
    0x69,
    0x6c,
    0x74,
    0x6f,
    0x3a,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x2e,
    0x20,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x73,
    0x7c,
    0x7c,
    0x7b,
    0x7d,
    0x3b,
    0x77,
    0x69,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x79,
    0x6e,
    0x6f,
    0x6e,
    0x79,
    0x6d,
    0x64,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x73,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x70,
    0x61,
    0x67,
    0x65,
    0x54,
    0x72,
    0x61,
    0x75,
    0x6e,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x20,
    0x73,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x22,
    0x3e,
    0x3c,
    0x63,
    0x6f,
    0x6d,
    0x53,
    0x63,
    0x6f,
    0x72,
    0x41,
    0x6c,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6a,
    0x51,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x74,
    0x6f,
    0x75,
    0x72,
    0x69,
    0x73,
    0x74,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x63,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x22,
    0x20,
    0x57,
    0x69,
    0x6c,
    0x68,
    0x65,
    0x6c,
    0x6d,
    0x73,
    0x75,
    0x62,
    0x75,
    0x72,
    0x62,
    0x73,
    0x67,
    0x65,
    0x6e,
    0x75,
    0x69,
    0x6e,
    0x65,
    0x62,
    0x69,
    0x73,
    0x68,
    0x6f,
    0x70,
    0x73,
    0x2e,
    0x73,
    0x70,
    0x6c,
    0x69,
    0x74,
    0x28,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x20,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x73,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x73,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x68,
    0x69,
    0x65,
    0x66,
    0x6c,
    0x79,
    0x2d,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x2d,
    0x62,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x0a,
    0x0a,
    0x2e,
    0x20,
    0x57,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x64,
    0x69,
    0x73,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x45,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x73,
    0x20,
    0x76,
    0x69,
    0x61,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x70,
    0x61,
    0xc3,
    0xb1,
    0x6f,
    0x6c,
    0x77,
    0x65,
    0x6c,
    0x66,
    0x61,
    0x72,
    0x65,
    0x72,
    0x75,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x72,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x63,
    0x61,
    0x70,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x68,
    0x69,
    0x73,
    0x20,
    0x73,
    0x6f,
    0x6e,
    0x72,
    0x75,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x74,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x2c,
    0x3d,
    0x30,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x28,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x73,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x20,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x2f,
    0x70,
    0x61,
    0x67,
    0x4d,
    0x61,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x20,
    0x4b,
    0x65,
    0x6e,
    0x6e,
    0x65,
    0x64,
    0x79,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x65,
    0x64,
    0x42,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x73,
    0x2f,
    0x2f,
    0x2d,
    0x2d,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x73,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x68,
    0x69,
    0x6d,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x74,
    0x73,
    0x20,
    0x62,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2e,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x77,
    0x61,
    0x79,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x6c,
    0x61,
    0x64,
    0x76,
    0x69,
    0x73,
    0x65,
    0x64,
    0x70,
    0x65,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x79,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x3a,
    0x69,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x4c,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x73,
    0x61,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x48,
    0x65,
    0x72,
    0x62,
    0x65,
    0x72,
    0x74,
    0x73,
    0x74,
    0x72,
    0x69,
    0x6b,
    0x65,
    0x73,
    0x20,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x73,
    0x2e,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x66,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x70,
    0x73,
    0x6c,
    0x6f,
    0x77,
    0x6c,
    0x79,
    0x20,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x65,
    0x72,
    0x20,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x69,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x72,
    0x61,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x75,
    0x6c,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x20,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x70,
    0x61,
    0x69,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x69,
    0x74,
    0x4b,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x6b,
    0x74,
    0x41,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x69,
    0x6f,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x74,
    0x72,
    0x65,
    0x61,
    0x6d,
    0x73,
    0x74,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x64,
    0x22,
    0x29,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x28,
    0x68,
    0x6f,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x73,
    0x2c,
    0x50,
    0x69,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x20,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x3d,
    0x22,
    0x20,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x65,
    0x3c,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x43,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x56,
    0x3e,
    0x3c,
    0x5c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x73,
    0x6f,
    0x6c,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x68,
    0x61,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x6c,
    0x61,
    0x76,
    0x65,
    0x72,
    0x79,
    0x77,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x73,
    0x21,
    0x3d,
    0x20,
    0x27,
    0x75,
    0x6e,
    0x64,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x2d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x41,
    0x72,
    0x61,
    0x62,
    0x69,
    0x61,
    0x6e,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x2d,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x2c,
    0x69,
    0x73,
    0x20,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x73,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x73,
    0x69,
    0x72,
    0x65,
    0x64,
    0x43,
    0x6c,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x4d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x65,
    0x61,
    0x64,
    0x27,
    0x29,
    0x5b,
    0x30,
    0x43,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x73,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x6f,
    0x73,
    0x3e,
    0x26,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x3b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x22,
    0x3e,
    0x61,
    0x73,
    0x73,
    0x65,
    0x6d,
    0x62,
    0x6c,
    0x6d,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x77,
    0x69,
    0x64,
    0x67,
    0x65,
    0x74,
    0x2e,
    0x70,
    0x73,
    0x3a,
    0x22,
    0x20,
    0x3f,
    0x20,
    0x72,
    0x65,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x74,
    0x62,
    0x79,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x46,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x20,
    0x65,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x64,
    0x65,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x64,
    0x43,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x68,
    0x61,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x75,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x62,
    0x75,
    0x74,
    0x20,
    0x61,
    0x72,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x42,
    0x61,
    0x62,
    0x79,
    0x6c,
    0x6f,
    0x6e,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x20,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x72,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x73,
    0x20,
    0x75,
    0x73,
    0x65,
    0x41,
    0x73,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x65,
    0x73,
    0x61,
    0x20,
    0x74,
    0x68,
    0x69,
    0x72,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x48,
    0x6f,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6e,
    0x32,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x22,
    0x3e,
    0x61,
    0x63,
    0x63,
    0x75,
    0x73,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x75,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x67,
    0x6f,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x46,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x29,
    0x2e,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x28,
    0x70,
    0x72,
    0x69,
    0x65,
    0x73,
    0x74,
    0x73,
    0x20,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x69,
    0x6e,
    0x20,
    0x4a,
    0x75,
    0x6c,
    0x79,
    0x73,
    0x74,
    0x20,
    0x2b,
    0x20,
    0x22,
    0x67,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x64,
    0x65,
    0x63,
    0x69,
    0x6d,
    0x61,
    0x6c,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x66,
    0x75,
    0x6c,
    0x72,
    0x65,
    0x76,
    0x69,
    0x76,
    0x65,
    0x64,
    0x69,
    0x73,
    0x20,
    0x76,
    0x65,
    0x72,
    0x79,
    0x72,
    0x27,
    0x2b,
    0x27,
    0x69,
    0x70,
    0x74,
    0x6c,
    0x6f,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x73,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x64,
    0x61,
    0x79,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x72,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x66,
    0x75,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x3c,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x28,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x64,
    0x2e,
    0x20,
    0x20,
    0x54,
    0x68,
    0x65,
    0x20,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x62,
    0x79,
    0x2f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x62,
    0x67,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x6c,
    0x61,
    0x77,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x49,
    0x6e,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x61,
    0x61,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x65,
    0x64,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x32,
    0x70,
    0x78,
    0x20,
    0x33,
    0x70,
    0x78,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x61,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x2e,
    0x6d,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x2d,
    0x3d,
    0x20,
    0x74,
    0x72,
    0x75,
    0x65,
    0x3b,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x75,
    0x73,
    0x65,
    0x73,
    0x63,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x2e,
    0x49,
    0x6e,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x20,
    0x3d,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x2c,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x20,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x64,
    0x72,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x61,
    0x73,
    0x6e,
    0x6f,
    0x74,
    0x69,
    0x63,
    0x65,
    0x64,
    0x76,
    0x69,
    0x65,
    0x77,
    0x65,
    0x72,
    0x73,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0a,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x65,
    0x77,
    0x69,
    0x73,
    0x20,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x68,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x68,
    0x69,
    0x70,
    0x70,
    0x65,
    0x64,
    0x62,
    0x72,
    0x3e,
    0x3c,
    0x62,
    0x72,
    0x3e,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x75,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x65,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x20,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x41,
    0x64,
    0x6d,
    0x69,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x66,
    0x69,
    0x78,
    0x65,
    0x64,
    0x3b,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x20,
    0x4d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x50,
    0x72,
    0x65,
    0x73,
    0x73,
    0x2c,
    0x20,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x74,
    0x72,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x76,
    0x61,
    0x64,
    0x65,
    0x64,
    0x3d,
    0x22,
    0x74,
    0x72,
    0x75,
    0x65,
    0x22,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x61,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x7d,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x20,
    0x20,
    0x69,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x65,
    0x74,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x61,
    0x74,
    0x69,
    0x73,
    0x66,
    0x79,
    0x74,
    0x6f,
    0x20,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x6c,
    0x6f,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x50,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x4a,
    0x75,
    0x6e,
    0x65,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x75,
    0x6d,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x46,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x73,
    0x68,
    0x73,
    0x72,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x28,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x20,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x20,
    0x6f,
    0x66,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x6c,
    0x61,
    0x77,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x65,
    0x64,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x73,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x22,
    0x3e,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x61,
    0x73,
    0x53,
    0x74,
    0x61,
    0x6e,
    0x6c,
    0x65,
    0x79,
    0x62,
    0x72,
    0x69,
    0x64,
    0x67,
    0x65,
    0x73,
    0x2f,
    0x67,
    0x6c,
    0x6f,
    0x62,
    0x61,
    0x6c,
    0x43,
    0x72,
    0x6f,
    0x61,
    0x74,
    0x69,
    0x61,
    0x20,
    0x41,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x5b,
    0x30,
    0x5d,
    0x3b,
    0x0a,
    0x20,
    0x20,
    0x69,
    0x74,
    0x2c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x65,
    0x64,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x29,
    0x7b,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x77,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x65,
    0x72,
    0x65,
    0x74,
    0x68,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x46,
    0x46,
    0x46,
    0x46,
    0x46,
    0x46,
    0x22,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x22,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x20,
    0x61,
    0x20,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x79,
    0x73,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x73,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x75,
    0x62,
    0x2d,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x72,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x75,
    0x73,
    0x65,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x22,
    0x3e,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x65,
    0x64,
    0x66,
    0x65,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x4e,
    0x75,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x65,
    0x6c,
    0x70,
    0x57,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x27,
    0x73,
    0x4e,
    0x65,
    0x69,
    0x74,
    0x68,
    0x65,
    0x72,
    0x4d,
    0x65,
    0x78,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x69,
    0x6e,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x62,
    0x79,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x68,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x79,
    0x6c,
    0x61,
    0x77,
    0x73,
    0x75,
    0x69,
    0x74,
    0x64,
    0x65,
    0x76,
    0x69,
    0x73,
    0x65,
    0x64,
    0x2e,
    0x70,
    0x75,
    0x73,
    0x68,
    0x28,
    0x7b,
    0x73,
    0x65,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x73,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x79,
    0x20,
    0x54,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x2e,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x20,
    0x49,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x28,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x75,
    0x73,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x20,
    0x53,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x27,
    0x5d,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x20,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x69,
    0x73,
    0x20,
    0x28,
    0x22,
    0x44,
    0x4f,
    0x4d,
    0x43,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x79,
    0x70,
    0x65,
    0x6f,
    0x66,
    0x20,
    0x4b,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x69,
    0x74,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3b,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x69,
    0x74,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x6d,
    0x69,
    0x78,
    0x74,
    0x75,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x63,
    0x69,
    0x73,
    0x65,
    0x61,
    0x72,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x72,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x27,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x61,
    0x20,
    0x73,
    0x65,
    0x63,
    0x75,
    0x72,
    0x65,
    0x64,
    0x42,
    0x61,
    0x70,
    0x74,
    0x69,
    0x73,
    0x74,
    0x76,
    0x6f,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x0a,
    0x09,
    0x09,
    0x76,
    0x61,
    0x72,
    0x20,
    0x4d,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x32,
    0x67,
    0x72,
    0x65,
    0x77,
    0x20,
    0x75,
    0x70,
    0x43,
    0x6c,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x73,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x77,
    0x61,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x66,
    0x61,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x74,
    0x6f,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x72,
    0x65,
    0x64,
    0x75,
    0x63,
    0x65,
    0x73,
    0x68,
    0x61,
    0x73,
    0x20,
    0x68,
    0x61,
    0x64,
    0x65,
    0x72,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x28,
    0x29,
    0x3b,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x72,
    0x65,
    0x61,
    0x3d,
    0x3d,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x0a,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x66,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x2e,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x6f,
    0x6e,
    0x68,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x2e,
    0x63,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x68,
    0x65,
    0x20,
    0x77,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x75,
    0x74,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x73,
    0x70,
    0x72,
    0x65,
    0x61,
    0x64,
    0x20,
    0x46,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x20,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6d,
    0x73,
    0x2e,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x61,
    0x67,
    0x65,
    0x22,
    0x3e,
    0x4d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x43,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x22,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x61,
    0x73,
    0x20,
    0x68,
    0x69,
    0x67,
    0x68,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x2d,
    0x2d,
    0x3e,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x66,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x64,
    0x73,
    0x65,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x20,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x68,
    0x69,
    0x73,
    0x66,
    0x61,
    0x73,
    0x74,
    0x65,
    0x73,
    0x74,
    0x62,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x73,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x5f,
    0x62,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x62,
    0x6f,
    0x78,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x2c,
    0x61,
    0x20,
    0x79,
    0x6f,
    0x75,
    0x6e,
    0x67,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x72,
    0x65,
    0x4e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x63,
    0x68,
    0x65,
    0x61,
    0x70,
    0x65,
    0x72,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x68,
    0x61,
    0x73,
    0x65,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x77,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x28,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x6c,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x20,
    0x2d,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x50,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x61,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x5f,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2c,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x2c,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6c,
    0x65,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x41,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x61,
    0x79,
    0x6b,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x70,
    0x78,
    0x3b,
    0x22,
    0x3e,
    0x0d,
    0x0a,
    0x70,
    0x75,
    0x73,
    0x68,
    0x65,
    0x64,
    0x20,
    0x61,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x6e,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x43,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x6f,
    0x72,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x64,
    0x49,
    0x53,
    0x42,
    0x4e,
    0x20,
    0x30,
    0x2d,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x73,
    0x4f,
    0x63,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x44,
    0x65,
    0x66,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x65,
    0x6e,
    0x61,
    0x63,
    0x74,
    0x65,
    0x64,
    0x77,
    0x69,
    0x73,
    0x68,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x6c,
    0x79,
    0x63,
    0x6f,
    0x6f,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x3d,
    0x69,
    0x74,
    0x2e,
    0x20,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x4d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x73,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x2e,
    0x69,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x3d,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x5f,
    0x61,
    0x20,
    0x67,
    0x6f,
    0x6f,
    0x64,
    0x20,
    0x72,
    0x65,
    0x6b,
    0x6c,
    0x61,
    0x6d,
    0x61,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x2c,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x5f,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x70,
    0x61,
    0x6e,
    0x65,
    0x6c,
    0x22,
    0x3e,
    0x4c,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x2c,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x72,
    0x75,
    0x73,
    0x68,
    0x65,
    0x64,
    0x62,
    0x61,
    0x70,
    0x74,
    0x69,
    0x73,
    0x6d,
    0x63,
    0x6f,
    0x61,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x73,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x20,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x6c,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x62,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x72,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x72,
    0x79,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x72,
    0x73,
    0x20,
    0x53,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x50,
    0x65,
    0x72,
    0x68,
    0x61,
    0x70,
    0x73,
    0x65,
    0x73,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x72,
    0x69,
    0x73,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x47,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x69,
    0x73,
    0x76,
    0x69,
    0x65,
    0x77,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x75,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x65,
    0x20,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x67,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x63,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x2e,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x4c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x62,
    0x75,
    0x74,
    0x48,
    0x69,
    0x67,
    0x68,
    0x77,
    0x61,
    0x79,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x79,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x65,
    0x20,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x73,
    0x62,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x79,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6c,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x68,
    0x72,
    0x65,
    0x61,
    0x74,
    0x73,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x67,
    0x65,
    0x72,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x66,
    0x75,
    0x73,
    0x65,
    0x64,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x3d,
    0x55,
    0x53,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x53,
    0x65,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x2e,
    0x68,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x3a,
    0x68,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x6c,
    0x65,
    0x73,
    0x62,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x5f,
    0x5f,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x48,
    0x61,
    0x72,
    0x76,
    0x61,
    0x72,
    0x64,
    0x2f,
    0x70,
    0x69,
    0x78,
    0x65,
    0x6c,
    0x2e,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x73,
    0x6b,
    0x79,
    0x73,
    0x63,
    0x72,
    0x61,
    0x55,
    0x6e,
    0x69,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x0d,
    0x0a,
    0x41,
    0x74,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x6e,
    0x75,
    0x63,
    0x6c,
    0x65,
    0x75,
    0x73,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x79,
    0x2c,
    0x70,
    0x75,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x20,
    0x61,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x61,
    0x20,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x68,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x65,
    0x6c,
    0x73,
    0x65,
    0x20,
    0x7b,
    0x0a,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6e,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2c,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x57,
    0x65,
    0x62,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x61,
    0x76,
    0x61,
    0x6c,
    0x72,
    0x79,
    0x48,
    0x65,
    0x20,
    0x64,
    0x69,
    0x65,
    0x64,
    0x73,
    0x65,
    0x61,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x30,
    0x30,
    0x2c,
    0x30,
    0x30,
    0x30,
    0x20,
    0x7b,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x66,
    0x28,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x74,
    0x73,
    0x73,
    0x6f,
    0x6c,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x6d,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x72,
    0x65,
    0x6e,
    0x65,
    0x77,
    0x65,
    0x64,
    0x44,
    0x65,
    0x74,
    0x72,
    0x6f,
    0x69,
    0x74,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x73,
    0x74,
    0x65,
    0x69,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x20,
    0x69,
    0x6e,
    0x53,
    0x65,
    0x6e,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x55,
    0x73,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x4b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x73,
    0x2d,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x68,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x61,
    0x72,
    0x74,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x68,
    0x69,
    0x6d,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x74,
    0x20,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x66,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x42,
    0x75,
    0x66,
    0x66,
    0x61,
    0x6c,
    0x6f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x3c,
    0x77,
    0x68,
    0x61,
    0x74,
    0x20,
    0x68,
    0x65,
    0x66,
    0x72,
    0x65,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x43,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x64,
    0x61,
    0x79,
    0x6e,
    0x65,
    0x72,
    0x76,
    0x6f,
    0x75,
    0x73,
    0x73,
    0x71,
    0x75,
    0x61,
    0x72,
    0x65,
    0x20,
    0x7d,
    0x3b,
    0x69,
    0x66,
    0x28,
    0x67,
    0x6f,
    0x69,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6d,
    0x67,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2f,
    0x74,
    0x75,
    0x65,
    0x73,
    0x64,
    0x61,
    0x79,
    0x6c,
    0x6f,
    0x6f,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x53,
    0x6f,
    0x6c,
    0x6f,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x78,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x2d,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x75,
    0x6d,
    0x22,
    0x44,
    0x4f,
    0x20,
    0x4e,
    0x4f,
    0x54,
    0x20,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x2c,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x61,
    0x20,
    0x77,
    0x61,
    0x72,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x61,
    0x20,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x2e,
    0x68,
    0x69,
    0x67,
    0x68,
    0x77,
    0x61,
    0x79,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x76,
    0x69,
    0x74,
    0x79,
    0x22,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x22,
    0x3e,
    0x6f,
    0x62,
    0x6c,
    0x69,
    0x67,
    0x65,
    0x64,
    0x72,
    0x69,
    0x73,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x22,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x45,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x70,
    0x72,
    0x61,
    0x69,
    0x73,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x20,
    0x69,
    0x74,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x68,
    0x69,
    0x73,
    0x61,
    0x74,
    0x68,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x4a,
    0x75,
    0x70,
    0x69,
    0x74,
    0x65,
    0x72,
    0x59,
    0x61,
    0x68,
    0x6f,
    0x6f,
    0x21,
    0x20,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x73,
    0x6f,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x73,
    0x2e,
    0x20,
    0x54,
    0x68,
    0x65,
    0x20,
    0x61,
    0x20,
    0x77,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x3f,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x20,
    0x62,
    0x69,
    0x63,
    0x79,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x64,
    0x61,
    0x79,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x52,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2c,
    0x68,
    0x69,
    0x67,
    0x68,
    0x65,
    0x72,
    0x20,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x77,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x2c,
    0x20,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x20,
    0x70,
    0x61,
    0x79,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x2d,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x3b,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x6e,
    0x6e,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4e,
    0x65,
    0x77,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x22,
    0x20,
    0x74,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x20,
    0x62,
    0x72,
    0x69,
    0x65,
    0x66,
    0x28,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x73,
    0x2e,
    0x3b,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x7a,
    0x79,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x7b,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x70,
    0x79,
    0x61,
    0x20,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x62,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x22,
    0x3e,
    0x0a,
    0x28,
    0x29,
    0x3b,
    0x22,
    0x20,
    0x72,
    0x65,
    0x61,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x5c,
    0x75,
    0x30,
    0x30,
    0x33,
    0x43,
    0x61,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x61,
    0x74,
    0x72,
    0x3e,
    0x0d,
    0x0a,
    0x09,
    0x09,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x67,
    0x69,
    0x76,
    0x65,
    0x73,
    0x20,
    0x61,
    0x3c,
    0x53,
    0x43,
    0x52,
    0x49,
    0x50,
    0x54,
    0x52,
    0x61,
    0x69,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x73,
    0x2f,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x62,
    0x6f,
    0x78,
    0x42,
    0x79,
    0x49,
    0x64,
    0x28,
    0x22,
    0x78,
    0x68,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x73,
    0x2c,
    0x77,
    0x61,
    0x74,
    0x63,
    0x68,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x66,
    0x20,
    0x28,
    0x77,
    0x69,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x73,
    0x20,
    0x55,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x62,
    0x75,
    0x74,
    0x20,
    0x68,
    0x61,
    0x73,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x62,
    0x79,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x65,
    0x61,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x2f,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x74,
    0x61,
    0x67,
    0x65,
    0x69,
    0x6e,
    0x20,
    0x65,
    0x61,
    0x63,
    0x68,
    0x61,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x62,
    0x61,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x49,
    0x6e,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x67,
    0x6f,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x56,
    0x61,
    0x3b,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x3c,
    0x2f,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x72,
    0x65,
    0x20,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x68,
    0x61,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x70,
    0x61,
    0x73,
    0x73,
    0x69,
    0x76,
    0x65,
    0x48,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x3d,
    0x20,
    0x57,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x66,
    0x65,
    0x72,
    0x74,
    0x69,
    0x6c,
    0x65,
    0x56,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x3d,
    0x5b,
    0x5d,
    0x3b,
    0x28,
    0x66,
    0x75,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x73,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x61,
    0x63,
    0x74,
    0x73,
    0x20,
    0x61,
    0x73,
    0x49,
    0x6e,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x3c,
    0x21,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x42,
    0x65,
    0x69,
    0x6a,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x61,
    0x74,
    0x61,
    0x6c,
    0xc3,
    0xa0,
    0x64,
    0x65,
    0x75,
    0x74,
    0x73,
    0x63,
    0x68,
    0x65,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x75,
    0x65,
    0x75,
    0x73,
    0x6b,
    0x61,
    0x72,
    0x61,
    0x67,
    0x61,
    0x65,
    0x69,
    0x6c,
    0x67,
    0x65,
    0x73,
    0x76,
    0x65,
    0x6e,
    0x73,
    0x6b,
    0x61,
    0x65,
    0x73,
    0x70,
    0x61,
    0xc3,
    0xb1,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x73,
    0x61,
    0x6a,
    0x65,
    0x75,
    0x73,
    0x75,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x6f,
    0x6d,
    0xc3,
    0xa9,
    0x78,
    0x69,
    0x63,
    0x6f,
    0x70,
    0xc3,
    0xa1,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x73,
    0x69,
    0x65,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x6f,
    0x63,
    0x74,
    0x75,
    0x62,
    0x72,
    0x65,
    0x64,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x61,
    0xc3,
    0xb1,
    0x61,
    0x64,
    0x69,
    0x72,
    0x65,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x61,
    0x6d,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x61,
    0x74,
    0x72,
    0x61,
    0x76,
    0xc3,
    0xa9,
    0x73,
    0x67,
    0x72,
    0x61,
    0x63,
    0x69,
    0x61,
    0x73,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x61,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x6f,
    0x65,
    0x73,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x64,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6e,
    0xc3,
    0xba,
    0x6d,
    0x65,
    0x72,
    0x6f,
    0x61,
    0x63,
    0x75,
    0x65,
    0x72,
    0x64,
    0x6f,
    0x6d,
    0xc3,
    0xba,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6d,
    0x69,
    0x65,
    0x6d,
    0x62,
    0x72,
    0x6f,
    0x6f,
    0x66,
    0x65,
    0x72,
    0x74,
    0x61,
    0x73,
    0x61,
    0x6c,
    0x67,
    0x75,
    0x6e,
    0x6f,
    0x73,
    0x70,
    0x61,
    0xc3,
    0xad,
    0x73,
    0x65,
    0x73,
    0x65,
    0x6a,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x65,
    0x63,
    0x68,
    0x6f,
    0x61,
    0x64,
    0x65,
    0x6d,
    0xc3,
    0xa1,
    0x73,
    0x70,
    0x72,
    0x69,
    0x76,
    0x61,
    0x64,
    0x6f,
    0x61,
    0x67,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x68,
    0x6f,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x65,
    0x76,
    0x69,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x6f,
    0xc3,
    0xba,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x6f,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x6f,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6d,
    0x75,
    0x6a,
    0x65,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x64,
    0x61,
    0x61,
    0x6e,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6f,
    0x65,
    0x6d,
    0x62,
    0x61,
    0x72,
    0x67,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x61,
    0x64,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x65,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x6f,
    0x6d,
    0x65,
    0x6a,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x66,
    0x65,
    0x62,
    0x72,
    0x65,
    0x72,
    0x6f,
    0x64,
    0x69,
    0x73,
    0x65,
    0xc3,
    0xb1,
    0x6f,
    0x74,
    0x75,
    0x72,
    0x69,
    0x73,
    0x6d,
    0x6f,
    0x63,
    0xc3,
    0xb3,
    0x64,
    0x69,
    0x67,
    0x6f,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x64,
    0x61,
    0x65,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x61,
    0x61,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x69,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x74,
    0x65,
    0x67,
    0x75,
    0x61,
    0x72,
    0x64,
    0x61,
    0x72,
    0x61,
    0x6c,
    0x67,
    0x75,
    0x6e,
    0x61,
    0x73,
    0x70,
    0x72,
    0x65,
    0x63,
    0x69,
    0x6f,
    0x73,
    0x61,
    0x6c,
    0x67,
    0x75,
    0x69,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x64,
    0x6f,
    0x76,
    0x69,
    0x73,
    0x69,
    0x74,
    0x61,
    0x73,
    0x74,
    0xc3,
    0xad,
    0x74,
    0x75,
    0x6c,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x63,
    0x65,
    0x72,
    0x73,
    0x65,
    0x67,
    0x75,
    0x6e,
    0x64,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6a,
    0x6f,
    0x66,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x6d,
    0x69,
    0x6e,
    0x75,
    0x74,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x67,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x6d,
    0x6f,
    0x73,
    0x65,
    0x66,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x73,
    0x6d,
    0xc3,
    0xa1,
    0x6c,
    0x61,
    0x67,
    0x61,
    0x73,
    0x65,
    0x73,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x72,
    0x65,
    0x76,
    0x69,
    0x73,
    0x74,
    0x61,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x61,
    0x64,
    0x61,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x67,
    0x61,
    0x72,
    0x63,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x65,
    0x63,
    0x75,
    0x61,
    0x64,
    0x6f,
    0x72,
    0x71,
    0x75,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x6f,
    0x64,
    0x65,
    0x62,
    0x65,
    0x72,
    0xc3,
    0xa1,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x72,
    0x69,
    0x61,
    0x68,
    0x6f,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x73,
    0x6d,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x61,
    0x70,
    0x6f,
    0x64,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x6d,
    0x61,
    0xc3,
    0xb1,
    0x61,
    0x6e,
    0x61,
    0xc3,
    0xba,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x6f,
    0x73,
    0x6f,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x74,
    0x61,
    0x6d,
    0x62,
    0x69,
    0x65,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0xc3,
    0xba,
    0x6e,
    0x73,
    0x61,
    0x6c,
    0x75,
    0x64,
    0x6f,
    0x73,
    0x70,
    0x6f,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x73,
    0x6d,
    0x65,
    0x6a,
    0x6f,
    0x72,
    0x61,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x68,
    0x6f,
    0x6d,
    0x65,
    0x70,
    0x61,
    0x67,
    0x65,
    0x73,
    0x65,
    0x63,
    0x75,
    0x72,
    0x69,
    0x74,
    0x79,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x64,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x61,
    0x69,
    0x67,
    0x6e,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x65,
    0x78,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x72,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x65,
    0x78,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x65,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x74,
    0x72,
    0x79,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x73,
    0x7a,
    0x2d,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x3a,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x77,
    0x61,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x73,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x66,
    0x65,
    0x65,
    0x64,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x70,
    0x69,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6c,
    0x61,
    0x75,
    0x64,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x65,
    0x74,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x69,
    0x74,
    0x79,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x6e,
    0x79,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x62,
    0x73,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x76,
    0x69,
    0x65,
    0x77,
    0x6d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x63,
    0x74,
    0x72,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x75,
    0x72,
    0x65,
    0x76,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x3c,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x73,
    0x68,
    0x6f,
    0x70,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x6f,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x62,
    0x65,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6f,
    0x72,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x4c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x64,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x74,
    0x72,
    0x61,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x61,
    0x73,
    0x73,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x6d,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x73,
    0x74,
    0x75,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6c,
    0x79,
    0x66,
    0x69,
    0x67,
    0x68,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x61,
    0x62,
    0x61,
    0x73,
    0x65,
    0x66,
    0x65,
    0x73,
    0x74,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x62,
    0x72,
    0x65,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x74,
    0x64,
    0x72,
    0x6f,
    0x70,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x65,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x61,
    0x72,
    0x72,
    0x69,
    0x61,
    0x67,
    0x65,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x73,
    0x6e,
    0x65,
    0x67,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x73,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x73,
    0x69,
    0x73,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x64,
    0x62,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x70,
    0x75,
    0x72,
    0x63,
    0x68,
    0x61,
    0x73,
    0x65,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x65,
    0x73,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x61,
    0x72,
    0x67,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x72,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x64,
    0x69,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6c,
    0x69,
    0x63,
    0x74,
    0x68,
    0x61,
    0x72,
    0x64,
    0x77,
    0x61,
    0x72,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x72,
    0x79,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x6f,
    0x62,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x3d,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x3b,
    0x66,
    0x6f,
    0x72,
    0x28,
    0x76,
    0x61,
    0x72,
    0x20,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x65,
    0x64,
    0x63,
    0x61,
    0x70,
    0x61,
    0x63,
    0x69,
    0x74,
    0x79,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x61,
    0x69,
    0x72,
    0x63,
    0x72,
    0x61,
    0x66,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x79,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x69,
    0x63,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x68,
    0x6f,
    0x73,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x73,
    0x65,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x61,
    0x63,
    0x68,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x64,
    0x61,
    0x75,
    0x67,
    0x68,
    0x74,
    0x65,
    0x72,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x22,
    0x20,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x2f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x2f,
    0x61,
    0x73,
    0x73,
    0x65,
    0x6d,
    0x62,
    0x6c,
    0x79,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x66,
    0x75,
    0x6c,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x67,
    0x69,
    0x2d,
    0x62,
    0x69,
    0x6e,
    0x2f,
    0x70,
    0x75,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x73,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x73,
    0x61,
    0x63,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x69,
    0x63,
    0x65,
    0x78,
    0x65,
    0x72,
    0x63,
    0x69,
    0x73,
    0x65,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x63,
    0x69,
    0x6e,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x63,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x22,
    0x3e,
    0x6f,
    0x62,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x64,
    0x3a,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x70,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x53,
    0x6f,
    0x66,
    0x74,
    0x77,
    0x61,
    0x72,
    0x65,
    0x63,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x64,
    0x65,
    0x63,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x64,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x65,
    0x64,
    0x73,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x6c,
    0x79,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x65,
    0x78,
    0x74,
    0x61,
    0x72,
    0x65,
    0x61,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x65,
    0x76,
    0x65,
    0x72,
    0x79,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x72,
    0x61,
    0x69,
    0x67,
    0x68,
    0x74,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x65,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x76,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x68,
    0x65,
    0x72,
    0x69,
    0x74,
    0x61,
    0x67,
    0x65,
    0x73,
    0x68,
    0x69,
    0x70,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x65,
    0x72,
    0x65,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x64,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x61,
    0x6e,
    0x74,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x76,
    0x69,
    0x6f,
    0x6c,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x79,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x62,
    0x65,
    0x6e,
    0x65,
    0x66,
    0x69,
    0x74,
    0x73,
    0x6c,
    0x61,
    0x75,
    0x6e,
    0x63,
    0x68,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x62,
    0x75,
    0x6c,
    0x6c,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x24,
    0x28,
    0x74,
    0x68,
    0x69,
    0x73,
    0x29,
    0x2e,
    0x72,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x3e,
    0x3c,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x74,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x73,
    0x73,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x64,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x48,
    0x6f,
    0x6d,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x77,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x73,
    0x6e,
    0x65,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x73,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x6d,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x61,
    0x67,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x22,
    0x3e,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x77,
    0x68,
    0x61,
    0x74,
    0x76,
    0x69,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x57,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x20,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x4c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x76,
    0x69,
    0x73,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x44,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x0a,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x73,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x20,
    0x3d,
    0x20,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x76,
    0x69,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x69,
    0x61,
    0x6e,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x68,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x65,
    0x64,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x73,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x52,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x70,
    0x61,
    0x72,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x73,
    0x61,
    0x63,
    0x63,
    0x75,
    0x72,
    0x61,
    0x74,
    0x65,
    0x62,
    0x69,
    0x72,
    0x74,
    0x68,
    0x64,
    0x61,
    0x79,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x67,
    0x79,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x69,
    0x63,
    0x73,
    0x63,
    0x72,
    0x69,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x50,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x6d,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x3c,
    0x2f,
    0x68,
    0x32,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x6b,
    0x65,
    0x79,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x66,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x6c,
    0x79,
    0x62,
    0x72,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x61,
    0x64,
    0x65,
    0x71,
    0x75,
    0x61,
    0x74,
    0x65,
    0x70,
    0x61,
    0x6b,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3c,
    0x2f,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x3e,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x62,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x65,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x72,
    0x70,
    0x6c,
    0x75,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x2f,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x48,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x20,
    0x28,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x67,
    0x72,
    0x61,
    0x64,
    0x75,
    0x61,
    0x74,
    0x65,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6d,
    0x61,
    0x6c,
    0x61,
    0x79,
    0x73,
    0x69,
    0x61,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x3b,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x73,
    0x63,
    0x68,
    0x65,
    0x64,
    0x75,
    0x6c,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x61,
    0x74,
    0x68,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x70,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x73,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x20,
    0x23,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x73,
    0x74,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3c,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x20,
    0x63,
    0x69,
    0x74,
    0x69,
    0x7a,
    0x65,
    0x6e,
    0x73,
    0x63,
    0x6c,
    0x6f,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x61,
    0x74,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x63,
    0x61,
    0x72,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x3c,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x74,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x61,
    0x74,
    0x63,
    0x68,
    0x28,
    0x65,
    0x29,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6e,
    0x4d,
    0x69,
    0x63,
    0x68,
    0x61,
    0x65,
    0x6c,
    0x20,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x74,
    0x63,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x2e,
    0x73,
    0x70,
    0x6c,
    0x69,
    0x74,
    0x28,
    0x22,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x4f,
    0x63,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x72,
    0x20,
    0x29,
    0x7b,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x2d,
    0x2d,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x0a,
    0x0a,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x63,
    0x68,
    0x61,
    0x69,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x73,
    0x52,
    0x69,
    0x63,
    0x68,
    0x61,
    0x72,
    0x64,
    0x20,
    0x77,
    0x68,
    0x61,
    0x74,
    0x65,
    0x76,
    0x65,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x79,
    0x62,
    0x61,
    0x73,
    0x65,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x6a,
    0x75,
    0x64,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x2e,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x20,
    0x77,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x22,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x0d,
    0x0a,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x69,
    0x63,
    0x73,
    0x63,
    0x6f,
    0x74,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x20,
    0x49,
    0x53,
    0x42,
    0x4e,
    0x20,
    0x30,
    0x64,
    0x69,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x2d,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2d,
    0x22,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x65,
    0x72,
    0x73,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x65,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x72,
    0x65,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x49,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x6f,
    0x63,
    0x72,
    0x69,
    0x74,
    0x65,
    0x72,
    0x69,
    0x61,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x6c,
    0x79,
    0x3a,
    0x20,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x27,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x42,
    0x72,
    0x69,
    0x74,
    0x69,
    0x73,
    0x68,
    0x20,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x79,
    0x46,
    0x61,
    0x63,
    0x65,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x6e,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x6f,
    0x75,
    0x73,
    0x76,
    0x65,
    0x68,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x73,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x57,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x61,
    0x6d,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x72,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x63,
    0x75,
    0x72,
    0x61,
    0x63,
    0x79,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x66,
    0x6c,
    0x65,
    0x78,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x43,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x79,
    0x6c,
    0x61,
    0x77,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x6c,
    0x61,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x3d,
    0x22,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x20,
    0x6d,
    0x61,
    0x78,
    0x69,
    0x6d,
    0x75,
    0x6d,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x68,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x74,
    0x6f,
    0x6e,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x61,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x6e,
    0x65,
    0x6c,
    0x73,
    0x2f,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x73,
    0x2f,
    0x2f,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x67,
    0x61,
    0x6c,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x22,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x61,
    0x6c,
    0x77,
    0x69,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x61,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x65,
    0x73,
    0x53,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x64,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x26,
    0x68,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x70,
    0x3b,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x44,
    0x61,
    0x74,
    0x65,
    0x22,
    0x20,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x61,
    0x67,
    0x65,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x6d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x22,
    0x20,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x3e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x6f,
    0x69,
    0x73,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x73,
    0x22,
    0x3e,
    0x0a,
    0x09,
    0x3c,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x61,
    0x74,
    0x75,
    0x72,
    0x64,
    0x61,
    0x79,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x73,
    0x61,
    0x6c,
    0x3d,
    0x22,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x22,
    0x45,
    0x73,
    0x70,
    0x61,
    0xc3,
    0xb1,
    0x6f,
    0x6c,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x73,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x65,
    0x72,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x79,
    0x6d,
    0x70,
    0x74,
    0x6f,
    0x6d,
    0x73,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x3c,
    0x70,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x2e,
    0x6c,
    0x65,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x2e,
    0x0a,
    0x0a,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x73,
    0x75,
    0x69,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x62,
    0x75,
    0x6c,
    0x67,
    0x61,
    0x72,
    0x69,
    0x61,
    0x2e,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x28,
    0x29,
    0x3b,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x47,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x73,
    0x45,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x61,
    0x6d,
    0x73,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x22,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x22,
    0x3e,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x73,
    0x61,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x44,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x20,
    0x0a,
    0x0a,
    0x54,
    0x68,
    0x65,
    0x20,
    0x79,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x65,
    0x6c,
    0x66,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x20,
    0x6d,
    0x69,
    0x63,
    0x68,
    0x69,
    0x67,
    0x61,
    0x6e,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x62,
    0x69,
    0x61,
    0x70,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x72,
    0x69,
    0x6e,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x66,
    0x61,
    0x63,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x65,
    0x72,
    0x73,
    0x52,
    0x75,
    0x73,
    0x73,
    0x69,
    0x61,
    0x6e,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x2d,
    0x38,
    0x38,
    0x35,
    0x39,
    0x2d,
    0x31,
    0x22,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x61,
    0x72,
    0x20,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x30,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x76,
    0x69,
    0x65,
    0x77,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x73,
    0x2d,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x3e,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x2e,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x65,
    0x6c,
    0x69,
    0x67,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x73,
    0x61,
    0x74,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x64,
    0x70,
    0x61,
    0x79,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x67,
    0x6c,
    0x6f,
    0x73,
    0x73,
    0x61,
    0x72,
    0x79,
    0x0a,
    0x0a,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x67,
    0x75,
    0x69,
    0x64,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x74,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x22,
    0x3e,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x73,
    0x73,
    0x63,
    0x6f,
    0x74,
    0x74,
    0x69,
    0x73,
    0x68,
    0x6a,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x77,
    0x69,
    0x64,
    0x67,
    0x65,
    0x74,
    0x73,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x65,
    0x72,
    0x73,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x09,
    0x61,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3b,
    0x74,
    0x6f,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x3c,
    0x2f,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x3e,
    0x6f,
    0x6b,
    0x6c,
    0x61,
    0x68,
    0x6f,
    0x6d,
    0x61,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x20,
    0x62,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x30,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x68,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x79,
    0x73,
    0x52,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x64,
    0x20,
    0x28,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x2e,
    0x20,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x76,
    0x69,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x72,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x20,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x22,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x6f,
    0x69,
    0x64,
    0x22,
    0x71,
    0x75,
    0x69,
    0x63,
    0x6b,
    0x6c,
    0x79,
    0x20,
    0x6d,
    0x65,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x3b,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x3b,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x61,
    0x6c,
    0x2c,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x2e,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x6d,
    0x61,
    0x67,
    0x6e,
    0x65,
    0x74,
    0x69,
    0x63,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x68,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x63,
    0x61,
    0x73,
    0x74,
    0x2e,
    0x20,
    0x57,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x68,
    0x75,
    0x72,
    0x73,
    0x64,
    0x61,
    0x79,
    0x64,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x73,
    0x65,
    0x26,
    0x65,
    0x61,
    0x63,
    0x75,
    0x74,
    0x65,
    0x3b,
    0x68,
    0x61,
    0x73,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x65,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x61,
    0x74,
    0x65,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x61,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x4f,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x61,
    0x64,
    0x6f,
    0x4f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x22,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x62,
    0x65,
    0x6c,
    0x6c,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x0d,
    0x0a,
    0x5f,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x70,
    0x73,
    0x7c,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2c,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x57,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x20,
    0x61,
    0x73,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x3c,
    0x62,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x6c,
    0x65,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x20,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x79,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x3c,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x73,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6d,
    0x61,
    0x72,
    0x73,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x6c,
    0x79,
    0x29,
    0x2e,
    0x0a,
    0x0a,
    0x54,
    0x68,
    0x65,
    0x20,
    0x74,
    0x61,
    0x78,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x79,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x0a,
    0x22,
    0x20,
    0x64,
    0x61,
    0x74,
    0x61,
    0x2d,
    0x73,
    0x72,
    0x74,
    0x75,
    0x67,
    0x75,
    0xc3,
    0xaa,
    0x73,
    0x73,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x54,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x61,
    0x74,
    0x74,
    0x6f,
    0x72,
    0x6e,
    0x65,
    0x79,
    0x65,
    0x6d,
    0x70,
    0x68,
    0x61,
    0x73,
    0x69,
    0x73,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x72,
    0x73,
    0x66,
    0x61,
    0x6e,
    0x63,
    0x79,
    0x62,
    0x6f,
    0x78,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x27,
    0x73,
    0x20,
    0x77,
    0x69,
    0x6c,
    0x64,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x65,
    0x64,
    0x3d,
    0x73,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x70,
    0x78,
    0x3b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x20,
    0x50,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x6a,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x76,
    0x61,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x6f,
    0x6d,
    0x70,
    0x73,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x30,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x3c,
    0x2f,
    0x74,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x3c,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x20,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x66,
    0x69,
    0x78,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x20,
    0x3c,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x20,
    0x4f,
    0x63,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x72,
    0x77,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x65,
    0x78,
    0x70,
    0x6f,
    0x73,
    0x75,
    0x72,
    0x65,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x20,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x73,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x20,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x6e,
    0x53,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x73,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x2e,
    0x6c,
    0x6f,
    0x67,
    0x67,
    0x65,
    0x64,
    0x49,
    0x6e,
    0x61,
    0x64,
    0x76,
    0x69,
    0x73,
    0x6f,
    0x72,
    0x79,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x73,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x29,
    0x73,
    0x2e,
    0x20,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x61,
    0x63,
    0x6b,
    0x61,
    0x67,
    0x65,
    0x73,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x62,
    0x6f,
    0x78,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x73,
    0x70,
    0x72,
    0x65,
    0x67,
    0x6e,
    0x61,
    0x6e,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x6f,
    0x72,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x6a,
    0x61,
    0x70,
    0x61,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x62,
    0x61,
    0x73,
    0x65,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x22,
    0x3e,
    0x67,
    0x61,
    0x6d,
    0x62,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x20,
    0x2c,
    0x20,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x20,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x69,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x31,
    0x70,
    0x78,
    0x20,
    0x2e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x32,
    0x6c,
    0x61,
    0x7a,
    0x79,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x6e,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x3e,
    0x0a,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x3c,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x74,
    0x64,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x32,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x22,
    0x20,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x0a,
    0x28,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbd,
    0x93,
    0x29,
    0x28,
    0xe7,
    0xb9,
    0x81,
    0xe9,
    0xab,
    0x94,
    0x29,
    0x68,
    0x72,
    0x76,
    0x61,
    0x74,
    0x73,
    0x6b,
    0x69,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x6f,
    0x72,
    0x6f,
    0x6d,
    0xc3,
    0xa2,
    0x6e,
    0xc4,
    0x83,
    0x74,
    0xc3,
    0xbc,
    0x72,
    0x6b,
    0xc3,
    0xa7,
    0x65,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0x74,
    0x61,
    0x6d,
    0x62,
    0x69,
    0xc3,
    0xa9,
    0x6e,
    0x6e,
    0x6f,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x73,
    0x6d,
    0x65,
    0x6e,
    0x73,
    0x61,
    0x6a,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x73,
    0x64,
    0x65,
    0x72,
    0x65,
    0x63,
    0x68,
    0x6f,
    0x73,
    0x6e,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x75,
    0x73,
    0x75,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x61,
    0x67,
    0x6f,
    0x62,
    0x69,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x65,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x61,
    0x73,
    0x61,
    0x6e,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6f,
    0x73,
    0x76,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x61,
    0x64,
    0x65,
    0x73,
    0x70,
    0x75,
    0xc3,
    0xa9,
    0x73,
    0x64,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x79,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x6f,
    0x70,
    0xc3,
    0xba,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x73,
    0x6f,
    0x74,
    0x72,
    0x6f,
    0x73,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x70,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x63,
    0x75,
    0x72,
    0x73,
    0x6f,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x61,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x67,
    0x6f,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x69,
    0x72,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x61,
    0x6d,
    0xc3,
    0xa9,
    0x72,
    0x69,
    0x63,
    0x61,
    0x76,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x6f,
    0x72,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x65,
    0x64,
    0x61,
    0x64,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x72,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x70,
    0x61,
    0x6c,
    0x61,
    0x62,
    0x72,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0xc3,
    0xa9,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6d,
    0x69,
    0x65,
    0x6d,
    0x62,
    0x72,
    0x6f,
    0x73,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x64,
    0x63,
    0xc3,
    0xb3,
    0x72,
    0x64,
    0x6f,
    0x62,
    0x61,
    0x7a,
    0x61,
    0x72,
    0x61,
    0x67,
    0x6f,
    0x7a,
    0x61,
    0x70,
    0xc3,
    0xa1,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x62,
    0x6c,
    0x6f,
    0x71,
    0x75,
    0x65,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x74,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x61,
    0x6c,
    0x71,
    0x75,
    0x69,
    0x6c,
    0x65,
    0x72,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x61,
    0x65,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x6f,
    0x73,
    0x70,
    0xc3,
    0xba,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x74,
    0x69,
    0x76,
    0x6f,
    0x61,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x62,
    0x75,
    0x73,
    0x63,
    0x61,
    0x64,
    0x6f,
    0x72,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x64,
    0x61,
    0x73,
    0x61,
    0x63,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x76,
    0x6f,
    0x73,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x79,
    0x6f,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x6c,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x69,
    0x61,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0xc3,
    0xba,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x6f,
    0x73,
    0x68,
    0x61,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x6f,
    0x61,
    0x71,
    0x75,
    0x65,
    0x6c,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x69,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x66,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x61,
    0x6d,
    0x62,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x66,
    0x61,
    0x63,
    0x65,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x74,
    0x72,
    0x61,
    0x73,
    0x63,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x6f,
    0x73,
    0x62,
    0x61,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x72,
    0x63,
    0x6f,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x72,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x6a,
    0xc3,
    0xb3,
    0x76,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x74,
    0xc3,
    0xa9,
    0x63,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x6a,
    0x75,
    0x6e,
    0x74,
    0x6f,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x67,
    0xc3,
    0xad,
    0x61,
    0x74,
    0x72,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x61,
    0x72,
    0x61,
    0x73,
    0x74,
    0x75,
    0x72,
    0x69,
    0x61,
    0x73,
    0x72,
    0x65,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x75,
    0x74,
    0x69,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x72,
    0x62,
    0x6f,
    0x6c,
    0x65,
    0x74,
    0xc3,
    0xad,
    0x6e,
    0x73,
    0x61,
    0x6c,
    0x76,
    0x61,
    0x64,
    0x6f,
    0x72,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x63,
    0x74,
    0x61,
    0x74,
    0x72,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x6f,
    0x73,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x6f,
    0x73,
    0x6e,
    0x65,
    0x67,
    0x6f,
    0x63,
    0x69,
    0x6f,
    0x73,
    0x6c,
    0x69,
    0x62,
    0x65,
    0x72,
    0x74,
    0x61,
    0x64,
    0x64,
    0x65,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x72,
    0xc3,
    0xb3,
    0x78,
    0x69,
    0x6d,
    0x6f,
    0x61,
    0x6c,
    0x6d,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x71,
    0x75,
    0x69,
    0xc3,
    0xa9,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x61,
    0x7a,
    0xc3,
    0xb3,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x62,
    0x75,
    0x73,
    0x63,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6f,
    0x70,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x78,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x6f,
    0x74,
    0x6f,
    0x64,
    0x61,
    0x76,
    0xc3,
    0xad,
    0x61,
    0x67,
    0x61,
    0x6c,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x69,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x63,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x61,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x73,
    0x63,
    0x72,
    0xc3,
    0xad,
    0x74,
    0x69,
    0x63,
    0x61,
    0x64,
    0xc3,
    0xb3,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x73,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x64,
    0x65,
    0x62,
    0x65,
    0x72,
    0xc3,
    0xa1,
    0x6e,
    0x70,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x6f,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x69,
    0x74,
    0x61,
    0x6d,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x70,
    0x65,
    0x71,
    0x75,
    0x65,
    0xc3,
    0xb1,
    0x6f,
    0x72,
    0x65,
    0x63,
    0x69,
    0x62,
    0x69,
    0x64,
    0x61,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x69,
    0x66,
    0x65,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x61,
    0x6e,
    0x61,
    0x72,
    0x69,
    0x61,
    0x73,
    0x64,
    0x65,
    0x73,
    0x63,
    0x61,
    0x72,
    0x67,
    0x61,
    0x64,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x72,
    0x63,
    0x61,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x65,
    0x72,
    0x65,
    0x74,
    0xc3,
    0xa9,
    0x63,
    0x6e,
    0x69,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x62,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x76,
    0x69,
    0x76,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x7a,
    0x61,
    0x73,
    0x61,
    0x64,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6a,
    0x6f,
    0x73,
    0x64,
    0x69,
    0x66,
    0xc3,
    0xad,
    0x63,
    0x69,
    0x6c,
    0x63,
    0x69,
    0x75,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x67,
    0x75,
    0x61,
    0x73,
    0x61,
    0x76,
    0x61,
    0x6e,
    0x7a,
    0x61,
    0x64,
    0x61,
    0x74,
    0xc3,
    0xa9,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x73,
    0xc3,
    0xa1,
    0x6e,
    0x63,
    0x68,
    0x65,
    0x7a,
    0x63,
    0x61,
    0x6d,
    0x70,
    0x61,
    0xc3,
    0xb1,
    0x61,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x72,
    0x65,
    0x76,
    0x69,
    0x73,
    0x74,
    0x61,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x6d,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x66,
    0x61,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x64,
    0x63,
    0x72,
    0xc3,
    0xa9,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x64,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x73,
    0x73,
    0x75,
    0x70,
    0x75,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x66,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x67,
    0x75,
    0x6e,
    0x64,
    0x6f,
    0x73,
    0x70,
    0x65,
    0x71,
    0x75,
    0x65,
    0xc3,
    0xb1,
    0x61,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0x95,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd1,
    0x85,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8c,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd1,
    0x8f,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd1,
    0x82,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xb8,
    0xd0,
    0xb3,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd1,
    0x8e,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x88,
    0xd1,
    0x8c,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xb8,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd1,
    0x85,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x8f,
    0xd0,
    0xb4,
    0xd0,
    0xb2,
    0xd1,
    0x83,
    0xd1,
    0x85,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbb,
    0xd1,
    0x8e,
    0xd0,
    0xb4,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb8,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd1,
    0x8f,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd1,
    0x81,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd1,
    0x86,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x8c,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x8b,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb1,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbf,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x86,
    0xd0,
    0xb0,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x8b,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x8e,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd1,
    0x8e,
    0xd0,
    0xbd,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x8c,
    0xd0,
    0x95,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x88,
    0xd0,
    0xb8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd9,
    0x8a,
    0xd8,
    0xac,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd8,
    0xb5,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb0,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x87,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa2,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd9,
    0x83,
    0xd9,
    0x85,
    0xd8,
    0xb5,
    0xd9,
    0x81,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd9,
    0x88,
    0xd9,
    0x86,
    0xd8,
    0xb4,
    0xd8,
    0xa8,
    0xd9,
    0x83,
    0xd8,
    0xa9,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xa1,
    0xd8,
    0xa3,
    0xd9,
    0x83,
    0xd8,
    0xab,
    0xd8,
    0xb1,
    0xd8,
    0xae,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xad,
    0xd8,
    0xa8,
    0xd8,
    0xaf,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd8,
    0xb1,
    0xd9,
    0x88,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xb6,
    0xd8,
    0xba,
    0xd8,
    0xb7,
    0xd8,
    0xaa,
    0xd9,
    0x83,
    0xd9,
    0x88,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x83,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb7,
    0xd8,
    0xa8,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd8,
    0xb4,
    0xd9,
    0x83,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xb4,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa9,
    0xd8,
    0xb1,
    0xd8,
    0xa6,
    0xd9,
    0x8a,
    0xd8,
    0xb3,
    0xd9,
    0x86,
    0xd8,
    0xb4,
    0xd9,
    0x8a,
    0xd8,
    0xb7,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xb0,
    0xd8,
    0xa7,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd9,
    0x86,
    0xd8,
    0xb4,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd8,
    0xb1,
    0xd8,
    0xad,
    0xd9,
    0x85,
    0xd8,
    0xa9,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd8,
    0xa9,
    0xd9,
    0x8a,
    0xd9,
    0x82,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xb2,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xa9,
    0xd8,
    0xa3,
    0xd8,
    0xad,
    0xd9,
    0x85,
    0xd8,
    0xaf,
    0xd9,
    0x82,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd8,
    0xb5,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xa9,
    0xd8,
    0xb7,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd9,
    0x82,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xac,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xae,
    0xd8,
    0xb1,
    0xd9,
    0x89,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xad,
    0xd8,
    0xab,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd9,
    0x88,
    0xd8,
    0xb6,
    0xd8,
    0xa8,
    0xd8,
    0xb4,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb3,
    0xd8,
    0xac,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa8,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd9,
    0x86,
    0xd8,
    0xa3,
    0xd9,
    0x8a,
    0xd8,
    0xb6,
    0xd8,
    0xa7,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x81,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd9,
    0x82,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xaa,
    0xd8,
    0xa3,
    0xd9,
    0x81,
    0xd8,
    0xb6,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb7,
    0xd8,
    0xa8,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd9,
    0x83,
    0xd8,
    0xab,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd8,
    0xb6,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd9,
    0x86,
    0xd9,
    0x81,
    0xd8,
    0xb3,
    0xd9,
    0x87,
    0xd8,
    0xa3,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd8,
    0xaf,
    0xd8,
    0xa3,
    0xd9,
    0x86,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xb6,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd8,
    0xae,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x01,
    0x00,
    0x01,
    0x00,
    0x01,
    0x00,
    0x02,
    0x00,
    0x02,
    0x00,
    0x02,
    0x00,
    0x02,
    0x00,
    0x04,
    0x00,
    0x04,
    0x00,
    0x04,
    0x00,
    0x04,
    0x00,
    0x00,
    0x01,
    0x02,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x07,
    0x06,
    0x05,
    0x04,
    0x03,
    0x02,
    0x01,
    0x00,
    0x08,
    0x09,
    0x0a,
    0x0b,
    0x0c,
    0x0d,
    0x0e,
    0x0f,
    0x0f,
    0x0e,
    0x0d,
    0x0c,
    0x0b,
    0x0a,
    0x09,
    0x08,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x17,
    0x16,
    0x15,
    0x14,
    0x13,
    0x12,
    0x11,
    0x10,
    0x18,
    0x19,
    0x1a,
    0x1b,
    0x1c,
    0x1d,
    0x1e,
    0x1f,
    0x1f,
    0x1e,
    0x1d,
    0x1c,
    0x1b,
    0x1a,
    0x19,
    0x18,
    0xff,
    0xff,
    0xff,
    0xff,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0x01,
    0x00,
    0x00,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x03,
    0x00,
    0x00,
    0x00,
    0xff,
    0xff,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x00,
    0xff,
    0xff,
    0x00,
    0x01,
    0x00,
    0x00,
    0x00,
    0x08,
    0x00,
    0x08,
    0x00,
    0x08,
    0x00,
    0x08,
    0x00,
    0x00,
    0x00,
    0x01,
    0x00,
    0x02,
    0x00,
    0x03,
    0x00,
    0x04,
    0x00,
    0x05,
    0x00,
    0x06,
    0x00,
    0x07,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x69,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x68,
    0x69,
    0x67,
    0x68,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x44,
    0x54,
    0x44,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x67,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x61,
    0x64,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x73,
    0x65,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x3e,
    0x41,
    0x75,
    0x73,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x69,
    0x74,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x6c,
    0x79,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x6f,
    0x6e,
    0x79,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x69,
    0x65,
    0x73,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x67,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x79,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x65,
    0x78,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x69,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x0d,
    0x0a,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x42,
    0x69,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x79,
    0x7d,
    0x20,
    0x65,
    0x6c,
    0x73,
    0x65,
    0x20,
    0x7b,
    0x0a,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x41,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x74,
    0x69,
    0x63,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x73,
    0x64,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x6f,
    0x75,
    0x73,
    0x73,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x74,
    0x79,
    0x70,
    0x65,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x26,
    0x72,
    0x61,
    0x71,
    0x75,
    0x6f,
    0x3b,
    0x3c,
    0x2f,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x62,
    0x65,
    0x61,
    0x75,
    0x74,
    0x69,
    0x66,
    0x75,
    0x6c,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x6e,
    0x61,
    0x69,
    0x6c,
    0x4e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x2e,
    0x66,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x28,
    0x29,
    0x3b,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x69,
    0x67,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x0a,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x65,
    0x78,
    0x70,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x74,
    0x65,
    0x72,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x73,
    0x6d,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6c,
    0x73,
    0x65,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x41,
    0x6c,
    0x65,
    0x78,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x61,
    0x70,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x62,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x63,
    0x61,
    0x73,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x61,
    0x66,
    0x66,
    0x69,
    0x6c,
    0x69,
    0x61,
    0x74,
    0x65,
    0x3c,
    0x2f,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x74,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x2f,
    0x64,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x2e,
    0x50,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x3d,
    0x22,
    0x62,
    0x69,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x79,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x77,
    0x69,
    0x73,
    0x65,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x46,
    0x72,
    0x61,
    0x6e,
    0xc3,
    0xa7,
    0x61,
    0x69,
    0x73,
    0x48,
    0x6f,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x6f,
    0x6f,
    0x64,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x64,
    0x73,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x72,
    0x65,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x44,
    0x65,
    0x63,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x70,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x43,
    0x61,
    0x6d,
    0x62,
    0x72,
    0x69,
    0x64,
    0x67,
    0x65,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x75,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x0a,
    0x3c,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x77,
    0x69,
    0x64,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x66,
    0x61,
    0x63,
    0x65,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x70,
    0x61,
    0x70,
    0x65,
    0x72,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x2f,
    0x61,
    0x62,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x45,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x73,
    0x65,
    0x49,
    0x6e,
    0x74,
    0x28,
    0x73,
    0x74,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x75,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x4e,
    0x6f,
    0x74,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x65,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x74,
    0x77,
    0x6f,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x53,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x77,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x65,
    0x64,
    0x42,
    0x61,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x64,
    0x74,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x72,
    0x79,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x72,
    0x61,
    0x79,
    0x65,
    0x64,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x45,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x62,
    0x65,
    0x74,
    0x68,
    0x3c,
    0x2f,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x3e,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x3b,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x79,
    0x47,
    0x65,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x79,
    0x63,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x64,
    0x61,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x69,
    0x6e,
    0x68,
    0x65,
    0x72,
    0x69,
    0x74,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x67,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x65,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x6e,
    0x6f,
    0x20,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x63,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x3b,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x69,
    0x71,
    0x75,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x69,
    0x74,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x70,
    0x68,
    0x6f,
    0x6e,
    0x65,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x73,
    0x63,
    0x6f,
    0x70,
    0x65,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x65,
    0x73,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x29,
    0x3b,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x63,
    0x72,
    0x61,
    0x63,
    0x79,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x73,
    0x75,
    0x66,
    0x66,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x73,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x61,
    0x69,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x74,
    0x20,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x62,
    0x65,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x3c,
    0x2f,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x63,
    0x68,
    0x65,
    0x64,
    0x75,
    0x6c,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x73,
    0x3c,
    0x2f,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x3e,
    0x0a,
    0x73,
    0x75,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x20,
    0x30,
    0x73,
    0x70,
    0x69,
    0x72,
    0x69,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x0a,
    0x6d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x67,
    0x72,
    0x61,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x73,
    0x65,
    0x64,
    0x68,
    0x65,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x65,
    0x78,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x6a,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x70,
    0x75,
    0x72,
    0x63,
    0x68,
    0x61,
    0x73,
    0x65,
    0x64,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x79,
    0x65,
    0x64,
    0x75,
    0x70,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x69,
    0x65,
    0x73,
    0x4a,
    0x61,
    0x70,
    0x61,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x20,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x64,
    0x61,
    0x6c,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x68,
    0x6d,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x73,
    0x72,
    0x65,
    0x62,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x61,
    0x67,
    0x65,
    0x72,
    0x65,
    0x73,
    0x69,
    0x7a,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x69,
    0x76,
    0x65,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x75,
    0x63,
    0x74,
    0x65,
    0x64,
    0x29,
    0x2c,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x64,
    0x2d,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x46,
    0x65,
    0x62,
    0x72,
    0x75,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x65,
    0x72,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x3a,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x72,
    0x61,
    0x67,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x65,
    0x78,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x41,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x20,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x48,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x4b,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x46,
    0x61,
    0x63,
    0x65,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6d,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x6d,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x66,
    0x66,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x0a,
    0x09,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x6f,
    0x72,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x73,
    0x65,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x65,
    0x73,
    0x64,
    0x69,
    0x66,
    0x66,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x2e,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x28,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x68,
    0x69,
    0x73,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x64,
    0x65,
    0x63,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x73,
    0x73,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2d,
    0x77,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x72,
    0x22,
    0x65,
    0x6e,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x72,
    0x65,
    0x64,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x4e,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x3c,
    0x66,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x74,
    0x75,
    0x72,
    0x65,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x74,
    0x20,
    0x20,
    0x6f,
    0x6e,
    0x62,
    0x6c,
    0x75,
    0x72,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x73,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x69,
    0x70,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x4d,
    0x6f,
    0x72,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x61,
    0x62,
    0x6f,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x65,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x6e,
    0x61,
    0x72,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x61,
    0x64,
    0x76,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x73,
    0x70,
    0x78,
    0x3b,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x64,
    0x64,
    0x69,
    0x72,
    0x3d,
    0x22,
    0x6c,
    0x74,
    0x72,
    0x22,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x79,
    0x65,
    0x65,
    0x73,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2e,
    0x20,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x63,
    0x75,
    0x73,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x73,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x64,
    0x53,
    0x65,
    0x70,
    0x74,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x61,
    0x64,
    0x64,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x28,
    0x46,
    0x61,
    0x63,
    0x65,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x65,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x63,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x73,
    0x4a,
    0x65,
    0x72,
    0x75,
    0x73,
    0x61,
    0x6c,
    0x65,
    0x6d,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x67,
    0x75,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x65,
    0x61,
    0x72,
    0x62,
    0x69,
    0x74,
    0x72,
    0x61,
    0x72,
    0x79,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x7a,
    0x65,
    0x77,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x78,
    0x3b,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x62,
    0x65,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x72,
    0x57,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x64,
    0x62,
    0x65,
    0x67,
    0x61,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x74,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x6d,
    0x61,
    0x67,
    0x6e,
    0x69,
    0x74,
    0x75,
    0x64,
    0x65,
    0x6d,
    0x75,
    0x73,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x72,
    0x65,
    0x74,
    0x61,
    0x72,
    0x79,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x2e,
    0x3c,
    0x2f,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x3e,
    0x3c,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x6b,
    0x69,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x65,
    0x74,
    0x69,
    0x65,
    0x73,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x2d,
    0x2d,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x0a,
    0x0a,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x77,
    0x65,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x75,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x65,
    0x28,
    0x73,
    0x70,
    0x6f,
    0x6b,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x65,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x62,
    0x75,
    0x72,
    0x69,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x3e,
    0x3c,
    0x2f,
    0x4e,
    0x6f,
    0x72,
    0x77,
    0x65,
    0x67,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x61,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x28,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x44,
    0x61,
    0x74,
    0x65,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x72,
    0x79,
    0x66,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x71,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x2e,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x62,
    0x6f,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x68,
    0x65,
    0x6e,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x61,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x6f,
    0x6f,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x22,
    0x3e,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x41,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x73,
    0x41,
    0x69,
    0x72,
    0x20,
    0x46,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x69,
    0x6d,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x74,
    0x70,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x71,
    0x75,
    0x65,
    0x72,
    0x65,
    0x64,
    0x61,
    0x72,
    0x65,
    0x20,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x64,
    0x75,
    0x72,
    0x65,
    0x67,
    0x72,
    0x6f,
    0x77,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x64,
    0x69,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6d,
    0x6f,
    0x6c,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x65,
    0x73,
    0x66,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x69,
    0x73,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x64,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x68,
    0x6f,
    0x6f,
    0x64,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x64,
    0x65,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x70,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6c,
    0x69,
    0x63,
    0x74,
    0x73,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x0a,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x72,
    0x65,
    0x63,
    0x65,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x45,
    0x78,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x76,
    0x65,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x50,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6d,
    0x75,
    0x73,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x70,
    0x72,
    0x69,
    0x73,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x61,
    0x64,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x55,
    0x54,
    0x46,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x21,
    0x5b,
    0x43,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5b,
    0x22,
    0x3e,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x53,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6e,
    0x20,
    0x62,
    0x67,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x2e,
    0x20,
    0x49,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x64,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x74,
    0x65,
    0x2e,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x73,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x79,
    0x2d,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x2d,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x67,
    0x65,
    0x74,
    0x43,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x3c,
    0x2f,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x3e,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x75,
    0x74,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x65,
    0x73,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x69,
    0x65,
    0x77,
    0x57,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x70,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x73,
    0x75,
    0x73,
    0x77,
    0x61,
    0x73,
    0x20,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x74,
    0x56,
    0x65,
    0x6e,
    0x65,
    0x7a,
    0x75,
    0x65,
    0x6c,
    0x61,
    0x28,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x6c,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x6c,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x67,
    0x69,
    0x63,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x75,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x57,
    0x69,
    0x6b,
    0x69,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x76,
    0x69,
    0x72,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x77,
    0x61,
    0x73,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x20,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x69,
    0x76,
    0x65,
    0x61,
    0x77,
    0x61,
    0x79,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6c,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x70,
    0x72,
    0x65,
    0x63,
    0x69,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x64,
    0x69,
    0x73,
    0x73,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x55,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x3e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x49,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x20,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x6d,
    0x73,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x46,
    0x72,
    0x69,
    0x65,
    0x64,
    0x72,
    0x69,
    0x63,
    0x68,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x66,
    0x61,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x72,
    0x65,
    0x63,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x54,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x70,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x3e,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x73,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x72,
    0x76,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x7d,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x68,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x61,
    0x74,
    0x68,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x61,
    0x20,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x6c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x64,
    0x69,
    0x73,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x65,
    0x64,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x73,
    0x74,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6d,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x64,
    0x75,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x73,
    0x69,
    0x76,
    0x65,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x65,
    0x64,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x67,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x7b,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x73,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x65,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x20,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x6e,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x70,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x47,
    0x72,
    0x65,
    0x61,
    0x74,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x77,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x61,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x6e,
    0x69,
    0x64,
    0x65,
    0x61,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x57,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x54,
    0x68,
    0x65,
    0x73,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x63,
    0x61,
    0x72,
    0x65,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x79,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x63,
    0x68,
    0x61,
    0x72,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x70,
    0x72,
    0x65,
    0x64,
    0x69,
    0x63,
    0x74,
    0x65,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x0d,
    0x0a,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x20,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x20,
    0x50,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x2d,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x73,
    0x61,
    0x79,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x68,
    0x61,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x48,
    0x75,
    0x6e,
    0x67,
    0x61,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x74,
    0x75,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x73,
    0x20,
    0x61,
    0x73,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x6c,
    0x65,
    0x78,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x67,
    0x67,
    0x72,
    0x65,
    0x67,
    0x61,
    0x74,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x22,
    0x3e,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x73,
    0x79,
    0x6d,
    0x62,
    0x6f,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x74,
    0x65,
    0x63,
    0x74,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x61,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x6c,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x65,
    0x61,
    0x73,
    0x69,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x0a,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x74,
    0x69,
    0x63,
    0x73,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x6e,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x66,
    0x20,
    0x69,
    0x6e,
    0x41,
    0x66,
    0x72,
    0x69,
    0x6b,
    0x61,
    0x61,
    0x6e,
    0x73,
    0x61,
    0x73,
    0x20,
    0x66,
    0x61,
    0x72,
    0x20,
    0x61,
    0x73,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x61,
    0x20,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x3c,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x73,
    0x65,
    0x74,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x6d,
    0x61,
    0x73,
    0x52,
    0x65,
    0x74,
    0x72,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x0a,
    0x0a,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x74,
    0x6d,
    0x61,
    0x67,
    0x61,
    0x7a,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x3e,
    0x3c,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x65,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x61,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x73,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x69,
    0x72,
    0x20,
    0x6f,
    0x77,
    0x6e,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x20,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x43,
    0x61,
    0x72,
    0x69,
    0x62,
    0x62,
    0x65,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x73,
    0x77,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x3b,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x62,
    0x69,
    0x74,
    0x65,
    0x64,
    0x53,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x4a,
    0x61,
    0x6e,
    0x75,
    0x61,
    0x72,
    0x79,
    0x20,
    0x31,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x3e,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x63,
    0x68,
    0x6f,
    0x69,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x20,
    0x62,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x20,
    0x54,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x2e,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x3b,
    0x20,
    0x64,
    0x65,
    0x73,
    0x69,
    0x72,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x73,
    0x65,
    0x72,
    0x41,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x61,
    0x73,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x65,
    0x6e,
    0x67,
    0x61,
    0x67,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x2c,
    0x66,
    0x65,
    0x77,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x65,
    0x64,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x63,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6b,
    0x65,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x6d,
    0x6e,
    0x65,
    0x64,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x2c,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x53,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x73,
    0x3c,
    0x2f,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x3e,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x61,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x61,
    0x64,
    0x76,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x54,
    0x68,
    0x65,
    0x79,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x72,
    0x65,
    0x66,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x61,
    0x20,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x65,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x77,
    0x65,
    0x64,
    0x6e,
    0x65,
    0x73,
    0x64,
    0x61,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x68,
    0x69,
    0x72,
    0x64,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x73,
    0x4a,
    0x61,
    0x6e,
    0x75,
    0x61,
    0x72,
    0x79,
    0x20,
    0x32,
    0x77,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x61,
    0x20,
    0x63,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x72,
    0x65,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x68,
    0x69,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x22,
    0x3e,
    0x0a,
    0x70,
    0x69,
    0x65,
    0x63,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x74,
    0x65,
    0x6e,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x65,
    0x65,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x20,
    0x3c,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x3e,
    0x67,
    0x69,
    0x76,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x22,
    0x3e,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x30,
    0x76,
    0x69,
    0x65,
    0x77,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x74,
    0x6f,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2c,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x75,
    0x62,
    0x73,
    0x65,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x2c,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x64,
    0x6c,
    0x79,
    0x43,
    0x6c,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x61,
    0x72,
    0x65,
    0x20,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x77,
    0x61,
    0x73,
    0x20,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x6c,
    0x73,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x73,
    0x2e,
    0x0a,
    0x0a,
    0x41,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x2c,
    0x20,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4d,
    0x75,
    0x73,
    0x65,
    0x75,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x6c,
    0x6f,
    0x75,
    0x69,
    0x73,
    0x69,
    0x61,
    0x6e,
    0x61,
    0x28,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x73,
    0x6f,
    0x74,
    0x61,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x61,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x44,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x66,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x30,
    0x30,
    0x70,
    0x78,
    0x7c,
    0x72,
    0x69,
    0x67,
    0x68,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x28,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x61,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x61,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x74,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x20,
    0x20,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x70,
    0x61,
    0x70,
    0x65,
    0x72,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x0d,
    0x0a,
    0x3c,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x3d,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x3c,
    0x2f,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3e,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x68,
    0x72,
    0x65,
    0x65,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x66,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x79,
    0x3a,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x3b,
    0x43,
    0x68,
    0x75,
    0x72,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x68,
    0x69,
    0x67,
    0x68,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x2d,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x2f,
    0x63,
    0x67,
    0x69,
    0x2d,
    0x62,
    0x69,
    0x6e,
    0x2f,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x61,
    0x66,
    0x72,
    0x69,
    0x6b,
    0x61,
    0x61,
    0x6e,
    0x73,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x6f,
    0x66,
    0x72,
    0x61,
    0x6e,
    0xc3,
    0xa7,
    0x61,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x76,
    0x69,
    0x65,
    0xc5,
    0xa1,
    0x75,
    0x6c,
    0x69,
    0x65,
    0x74,
    0x75,
    0x76,
    0x69,
    0xc5,
    0xb3,
    0xc4,
    0x8c,
    0x65,
    0xc5,
    0xa1,
    0x74,
    0x69,
    0x6e,
    0x61,
    0xc4,
    0x8d,
    0x65,
    0xc5,
    0xa1,
    0x74,
    0x69,
    0x6e,
    0x61,
    0xe0,
    0xb9,
    0x84,
    0xe0,
    0xb8,
    0x97,
    0xe0,
    0xb8,
    0xa2,
    0xe6,
    0x97,
    0xa5,
    0xe6,
    0x9c,
    0xac,
    0xe8,
    0xaa,
    0x9e,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbd,
    0x93,
    0xe5,
    0xad,
    0x97,
    0xe7,
    0xb9,
    0x81,
    0xe9,
    0xab,
    0x94,
    0xe5,
    0xad,
    0x97,
    0xed,
    0x95,
    0x9c,
    0xea,
    0xb5,
    0xad,
    0xec,
    0x96,
    0xb4,
    0xe4,
    0xb8,
    0xba,
    0xe4,
    0xbb,
    0x80,
    0xe4,
    0xb9,
    0x88,
    0xe8,
    0xae,
    0xa1,
    0xe7,
    0xae,
    0x97,
    0xe6,
    0x9c,
    0xba,
    0xe7,
    0xac,
    0x94,
    0xe8,
    0xae,
    0xb0,
    0xe6,
    0x9c,
    0xac,
    0xe8,
    0xa8,
    0x8e,
    0xe8,
    0xab,
    0x96,
    0xe5,
    0x8d,
    0x80,
    0xe6,
    0x9c,
    0x8d,
    0xe5,
    0x8a,
    0xa1,
    0xe5,
    0x99,
    0xa8,
    0xe4,
    0xba,
    0x92,
    0xe8,
    0x81,
    0x94,
    0xe7,
    0xbd,
    0x91,
    0xe6,
    0x88,
    0xbf,
    0xe5,
    0x9c,
    0xb0,
    0xe4,
    0xba,
    0xa7,
    0xe4,
    0xbf,
    0xb1,
    0xe4,
    0xb9,
    0x90,
    0xe9,
    0x83,
    0xa8,
    0xe5,
    0x87,
    0xba,
    0xe7,
    0x89,
    0x88,
    0xe7,
    0xa4,
    0xbe,
    0xe6,
    0x8e,
    0x92,
    0xe8,
    0xa1,
    0x8c,
    0xe6,
    0xa6,
    0x9c,
    0xe9,
    0x83,
    0xa8,
    0xe8,
    0x90,
    0xbd,
    0xe6,
    0xa0,
    0xbc,
    0xe8,
    0xbf,
    0x9b,
    0xe4,
    0xb8,
    0x80,
    0xe6,
    0xad,
    0xa5,
    0xe6,
    0x94,
    0xaf,
    0xe4,
    0xbb,
    0x98,
    0xe5,
    0xae,
    0x9d,
    0xe9,
    0xaa,
    0x8c,
    0xe8,
    0xaf,
    0x81,
    0xe7,
    0xa0,
    0x81,
    0xe5,
    0xa7,
    0x94,
    0xe5,
    0x91,
    0x98,
    0xe4,
    0xbc,
    0x9a,
    0xe6,
    0x95,
    0xb0,
    0xe6,
    0x8d,
    0xae,
    0xe5,
    0xba,
    0x93,
    0xe6,
    0xb6,
    0x88,
    0xe8,
    0xb4,
    0xb9,
    0xe8,
    0x80,
    0x85,
    0xe5,
    0x8a,
    0x9e,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0xae,
    0xa4,
    0xe8,
    0xae,
    0xa8,
    0xe8,
    0xae,
    0xba,
    0xe5,
    0x8c,
    0xba,
    0xe6,
    0xb7,
    0xb1,
    0xe5,
    0x9c,
    0xb3,
    0xe5,
    0xb8,
    0x82,
    0xe6,
    0x92,
    0xad,
    0xe6,
    0x94,
    0xbe,
    0xe5,
    0x99,
    0xa8,
    0xe5,
    0x8c,
    0x97,
    0xe4,
    0xba,
    0xac,
    0xe5,
    0xb8,
    0x82,
    0xe5,
    0xa4,
    0xa7,
    0xe5,
    0xad,
    0xa6,
    0xe7,
    0x94,
    0x9f,
    0xe8,
    0xb6,
    0x8a,
    0xe6,
    0x9d,
    0xa5,
    0xe8,
    0xb6,
    0x8a,
    0xe7,
    0xae,
    0xa1,
    0xe7,
    0x90,
    0x86,
    0xe5,
    0x91,
    0x98,
    0xe4,
    0xbf,
    0xa1,
    0xe6,
    0x81,
    0xaf,
    0xe7,
    0xbd,
    0x91,
    0x73,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x73,
    0x61,
    0x72,
    0x74,
    0xc3,
    0xad,
    0x63,
    0x75,
    0x6c,
    0x6f,
    0x61,
    0x72,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x61,
    0x62,
    0x61,
    0x72,
    0x63,
    0x65,
    0x6c,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x75,
    0x61,
    0x6c,
    0x71,
    0x75,
    0x69,
    0x65,
    0x72,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x6f,
    0x73,
    0x70,
    0x6f,
    0x6c,
    0xc3,
    0xad,
    0x74,
    0x69,
    0x63,
    0x61,
    0x72,
    0x65,
    0x73,
    0x70,
    0x75,
    0x65,
    0x73,
    0x74,
    0x61,
    0x77,
    0x69,
    0x6b,
    0x69,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x73,
    0x69,
    0x67,
    0x75,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x62,
    0xc3,
    0xba,
    0x73,
    0x71,
    0x75,
    0x65,
    0x64,
    0x61,
    0x63,
    0x6f,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x61,
    0x64,
    0x73,
    0x65,
    0x67,
    0x75,
    0x72,
    0x69,
    0x64,
    0x61,
    0x64,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x69,
    0x64,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x76,
    0x65,
    0x6e,
    0x65,
    0x7a,
    0x75,
    0x65,
    0x6c,
    0x61,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x61,
    0x73,
    0x64,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x6e,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x79,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x6f,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0xc3,
    0xad,
    0x61,
    0x69,
    0x6d,
    0xc3,
    0xa1,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x61,
    0x72,
    0x64,
    0x65,
    0x73,
    0x63,
    0x61,
    0x72,
    0x67,
    0x61,
    0x72,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0xc3,
    0xa9,
    0x66,
    0x6f,
    0x6e,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x73,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x61,
    0x63,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x72,
    0x61,
    0x6e,
    0xc3,
    0xa1,
    0x6c,
    0x69,
    0x73,
    0x69,
    0x73,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x73,
    0x74,
    0xc3,
    0xa9,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x65,
    0x74,
    0x69,
    0x71,
    0x75,
    0x65,
    0x74,
    0x61,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x63,
    0x61,
    0x72,
    0xc3,
    0xa1,
    0x63,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x69,
    0x65,
    0x64,
    0x61,
    0x64,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x69,
    0x64,
    0x61,
    0x64,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6c,
    0x63,
    0x72,
    0x65,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x63,
    0x61,
    0x72,
    0x67,
    0x61,
    0x73,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x6a,
    0x65,
    0x72,
    0x63,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x65,
    0x64,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x61,
    0x6c,
    0x61,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x61,
    0x67,
    0x6f,
    0x6e,
    0x7a,
    0xc3,
    0xa1,
    0x6c,
    0x65,
    0x7a,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x70,
    0x65,
    0x6c,
    0xc3,
    0xad,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x61,
    0x72,
    0x72,
    0x61,
    0x67,
    0x6f,
    0x6e,
    0x61,
    0x70,
    0x72,
    0xc3,
    0xa1,
    0x63,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x75,
    0x65,
    0x73,
    0x74,
    0x61,
    0x70,
    0x61,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x74,
    0xc3,
    0xa9,
    0x63,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x73,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x74,
    0x69,
    0x76,
    0x6f,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x6f,
    0x73,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x9b,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0x64,
    0x69,
    0x70,
    0x6c,
    0x6f,
    0x64,
    0x6f,
    0x63,
    0x73,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x94,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x8c,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x89,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x90,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x8a,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x90,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x89,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8c,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x80,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x0d,
    0x0a,
    0x43,
    0x6f,
    0x70,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x79,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x3c,
    0x70,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3c,
    0x61,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x26,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x3b,
    0x20,
    0x32,
    0x30,
    0x31,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x53,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x73,
    0x62,
    0x72,
    0x65,
    0x61,
    0x64,
    0x63,
    0x72,
    0x75,
    0x6d,
    0x62,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x73,
    0x65,
    0x6c,
    0x76,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x7a,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x61,
    0x6c,
    0x69,
    0x66,
    0x6f,
    0x72,
    0x6e,
    0x69,
    0x61,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x65,
    0x64,
    0x4e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x3c,
    0x6d,
    0x63,
    0x68,
    0x65,
    0x63,
    0x6b,
    0x62,
    0x6f,
    0x78,
    0x22,
    0x20,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x69,
    0x71,
    0x75,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x70,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x61,
    0x73,
    0x20,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x61,
    0x73,
    0x75,
    0x6e,
    0x74,
    0x27,
    0x2c,
    0x20,
    0x27,
    0x55,
    0x41,
    0x2d,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x57,
    0x61,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x6f,
    0x6e,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x2e,
    0x20,
    0x3d,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x62,
    0x72,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x72,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x67,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3d,
    0x22,
    0x23,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x6c,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x69,
    0x65,
    0x73,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x54,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x50,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x69,
    0x73,
    0x6f,
    0x6e,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x2e,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x4f,
    0x66,
    0x28,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x62,
    0x69,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x52,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x5f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x6f,
    0x6f,
    0x64,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x61,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x74,
    0x6d,
    0x6f,
    0x73,
    0x70,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x69,
    0x73,
    0x2e,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x75,
    0x62,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x2d,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x72,
    0x65,
    0x70,
    0x75,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x68,
    0x65,
    0x6e,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x63,
    0x69,
    0x70,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2c,
    0x62,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x69,
    0x65,
    0x73,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x28,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x22,
    0x20,
    0x75,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x61,
    0x70,
    0x65,
    0x28,
    0x22,
    0x70,
    0x61,
    0x73,
    0x73,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x22,
    0x20,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x63,
    0x72,
    0x61,
    0x74,
    0x69,
    0x63,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x77,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x0a,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x70,
    0x78,
    0x3b,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x79,
    0x61,
    0x73,
    0x73,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x66,
    0x61,
    0x63,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x70,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x69,
    0x66,
    0x20,
    0x28,
    0x74,
    0x79,
    0x70,
    0x65,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x76,
    0x6f,
    0x63,
    0x61,
    0x62,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x79,
    0x68,
    0x79,
    0x70,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x73,
    0x69,
    0x73,
    0x2e,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x28,
    0x29,
    0x3b,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x68,
    0x69,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x46,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x22,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x75,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x73,
    0x74,
    0x73,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x74,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x43,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x64,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x70,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x4d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x67,
    0x65,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x69,
    0x63,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x2e,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x28,
    0x2f,
    0x64,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x75,
    0x6e,
    0x69,
    0x73,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x64,
    0x61,
    0x70,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x68,
    0x31,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x6d,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x73,
    0x63,
    0x65,
    0x6c,
    0x65,
    0x62,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x47,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x0a,
    0x0a,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x73,
    0x61,
    0x72,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x4e,
    0x65,
    0x64,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x62,
    0x65,
    0x79,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x6a,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x0d,
    0x0a,
    0x61,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x65,
    0x3b,
    0x20,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x65,
    0x61,
    0x6d,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x69,
    0x74,
    0x79,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x79,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x67,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x22,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x65,
    0x6e,
    0x50,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x67,
    0x75,
    0x65,
    0x73,
    0x65,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x61,
    0x6c,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x70,
    0x78,
    0x20,
    0x73,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x20,
    0x23,
    0x61,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x20,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x67,
    0x75,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x68,
    0x32,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x61,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x28,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x72,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x68,
    0x69,
    0x62,
    0x69,
    0x74,
    0x65,
    0x64,
    0x3d,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x64,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x78,
    0x3b,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x72,
    0x73,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x6e,
    0x69,
    0x75,
    0x6d,
    0x68,
    0x69,
    0x73,
    0x20,
    0x66,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x6e,
    0x6f,
    0x2d,
    0x72,
    0x65,
    0x70,
    0x65,
    0x61,
    0x74,
    0x3b,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x74,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x61,
    0x67,
    0x65,
    0x64,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x75,
    0x6e,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x52,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x65,
    0x72,
    0x65,
    0x78,
    0x70,
    0x65,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x6c,
    0x65,
    0x67,
    0x69,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x28,
    0x30,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x69,
    0x6c,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x66,
    0x69,
    0x76,
    0x65,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x31,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x70,
    0x73,
    0x79,
    0x63,
    0x68,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x61,
    0x62,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x70,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x79,
    0x3e,
    0x3c,
    0x2f,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x3e,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x62,
    0x75,
    0x74,
    0x20,
    0x72,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x6d,
    0x69,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x6f,
    0x66,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x65,
    0x2c,
    0x61,
    0x20,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x70,
    0x20,
    0x6f,
    0x66,
    0x4c,
    0x69,
    0x74,
    0x65,
    0x72,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x55,
    0x6e,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x0a,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x6f,
    0x62,
    0x69,
    0x6c,
    0x65,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x67,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x76,
    0x65,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x53,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x2c,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x0d,
    0x0a,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x76,
    0x69,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x65,
    0x72,
    0x73,
    0x61,
    0x74,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x68,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x64,
    0x2a,
    0x3c,
    0x21,
    0x5b,
    0x43,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5b,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x69,
    0x6e,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x3c,
    0x2f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x2e,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x4f,
    0x66,
    0x28,
    0x27,
    0x69,
    0x20,
    0x3d,
    0x20,
    0x30,
    0x3b,
    0x20,
    0x69,
    0x20,
    0x3c,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x65,
    0x76,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x74,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x2d,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x7d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x65,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6d,
    0x70,
    0x68,
    0x61,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x3c,
    0x2f,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x4d,
    0x65,
    0x61,
    0x6e,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x2c,
    0x69,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x62,
    0x72,
    0x20,
    0x2f,
    0x3e,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x54,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x61,
    0x73,
    0x6b,
    0x65,
    0x74,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x20,
    0x73,
    0x69,
    0x64,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x61,
    0x64,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x79,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x63,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x22,
    0x3e,
    0x3c,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x72,
    0x73,
    0x4a,
    0x6f,
    0x75,
    0x72,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x66,
    0x66,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x79,
    0x66,
    0x61,
    0x63,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x74,
    0x65,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x22,
    0x09,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x6f,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x43,
    0x6f,
    0x70,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x69,
    0x74,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x62,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x65,
    0x73,
    0x44,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x70,
    0x65,
    0x72,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x20,
    0x4a,
    0x61,
    0x6e,
    0x75,
    0x61,
    0x72,
    0x79,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x09,
    0x64,
    0x69,
    0x70,
    0x6c,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x3d,
    0x22,
    0x49,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x6d,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4c,
    0x75,
    0x78,
    0x65,
    0x6d,
    0x62,
    0x6f,
    0x75,
    0x72,
    0x67,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x67,
    0x61,
    0x67,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x22,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x29,
    0x3b,
    0x62,
    0x75,
    0x74,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x3d,
    0x22,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x45,
    0x6e,
    0x64,
    0x20,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x6f,
    0x70,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x6e,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x41,
    0x75,
    0x73,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x4f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x73,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x41,
    0x6c,
    0x65,
    0x78,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x69,
    0x61,
    0x72,
    0x65,
    0x74,
    0x69,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x41,
    0x64,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x75,
    0x72,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x0a,
    0x0a,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x21,
    0x2d,
    0x2d,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x68,
    0x33,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x62,
    0x6c,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x73,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x3c,
    0x62,
    0x61,
    0x73,
    0x65,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x72,
    0x65,
    0x70,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x6c,
    0x79,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x72,
    0x65,
    0x66,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x73,
    0x65,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x72,
    0x65,
    0x73,
    0x74,
    0x61,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x74,
    0x77,
    0x6f,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x46,
    0x65,
    0x62,
    0x72,
    0x75,
    0x61,
    0x72,
    0x79,
    0x20,
    0x32,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x77,
    0x66,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x2e,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x6e,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x62,
    0x79,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x69,
    0x65,
    0x77,
    0x73,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x77,
    0x69,
    0x74,
    0x68,
    0x64,
    0x72,
    0x61,
    0x77,
    0x61,
    0x6c,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x69,
    0x73,
    0x20,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x63,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x64,
    0x61,
    0x74,
    0x65,
    0x73,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x70,
    0x61,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6d,
    0x79,
    0x73,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x44,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x75,
    0x70,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x65,
    0x64,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x68,
    0x61,
    0x73,
    0x20,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x61,
    0x67,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x63,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x69,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x50,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x2d,
    0x74,
    0x72,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x73,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x73,
    0x70,
    0x72,
    0x65,
    0x61,
    0x64,
    0x4c,
    0x69,
    0x62,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x61,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x20,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x73,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x6d,
    0x4c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x4e,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x32,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x49,
    0x6e,
    0x64,
    0x75,
    0x73,
    0x74,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x76,
    0x61,
    0x72,
    0x69,
    0x65,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x20,
    0x6c,
    0x65,
    0x66,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x73,
    0x65,
    0x73,
    0x73,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x73,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x53,
    0x74,
    0x61,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x73,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x66,
    0x69,
    0x78,
    0x22,
    0x3e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x2c,
    0x73,
    0x79,
    0x6e,
    0x6f,
    0x6e,
    0x79,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x0a,
    0x70,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6d,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x68,
    0x69,
    0x73,
    0x20,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x75,
    0x73,
    0x65,
    0x72,
    0x41,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x75,
    0x6e,
    0x65,
    0x78,
    0x70,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x63,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x64,
    0x61,
    0x20,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x22,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x6e,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x4f,
    0x63,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x20,
    0x73,
    0x61,
    0x69,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x72,
    0x65,
    0x6c,
    0x69,
    0x67,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x46,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x72,
    0x6f,
    0x77,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3d,
    0x22,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x20,
    0x66,
    0x65,
    0x77,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x3c,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x73,
    0x65,
    0x74,
    0x3e,
    0x41,
    0x72,
    0x63,
    0x68,
    0x62,
    0x69,
    0x73,
    0x68,
    0x6f,
    0x70,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x61,
    0x63,
    0x68,
    0x65,
    0x73,
    0x70,
    0x72,
    0x69,
    0x76,
    0x69,
    0x6c,
    0x65,
    0x67,
    0x65,
    0x73,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x62,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x45,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x65,
    0x67,
    0x67,
    0x6d,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x6d,
    0x73,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x50,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x22,
    0x3e,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x61,
    0x72,
    0x72,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x2d,
    0x6a,
    0x73,
    0x73,
    0x64,
    0x6b,
    0x27,
    0x29,
    0x29,
    0x3b,
    0x6d,
    0x61,
    0x6e,
    0x61,
    0x67,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x63,
    0x61,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x74,
    0x69,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x53,
    0x65,
    0x70,
    0x74,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x61,
    0x72,
    0x69,
    0x74,
    0x68,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x63,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x64,
    0x75,
    0x72,
    0x65,
    0x73,
    0x6d,
    0x69,
    0x67,
    0x68,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x50,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x74,
    0x20,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x73,
    0x50,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x79,
    0x66,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x68,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x67,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x77,
    0x61,
    0x72,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x67,
    0x75,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x65,
    0x64,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x30,
    0x30,
    0x30,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x20,
    0x67,
    0x61,
    0x6d,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x66,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x61,
    0x6e,
    0x73,
    0x2d,
    0x73,
    0x65,
    0x72,
    0x69,
    0x66,
    0x6f,
    0x6e,
    0x6b,
    0x65,
    0x79,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x3b,
    0x20,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x48,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x2c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x72,
    0x63,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x76,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x20,
    0x6e,
    0x65,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x6f,
    0x75,
    0x73,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x61,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x64,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x74,
    0x73,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x76,
    0x65,
    0x72,
    0x61,
    0x67,
    0x65,
    0x65,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x75,
    0x74,
    0x75,
    0x72,
    0x65,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x2c,
    0x63,
    0x61,
    0x70,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x45,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x6b,
    0x69,
    0x6c,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x65,
    0x72,
    0x73,
    0x63,
    0x68,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x73,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x6f,
    0x75,
    0x73,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x75,
    0x62,
    0x73,
    0x69,
    0x64,
    0x69,
    0x61,
    0x72,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x69,
    0x72,
    0x61,
    0x63,
    0x79,
    0x64,
    0x65,
    0x74,
    0x61,
    0x69,
    0x6c,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x6d,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x61,
    0x61,
    0x74,
    0x74,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x74,
    0x72,
    0x61,
    0x76,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x66,
    0x6f,
    0x63,
    0x75,
    0x73,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x79,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6e,
    0x6f,
    0x2d,
    0x72,
    0x65,
    0x70,
    0x65,
    0x61,
    0x74,
    0x28,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x6e,
    0x71,
    0x75,
    0x61,
    0x72,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x3f,
    0x3c,
    0x2f,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x3e,
    0x0a,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x62,
    0x65,
    0x73,
    0x74,
    0x2d,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x22,
    0x20,
    0x64,
    0x69,
    0x72,
    0x3d,
    0x22,
    0x6c,
    0x74,
    0x72,
    0x4c,
    0x69,
    0x65,
    0x75,
    0x74,
    0x65,
    0x6e,
    0x61,
    0x6e,
    0x74,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x75,
    0x70,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x72,
    0x67,
    0x75,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x27,
    0x73,
    0x70,
    0x75,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x75,
    0x70,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x61,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x73,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x0a,
    0x0a,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x73,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x2e,
    0x63,
    0x61,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x2d,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x53,
    0x6f,
    0x63,
    0x69,
    0x65,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x77,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x4e,
    0x65,
    0x77,
    0x20,
    0x59,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x61,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x6e,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x76,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x64,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x43,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x67,
    0x69,
    0x65,
    0x73,
    0x62,
    0x75,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x74,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x66,
    0x61,
    0x69,
    0x6c,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x2c,
    0x20,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x67,
    0x61,
    0x6e,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x75,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x2f,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x67,
    0x65,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x62,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x74,
    0x6f,
    0x70,
    0x74,
    0x68,
    0x65,
    0x20,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x65,
    0x67,
    0x6f,
    0x74,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x68,
    0x69,
    0x73,
    0x20,
    0x63,
    0x61,
    0x72,
    0x65,
    0x65,
    0x72,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x72,
    0x74,
    0x68,
    0x72,
    0x65,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x63,
    0x63,
    0x75,
    0x72,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x44,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x20,
    0x31,
    0x30,
    0x30,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x4b,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x6f,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x72,
    0x65,
    0x66,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x46,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x68,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x22,
    0x3e,
    0x69,
    0x73,
    0x20,
    0x73,
    0x61,
    0x69,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x64,
    0x75,
    0x6d,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x61,
    0x20,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x2d,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x20,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x77,
    0x69,
    0x64,
    0x65,
    0x2e,
    0x61,
    0x72,
    0x69,
    0x61,
    0x2d,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x65,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x64,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x74,
    0x62,
    0x65,
    0x6e,
    0x65,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x6c,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x64,
    0x65,
    0x72,
    0x6e,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x6f,
    0x76,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x73,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x74,
    0x72,
    0x61,
    0x63,
    0x6b,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x46,
    0x6f,
    0x72,
    0x6d,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x65,
    0x64,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x64,
    0x64,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x61,
    0x6e,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x61,
    0x72,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x61,
    0x6e,
    0x20,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x76,
    0x65,
    0x62,
    0x79,
    0x20,
    0x66,
    0x61,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x72,
    0x73,
    0x75,
    0x69,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x20,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x63,
    0x63,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x72,
    0x20,
    0x68,
    0x65,
    0x72,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x64,
    0x6f,
    0x75,
    0x73,
    0x66,
    0x72,
    0x65,
    0x65,
    0x64,
    0x6f,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x30,
    0x20,
    0x31,
    0x65,
    0x6d,
    0x20,
    0x31,
    0x65,
    0x6d,
    0x3b,
    0x42,
    0x61,
    0x73,
    0x6b,
    0x65,
    0x74,
    0x62,
    0x61,
    0x6c,
    0x6c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x65,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x2f,
    0x22,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x2e,
    0x63,
    0x6f,
    0x6d,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x74,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x69,
    0x74,
    0x74,
    0x73,
    0x62,
    0x75,
    0x72,
    0x67,
    0x68,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x0d,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x28,
    0x66,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x6f,
    0x63,
    0x63,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x69,
    0x74,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x43,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x2c,
    0x20,
    0x62,
    0x67,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3d,
    0x22,
    0x74,
    0x61,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x61,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x75,
    0x73,
    0x41,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x74,
    0x69,
    0x63,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x61,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x3c,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x2e,
    0x73,
    0x72,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x22,
    0x2f,
    0x2f,
    0x76,
    0x69,
    0x6f,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x69,
    0x73,
    0x20,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x65,
    0x64,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x67,
    0x75,
    0xc3,
    0xaa,
    0x73,
    0xd7,
    0xa2,
    0xd7,
    0x91,
    0xd7,
    0xa8,
    0xd7,
    0x99,
    0xd7,
    0xaa,
    0xd9,
    0x81,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xb3,
    0xdb,
    0x8c,
    0x64,
    0x65,
    0x73,
    0x61,
    0x72,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x65,
    0x64,
    0x75,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x73,
    0x65,
    0x70,
    0x74,
    0x69,
    0x65,
    0x6d,
    0x62,
    0x72,
    0x65,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x64,
    0x6f,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x75,
    0x62,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x64,
    0x61,
    0x64,
    0x72,
    0x65,
    0x73,
    0x70,
    0x75,
    0x65,
    0x73,
    0x74,
    0x61,
    0x73,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x61,
    0x72,
    0x74,
    0xc3,
    0xad,
    0x63,
    0x75,
    0x6c,
    0x6f,
    0x73,
    0x64,
    0x69,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x73,
    0x69,
    0x67,
    0x75,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x72,
    0x65,
    0x70,
    0xc3,
    0xba,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x73,
    0x69,
    0x74,
    0x75,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x70,
    0x72,
    0x69,
    0x76,
    0x61,
    0x63,
    0x69,
    0x64,
    0x61,
    0x64,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x6f,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x6f,
    0x62,
    0x6c,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x69,
    0x64,
    0x6f,
    0x73,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x6f,
    0x72,
    0x69,
    0x6f,
    0x73,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x64,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x76,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x64,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x62,
    0x69,
    0x62,
    0x6c,
    0x69,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x61,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x70,
    0x6f,
    0x6c,
    0xc3,
    0xad,
    0x74,
    0x69,
    0x63,
    0x61,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x65,
    0x7a,
    0x61,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x64,
    0x69,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0xc3,
    0xb3,
    0x6d,
    0x69,
    0x63,
    0x61,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x72,
    0x6f,
    0x64,
    0x72,
    0xc3,
    0xad,
    0x67,
    0x75,
    0x65,
    0x7a,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x61,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x66,
    0x72,
    0x65,
    0x63,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x8f,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8c,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb7,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd1,
    0x83,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xb6,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xb6,
    0xd0,
    0xb4,
    0xd1,
    0x83,
    0xd0,
    0xb1,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xd1,
    0x83,
    0xd1,
    0x82,
    0xd0,
    0x9f,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb7,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x8c,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd1,
    0x8f,
    0xd0,
    0xb7,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x83,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xbb,
    0xd1,
    0x8e,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb6,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd1,
    0x8c,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd1,
    0x87,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd0,
    0xb5,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd0,
    0xb4,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x87,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0x9f,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd0,
    0xb9,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd1,
    0x83,
    0xd0,
    0xa1,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xba,
    0xd1,
    0x82,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xbc,
    0xd0,
    0x9a,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd1,
    0x8f,
    0xd0,
    0xb7,
    0xd1,
    0x8c,
    0xd0,
    0xbb,
    0xd1,
    0x8e,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd0,
    0xb8,
    0xd0,
    0x9a,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xa4,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xbc,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd0,
    0xbd,
    0xd0,
    0xba,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd1,
    0x82,
    0xd1,
    0x8b,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd1,
    0x87,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd1,
    0x86,
    0xd1,
    0x86,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd0,
    0xbd,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0x9d,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd0,
    0xb9,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd1,
    0x84,
    0xd0,
    0xb8,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x88,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd0,
    0xbc,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x83,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x8e,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd1,
    0x86,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0x90,
    0xd1,
    0x80,
    0xd1,
    0x85,
    0xd0,
    0xb8,
    0xd0,
    0xb2,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xaf,
    0xd9,
    0x89,
    0xd8,
    0xa5,
    0xd8,
    0xb1,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd9,
    0x88,
    0xd8,
    0xa5,
    0xd8,
    0xb6,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x82,
    0xd8,
    0xb3,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd9,
    0x85,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd9,
    0x82,
    0xd9,
    0x89,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa3,
    0xd8,
    0xae,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xaa,
    0xd8,
    0xb7,
    0xd9,
    0x88,
    0xd9,
    0x8a,
    0xd8,
    0xb1,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd9,
    0x85,
    0xd8,
    0xa5,
    0xd8,
    0xb1,
    0xd9,
    0x81,
    0xd8,
    0xa7,
    0xd9,
    0x82,
    0xd8,
    0xb7,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd8,
    0xba,
    0xd8,
    0xa9,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xaa,
    0xd9,
    0x8a,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd9,
    0x8a,
    0xd8,
    0xae,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x82,
    0xd8,
    0xb5,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xab,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd9,
    0x85,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xa9,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd9,
    0x86,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb7,
    0xd9,
    0x81,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd8,
    0xa5,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa9,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd8,
    0xaa,
    0xd8,
    0xb3,
    0xd8,
    0xac,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd9,
    0x86,
    0xd8,
    0xaf,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd8,
    0xa9,
    0xd8,
    0xaa,
    0xd8,
    0xb5,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa3,
    0xd8,
    0xb1,
    0xd8,
    0xb4,
    0xd9,
    0x8a,
    0xd9,
    0x81,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb0,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa8,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa9,
    0xd8,
    0xa3,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd9,
    0x81,
    0xd8,
    0xb1,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd9,
    0x86,
    0xd8,
    0xa9,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd8,
    0xad,
    0xd9,
    0x81,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd8,
    0xa3,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd8,
    0xa7,
    0xd8,
    0xa1,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xae,
    0xd9,
    0x8a,
    0xd8,
    0xb1,
    0xd8,
    0xb1,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xa6,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x82,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xaf,
    0xd8,
    0xa8,
    0xd9,
    0x85,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd8,
    0xb7,
    0xd8,
    0xb9,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xb7,
    0xd9,
    0x82,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xac,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xb4,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x82,
    0xd8,
    0xaf,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xb7,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0x73,
    0x42,
    0x79,
    0x54,
    0x61,
    0x67,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x28,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x70,
    0x78,
    0x20,
    0x73,
    0x6f,
    0x6c,
    0x69,
    0x64,
    0x20,
    0x23,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x3d,
    0x22,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x61,
    0x64,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x65,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x72,
    0x69,
    0x61,
    0x74,
    0x65,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6d,
    0x64,
    0x61,
    0x73,
    0x68,
    0x3b,
    0x69,
    0x6d,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x3c,
    0x2f,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x3e,
    0x3c,
    0x2f,
    0x72,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x72,
    0x76,
    0x69,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x3a,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x30,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x43,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x41,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x73,
    0x70,
    0x65,
    0x72,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x28,
    0x75,
    0x72,
    0x6c,
    0x28,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x73,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x29,
    0x20,
    0x6e,
    0x6f,
    0x2d,
    0x72,
    0x65,
    0x70,
    0x65,
    0x61,
    0x74,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x4a,
    0x50,
    0x47,
    0x7c,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x7c,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x65,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3b,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x75,
    0x6e,
    0x64,
    0x72,
    0x65,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x0a,
    0x0a,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x3a,
    0x62,
    0x6f,
    0x74,
    0x68,
    0x3b,
    0x63,
    0x6f,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x3d,
    0x22,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x4e,
    0x65,
    0x77,
    0x20,
    0x5a,
    0x65,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x70,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x79,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x73,
    0x75,
    0x70,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x73,
    0x79,
    0x4e,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6d,
    0x61,
    0x78,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x73,
    0x77,
    0x69,
    0x74,
    0x7a,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x44,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x0a,
    0x0a,
    0x41,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x3c,
    0x2f,
    0x74,
    0x65,
    0x78,
    0x74,
    0x61,
    0x72,
    0x65,
    0x61,
    0x3e,
    0x74,
    0x68,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x62,
    0x69,
    0x72,
    0x64,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6e,
    0x64,
    0x61,
    0x73,
    0x68,
    0x3b,
    0x73,
    0x70,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x6c,
    0x65,
    0x67,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x69,
    0x63,
    0x73,
    0x0a,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x69,
    0x6c,
    0x6c,
    0x75,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x65,
    0x72,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x64,
    0x36,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x73,
    0x61,
    0x6e,
    0x73,
    0x2d,
    0x73,
    0x65,
    0x72,
    0x69,
    0x66,
    0x3b,
    0x63,
    0x61,
    0x70,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x64,
    0x69,
    0x73,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x41,
    0x66,
    0x67,
    0x68,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x4d,
    0x61,
    0x74,
    0x68,
    0x2e,
    0x66,
    0x6c,
    0x6f,
    0x6f,
    0x72,
    0x28,
    0x73,
    0x75,
    0x72,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x6f,
    0x62,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x3c,
    0x68,
    0x32,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x76,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x29,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x28,
    0x29,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x44,
    0x65,
    0x73,
    0x70,
    0x69,
    0x74,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x22,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x69,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x20,
    0x3d,
    0x20,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x44,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x2e,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x28,
    0x65,
    0x61,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x67,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x64,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x4d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x45,
    0x61,
    0x73,
    0x74,
    0x3c,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x20,
    0x70,
    0x65,
    0x72,
    0x68,
    0x61,
    0x70,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x20,
    0x44,
    0x65,
    0x63,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x61,
    0x72,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x66,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x78,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x73,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x65,
    0x69,
    0x67,
    0x6e,
    0x74,
    0x79,
    0x2d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x74,
    0x64,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x6c,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x6f,
    0x63,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x70,
    0x69,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x52,
    0x65,
    0x6e,
    0x61,
    0x69,
    0x73,
    0x73,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x64,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x3c,
    0x68,
    0x31,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x73,
    0x65,
    0x74,
    0x3e,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x76,
    0x65,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x65,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2e,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x4e,
    0x6f,
    0x64,
    0x65,
    0x61,
    0x67,
    0x72,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x41,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x65,
    0x72,
    0x73,
    0x74,
    0x6f,
    0x77,
    0x61,
    0x72,
    0x64,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x28,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x3c,
    0x74,
    0x64,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x3b,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x31,
    0x30,
    0x30,
    0x25,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x3c,
    0x68,
    0x33,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x29,
    0x2e,
    0x61,
    0x64,
    0x64,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x28,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x4f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x61,
    0x75,
    0x67,
    0x68,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x62,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x0d,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x74,
    0x64,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x67,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x20,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x61,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x29,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x42,
    0x72,
    0x69,
    0x74,
    0x69,
    0x73,
    0x68,
    0x77,
    0x61,
    0x73,
    0x20,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x21,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x3b,
    0x70,
    0x78,
    0x3b,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6d,
    0x6d,
    0x69,
    0x67,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x3c,
    0x68,
    0x34,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x4e,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x77,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x70,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x61,
    0x63,
    0x71,
    0x75,
    0x69,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x65,
    0x72,
    0x73,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x7b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x69,
    0x67,
    0x61,
    0x74,
    0x65,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x6c,
    0x79,
    0x77,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x49,
    0x74,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x69,
    0x74,
    0x20,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x72,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x62,
    0x69,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x63,
    0x68,
    0x6f,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x6d,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x70,
    0x78,
    0x3b,
    0x20,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x20,
    0x73,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x65,
    0x20,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x79,
    0x20,
    0x64,
    0x65,
    0x72,
    0x69,
    0x76,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x73,
    0x63,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x63,
    0x65,
    0x72,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x20,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x67,
    0x68,
    0x20,
    0x73,
    0x63,
    0x68,
    0x6f,
    0x6f,
    0x6c,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x72,
    0x65,
    0x65,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x20,
    0x46,
    0x65,
    0x62,
    0x72,
    0x75,
    0x61,
    0x72,
    0x79,
    0x73,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x3c,
    0x70,
    0x61,
    0x72,
    0x61,
    0x6d,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x61,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x70,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x49,
    0x53,
    0x4f,
    0x2d,
    0x38,
    0x38,
    0x35,
    0x39,
    0x2d,
    0x31,
    0x22,
    0x77,
    0x61,
    0x73,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x73,
    0x20,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x3a,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x63,
    0x65,
    0x6c,
    0x65,
    0x62,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x64,
    0x2f,
    0x6a,
    0x73,
    0x2f,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x69,
    0x73,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x65,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x61,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x3d,
    0x22,
    0x69,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x3c,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x0d,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x54,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x69,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x68,
    0x65,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x6f,
    0x20,
    0x73,
    0x61,
    0x79,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x45,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x65,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x66,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x70,
    0x68,
    0x6f,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x72,
    0x69,
    0x6c,
    0x79,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x6c,
    0x65,
    0x61,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x61,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x66,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x69,
    0x63,
    0x69,
    0x74,
    0x79,
    0x68,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x61,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x65,
    0x6d,
    0x70,
    0x68,
    0x61,
    0x73,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x68,
    0x61,
    0x72,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x73,
    0x61,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x66,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x3e,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x73,
    0x3a,
    0x6d,
    0x65,
    0x72,
    0x67,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x76,
    0x69,
    0x65,
    0x77,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x69,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x64,
    0x73,
    0x65,
    0x74,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x61,
    0x6c,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x69,
    0x6e,
    0x20,
    0x4e,
    0x65,
    0x77,
    0x20,
    0x59,
    0x6f,
    0x72,
    0x6b,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x0a,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x65,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x70,
    0x68,
    0x65,
    0x72,
    0x4d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x72,
    0x69,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x32,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x6d,
    0x69,
    0x78,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x45,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x69,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x2f,
    0x44,
    0x54,
    0x44,
    0x20,
    0x58,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x64,
    0x65,
    0x73,
    0x70,
    0x69,
    0x74,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x20,
    0x6c,
    0x65,
    0x67,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2e,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x41,
    0x67,
    0x72,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x61,
    0x63,
    0x68,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x74,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x2c,
    0x73,
    0x61,
    0x6e,
    0x73,
    0x2d,
    0x73,
    0x65,
    0x72,
    0x69,
    0x66,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x50,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2c,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x69,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x62,
    0x62,
    0x72,
    0x65,
    0x76,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x68,
    0x69,
    0x67,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x31,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x62,
    0x72,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x72,
    0x79,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x6f,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x73,
    0x74,
    0x69,
    0x6c,
    0x6c,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x65,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x6f,
    0x47,
    0x4d,
    0x54,
    0x53,
    0x74,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x41,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x2c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x69,
    0x67,
    0x68,
    0x62,
    0x6f,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x69,
    0x73,
    0x68,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x68,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x65,
    0x72,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x72,
    0x67,
    0x75,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x6e,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x69,
    0x64,
    0x65,
    0x73,
    0x70,
    0x72,
    0x65,
    0x61,
    0x64,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x6b,
    0x69,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x73,
    0x63,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x49,
    0x6e,
    0x20,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x65,
    0x78,
    0x70,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x6c,
    0x65,
    0x67,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x69,
    0x67,
    0x68,
    0x65,
    0x73,
    0x74,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x64,
    0x6f,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x72,
    0x67,
    0x75,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x70,
    0x72,
    0x65,
    0x64,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x74,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x2d,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x64,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x6c,
    0x69,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2c,
    0x3c,
    0x2f,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x33,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x2d,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x2e,
    0x20,
    0x41,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x77,
    0x6f,
    0x20,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x75,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x3c,
    0x2f,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x0d,
    0x0a,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x65,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x69,
    0x6c,
    0x6c,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x20,
    0x61,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x73,
    0x73,
    0x69,
    0x70,
    0x70,
    0x69,
    0x70,
    0x6f,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x62,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x77,
    0x68,
    0x61,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x77,
    0x73,
    0x69,
    0x74,
    0x75,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x54,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x74,
    0x6d,
    0x6f,
    0x73,
    0x70,
    0x68,
    0x65,
    0x72,
    0x69,
    0x63,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x73,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x61,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x6e,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x6c,
    0x75,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x3f,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x48,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x4d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x72,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x50,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x69,
    0x61,
    0x6e,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x69,
    0x74,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x76,
    0x65,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x72,
    0x69,
    0x6c,
    0x79,
    0x49,
    0x6e,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x2c,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x73,
    0x75,
    0x62,
    0x64,
    0x69,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x6c,
    0x79,
    0x6f,
    0x75,
    0x74,
    0x62,
    0x72,
    0x65,
    0x61,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x61,
    0x73,
    0x74,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x61,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x6e,
    0x73,
    0x3a,
    0x6f,
    0x67,
    0x3d,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x62,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x66,
    0x61,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x66,
    0x69,
    0x78,
    0x22,
    0x3e,
    0x0a,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x61,
    0x73,
    0x20,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x61,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x69,
    0x72,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x20,
    0x61,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x73,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x31,
    0x30,
    0x30,
    0x25,
    0x3b,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x79,
    0x2c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x20,
    0x6b,
    0x65,
    0x65,
    0x70,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x74,
    0x74,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x20,
    0x62,
    0x69,
    0x72,
    0x74,
    0x68,
    0x73,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x43,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x69,
    0x63,
    0x75,
    0x74,
    0x61,
    0x73,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x3b,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x79,
    0x61,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x71,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x69,
    0x73,
    0x20,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x45,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x43,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x2c,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x69,
    0x73,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x63,
    0x69,
    0x74,
    0x69,
    0x7a,
    0x65,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x72,
    0x65,
    0x61,
    0x63,
    0x68,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x20,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x73,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x20,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x64,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x64,
    0x61,
    0x74,
    0x65,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x22,
    0x3e,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x61,
    0x72,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x66,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x61,
    0x20,
    0x6d,
    0x61,
    0x74,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x0d,
    0x0a,
    0x09,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x66,
    0x61,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x77,
    0x61,
    0x72,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x72,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x73,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x69,
    0x72,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x73,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3a,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x65,
    0x71,
    0x75,
    0x69,
    0x6c,
    0x69,
    0x62,
    0x72,
    0x69,
    0x75,
    0x6d,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x73,
    0x20,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x62,
    0x79,
    0x6e,
    0x65,
    0x65,
    0x64,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x76,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x72,
    0x65,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x73,
    0x20,
    0x61,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x72,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x2d,
    0x64,
    0x61,
    0x79,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x6f,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x75,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x61,
    0x64,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x62,
    0x75,
    0x74,
    0x20,
    0x64,
    0x69,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x6f,
    0x6e,
    0x4d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x4f,
    0x76,
    0x65,
    0x72,
    0x61,
    0x73,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x63,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x79,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x61,
    0x20,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x65,
    0x20,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x69,
    0x74,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x72,
    0x0a,
    0x09,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x61,
    0x64,
    0x6f,
    0x70,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x77,
    0x61,
    0x73,
    0x20,
    0x62,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x50,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x73,
    0x77,
    0x61,
    0x72,
    0x20,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x62,
    0x79,
    0x20,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x72,
    0x69,
    0x65,
    0x74,
    0x61,
    0x72,
    0x79,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x65,
    0x73,
    0x74,
    0x69,
    0x67,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x2e,
    0x74,
    0x6f,
    0x20,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x49,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x69,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x2e,
    0x53,
    0x2e,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x20,
    0x68,
    0x6f,
    0x6e,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x31,
    0x73,
    0x74,
    0x20,
    0x45,
    0x61,
    0x72,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x68,
    0x69,
    0x73,
    0x65,
    0x78,
    0x70,
    0x6f,
    0x73,
    0x75,
    0x72,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x72,
    0x65,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x64,
    0x64,
    0x46,
    0x61,
    0x76,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x65,
    0x63,
    0x69,
    0x74,
    0x69,
    0x7a,
    0x65,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6d,
    0x69,
    0x6e,
    0x75,
    0x73,
    0x3b,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x64,
    0x65,
    0x61,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x64,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x62,
    0x74,
    0x6e,
    0x64,
    0x61,
    0x79,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x68,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x4c,
    0x6f,
    0x72,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x68,
    0x61,
    0x73,
    0x20,
    0x69,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x77,
    0x6e,
    0x45,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x61,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2c,
    0x62,
    0x65,
    0x68,
    0x61,
    0x76,
    0x69,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x62,
    0x6c,
    0x61,
    0x63,
    0x6b,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x27,
    0x73,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x57,
    0x61,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x6f,
    0x6e,
    0x2c,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x63,
    0x69,
    0x74,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x09,
    0x09,
    0x72,
    0x65,
    0x66,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x72,
    0x61,
    0x64,
    0x69,
    0x6f,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x72,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x61,
    0x6e,
    0x79,
    0x68,
    0x69,
    0x73,
    0x20,
    0x66,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2c,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x63,
    0x6f,
    0x70,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x61,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x73,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x65,
    0x72,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x6f,
    0x66,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x69,
    0x65,
    0x64,
    0x63,
    0x6c,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x57,
    0x69,
    0x64,
    0x74,
    0x68,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4c,
    0x65,
    0x67,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x74,
    0x6f,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x73,
    0x20,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x61,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3e,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x73,
    0x65,
    0x6c,
    0x76,
    0x65,
    0x73,
    0x2c,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x68,
    0x65,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x20,
    0x61,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x43,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x77,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x65,
    0x77,
    0x73,
    0x6c,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x73,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x65,
    0x73,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x73,
    0x61,
    0x74,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x69,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x76,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x47,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x79,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x79,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x65,
    0x72,
    0x68,
    0x61,
    0x70,
    0x73,
    0x72,
    0x69,
    0x73,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x72,
    0x73,
    0x20,
    0x77,
    0x68,
    0x65,
    0x6e,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x73,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x68,
    0x65,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x6c,
    0x62,
    0x75,
    0x69,
    0x6c,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x68,
    0x69,
    0x73,
    0x61,
    0x72,
    0x65,
    0x61,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x57,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x53,
    0x74,
    0x61,
    0x74,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3d,
    0x32,
    0x20,
    0x7c,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x6f,
    0x70,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x20,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x63,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x73,
    0x20,
    0x65,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x6f,
    0x20,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x65,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x2e,
    0x20,
    0x54,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x2f,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x2f,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x69,
    0x74,
    0x65,
    0x72,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x2c,
    0x69,
    0x73,
    0x20,
    0x61,
    0x20,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x20,
    0x66,
    0x65,
    0x77,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x61,
    0x6c,
    0x69,
    0x66,
    0x6f,
    0x72,
    0x6e,
    0x69,
    0x61,
    0x2c,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x20,
    0x61,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x09,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x69,
    0x74,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x61,
    0x72,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x09,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x77,
    0x61,
    0x73,
    0x20,
    0x67,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x61,
    0x73,
    0x20,
    0x73,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x65,
    0x73,
    0x74,
    0x65,
    0x61,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2e,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x64,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x6f,
    0x20,
    0x72,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x77,
    0x61,
    0x73,
    0x20,
    0x72,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x61,
    0x20,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x75,
    0x6e,
    0x63,
    0x68,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x65,
    0x73,
    0x74,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x77,
    0x6f,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2c,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x73,
    0x65,
    0x6c,
    0x76,
    0x65,
    0x73,
    0x2e,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x61,
    0x73,
    0x74,
    0x6f,
    0x20,
    0x6a,
    0x6f,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x79,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x20,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x4f,
    0x66,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x68,
    0x69,
    0x73,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x20,
    0x69,
    0x73,
    0x69,
    0x73,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x67,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x54,
    0x68,
    0x65,
    0x20,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x2c,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x57,
    0x65,
    0x73,
    0x74,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x73,
    0x6c,
    0x6f,
    0x76,
    0x65,
    0x6e,
    0xc4,
    0x8d,
    0x69,
    0x6e,
    0x61,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x73,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x64,
    0x61,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x61,
    0x63,
    0x74,
    0x69,
    0x76,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x74,
    0x65,
    0x63,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0xc3,
    0xad,
    0x61,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x75,
    0x6e,
    0x74,
    0x75,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x61,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x65,
    0xc3,
    0xb1,
    0x61,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x73,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x72,
    0x73,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x74,
    0x72,
    0x61,
    0x74,
    0x61,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x67,
    0xc3,
    0xad,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x73,
    0x65,
    0x63,
    0x72,
    0x65,
    0x74,
    0x61,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x63,
    0x72,
    0x65,
    0x63,
    0x69,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x73,
    0x75,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x69,
    0x72,
    0x73,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x73,
    0x65,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x75,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x64,
    0x61,
    0x6c,
    0x61,
    0x6a,
    0x61,
    0x72,
    0x61,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x69,
    0x64,
    0x61,
    0x64,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x66,
    0xc3,
    0xad,
    0x61,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x6e,
    0x69,
    0x65,
    0x72,
    0xc3,
    0xad,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x63,
    0x69,
    0x64,
    0x6f,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x61,
    0x76,
    0x65,
    0x67,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x69,
    0x64,
    0x61,
    0x64,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x2d,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x79,
    0x3a,
    0x22,
    0x20,
    0x3a,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x2f,
    0x2f,
    0x3c,
    0x21,
    0x5b,
    0x43,
    0x44,
    0x41,
    0x54,
    0x41,
    0x5b,
    0x0a,
    0x4f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x30,
    0x70,
    0x78,
    0x3b,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x64,
    0x65,
    0x76,
    0x69,
    0x63,
    0x65,
    0x2d,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x6c,
    0x61,
    0x62,
    0x65,
    0x6c,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x67,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x2f,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x6f,
    0x70,
    0x65,
    0x6e,
    0x28,
    0x20,
    0x21,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x3b,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x67,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3a,
    0x31,
    0x38,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x62,
    0x62,
    0x72,
    0x65,
    0x76,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x69,
    0x76,
    0x69,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x31,
    0x39,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x74,
    0x65,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x32,
    0x30,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x2d,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x6e,
    0x6f,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x27,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x27,
    0x29,
    0x46,
    0x75,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x2c,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x6e,
    0x65,
    0x72,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x3d,
    0x20,
    0x70,
    0x72,
    0x69,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x72,
    0x61,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x6e,
    0x65,
    0x67,
    0x6f,
    0x74,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x65,
    0x61,
    0x64,
    0x71,
    0x75,
    0x61,
    0x72,
    0x74,
    0x65,
    0x72,
    0x73,
    0x53,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x20,
    0x41,
    0x66,
    0x72,
    0x69,
    0x63,
    0x61,
    0x75,
    0x6e,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x50,
    0x65,
    0x6e,
    0x6e,
    0x73,
    0x79,
    0x6c,
    0x76,
    0x61,
    0x6e,
    0x69,
    0x61,
    0x41,
    0x73,
    0x20,
    0x61,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x2c,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x2f,
    0x73,
    0x75,
    0x70,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x61,
    0x64,
    0x65,
    0x6c,
    0x70,
    0x68,
    0x69,
    0x61,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x29,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x67,
    0x65,
    0x74,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x65,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3d,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x73,
    0x75,
    0x62,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6c,
    0x2e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x68,
    0x74,
    0x67,
    0x65,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x27,
    0x2c,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x67,
    0x72,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x20,
    0x31,
    0x61,
    0x20,
    0x76,
    0x61,
    0x72,
    0x69,
    0x65,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x45,
    0x6e,
    0x63,
    0x79,
    0x63,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x70,
    0x68,
    0x69,
    0x63,
    0x73,
    0x29,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x64,
    0x65,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x61,
    0x74,
    0x69,
    0x73,
    0x66,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x28,
    0x55,
    0x53,
    0x29,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x43,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x28,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x2e,
    0x20,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x22,
    0x20,
    0x74,
    0x61,
    0x62,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x3d,
    0x22,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3b,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x77,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x74,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x63,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x31,
    0x6a,
    0x75,
    0x72,
    0x69,
    0x73,
    0x64,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x49,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2b,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x74,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x72,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x63,
    0x63,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x3e,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x6e,
    0x73,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x68,
    0x61,
    0x6d,
    0x70,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x6c,
    0x22,
    0x20,
    0x76,
    0x69,
    0x6f,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x74,
    0x72,
    0x75,
    0x65,
    0x3b,
    0x53,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x2f,
    0x2f,
    0x45,
    0x4e,
    0x22,
    0x20,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x65,
    0x73,
    0x43,
    0x68,
    0x61,
    0x6d,
    0x70,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x63,
    0x61,
    0x70,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x7d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x61,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x50,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x64,
    0x28,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x28,
    0x75,
    0x6e,
    0x65,
    0x6d,
    0x70,
    0x6c,
    0x6f,
    0x79,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x2f,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x47,
    0x75,
    0x69,
    0x64,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x77,
    0x68,
    0x65,
    0x6c,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x2c,
    0x0a,
    0x2e,
    0x6e,
    0x6f,
    0x6e,
    0x74,
    0x6f,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x62,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x66,
    0x20,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3a,
    0x20,
    0x31,
    0x70,
    0x78,
    0x20,
    0x7b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x31,
    0x74,
    0x72,
    0x65,
    0x61,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x30,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x6d,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x61,
    0x63,
    0x68,
    0x69,
    0x65,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x4a,
    0x61,
    0x76,
    0x61,
    0x53,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x65,
    0x76,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x42,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x63,
    0x61,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x3e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x0a,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x61,
    0x6c,
    0x66,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x22,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x3a,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x6c,
    0x69,
    0x62,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6d,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x4a,
    0x65,
    0x73,
    0x75,
    0x73,
    0x20,
    0x43,
    0x68,
    0x72,
    0x69,
    0x73,
    0x74,
    0x50,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x64,
    0x69,
    0x73,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x72,
    0x2c,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x69,
    0x73,
    0x20,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x61,
    0x6c,
    0x70,
    0x68,
    0x61,
    0x62,
    0x65,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x3a,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3b,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x74,
    0x09,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x69,
    0x67,
    0x68,
    0x62,
    0x6f,
    0x72,
    0x68,
    0x6f,
    0x6f,
    0x64,
    0x61,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x73,
    0x72,
    0x65,
    0x64,
    0x75,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x4e,
    0x6f,
    0x6e,
    0x65,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x2c,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x69,
    0x73,
    0x20,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x28,
    0x73,
    0x65,
    0x65,
    0x20,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x77,
    0x29,
    0x2e,
    0x22,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x73,
    0x20,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x09,
    0x09,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x61,
    0x63,
    0x63,
    0x65,
    0x6c,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x48,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x46,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x7b,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x6d,
    0x65,
    0x72,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x41,
    0x20,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x66,
    0x61,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x65,
    0x63,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x3e,
    0x3c,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x6e,
    0x65,
    0x69,
    0x67,
    0x68,
    0x62,
    0x6f,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x64,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x09,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x53,
    0x6f,
    0x76,
    0x69,
    0x65,
    0x74,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x63,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x67,
    0x65,
    0x64,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x49,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x63,
    0x74,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x61,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x75,
    0x69,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x75,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x6e,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x63,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x6c,
    0x42,
    0x75,
    0x62,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x49,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x72,
    0x20,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x53,
    0x65,
    0x70,
    0x74,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x70,
    0x78,
    0x3b,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x66,
    0x61,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x72,
    0x68,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x68,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x72,
    0x65,
    0x20,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x61,
    0x20,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x6f,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x67,
    0x75,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6e,
    0x6f,
    0x77,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x65,
    0x72,
    0x69,
    0x76,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x53,
    0x63,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x61,
    0x76,
    0x69,
    0x61,
    0x6e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x61,
    0x67,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x6f,
    0x67,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x72,
    0x65,
    0x20,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x77,
    0x61,
    0x73,
    0x20,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x61,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x74,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x61,
    0x70,
    0x74,
    0x75,
    0x72,
    0x65,
    0x64,
    0x6e,
    0x6f,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x49,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x78,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x20,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x20,
    0x69,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x72,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x73,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x49,
    0x74,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x63,
    0x63,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x41,
    0x72,
    0x63,
    0x68,
    0x69,
    0x74,
    0x65,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x62,
    0x65,
    0x74,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x61,
    0x72,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x61,
    0x73,
    0x73,
    0x20,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x78,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x3b,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x69,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x57,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x20,
    0x57,
    0x61,
    0x72,
    0x20,
    0x49,
    0x49,
    0x74,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x6f,
    0x6e,
    0x69,
    0x61,
    0x6c,
    0x73,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x72,
    0x76,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3d,
    0x22,
    0x50,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x22,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x76,
    0x61,
    0x72,
    0x69,
    0x65,
    0x74,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x69,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x75,
    0x70,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x62,
    0x65,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x72,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x63,
    0x61,
    0x6c,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x73,
    0x49,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x20,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x6f,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x68,
    0x61,
    0x6c,
    0x66,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x2c,
    0x3c,
    0x2f,
    0x6e,
    0x6f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x73,
    0x61,
    0x69,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x77,
    0x68,
    0x69,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x73,
    0x68,
    0x79,
    0x70,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x65,
    0x72,
    0x73,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x69,
    0x6e,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x64,
    0x77,
    0x61,
    0x73,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x49,
    0x6e,
    0x64,
    0x69,
    0x61,
    0x6e,
    0x20,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x77,
    0x6f,
    0x72,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x61,
    0x73,
    0x75,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x74,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x6c,
    0x79,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x0a,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x3e,
    0x73,
    0x75,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x61,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x64,
    0x69,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x65,
    0x78,
    0x74,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x63,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x72,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x75,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x65,
    0x78,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x74,
    0x75,
    0x72,
    0x65,
    0x73,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x0a,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x61,
    0x73,
    0x69,
    0x73,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x73,
    0x73,
    0x61,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x77,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x20,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x74,
    0x68,
    0x65,
    0x20,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x73,
    0x74,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x75,
    0x70,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x64,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x61,
    0x74,
    0x73,
    0x74,
    0x75,
    0x64,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x78,
    0x65,
    0x63,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x48,
    0x75,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x52,
    0x69,
    0x67,
    0x68,
    0x74,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x72,
    0x65,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x65,
    0x64,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x64,
    0x65,
    0x66,
    0x65,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x61,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x61,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x75,
    0x64,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x68,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x66,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x68,
    0x65,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x74,
    0x65,
    0x72,
    0x72,
    0x69,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x65,
    0x78,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x22,
    0x3e,
    0x52,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x45,
    0x6d,
    0x70,
    0x69,
    0x72,
    0x65,
    0x65,
    0x71,
    0x75,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x49,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x74,
    0x2c,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x73,
    0x20,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x77,
    0x69,
    0x66,
    0x65,
    0x28,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x3e,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x49,
    0x6e,
    0x20,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x63,
    0x65,
    0x2c,
    0x62,
    0x72,
    0x6f,
    0x61,
    0x64,
    0x63,
    0x61,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x68,
    0x61,
    0x72,
    0x67,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x72,
    0x65,
    0x66,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x72,
    0x79,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x73,
    0x65,
    0x74,
    0x54,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x61,
    0x72,
    0x65,
    0x20,
    0x61,
    0x63,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x76,
    0x69,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x28,
    0x29,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x79,
    0x72,
    0x65,
    0x71,
    0x75,
    0x69,
    0x72,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2c,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x77,
    0x69,
    0x73,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x61,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x74,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2c,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x65,
    0x76,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x65,
    0x6c,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x67,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x64,
    0x75,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x72,
    0x61,
    0x72,
    0x65,
    0x20,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x65,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x64,
    0x65,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6f,
    0x77,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x68,
    0x69,
    0x70,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x79,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x64,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x54,
    0x65,
    0x78,
    0x74,
    0x77,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x72,
    0x65,
    0x63,
    0x65,
    0x69,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x73,
    0x75,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x72,
    0x65,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x61,
    0x72,
    0x69,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x61,
    0x73,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x79,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x74,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x74,
    0x20,
    0x74,
    0x77,
    0x6f,
    0x77,
    0x61,
    0x73,
    0x20,
    0x64,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x53,
    0x65,
    0x63,
    0x72,
    0x65,
    0x74,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x31,
    0x2f,
    0x5e,
    0x5c,
    0x73,
    0x2b,
    0x7c,
    0x5c,
    0x73,
    0x2b,
    0x24,
    0x2f,
    0x67,
    0x65,
    0x29,
    0x7b,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x77,
    0x20,
    0x65,
    0x7d,
    0x3b,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x77,
    0x6f,
    0x20,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x77,
    0x68,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x61,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x09,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x70,
    0x72,
    0x6f,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x65,
    0x74,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x28,
    0x55,
    0x4b,
    0x29,
    0x65,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x28,
    0x55,
    0x53,
    0x29,
    0xd0,
    0x9c,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xa1,
    0xd1,
    0x80,
    0xd0,
    0xbf,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xbf,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xbf,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xe6,
    0xad,
    0xa3,
    0xe9,
    0xab,
    0x94,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbd,
    0x93,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0xe7,
    0xb9,
    0x81,
    0xe4,
    0xbd,
    0x93,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0xe6,
    0x9c,
    0x89,
    0xe9,
    0x99,
    0x90,
    0xe5,
    0x85,
    0xac,
    0xe5,
    0x8f,
    0xb8,
    0xe4,
    0xba,
    0xba,
    0xe6,
    0xb0,
    0x91,
    0xe6,
    0x94,
    0xbf,
    0xe5,
    0xba,
    0x9c,
    0xe9,
    0x98,
    0xbf,
    0xe9,
    0x87,
    0x8c,
    0xe5,
    0xb7,
    0xb4,
    0xe5,
    0xb7,
    0xb4,
    0xe7,
    0xa4,
    0xbe,
    0xe4,
    0xbc,
    0x9a,
    0xe4,
    0xb8,
    0xbb,
    0xe4,
    0xb9,
    0x89,
    0xe6,
    0x93,
    0x8d,
    0xe4,
    0xbd,
    0x9c,
    0xe7,
    0xb3,
    0xbb,
    0xe7,
    0xbb,
    0x9f,
    0xe6,
    0x94,
    0xbf,
    0xe7,
    0xad,
    0x96,
    0xe6,
    0xb3,
    0x95,
    0xe8,
    0xa7,
    0x84,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x68,
    0x65,
    0x72,
    0x72,
    0x61,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0xc3,
    0xb3,
    0x6e,
    0x69,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x63,
    0x69,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x64,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0xc3,
    0xa1,
    0x74,
    0x69,
    0x63,
    0x61,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x64,
    0x6f,
    0x73,
    0x64,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x62,
    0x61,
    0x6a,
    0x61,
    0x64,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x61,
    0x79,
    0x75,
    0x6e,
    0x74,
    0x61,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x61,
    0x64,
    0x6f,
    0x4c,
    0x69,
    0x62,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0xc3,
    0xa1,
    0x63,
    0x74,
    0x65,
    0x6e,
    0x6f,
    0x73,
    0x68,
    0x61,
    0x62,
    0x69,
    0x74,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x63,
    0x75,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x6d,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x61,
    0x75,
    0x72,
    0x61,
    0x6e,
    0x74,
    0x65,
    0x73,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x63,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0xc3,
    0xb3,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x61,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x64,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x61,
    0x64,
    0x6f,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6c,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x72,
    0x65,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x75,
    0x74,
    0x69,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x63,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x65,
    0x6e,
    0x66,
    0x65,
    0x72,
    0x6d,
    0x65,
    0x64,
    0x61,
    0x64,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x6f,
    0x73,
    0x65,
    0x78,
    0x70,
    0x65,
    0x72,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x73,
    0x73,
    0x75,
    0x62,
    0x63,
    0x61,
    0x74,
    0x65,
    0x67,
    0x6f,
    0x72,
    0x69,
    0x61,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xa0,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x8b,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xa0,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0x9c,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0x9c,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb1,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd0,
    0x9c,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb6,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd1,
    0x8c,
    0xd0,
    0x9e,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd1,
    0x83,
    0xd0,
    0xb0,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x89,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x85,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x88,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xb6,
    0xd0,
    0xb4,
    0xd1,
    0x8b,
    0xd0,
    0xb9,
    0xd0,
    0xb2,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xb3,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xbf,
    0xd0,
    0xbf,
    0xd1,
    0x8b,
    0xd0,
    0xb2,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb2,
    0xd1,
    0x8b,
    0xd0,
    0xb9,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8c,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb1,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x82,
    0xd0,
    0xba,
    0xd1,
    0x83,
    0xd0,
    0xbf,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x85,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xa0,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xa2,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xb2,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbf,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xba,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd0,
    0xb6,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd1,
    0x89,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd1,
    0x89,
    0xd1,
    0x8c,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd1,
    0x8b,
    0xd0,
    0xbb,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xb1,
    0xd1,
    0x8b,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd1,
    0x82,
    0xd0,
    0xa1,
    0xd0,
    0xb5,
    0xd0,
    0xb9,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd0,
    0xb9,
    0xd0,
    0xbd,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x84,
    0xd0,
    0xb8,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd1,
    0x83,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbd,
    0xd1,
    0x8f,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd1,
    0x8e,
    0xd1,
    0x8f,
    0xd0,
    0xbd,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x8f,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd1,
    0x8c,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd1,
    0x85,
    0xd0,
    0xb4,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xb7,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xb7,
    0xd1,
    0x8f,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd0,
    0xa2,
    0xd0,
    0xb5,
    0xd0,
    0xbf,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd1,
    0x8c,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd1,
    0x86,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd1,
    0x89,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8b,
    0xd0,
    0x9b,
    0xd1,
    0x83,
    0xd1,
    0x87,
    0xd1,
    0x88,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x9d,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8c,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xd8,
    0xaa,
    0xd8,
    0xb3,
    0xd8,
    0xaa,
    0xd8,
    0xb7,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa9,
    0xd8,
    0xa8,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd8,
    0xb7,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd9,
    0x81,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb6,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd8,
    0xb5,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb2,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd8,
    0xaf,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb0,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xad,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xad,
    0xd9,
    0x82,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x82,
    0xd9,
    0x85,
    0xd8,
    0xad,
    0xd9,
    0x81,
    0xd9,
    0x88,
    0xd8,
    0xb8,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xab,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd9,
    0x87,
    0xd8,
    0xaf,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xa3,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x82,
    0xd8,
    0xb1,
    0xd8,
    0xa2,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xad,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xb3,
    0xd8,
    0xb1,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd9,
    0x85,
    0xd8,
    0xac,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd8,
    0xb9,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xad,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x86,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd8,
    0xb7,
    0xd9,
    0x81,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd8,
    0xb7,
    0xd9,
    0x8a,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x88,
    0xd9,
    0x8a,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xb6,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd9,
    0x8a,
    0xd8,
    0xa8,
    0xd8,
    0xaa,
    0xd9,
    0x88,
    0xd9,
    0x82,
    0xd9,
    0x8a,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd9,
    0x89,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xb7,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb4,
    0xd8,
    0xae,
    0xd8,
    0xb5,
    0xd9,
    0x8a,
    0xd8,
    0xb3,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xab,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xab,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xad,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xab,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb2,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xae,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xb9,
    0xd8,
    0xa9,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd9,
    0x87,
    0xd8,
    0xaf,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xa6,
    0xd9,
    0x8a,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd8,
    0xae,
    0xd9,
    0x88,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd8,
    0xb1,
    0xd9,
    0x88,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd8,
    0xaa,
    0xd8,
    0xba,
    0xd8,
    0xb1,
    0xd9,
    0x82,
    0xd8,
    0xaa,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xb8,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x3d,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x69,
    0x67,
    0x75,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x6e,
    0x67,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x4d,
    0x61,
    0x74,
    0x68,
    0x2e,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6d,
    0x28,
    0x29,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x72,
    0x79,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x63,
    0x69,
    0x72,
    0x63,
    0x75,
    0x6d,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x2e,
    0x61,
    0x70,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x43,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x28,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x22,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x62,
    0x61,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4d,
    0x61,
    0x73,
    0x73,
    0x61,
    0x63,
    0x68,
    0x75,
    0x73,
    0x65,
    0x74,
    0x74,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x70,
    0x72,
    0x6f,
    0x6e,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x23,
    0x66,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3a,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x20,
    0x6d,
    0x69,
    0x73,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x61,
    0x6e,
    0x65,
    0x6f,
    0x75,
    0x73,
    0x26,
    0x6c,
    0x74,
    0x3b,
    0x2f,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x26,
    0x67,
    0x74,
    0x3b,
    0x70,
    0x73,
    0x79,
    0x63,
    0x68,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x53,
    0x75,
    0x70,
    0x72,
    0x65,
    0x6d,
    0x65,
    0x20,
    0x43,
    0x6f,
    0x75,
    0x72,
    0x74,
    0x6f,
    0x63,
    0x63,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x41,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x2c,
    0x4e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x70,
    0x78,
    0x3b,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x74,
    0x6f,
    0x4c,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x43,
    0x61,
    0x73,
    0x65,
    0x28,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x66,
    0x61,
    0x63,
    0x74,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x2c,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x22,
    0x20,
    0x6d,
    0x61,
    0x78,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x3b,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x4d,
    0x65,
    0x64,
    0x69,
    0x74,
    0x65,
    0x72,
    0x72,
    0x61,
    0x6e,
    0x65,
    0x61,
    0x6e,
    0x65,
    0x78,
    0x74,
    0x72,
    0x61,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x61,
    0x73,
    0x73,
    0x61,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x62,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x68,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x68,
    0x72,
    0x65,
    0x66,
    0x77,
    0x61,
    0x73,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x53,
    0x61,
    0x6e,
    0x20,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x73,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x28,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x63,
    0x61,
    0x73,
    0x65,
    0x73,
    0x70,
    0x61,
    0x72,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x47,
    0x72,
    0x65,
    0x61,
    0x74,
    0x20,
    0x42,
    0x72,
    0x69,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x3b,
    0x20,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x20,
    0x6a,
    0x75,
    0x73,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x75,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x61,
    0x72,
    0x65,
    0x20,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x0a,
    0x09,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x72,
    0x65,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x68,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x72,
    0x65,
    0x64,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3a,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x3c,
    0x69,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x2d,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x3b,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x6f,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x70,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x79,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x70,
    0x72,
    0x65,
    0x64,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x7c,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x6f,
    0x72,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x3d,
    0x22,
    0x6f,
    0x67,
    0x3a,
    0x2f,
    0x78,
    0x2d,
    0x73,
    0x68,
    0x6f,
    0x63,
    0x6b,
    0x77,
    0x61,
    0x76,
    0x65,
    0x2d,
    0x64,
    0x65,
    0x6d,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x4e,
    0x65,
    0x76,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x2c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x41,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x2c,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x20,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x73,
    0x74,
    0x61,
    0x72,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x61,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x64,
    0x69,
    0x73,
    0x63,
    0x75,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x69,
    0x64,
    0x64,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x64,
    0x69,
    0x66,
    0x66,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x76,
    0x69,
    0x65,
    0x77,
    0x68,
    0x6f,
    0x6d,
    0x6f,
    0x73,
    0x65,
    0x78,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x6d,
    0x61,
    0x6e,
    0x75,
    0x66,
    0x61,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x20,
    0x23,
    0x6c,
    0x65,
    0x6e,
    0x67,
    0x74,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x20,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x3e,
    0x72,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x77,
    0x61,
    0x73,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x49,
    0x6e,
    0x64,
    0x6f,
    0x2d,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x61,
    0x6e,
    0x76,
    0x75,
    0x6c,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x65,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4e,
    0x65,
    0x77,
    0x20,
    0x59,
    0x6f,
    0x72,
    0x6b,
    0x20,
    0x43,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x75,
    0x72,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6e,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x74,
    0x65,
    0x63,
    0x68,
    0x6e,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x2e,
    0x72,
    0x65,
    0x6d,
    0x6f,
    0x76,
    0x65,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x28,
    0x62,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x20,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x2e,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x73,
    0x20,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6e,
    0x64,
    0x61,
    0x73,
    0x68,
    0x3b,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x65,
    0x71,
    0x75,
    0x69,
    0x70,
    0x70,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x54,
    0x68,
    0x65,
    0x73,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2f,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x74,
    0x77,
    0x6f,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x62,
    0x65,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x41,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x20,
    0x72,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x64,
    0x20,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6d,
    0x64,
    0x61,
    0x73,
    0x68,
    0x3b,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x66,
    0x61,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x20,
    0x61,
    0x73,
    0x79,
    0x6e,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x74,
    0x72,
    0x75,
    0x65,
    0x3b,
    0x70,
    0x72,
    0x6f,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x73,
    0x65,
    0x65,
    0x6d,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x61,
    0x72,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x74,
    0x6f,
    0x6f,
    0x6b,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x67,
    0x72,
    0x65,
    0x61,
    0x74,
    0x20,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x45,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x76,
    0x69,
    0x72,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x32,
    0x30,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x2c,
    0x70,
    0x72,
    0x6f,
    0x66,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x72,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x74,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x44,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x54,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x6d,
    0x61,
    0x79,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x3a,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x2c,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x62,
    0x65,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x27,
    0x73,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x28,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x22,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x62,
    0x61,
    0x73,
    0x69,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x6f,
    0x20,
    0x72,
    0x65,
    0x64,
    0x75,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6a,
    0x75,
    0x72,
    0x69,
    0x73,
    0x64,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x3d,
    0x22,
    0x4e,
    0x65,
    0x77,
    0x20,
    0x54,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x66,
    0x69,
    0x6c,
    0x6d,
    0x20,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x2d,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x2e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x62,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x75,
    0x6e,
    0x70,
    0x72,
    0x65,
    0x63,
    0x65,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x69,
    0x73,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x3b,
    0x69,
    0x73,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x09,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x72,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6c,
    0x69,
    0x63,
    0x74,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x41,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x6c,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x72,
    0x79,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x47,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x69,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x09,
    0x09,
    0x3c,
    0x75,
    0x6c,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x76,
    0x69,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x31,
    0x39,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x2c,
    0x70,
    0x72,
    0x61,
    0x63,
    0x74,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x65,
    0x72,
    0x73,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x63,
    0x75,
    0x70,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x6d,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x61,
    0x6c,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x74,
    0x65,
    0x62,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3a,
    0x20,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x61,
    0x73,
    0x53,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x64,
    0x75,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x72,
    0x65,
    0x70,
    0x75,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x49,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x6f,
    0x2d,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x49,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x63,
    0x61,
    0x73,
    0x65,
    0x2c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x70,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x44,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x64,
    0x65,
    0x61,
    0x6c,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x61,
    0x6c,
    0x77,
    0x61,
    0x79,
    0x73,
    0x61,
    0x72,
    0x65,
    0x20,
    0x63,
    0x75,
    0x72,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x65,
    0x78,
    0x70,
    0x72,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x63,
    0x69,
    0x76,
    0x69,
    0x6c,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x49,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x4d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x74,
    0x72,
    0x61,
    0x63,
    0x65,
    0x64,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x73,
    0x20,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x6c,
    0x69,
    0x76,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x65,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x46,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x52,
    0x65,
    0x76,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x79,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x73,
    0x75,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x3e,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x77,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x69,
    0x74,
    0x73,
    0x77,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6e,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6c,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x61,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x61,
    0x20,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x65,
    0x64,
    0x68,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x67,
    0x72,
    0x61,
    0x64,
    0x75,
    0x61,
    0x74,
    0x65,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x74,
    0x77,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x76,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x73,
    0x65,
    0x72,
    0x76,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x66,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x64,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x69,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x63,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x2c,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x6e,
    0x20,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x32,
    0x30,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x2e,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x6c,
    0x6f,
    0x61,
    0x64,
    0x43,
    0x68,
    0x61,
    0x72,
    0x74,
    0x62,
    0x65,
    0x61,
    0x74,
    0x74,
    0x6f,
    0x20,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x68,
    0x61,
    0x6c,
    0x66,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x72,
    0x63,
    0x68,
    0x69,
    0x74,
    0x65,
    0x63,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x62,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x61,
    0x6c,
    0x61,
    0x75,
    0x74,
    0x68,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x46,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x61,
    0x73,
    0x20,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x65,
    0x64,
    0x65,
    0x64,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x61,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x50,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x66,
    0x72,
    0x65,
    0x65,
    0x20,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x77,
    0x61,
    0x72,
    0x65,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x79,
    0x65,
    0x64,
    0x61,
    0x77,
    0x61,
    0x79,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x61,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x77,
    0x65,
    0x72,
    0x66,
    0x75,
    0x6c,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x61,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x77,
    0x61,
    0x73,
    0x20,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x61,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x73,
    0x3e,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x44,
    0x4f,
    0x20,
    0x4e,
    0x4f,
    0x54,
    0x20,
    0x41,
    0x4c,
    0x54,
    0x45,
    0x52,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x73,
    0x2f,
    0x3f,
    0x73,
    0x6f,
    0x72,
    0x74,
    0x3d,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x61,
    0x73,
    0x69,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x68,
    0x61,
    0x73,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x75,
    0x6d,
    0x6d,
    0x65,
    0x72,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x63,
    0x68,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x6f,
    0x73,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x69,
    0x73,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x76,
    0x61,
    0x72,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x53,
    0x6f,
    0x75,
    0x74,
    0x68,
    0x20,
    0x41,
    0x66,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x20,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x63,
    0x61,
    0x73,
    0x65,
    0x3b,
    0x20,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x3b,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x61,
    0x68,
    0x61,
    0x73,
    0x61,
    0x20,
    0x4d,
    0x65,
    0x6c,
    0x61,
    0x79,
    0x75,
    0x6e,
    0x6f,
    0x72,
    0x73,
    0x6b,
    0x20,
    0x62,
    0x6f,
    0x6b,
    0x6d,
    0xc3,
    0xa5,
    0x6c,
    0x6e,
    0x6f,
    0x72,
    0x73,
    0x6b,
    0x20,
    0x6e,
    0x79,
    0x6e,
    0x6f,
    0x72,
    0x73,
    0x6b,
    0x73,
    0x6c,
    0x6f,
    0x76,
    0x65,
    0x6e,
    0xc5,
    0xa1,
    0xc4,
    0x8d,
    0x69,
    0x6e,
    0x61,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x63,
    0x61,
    0x6c,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x22,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x61,
    0x6d,
    0x62,
    0x69,
    0x67,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x44,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x27,
    0x2c,
    0x20,
    0x27,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x61,
    0x6e,
    0x65,
    0x6f,
    0x75,
    0x73,
    0x6c,
    0x79,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x3a,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x3e,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x66,
    0x72,
    0x61,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x3a,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x3d,
    0x68,
    0x74,
    0x74,
    0x70,
    0x25,
    0x33,
    0x41,
    0x25,
    0x32,
    0x46,
    0x25,
    0x32,
    0x46,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x20,
    0x2f,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x22,
    0x20,
    0x7d,
    0x29,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x2e,
    0x73,
    0x65,
    0x74,
    0x41,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x28,
    0x41,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x20,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x41,
    0x72,
    0x72,
    0x61,
    0x79,
    0x28,
    0x29,
    0x3b,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x3b,
    0x55,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x2c,
    0x22,
    0x3e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x2f,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x22,
    0x3e,
    0x3d,
    0x27,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x27,
    0x20,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2c,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x61,
    0x73,
    0x20,
    0x61,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x74,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x0a,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x2f,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x2e,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x20,
    0x41,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x2e,
    0x61,
    0x70,
    0x70,
    0x72,
    0x6f,
    0x78,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x2d,
    0x2d,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x50,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x4d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x74,
    0x68,
    0x65,
    0x20,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x75,
    0x73,
    0x65,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x61,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x61,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x0a,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x73,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x68,
    0x6f,
    0x6c,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x61,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x69,
    0x74,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x3a,
    0x20,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x42,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2d,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x2e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x6e,
    0x69,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x2f,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x29,
    0x3b,
    0x20,
    0x6a,
    0x73,
    0x2e,
    0x69,
    0x64,
    0x20,
    0x3d,
    0x20,
    0x69,
    0x64,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x30,
    0x30,
    0x25,
    0x22,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x52,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x43,
    0x61,
    0x74,
    0x68,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x64,
    0x69,
    0x73,
    0x63,
    0x72,
    0x69,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x72,
    0x63,
    0x68,
    0x61,
    0x65,
    0x6f,
    0x6c,
    0x6f,
    0x67,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x70,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x77,
    0x2e,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x61,
    0x49,
    0x6e,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x2c,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x22,
    0x20,
    0x43,
    0x7a,
    0x65,
    0x63,
    0x68,
    0x20,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x4b,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x6f,
    0x6d,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x2e,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x63,
    0x6f,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x27,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x28,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x09,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x73,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x3e,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x74,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x63,
    0x61,
    0x72,
    0x62,
    0x6f,
    0x6e,
    0x20,
    0x64,
    0x69,
    0x6f,
    0x78,
    0x69,
    0x64,
    0x65,
    0x0a,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x2d,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x69,
    0x74,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x54,
    0x69,
    0xe1,
    0xba,
    0xbf,
    0x6e,
    0x67,
    0x20,
    0x56,
    0x69,
    0xe1,
    0xbb,
    0x87,
    0x74,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x30,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x64,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x65,
    0x64,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x29,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x0a,
    0x44,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x65,
    0x63,
    0x63,
    0x6c,
    0x65,
    0x73,
    0x69,
    0x61,
    0x73,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x68,
    0x61,
    0x73,
    0x20,
    0x6e,
    0x65,
    0x76,
    0x65,
    0x72,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x69,
    0x6e,
    0x20,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x77,
    0x61,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x70,
    0x65,
    0x72,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x73,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x2d,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x75,
    0x73,
    0x65,
    0x64,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x72,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x61,
    0x20,
    0x73,
    0x6d,
    0x61,
    0x6c,
    0x6c,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2e,
    0x20,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x41,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x69,
    0x74,
    0x73,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x6c,
    0x69,
    0x6b,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3e,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x65,
    0x61,
    0x72,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x69,
    0x74,
    0x20,
    0x77,
    0x61,
    0x73,
    0x70,
    0x74,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x20,
    0x69,
    0x6e,
    0x68,
    0x61,
    0x62,
    0x69,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x0d,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x72,
    0x67,
    0x75,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x61,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x62,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x62,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x72,
    0x65,
    0x63,
    0x6f,
    0x67,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x69,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x20,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x45,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x61,
    0x77,
    0x61,
    0x79,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3b,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x69,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x6e,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x64,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x22,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x20,
    0x61,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x73,
    0x20,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x56,
    0x69,
    0x63,
    0x65,
    0x20,
    0x50,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x70,
    0x61,
    0x73,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x31,
    0x31,
    0x70,
    0x78,
    0x65,
    0x78,
    0x70,
    0x6c,
    0x61,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x72,
    0x69,
    0x74,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x09,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6d,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x73,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x73,
    0x69,
    0x64,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x28,
    0x4d,
    0x61,
    0x74,
    0x68,
    0x2e,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x6d,
    0x28,
    0x29,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x43,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x31,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x73,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x68,
    0x61,
    0x64,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x0a,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x3a,
    0x62,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x76,
    0x69,
    0x65,
    0x77,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x5f,
    0x69,
    0x64,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x63,
    0x61,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x0d,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x72,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x78,
    0x4d,
    0x4c,
    0x48,
    0x74,
    0x74,
    0x70,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x73,
    0x75,
    0x62,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x74,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x75,
    0x72,
    0x66,
    0x61,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x69,
    0x67,
    0x6e,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x5f,
    0x73,
    0x65,
    0x74,
    0x44,
    0x6f,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x49,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x44,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x65,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x43,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x70,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x0d,
    0x69,
    0x66,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x66,
    0x72,
    0x65,
    0x67,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x61,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x4e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x79,
    0x70,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x41,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x65,
    0x61,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x28,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x75,
    0x61,
    0x6c,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x2f,
    0x3e,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x3b,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x75,
    0x72,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x74,
    0x6f,
    0x3b,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x66,
    0x66,
    0x66,
    0x7d,
    0x0a,
    0x2e,
    0x0a,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x75,
    0x62,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x63,
    0x65,
    0x6c,
    0x65,
    0x62,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x46,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x75,
    0x69,
    0x73,
    0x68,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x62,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x20,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3e,
    0x3c,
    0x21,
    0x5b,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x66,
    0x5d,
    0x2d,
    0x2d,
    0x3e,
    0x0a,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x65,
    0x61,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6d,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x77,
    0x61,
    0x73,
    0x20,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x68,
    0x69,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x69,
    0x67,
    0x6e,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x65,
    0x6e,
    0x76,
    0x69,
    0x72,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x65,
    0x73,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x73,
    0x74,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x6d,
    0x61,
    0x64,
    0x65,
    0x22,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x74,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x73,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x68,
    0x61,
    0x6c,
    0x66,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x22,
    0x20,
    0x69,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x49,
    0x49,
    0x2c,
    0x20,
    0x48,
    0x6f,
    0x6c,
    0x79,
    0x20,
    0x52,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x65,
    0x78,
    0x70,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x72,
    0x20,
    0x6f,
    0x77,
    0x6e,
    0x64,
    0x65,
    0x66,
    0x69,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x20,
    0x65,
    0x6e,
    0x73,
    0x75,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x67,
    0x72,
    0x65,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x61,
    0x69,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x72,
    0x65,
    0x20,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x69,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x61,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x75,
    0x74,
    0x74,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x3e,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x61,
    0x72,
    0x72,
    0x69,
    0x65,
    0x64,
    0x20,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x62,
    0x79,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x61,
    0x70,
    0x69,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x77,
    0x68,
    0x69,
    0x63,
    0x68,
    0x20,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x74,
    0x6f,
    0x20,
    0x73,
    0x75,
    0x70,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x73,
    0x73,
    0x20,
    0x20,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x68,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x74,
    0x68,
    0x65,
    0x20,
    0x75,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x70,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x71,
    0x22,
    0x09,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x63,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x6d,
    0x61,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6e,
    0x73,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x2c,
    0x63,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x29,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x70,
    0x68,
    0x69,
    0x6c,
    0x6f,
    0x73,
    0x6f,
    0x70,
    0x68,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x73,
    0x72,
    0x70,
    0x73,
    0x6b,
    0x6f,
    0x68,
    0x72,
    0x76,
    0x61,
    0x74,
    0x73,
    0x6b,
    0x69,
    0x74,
    0x69,
    0xe1,
    0xba,
    0xbf,
    0x6e,
    0x67,
    0x20,
    0x56,
    0x69,
    0xe1,
    0xbb,
    0x87,
    0x74,
    0xd0,
    0xa0,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xb9,
    0xd1,
    0x80,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xb9,
    0x69,
    0x6e,
    0x76,
    0x65,
    0x73,
    0x74,
    0x69,
    0x67,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd0,
    0xb9,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd0,
    0x9d,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb2,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x8f,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd1,
    0x8f,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xa3,
    0xd0,
    0xba,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x8b,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd1,
    0x81,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd1,
    0x89,
    0xd1,
    0x8c,
    0xd1,
    0x8e,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd1,
    0x83,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd0,
    0x93,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x8f,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xa1,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x8d,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x83,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x87,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd1,
    0x88,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb3,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xa0,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xaf,
    0xd9,
    0x89,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd8,
    0xb6,
    0xd9,
    0x88,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa8,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd9,
    0x82,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xa6,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd8,
    0xa7,
    0xd8,
    0xa1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xb6,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb5,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xb9,
    0xd8,
    0xb6,
    0xd8,
    0xa7,
    0xd8,
    0xa1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xa6,
    0xd8,
    0xac,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb3,
    0xd8,
    0xac,
    0xd9,
    0x8a,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x82,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb6,
    0xd8,
    0xba,
    0xd8,
    0xb7,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xad,
    0xd9,
    0x8a,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xaf,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xae,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd9,
    0x81,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x8a,
    0xd8,
    0xae,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd9,
    0x82,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xae,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xac,
    0xd8,
    0xaa,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd9,
    0x88,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xa9,
    0xd8,
    0xb9,
    0xd8,
    0xa8,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x84,
    0xd9,
    0x87,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd8,
    0xb7,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa3,
    0xd8,
    0xaf,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xae,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xaa,
    0xd8,
    0xad,
    0xd8,
    0xaf,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xba,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd9,
    0x8a,
    0x63,
    0x75,
    0x72,
    0x73,
    0x6f,
    0x72,
    0x3a,
    0x70,
    0x6f,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3b,
    0x3c,
    0x2f,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3e,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x22,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x2f,
    0x61,
    0x3e,
    0x20,
    0x7c,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x3c,
    0x21,
    0x64,
    0x6f,
    0x63,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3d,
    0x22,
    0x73,
    0x63,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x3c,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x69,
    0x73,
    0x74,
    0x69,
    0x63,
    0x73,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x67,
    0x65,
    0x74,
    0x22,
    0x20,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x75,
    0x74,
    0x20,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x28,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x62,
    0x6f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x3a,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x73,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x22,
    0x20,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x66,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x0a,
    0x20,
    0x20,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x6f,
    0x70,
    0x22,
    0x3e,
    0x3c,
    0x77,
    0x61,
    0x73,
    0x20,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x3b,
    0x22,
    0x3e,
    0x29,
    0x2e,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x2e,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x62,
    0x65,
    0x63,
    0x61,
    0x75,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x63,
    0x6f,
    0x6f,
    0x6b,
    0x69,
    0x65,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x2f,
    0x7d,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x7b,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x30,
    0x3b,
    0x45,
    0x6e,
    0x63,
    0x79,
    0x63,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x69,
    0x61,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x2e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x0a,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x68,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x73,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x49,
    0x6e,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x2c,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x20,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x3b,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x2f,
    0x3e,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x73,
    0x20,
    0x77,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x0d,
    0x0a,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x09,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x69,
    0x72,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x6e,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x74,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x20,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x43,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x20,
    0x50,
    0x61,
    0x72,
    0x74,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x6e,
    0x79,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x4f,
    0x72,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x6f,
    0x78,
    0x20,
    0x43,
    0x68,
    0x75,
    0x72,
    0x63,
    0x68,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x75,
    0x6e,
    0x74,
    0x69,
    0x6c,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x61,
    0x74,
    0x68,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4e,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x75,
    0x72,
    0x6c,
    0x28,
    0x61,
    0x72,
    0x67,
    0x75,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x22,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x66,
    0x72,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x61,
    0x20,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x76,
    0x65,
    0x72,
    0x79,
    0x20,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x75,
    0x72,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x5f,
    0x63,
    0x61,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x3d,
    0x61,
    0x74,
    0x74,
    0x61,
    0x63,
    0x68,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x73,
    0x20,
    0x64,
    0x65,
    0x72,
    0x69,
    0x76,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x64,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x49,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x72,
    0x65,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x20,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x73,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x54,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6d,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x61,
    0x73,
    0x20,
    0x72,
    0x65,
    0x70,
    0x6c,
    0x61,
    0x63,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x61,
    0x6e,
    0x61,
    0x6c,
    0x79,
    0x73,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x73,
    0x70,
    0x69,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x73,
    0x75,
    0x63,
    0x63,
    0x65,
    0x73,
    0x73,
    0x66,
    0x75,
    0x6c,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x61,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x72,
    0x65,
    0x68,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x76,
    0x65,
    0x48,
    0x69,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x65,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x72,
    0x65,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x55,
    0x6e,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x3e,
    0x0a,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x73,
    0x74,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x70,
    0x50,
    0x72,
    0x6f,
    0x70,
    0x61,
    0x67,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x74,
    0x72,
    0x6f,
    0x6d,
    0x61,
    0x67,
    0x6e,
    0x65,
    0x74,
    0x69,
    0x63,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x53,
    0x65,
    0x72,
    0x76,
    0x69,
    0x63,
    0x65,
    0x73,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x49,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x76,
    0x61,
    0x72,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x73,
    0x20,
    0x61,
    0x20,
    0x72,
    0x65,
    0x73,
    0x75,
    0x6c,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x20,
    0x77,
    0x61,
    0x73,
    0x20,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6d,
    0x64,
    0x61,
    0x73,
    0x68,
    0x3b,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x75,
    0x6c,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x65,
    0x61,
    0x74,
    0x68,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x69,
    0x73,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x3b,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x69,
    0x73,
    0x20,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0x20,
    0x28,
    0xe7,
    0xae,
    0x80,
    0xe4,
    0xbd,
    0x93,
    0x29,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x64,
    0x61,
    0x64,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x72,
    0x61,
    0x63,
    0x69,
    0xc3,
    0xb3,
    0x6e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x63,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x65,
    0x6e,
    0x74,
    0x65,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x89,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x83,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa2,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8c,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9b,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa2,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9b,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9b,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x83,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0x98,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x82,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0x72,
    0x73,
    0x73,
    0x2b,
    0x78,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x2d,
    0x74,
    0x79,
    0x70,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x69,
    0x74,
    0x6c,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x73,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x74,
    0x2f,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2e,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x2e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x2d,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x29,
    0x3b,
    0x20,
    0x72,
    0x65,
    0x74,
    0x75,
    0x72,
    0x6e,
    0x20,
    0x66,
    0x61,
    0x6c,
    0x73,
    0x65,
    0x3b,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x64,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x20,
    0x73,
    0x63,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x2d,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x70,
    0x73,
    0x65,
    0x3a,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x42,
    0x61,
    0x68,
    0x61,
    0x73,
    0x61,
    0x20,
    0x49,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x69,
    0x61,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3c,
    0x74,
    0x65,
    0x78,
    0x74,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x3a,
    0x73,
    0x70,
    0x61,
    0x63,
    0x65,
    0x3d,
    0x2e,
    0x67,
    0x69,
    0x66,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x3a,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3b,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x61,
    0x64,
    0x64,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x73,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x2f,
    0x66,
    0x61,
    0x76,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x73,
    0x79,
    0x73,
    0x74,
    0x65,
    0x6d,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x31,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3b,
    0x0a,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x28,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x29,
    0x3b,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x3b,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x66,
    0x6c,
    0x6f,
    0x77,
    0x3a,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x20,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x20,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x22,
    0x3e,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x0a,
    0x20,
    0x20,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x20,
    0x7b,
    0x74,
    0x68,
    0x65,
    0x20,
    0x31,
    0x35,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x2e,
    0x70,
    0x72,
    0x65,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x44,
    0x65,
    0x66,
    0x61,
    0x75,
    0x6c,
    0x74,
    0x28,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x42,
    0x79,
    0x7a,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x45,
    0x6d,
    0x70,
    0x69,
    0x72,
    0x65,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x7c,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x7c,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x7c,
    0x76,
    0x61,
    0x73,
    0x74,
    0x20,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x6d,
    0x61,
    0x6a,
    0x6f,
    0x72,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x20,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3d,
    0x22,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x50,
    0x72,
    0x65,
    0x73,
    0x73,
    0x64,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x53,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x64,
    0x20,
    0x57,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x20,
    0x57,
    0x61,
    0x72,
    0x64,
    0x69,
    0x73,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x73,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x22,
    0x3e,
    0x64,
    0x65,
    0x72,
    0x69,
    0x76,
    0x65,
    0x73,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x61,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x61,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x62,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3a,
    0x31,
    0x30,
    0x30,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x2d,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x20,
    0x73,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x78,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x44,
    0x65,
    0x6d,
    0x6f,
    0x63,
    0x72,
    0x61,
    0x74,
    0x69,
    0x63,
    0x20,
    0x50,
    0x61,
    0x72,
    0x74,
    0x79,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x61,
    0x73,
    0x6f,
    0x6e,
    0x2c,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x09,
    0x73,
    0x42,
    0x79,
    0x54,
    0x61,
    0x67,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x28,
    0x73,
    0x29,
    0x5b,
    0x30,
    0x5d,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x27,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x27,
    0x27,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x27,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x2f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x3c,
    0x70,
    0x61,
    0x67,
    0x65,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x62,
    0x61,
    0x68,
    0x61,
    0x73,
    0x61,
    0x20,
    0x49,
    0x6e,
    0x64,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x69,
    0x61,
    0x65,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x28,
    0x73,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x29,
    0xce,
    0x95,
    0xce,
    0xbb,
    0xce,
    0xbb,
    0xce,
    0xb7,
    0xce,
    0xbd,
    0xce,
    0xb9,
    0xce,
    0xba,
    0xce,
    0xac,
    0xd1,
    0x85,
    0xd1,
    0x80,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbf,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd0,
    0x94,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0x98,
    0xd0,
    0xbd,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0x9e,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x86,
    0xd1,
    0x8b,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd1,
    0x83,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x83,
    0xd1,
    0x87,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd1,
    0x8e,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd0,
    0xb8,
    0xd0,
    0xb1,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xbf,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xb2,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb6,
    0xd9,
    0x8a,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xa6,
    0xd9,
    0x8a,
    0xd8,
    0xb3,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x83,
    0xd8,
    0xaa,
    0xd9,
    0x88,
    0xd8,
    0xa8,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd8,
    0xb9,
    0xd9,
    0x88,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd8,
    0xa6,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb5,
    0xd9,
    0x88,
    0xd8,
    0xaa,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xaa,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa5,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb1,
    0xd8,
    0xa6,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0x72,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x73,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x7c,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x7c,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x7c,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6c,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x3b,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x30,
    0x3b,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3a,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x22,
    0x20,
    0x50,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x77,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x65,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x0a,
    0x20,
    0x20,
    0x3c,
    0x2f,
    0x70,
    0x61,
    0x67,
    0x65,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x74,
    0x20,
    0x45,
    0x78,
    0x70,
    0x6c,
    0x6f,
    0x72,
    0x65,
    0x72,
    0x61,
    0x2e,
    0x61,
    0x73,
    0x79,
    0x6e,
    0x63,
    0x20,
    0x3d,
    0x20,
    0x74,
    0x72,
    0x75,
    0x65,
    0x3b,
    0x0d,
    0x0a,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x22,
    0x3e,
    0x22,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x22,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x64,
    0x65,
    0x72,
    0x69,
    0x76,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x0a,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x41,
    0x72,
    0x69,
    0x61,
    0x6c,
    0x2c,
    0x20,
    0x48,
    0x65,
    0x6c,
    0x76,
    0x65,
    0x74,
    0x69,
    0x63,
    0x61,
    0x2c,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x65,
    0x73,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x3c,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x70,
    0x72,
    0x65,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x28,
    0x27,
    0x3c,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x3e,
    0x0a,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x72,
    0x65,
    0x76,
    0x65,
    0x61,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x76,
    0x69,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x73,
    0x65,
    0x72,
    0x69,
    0x65,
    0x73,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x22,
    0x3e,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x63,
    0x6c,
    0x61,
    0x69,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x74,
    0x74,
    0x70,
    0x25,
    0x33,
    0x41,
    0x25,
    0x32,
    0x46,
    0x25,
    0x32,
    0x46,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x6d,
    0x61,
    0x6e,
    0x69,
    0x66,
    0x65,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x50,
    0x72,
    0x69,
    0x6d,
    0x65,
    0x20,
    0x4d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x66,
    0x69,
    0x78,
    0x22,
    0x3e,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x74,
    0x68,
    0x72,
    0x65,
    0x65,
    0x2d,
    0x64,
    0x69,
    0x6d,
    0x65,
    0x6e,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x43,
    0x68,
    0x75,
    0x72,
    0x63,
    0x68,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x6f,
    0x66,
    0x20,
    0x4e,
    0x6f,
    0x72,
    0x74,
    0x68,
    0x20,
    0x43,
    0x61,
    0x72,
    0x6f,
    0x6c,
    0x69,
    0x6e,
    0x61,
    0x73,
    0x71,
    0x75,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6b,
    0x69,
    0x6c,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x72,
    0x65,
    0x73,
    0x2e,
    0x61,
    0x64,
    0x64,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x6c,
    0x79,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x50,
    0x68,
    0x6f,
    0x6e,
    0x65,
    0x74,
    0x69,
    0x63,
    0x20,
    0x41,
    0x6c,
    0x70,
    0x68,
    0x61,
    0x62,
    0x65,
    0x74,
    0x64,
    0x65,
    0x63,
    0x6c,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x42,
    0x65,
    0x6e,
    0x6a,
    0x61,
    0x6d,
    0x69,
    0x6e,
    0x20,
    0x46,
    0x72,
    0x61,
    0x6e,
    0x6b,
    0x6c,
    0x69,
    0x6e,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x2d,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x67,
    0x61,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x57,
    0x65,
    0x73,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x20,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x70,
    0x65,
    0x72,
    0x73,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x50,
    0x72,
    0x6f,
    0x6a,
    0x65,
    0x63,
    0x74,
    0x20,
    0x47,
    0x75,
    0x74,
    0x65,
    0x6e,
    0x62,
    0x65,
    0x72,
    0x67,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x73,
    0x65,
    0x64,
    0x74,
    0x6f,
    0x67,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x73,
    0x2f,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x61,
    0x74,
    0x75,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x72,
    0x65,
    0x73,
    0x6f,
    0x75,
    0x72,
    0x63,
    0x65,
    0x73,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x69,
    0x66,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x71,
    0x75,
    0x61,
    0x6e,
    0x74,
    0x75,
    0x6d,
    0x20,
    0x6d,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x69,
    0x63,
    0x73,
    0x4e,
    0x65,
    0x76,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x6c,
    0x65,
    0x73,
    0x73,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x69,
    0x6c,
    0x6c,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x20,
    0x61,
    0x67,
    0x6f,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0d,
    0xce,
    0x95,
    0xce,
    0xbb,
    0xce,
    0xbb,
    0xce,
    0xb7,
    0xce,
    0xbd,
    0xce,
    0xb9,
    0xce,
    0xba,
    0xce,
    0xac,
    0x0a,
    0x74,
    0x61,
    0x6b,
    0x65,
    0x20,
    0x61,
    0x64,
    0x76,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x67,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x6e,
    0x64,
    0x2c,
    0x20,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x61,
    0x74,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4d,
    0x69,
    0x63,
    0x72,
    0x6f,
    0x73,
    0x6f,
    0x66,
    0x74,
    0x20,
    0x57,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x73,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x6c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6e,
    0x6f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x2e,
    0x72,
    0x65,
    0x61,
    0x63,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x72,
    0x79,
    0x69,
    0x73,
    0x6f,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x70,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4f,
    0x6c,
    0x64,
    0x20,
    0x54,
    0x65,
    0x73,
    0x74,
    0x61,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x41,
    0x66,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x41,
    0x6d,
    0x65,
    0x72,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x73,
    0x65,
    0x72,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x65,
    0x70,
    0x61,
    0x72,
    0x61,
    0x74,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6d,
    0x65,
    0x74,
    0x72,
    0x6f,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x61,
    0x6e,
    0x20,
    0x61,
    0x72,
    0x65,
    0x61,
    0x6d,
    0x61,
    0x6b,
    0x65,
    0x73,
    0x20,
    0x69,
    0x74,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x61,
    0x63,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6c,
    0x65,
    0x64,
    0x67,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x72,
    0x67,
    0x75,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x3e,
    0x0a,
    0x74,
    0x68,
    0x65,
    0x20,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x41,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x63,
    0x6f,
    0x69,
    0x6e,
    0x63,
    0x69,
    0x64,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x77,
    0x6f,
    0x2d,
    0x74,
    0x68,
    0x69,
    0x72,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x44,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x2c,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x61,
    0x6e,
    0x6e,
    0x6f,
    0x75,
    0x6e,
    0x63,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x6c,
    0x79,
    0x62,
    0x65,
    0x6c,
    0x69,
    0x65,
    0x76,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x63,
    0x69,
    0x6f,
    0x75,
    0x73,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x65,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x6b,
    0x6e,
    0x6f,
    0x77,
    0x6e,
    0x20,
    0x61,
    0x73,
    0x73,
    0x75,
    0x72,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x61,
    0x70,
    0x70,
    0x65,
    0x61,
    0x72,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x6f,
    0x63,
    0x63,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x75,
    0x73,
    0x65,
    0x64,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x61,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x65,
    0x3b,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x76,
    0x65,
    0x3b,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3b,
    0x6a,
    0x61,
    0x78,
    0x2f,
    0x6c,
    0x69,
    0x62,
    0x73,
    0x2f,
    0x6a,
    0x71,
    0x75,
    0x65,
    0x72,
    0x79,
    0x2f,
    0x31,
    0x2e,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x23,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x50,
    0x72,
    0x69,
    0x76,
    0x61,
    0x63,
    0x79,
    0x20,
    0x50,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x65,
    0x28,
    0x22,
    0x25,
    0x33,
    0x43,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x27,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x4f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x68,
    0x61,
    0x6e,
    0x64,
    0x2c,
    0x2e,
    0x6a,
    0x70,
    0x67,
    0x7c,
    0x74,
    0x68,
    0x75,
    0x6d,
    0x62,
    0x7c,
    0x72,
    0x69,
    0x67,
    0x68,
    0x74,
    0x7c,
    0x32,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x6e,
    0x69,
    0x6e,
    0x65,
    0x74,
    0x65,
    0x65,
    0x6e,
    0x74,
    0x68,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x72,
    0x79,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x73,
    0x3b,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x20,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x3b,
    0x20,
    0x41,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x66,
    0x72,
    0x61,
    0x6d,
    0x65,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x34,
    0x2f,
    0x6c,
    0x6f,
    0x6f,
    0x73,
    0x65,
    0x2e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x0a,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x69,
    0x73,
    0x20,
    0x70,
    0x65,
    0x72,
    0x69,
    0x6f,
    0x64,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x20,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x3b,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x77,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x62,
    0x6f,
    0x6c,
    0x64,
    0x3b,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x73,
    0x74,
    0x61,
    0x74,
    0x65,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x09,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x20,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x20,
    0x77,
    0x69,
    0x64,
    0x65,
    0x20,
    0x76,
    0x61,
    0x72,
    0x69,
    0x65,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x3c,
    0x21,
    0x44,
    0x4f,
    0x43,
    0x54,
    0x59,
    0x50,
    0x45,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3b,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x72,
    0x6e,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3d,
    0x68,
    0x74,
    0x74,
    0x70,
    0x25,
    0x33,
    0x41,
    0x25,
    0x32,
    0x46,
    0x25,
    0x32,
    0x46,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x69,
    0x6e,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x63,
    0x75,
    0x6c,
    0x74,
    0x75,
    0x72,
    0x65,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x69,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x48,
    0x61,
    0x72,
    0x76,
    0x61,
    0x72,
    0x64,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x61,
    0x69,
    0x6e,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x4f,
    0x78,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x6b,
    0x65,
    0x79,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x22,
    0x20,
    0x63,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x74,
    0x68,
    0x65,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x74,
    0x65,
    0x64,
    0x20,
    0x4b,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x6f,
    0x6d,
    0x66,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x67,
    0x6f,
    0x76,
    0x65,
    0x72,
    0x6e,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x20,
    0x64,
    0x65,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x65,
    0x61,
    0x64,
    0x65,
    0x72,
    0x2e,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x64,
    0x65,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x6c,
    0x69,
    0x67,
    0x68,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x20,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x74,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x65,
    0x73,
    0x70,
    0x65,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x73,
    0x74,
    0x61,
    0x74,
    0x69,
    0x63,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x22,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x61,
    0x20,
    0x6c,
    0x61,
    0x72,
    0x67,
    0x65,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x54,
    0x65,
    0x6c,
    0x65,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x75,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x6e,
    0x6f,
    0x66,
    0x6f,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x22,
    0x20,
    0x74,
    0x48,
    0x6f,
    0x6c,
    0x79,
    0x20,
    0x52,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x45,
    0x6d,
    0x70,
    0x65,
    0x72,
    0x6f,
    0x72,
    0x61,
    0x6c,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x65,
    0x78,
    0x63,
    0x6c,
    0x75,
    0x73,
    0x69,
    0x76,
    0x65,
    0x6c,
    0x79,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x74,
    0x3d,
    0x22,
    0x53,
    0x65,
    0x63,
    0x72,
    0x65,
    0x74,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x43,
    0x49,
    0x41,
    0x20,
    0x57,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x20,
    0x46,
    0x61,
    0x63,
    0x74,
    0x62,
    0x6f,
    0x6f,
    0x6b,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x61,
    0x6e,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x65,
    0x6d,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x74,
    0x68,
    0x65,
    0x20,
    0x41,
    0x74,
    0x6c,
    0x61,
    0x6e,
    0x74,
    0x69,
    0x63,
    0x20,
    0x4f,
    0x63,
    0x65,
    0x61,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x69,
    0x63,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x73,
    0x70,
    0x65,
    0x61,
    0x6b,
    0x69,
    0x6e,
    0x67,
    0x2c,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x62,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x68,
    0x65,
    0x20,
    0x4f,
    0x74,
    0x74,
    0x6f,
    0x6d,
    0x61,
    0x6e,
    0x20,
    0x45,
    0x6d,
    0x70,
    0x69,
    0x72,
    0x65,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x41,
    0x6e,
    0x20,
    0x49,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x65,
    0x71,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x75,
    0x72,
    0x65,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x43,
    0x6f,
    0x6e,
    0x66,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x74,
    0x65,
    0x20,
    0x53,
    0x74,
    0x61,
    0x74,
    0x65,
    0x73,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x67,
    0x65,
    0x6e,
    0x6f,
    0x75,
    0x73,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x50,
    0x72,
    0x6f,
    0x63,
    0x65,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x69,
    0x65,
    0x73,
    0x20,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x69,
    0x6e,
    0x76,
    0x6f,
    0x6c,
    0x76,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x69,
    0x76,
    0x69,
    0x64,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x72,
    0x65,
    0x65,
    0x61,
    0x64,
    0x6a,
    0x61,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x69,
    0x73,
    0x20,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x73,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6c,
    0x6c,
    0x61,
    0x62,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x77,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x72,
    0x65,
    0x67,
    0x61,
    0x72,
    0x64,
    0x65,
    0x64,
    0x20,
    0x61,
    0x73,
    0x68,
    0x69,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x61,
    0x72,
    0x69,
    0x65,
    0x73,
    0x66,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6d,
    0x65,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x44,
    0x6f,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6e,
    0x20,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x63,
    0x63,
    0x65,
    0x70,
    0x74,
    0x65,
    0x64,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x6f,
    0x73,
    0x73,
    0x69,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x61,
    0x72,
    0x65,
    0x20,
    0x61,
    0x6c,
    0x73,
    0x6f,
    0x20,
    0x61,
    0x76,
    0x61,
    0x69,
    0x6c,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x73,
    0x74,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x69,
    0x73,
    0x20,
    0x61,
    0x6c,
    0x6d,
    0x6f,
    0x73,
    0x74,
    0x20,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x72,
    0x65,
    0x6c,
    0x79,
    0x70,
    0x61,
    0x73,
    0x73,
    0x65,
    0x73,
    0x20,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x76,
    0x69,
    0x64,
    0x65,
    0x6f,
    0x47,
    0x65,
    0x72,
    0x6d,
    0x61,
    0x6e,
    0x69,
    0x63,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x73,
    0x20,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x6c,
    0x79,
    0x20,
    0x61,
    0x66,
    0x74,
    0x65,
    0x72,
    0x77,
    0x61,
    0x72,
    0x64,
    0x73,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x73,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x72,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x6f,
    0x61,
    0x72,
    0x64,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x44,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x6f,
    0x72,
    0x73,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x73,
    0x65,
    0x61,
    0x72,
    0x63,
    0x68,
    0x7c,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x49,
    0x6e,
    0x20,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4d,
    0x75,
    0x6c,
    0x74,
    0x69,
    0x70,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x6e,
    0x6f,
    0x74,
    0x65,
    0x73,
    0x6f,
    0x72,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x73,
    0x75,
    0x62,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x79,
    0x65,
    0x61,
    0x72,
    0x73,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x0d,
    0x0a,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x78,
    0x2e,
    0x70,
    0x68,
    0x70,
    0x77,
    0x61,
    0x73,
    0x20,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x20,
    0x73,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x72,
    0x65,
    0x70,
    0x72,
    0x65,
    0x73,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x67,
    0x72,
    0x61,
    0x64,
    0x75,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x20,
    0x74,
    0x68,
    0x65,
    0x54,
    0x72,
    0x61,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x22,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x29,
    0x3b,
    0x48,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x73,
    0x69,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3b,
    0x20,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x6c,
    0x65,
    0x66,
    0x74,
    0x3a,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x61,
    0x67,
    0x61,
    0x69,
    0x6e,
    0x73,
    0x74,
    0x30,
    0x3b,
    0x20,
    0x76,
    0x65,
    0x72,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x55,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x6c,
    0x79,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x78,
    0x2d,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6c,
    0x65,
    0x61,
    0x72,
    0x66,
    0x69,
    0x78,
    0x22,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6f,
    0x74,
    0x65,
    0x72,
    0x09,
    0x09,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x09,
    0x09,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x74,
    0x68,
    0x65,
    0x20,
    0x6d,
    0x6f,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x70,
    0x69,
    0x63,
    0x74,
    0x75,
    0x72,
    0x65,
    0xd0,
    0x91,
    0xd1,
    0x8a,
    0xd0,
    0xbb,
    0xd0,
    0xb3,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xb1,
    0xd1,
    0x8a,
    0xd0,
    0xbb,
    0xd0,
    0xb3,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xa4,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x89,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x89,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd1,
    0x8b,
    0xd0,
    0x9e,
    0xd1,
    0x82,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xb1,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xbf,
    0xd0,
    0xbb,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd1,
    0x8b,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xb7,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd1,
    0x8f,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xb4,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x87,
    0xd0,
    0xbd,
    0xd1,
    0x8b,
    0xd1,
    0x85,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x83,
    0xd0,
    0xba,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb3,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbc,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd0,
    0xbf,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd1,
    0x8e,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x85,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd1,
    0x8f,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xb1,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xbc,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0x90,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xba,
    0xd1,
    0x81,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb4,
    0xd1,
    0x80,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x91,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x88,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x8f,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x96,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x86,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd9,
    0x86,
    0xd8,
    0xaa,
    0xd8,
    0xaf,
    0xd9,
    0x8a,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x83,
    0xd9,
    0x85,
    0xd8,
    0xa8,
    0xd9,
    0x8a,
    0xd9,
    0x88,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb4,
    0xd8,
    0xa7,
    0xd9,
    0x87,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xb9,
    0xd8,
    0xaf,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb2,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xb1,
    0xd8,
    0xb9,
    0xd8,
    0xaf,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xb1,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd8,
    0xaf,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa5,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x81,
    0xd9,
    0x88,
    0xd8,
    0xaa,
    0xd9,
    0x88,
    0xd8,
    0xb4,
    0xd9,
    0x88,
    0xd8,
    0xa8,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd8,
    0xa8,
    0xd9,
    0x82,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb9,
    0xd9,
    0x84,
    0xd9,
    0x88,
    0xd9,
    0x85,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xac,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x81,
    0xd9,
    0x8a,
    0xd9,
    0x83,
    0xd8,
    0xb3,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xb3,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x85,
    0xd9,
    0x8a,
    0xd8,
    0xa9,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xb5,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0x6b,
    0x65,
    0x79,
    0x77,
    0x6f,
    0x72,
    0x64,
    0x73,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x77,
    0x33,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x31,
    0x39,
    0x39,
    0x39,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x20,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x3d,
    0x22,
    0x6f,
    0x66,
    0x66,
    0x22,
    0x20,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x20,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x3b,
    0x74,
    0x6f,
    0x20,
    0x6c,
    0x61,
    0x73,
    0x74,
    0x20,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x62,
    0x79,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x63,
    0x6f,
    0x6c,
    0x6f,
    0x72,
    0x3a,
    0x20,
    0x23,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x23,
    0x22,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x2f,
    0x2f,
    0x45,
    0x4e,
    0x22,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x77,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x55,
    0x52,
    0x49,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x77,
    0x72,
    0x69,
    0x74,
    0x65,
    0x28,
    0x27,
    0x3c,
    0x73,
    0x63,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x20,
    0x61,
    0x62,
    0x73,
    0x6f,
    0x6c,
    0x75,
    0x74,
    0x65,
    0x3b,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x2d,
    0x74,
    0x6f,
    0x70,
    0x3a,
    0x2e,
    0x6d,
    0x69,
    0x6e,
    0x2e,
    0x6a,
    0x73,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x77,
    0x33,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x31,
    0x39,
    0x39,
    0x39,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x0a,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x2f,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x64,
    0x69,
    0x73,
    0x74,
    0x69,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x2f,
    0x22,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x3f,
    0x3e,
    0x0a,
    0x77,
    0x2e,
    0x61,
    0x64,
    0x64,
    0x45,
    0x76,
    0x65,
    0x6e,
    0x74,
    0x4c,
    0x69,
    0x73,
    0x74,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x3f,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x3a,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x3d,
    0x22,
    0x6f,
    0x67,
    0x3a,
    0x74,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x61,
    0x6c,
    0x69,
    0x67,
    0x6e,
    0x3a,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x69,
    0x73,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x62,
    0x65,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x30,
    0x30,
    0x25,
    0x22,
    0x20,
    0x49,
    0x6e,
    0x20,
    0x61,
    0x64,
    0x64,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x49,
    0x74,
    0x20,
    0x69,
    0x73,
    0x20,
    0x69,
    0x6d,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x61,
    0x6e,
    0x74,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x6e,
    0x74,
    0x2d,
    0x73,
    0x69,
    0x7a,
    0x65,
    0x3a,
    0x31,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x64,
    0x3d,
    0x67,
    0x62,
    0x4c,
    0x69,
    0x62,
    0x72,
    0x61,
    0x72,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x43,
    0x6f,
    0x6e,
    0x67,
    0x72,
    0x65,
    0x73,
    0x73,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x69,
    0x6d,
    0x45,
    0x6e,
    0x67,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x20,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x41,
    0x63,
    0x61,
    0x64,
    0x65,
    0x6d,
    0x79,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x53,
    0x63,
    0x69,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x73,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x74,
    0x72,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x79,
    0x49,
    0x64,
    0x28,
    0x69,
    0x64,
    0x29,
    0x69,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x6a,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x27,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x29,
    0x3b,
    0x20,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x79,
    0x3d,
    0x22,
    0x6f,
    0x67,
    0x3a,
    0xd0,
    0x91,
    0xd1,
    0x8a,
    0xd0,
    0xbb,
    0xd0,
    0xb3,
    0xd0,
    0xb0,
    0xd1,
    0x80,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0x0a,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x3e,
    0x50,
    0x72,
    0x69,
    0x76,
    0x61,
    0x63,
    0x79,
    0x20,
    0x50,
    0x6f,
    0x6c,
    0x69,
    0x63,
    0x79,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x61,
    0x64,
    0x6d,
    0x69,
    0x6e,
    0x69,
    0x73,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x62,
    0x79,
    0x20,
    0x74,
    0x68,
    0x65,
    0x65,
    0x6e,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x53,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x65,
    0x52,
    0x65,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x6d,
    0x61,
    0x72,
    0x67,
    0x69,
    0x6e,
    0x3a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x69,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x26,
    0x71,
    0x75,
    0x6f,
    0x74,
    0x3b,
    0x66,
    0x6c,
    0x6f,
    0x61,
    0x74,
    0x3a,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x73,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x6f,
    0x74,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x6f,
    0x70,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x6e,
    0x20,
    0x57,
    0x61,
    0x73,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x74,
    0x6f,
    0x6e,
    0x2c,
    0x20,
    0x44,
    0x2e,
    0x43,
    0x2e,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x61,
    0x6d,
    0x6f,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x69,
    0x6e,
    0x67,
    0x73,
    0x2c,
    0x6f,
    0x72,
    0x67,
    0x61,
    0x6e,
    0x69,
    0x7a,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x74,
    0x72,
    0x6f,
    0x64,
    0x75,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x69,
    0x64,
    0x65,
    0x6e,
    0x74,
    0x69,
    0x66,
    0x69,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x69,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x61,
    0x63,
    0x74,
    0x65,
    0x72,
    0x20,
    0x4f,
    0x78,
    0x66,
    0x6f,
    0x72,
    0x64,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x20,
    0x6d,
    0x69,
    0x73,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x54,
    0x68,
    0x65,
    0x72,
    0x65,
    0x20,
    0x61,
    0x72,
    0x65,
    0x2c,
    0x20,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x2f,
    0x43,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x62,
    0x69,
    0x61,
    0x20,
    0x55,
    0x6e,
    0x69,
    0x76,
    0x65,
    0x72,
    0x73,
    0x69,
    0x74,
    0x79,
    0x65,
    0x78,
    0x70,
    0x61,
    0x6e,
    0x64,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x75,
    0x73,
    0x75,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x69,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x73,
    0x75,
    0x67,
    0x67,
    0x65,
    0x73,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x61,
    0x66,
    0x66,
    0x69,
    0x6c,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x49,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x6e,
    0x64,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6c,
    0x75,
    0x65,
    0x6e,
    0x63,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4f,
    0x66,
    0x66,
    0x69,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x77,
    0x65,
    0x62,
    0x73,
    0x69,
    0x74,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x68,
    0x65,
    0x61,
    0x64,
    0x71,
    0x75,
    0x61,
    0x72,
    0x74,
    0x65,
    0x72,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x65,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x61,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x69,
    0x6d,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x46,
    0x65,
    0x64,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x20,
    0x6f,
    0x66,
    0x62,
    0x65,
    0x63,
    0x61,
    0x6d,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x6c,
    0x79,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x69,
    0x6e,
    0x75,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x4e,
    0x6f,
    0x74,
    0x65,
    0x2c,
    0x20,
    0x68,
    0x6f,
    0x77,
    0x65,
    0x76,
    0x65,
    0x72,
    0x2c,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x73,
    0x69,
    0x6d,
    0x69,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x63,
    0x61,
    0x70,
    0x61,
    0x62,
    0x69,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x65,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x61,
    0x63,
    0x63,
    0x6f,
    0x72,
    0x64,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x6e,
    0x74,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x75,
    0x72,
    0x74,
    0x68,
    0x65,
    0x72,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x69,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x68,
    0x69,
    0x73,
    0x20,
    0x79,
    0x6f,
    0x75,
    0x6e,
    0x67,
    0x65,
    0x72,
    0x20,
    0x62,
    0x72,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x3c,
    0x2f,
    0x74,
    0x64,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x72,
    0x3e,
    0x3c,
    0x2f,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x58,
    0x2d,
    0x55,
    0x41,
    0x2d,
    0x70,
    0x68,
    0x79,
    0x73,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x72,
    0x74,
    0x69,
    0x65,
    0x73,
    0x6f,
    0x66,
    0x20,
    0x42,
    0x72,
    0x69,
    0x74,
    0x69,
    0x73,
    0x68,
    0x20,
    0x43,
    0x6f,
    0x6c,
    0x75,
    0x6d,
    0x62,
    0x69,
    0x61,
    0x68,
    0x61,
    0x73,
    0x20,
    0x62,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x63,
    0x72,
    0x69,
    0x74,
    0x69,
    0x63,
    0x69,
    0x7a,
    0x65,
    0x64,
    0x28,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x71,
    0x75,
    0x65,
    0x73,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x61,
    0x62,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x70,
    0x61,
    0x73,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x74,
    0x68,
    0x6f,
    0x75,
    0x73,
    0x61,
    0x6e,
    0x64,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x70,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x72,
    0x65,
    0x64,
    0x69,
    0x72,
    0x65,
    0x63,
    0x74,
    0x73,
    0x20,
    0x68,
    0x65,
    0x72,
    0x65,
    0x2e,
    0x20,
    0x46,
    0x6f,
    0x72,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x63,
    0x68,
    0x69,
    0x6c,
    0x64,
    0x72,
    0x65,
    0x6e,
    0x20,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x25,
    0x33,
    0x45,
    0x25,
    0x33,
    0x43,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x25,
    0x33,
    0x45,
    0x22,
    0x29,
    0x29,
    0x3b,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x73,
    0x69,
    0x74,
    0x65,
    0x5f,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x64,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x20,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x58,
    0x2d,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x44,
    0x61,
    0x74,
    0x65,
    0x28,
    0x29,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x28,
    0x29,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x78,
    0x2d,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x77,
    0x69,
    0x6e,
    0x64,
    0x6f,
    0x77,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3a,
    0x2d,
    0x2d,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x27,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x75,
    0x74,
    0x20,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x74,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x2f,
    0x61,
    0x3e,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x3d,
    0x22,
    0x58,
    0x2d,
    0x55,
    0x41,
    0x2d,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x74,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x68,
    0x69,
    0x70,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x2f,
    0x75,
    0x6c,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x71,
    0x22,
    0x3c,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x30,
    0x30,
    0x25,
    0x22,
    0x20,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x70,
    0x6f,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x22,
    0x20,
    0x62,
    0x6f,
    0x72,
    0x64,
    0x65,
    0x72,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x75,
    0x74,
    0x20,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x36,
    0x3e,
    0x3c,
    0x75,
    0x6c,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x20,
    0x20,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3d,
    0x22,
    0x73,
    0x63,
    0x72,
    0x65,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x20,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2f,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x61,
    0x6c,
    0x6c,
    0x6f,
    0x77,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x63,
    0x79,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x0d,
    0x0a,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x3e,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x3e,
    0x3b,
    0x0a,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x6f,
    0x6d,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x73,
    0x20,
    0x63,
    0x61,
    0x6c,
    0x6c,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x64,
    0x6f,
    0x65,
    0x73,
    0x20,
    0x6e,
    0x6f,
    0x74,
    0x20,
    0x6e,
    0x65,
    0x63,
    0x65,
    0x73,
    0x73,
    0x61,
    0x72,
    0x69,
    0x6c,
    0x79,
    0x46,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x3c,
    0x21,
    0x44,
    0x4f,
    0x43,
    0x54,
    0x59,
    0x50,
    0x45,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x6c,
    0x79,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3a,
    0x76,
    0x6f,
    0x69,
    0x64,
    0x28,
    0x30,
    0x29,
    0x3b,
    0x22,
    0x65,
    0x66,
    0x66,
    0x65,
    0x63,
    0x74,
    0x69,
    0x76,
    0x65,
    0x6e,
    0x65,
    0x73,
    0x73,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x3d,
    0x22,
    0x6f,
    0x66,
    0x66,
    0x22,
    0x20,
    0x67,
    0x65,
    0x6e,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x3e,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x22,
    0x3e,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0d,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x74,
    0x68,
    0x72,
    0x6f,
    0x75,
    0x67,
    0x68,
    0x6f,
    0x75,
    0x74,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x77,
    0x6f,
    0x72,
    0x6c,
    0x64,
    0x63,
    0x6f,
    0x6d,
    0x6d,
    0x6f,
    0x6e,
    0x20,
    0x6d,
    0x69,
    0x73,
    0x63,
    0x6f,
    0x6e,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x73,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x64,
    0x75,
    0x72,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x68,
    0x69,
    0x73,
    0x20,
    0x6c,
    0x69,
    0x66,
    0x65,
    0x74,
    0x69,
    0x6d,
    0x65,
    0x2c,
    0x63,
    0x6f,
    0x72,
    0x72,
    0x65,
    0x73,
    0x70,
    0x6f,
    0x6e,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x78,
    0x2d,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x61,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x73,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6e,
    0x75,
    0x6d,
    0x62,
    0x65,
    0x72,
    0x64,
    0x69,
    0x70,
    0x6c,
    0x6f,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x63,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x61,
    0x72,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x65,
    0x78,
    0x61,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x73,
    0x20,
    0x69,
    0x6e,
    0x63,
    0x6c,
    0x75,
    0x64,
    0x65,
    0x20,
    0x74,
    0x68,
    0x65,
    0x22,
    0x3e,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x69,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x26,
    0x61,
    0x6d,
    0x70,
    0x3b,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x74,
    0x6f,
    0x20,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x65,
    0x20,
    0x77,
    0x68,
    0x65,
    0x74,
    0x68,
    0x65,
    0x72,
    0x71,
    0x75,
    0x69,
    0x74,
    0x65,
    0x20,
    0x64,
    0x69,
    0x66,
    0x66,
    0x65,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x66,
    0x72,
    0x6f,
    0x6d,
    0x6d,
    0x61,
    0x72,
    0x6b,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x64,
    0x69,
    0x73,
    0x74,
    0x61,
    0x6e,
    0x63,
    0x65,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x62,
    0x75,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x66,
    0x6c,
    0x69,
    0x63,
    0x74,
    0x20,
    0x62,
    0x65,
    0x74,
    0x77,
    0x65,
    0x65,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x77,
    0x69,
    0x64,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x73,
    0x69,
    0x64,
    0x65,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x77,
    0x61,
    0x73,
    0x20,
    0x6f,
    0x6e,
    0x65,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x66,
    0x69,
    0x72,
    0x73,
    0x74,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x76,
    0x61,
    0x72,
    0x79,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x64,
    0x65,
    0x67,
    0x72,
    0x65,
    0x65,
    0x73,
    0x68,
    0x61,
    0x76,
    0x65,
    0x20,
    0x73,
    0x70,
    0x65,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x20,
    0x74,
    0x68,
    0x61,
    0x74,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x70,
    0x61,
    0x72,
    0x74,
    0x69,
    0x63,
    0x69,
    0x70,
    0x61,
    0x74,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x20,
    0x74,
    0x68,
    0x65,
    0x6f,
    0x72,
    0x69,
    0x67,
    0x69,
    0x6e,
    0x61,
    0x6c,
    0x6c,
    0x79,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x65,
    0x64,
    0x65,
    0x74,
    0x61,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x3e,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x69,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x63,
    0x68,
    0x61,
    0x6e,
    0x67,
    0x65,
    0x61,
    0x62,
    0x6c,
    0x79,
    0x20,
    0x77,
    0x69,
    0x74,
    0x68,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x63,
    0x6c,
    0x6f,
    0x73,
    0x65,
    0x6c,
    0x79,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x61,
    0x74,
    0x65,
    0x64,
    0x73,
    0x6f,
    0x63,
    0x69,
    0x61,
    0x6c,
    0x20,
    0x61,
    0x6e,
    0x64,
    0x20,
    0x70,
    0x6f,
    0x6c,
    0x69,
    0x74,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x74,
    0x68,
    0x61,
    0x74,
    0x20,
    0x77,
    0x6f,
    0x75,
    0x6c,
    0x64,
    0x20,
    0x6f,
    0x74,
    0x68,
    0x65,
    0x72,
    0x77,
    0x69,
    0x73,
    0x65,
    0x70,
    0x65,
    0x72,
    0x70,
    0x65,
    0x6e,
    0x64,
    0x69,
    0x63,
    0x75,
    0x6c,
    0x61,
    0x72,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x74,
    0x68,
    0x65,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x66,
    0x61,
    0x6d,
    0x69,
    0x6c,
    0x69,
    0x65,
    0x73,
    0x20,
    0x72,
    0x65,
    0x73,
    0x69,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x69,
    0x6e,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x63,
    0x6f,
    0x75,
    0x6e,
    0x74,
    0x72,
    0x69,
    0x65,
    0x73,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x75,
    0x74,
    0x65,
    0x72,
    0x20,
    0x70,
    0x72,
    0x6f,
    0x67,
    0x72,
    0x61,
    0x6d,
    0x6d,
    0x69,
    0x6e,
    0x67,
    0x65,
    0x63,
    0x6f,
    0x6e,
    0x6f,
    0x6d,
    0x69,
    0x63,
    0x20,
    0x64,
    0x65,
    0x76,
    0x65,
    0x6c,
    0x6f,
    0x70,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x64,
    0x65,
    0x74,
    0x65,
    0x72,
    0x6d,
    0x69,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x20,
    0x6d,
    0x6f,
    0x72,
    0x65,
    0x20,
    0x69,
    0x6e,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x6f,
    0x6e,
    0x20,
    0x73,
    0x65,
    0x76,
    0x65,
    0x72,
    0x61,
    0x6c,
    0x20,
    0x6f,
    0x63,
    0x63,
    0x61,
    0x73,
    0x69,
    0x6f,
    0x6e,
    0x73,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x67,
    0x75,
    0xc3,
    0xaa,
    0x73,
    0x20,
    0x28,
    0x45,
    0x75,
    0x72,
    0x6f,
    0x70,
    0x65,
    0x75,
    0x29,
    0xd0,
    0xa3,
    0xd0,
    0xba,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x97,
    0xd0,
    0xbd,
    0xd1,
    0x81,
    0xd1,
    0x8c,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd1,
    0x83,
    0xd0,
    0xba,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x97,
    0xd0,
    0xbd,
    0xd1,
    0x81,
    0xd1,
    0x8c,
    0xd0,
    0xba,
    0xd0,
    0xb0,
    0xd0,
    0xa0,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x81,
    0xd0,
    0xb8,
    0xd0,
    0xb9,
    0xd1,
    0x81,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xb9,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xb0,
    0xd0,
    0xbb,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd1,
    0x83,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb2,
    0xd0,
    0xbb,
    0xd0,
    0xb5,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xbd,
    0xd0,
    0xb5,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x85,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd0,
    0xb8,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0x98,
    0xd0,
    0xbd,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd0,
    0xa0,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd0,
    0xbf,
    0xd1,
    0x83,
    0xd0,
    0xb1,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xb8,
    0xd0,
    0xba,
    0xd0,
    0xbe,
    0xd0,
    0xbb,
    0xd0,
    0xb8,
    0xd1,
    0x87,
    0xd0,
    0xb5,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd0,
    0xbd,
    0xd1,
    0x84,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xbc,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd1,
    0x8e,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd1,
    0x80,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xb4,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xbe,
    0xd1,
    0x87,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd9,
    0x85,
    0xd8,
    0xaa,
    0xd9,
    0x88,
    0xd8,
    0xa7,
    0xd8,
    0xac,
    0xd8,
    0xaf,
    0xd9,
    0x88,
    0xd9,
    0x86,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd8,
    0xb4,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd9,
    0x83,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0xd8,
    0xa7,
    0xd9,
    0x84,
    0xd8,
    0xa7,
    0xd9,
    0x82,
    0xd8,
    0xaa,
    0xd8,
    0xb1,
    0xd8,
    0xa7,
    0xd8,
    0xad,
    0xd8,
    0xa7,
    0xd8,
    0xaa,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x55,
    0x54,
    0x46,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x73,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x6f,
    0x75,
    0x74,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x69,
    0x6e,
    0x6c,
    0x69,
    0x6e,
    0x65,
    0x2d,
    0x62,
    0x6c,
    0x6f,
    0x63,
    0x6b,
    0x3b,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x75,
    0x62,
    0x6d,
    0x69,
    0x74,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x3d,
    0x20,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x3c,
    0x69,
    0x6d,
    0x67,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x22,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x77,
    0x33,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x75,
    0x74,
    0x20,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x61,
    0x75,
    0x74,
    0x6f,
    0x63,
    0x6f,
    0x6d,
    0x70,
    0x6c,
    0x65,
    0x74,
    0x65,
    0x3d,
    0x22,
    0x6f,
    0x66,
    0x66,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x0a,
    0x3c,
    0x6c,
    0x69,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x22,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x3c,
    0x66,
    0x6f,
    0x72,
    0x6d,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x22,
    0x20,
    0x0d,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x20,
    0x6f,
    0x6e,
    0x63,
    0x6c,
    0x69,
    0x63,
    0x6b,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3a,
    0x28,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x44,
    0x61,
    0x74,
    0x65,
    0x29,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x28,
    0x29,
    0x7d,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x50,
    0x65,
    0x6f,
    0x70,
    0x6c,
    0x65,
    0x27,
    0x73,
    0x20,
    0x52,
    0x65,
    0x70,
    0x75,
    0x62,
    0x6c,
    0x69,
    0x63,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2d,
    0x64,
    0x65,
    0x63,
    0x6f,
    0x72,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3a,
    0x75,
    0x6e,
    0x64,
    0x65,
    0x72,
    0x74,
    0x68,
    0x65,
    0x20,
    0x62,
    0x65,
    0x67,
    0x69,
    0x6e,
    0x6e,
    0x69,
    0x6e,
    0x67,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x0a,
    0x65,
    0x73,
    0x74,
    0x61,
    0x62,
    0x6c,
    0x69,
    0x73,
    0x68,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x23,
    0x76,
    0x69,
    0x65,
    0x77,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x7b,
    0x6d,
    0x69,
    0x6e,
    0x2d,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3a,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x73,
    0x72,
    0x63,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x3c,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x6f,
    0x66,
    0x74,
    0x65,
    0x6e,
    0x20,
    0x72,
    0x65,
    0x66,
    0x65,
    0x72,
    0x72,
    0x65,
    0x64,
    0x20,
    0x74,
    0x6f,
    0x20,
    0x61,
    0x73,
    0x20,
    0x2f,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x0a,
    0x3c,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x3c,
    0x21,
    0x44,
    0x4f,
    0x43,
    0x54,
    0x59,
    0x50,
    0x45,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x3c,
    0x21,
    0x2d,
    0x2d,
    0x5b,
    0x49,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x20,
    0x41,
    0x69,
    0x72,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0xe0,
    0xb8,
    0xa0,
    0xe0,
    0xb8,
    0xb2,
    0xe0,
    0xb8,
    0xa9,
    0xe0,
    0xb8,
    0xb2,
    0xe0,
    0xb9,
    0x84,
    0xe0,
    0xb8,
    0x97,
    0xe0,
    0xb8,
    0xa2,
    0xe1,
    0x83,
    0xa5,
    0xe1,
    0x83,
    0x90,
    0xe1,
    0x83,
    0xa0,
    0xe1,
    0x83,
    0x97,
    0xe1,
    0x83,
    0xa3,
    0xe1,
    0x83,
    0x9a,
    0xe1,
    0x83,
    0x98,
    0xe6,
    0xad,
    0xa3,
    0xe9,
    0xab,
    0x94,
    0xe4,
    0xb8,
    0xad,
    0xe6,
    0x96,
    0x87,
    0x20,
    0x28,
    0xe7,
    0xb9,
    0x81,
    0xe9,
    0xab,
    0x94,
    0x29,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa6,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb6,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa0,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9e,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x85,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa1,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0x81,
    0xe0,
    0xa4,
    0x9a,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xac,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xbc,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa3,
    0xe0,
    0xa4,
    0xb2,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xae,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xa1,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x6c,
    0x6f,
    0x63,
    0x61,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x2e,
    0x70,
    0x72,
    0x6f,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x79,
    0x54,
    0x61,
    0x67,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x28,
    0x3c,
    0x21,
    0x44,
    0x4f,
    0x43,
    0x54,
    0x59,
    0x50,
    0x45,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3e,
    0x0a,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x3e,
    0x3a,
    0x75,
    0x72,
    0x6c,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x3e,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x77,
    0x33,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x31,
    0x39,
    0x39,
    0x39,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x22,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x67,
    0x65,
    0x74,
    0x22,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x20,
    0x3d,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x2f,
    0x78,
    0x2d,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x22,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x22,
    0x3e,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x61,
    0x70,
    0x70,
    0x6c,
    0x69,
    0x2d,
    0x2f,
    0x2f,
    0x57,
    0x33,
    0x43,
    0x2f,
    0x2f,
    0x44,
    0x54,
    0x44,
    0x20,
    0x58,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x31,
    0x2e,
    0x30,
    0x20,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x70,
    0x61,
    0x64,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x3d,
    0x22,
    0x2f,
    0x61,
    0x3e,
    0x26,
    0x6e,
    0x62,
    0x73,
    0x70,
    0x3b,
    0x3c,
    0x73,
    0x70,
    0x61,
    0x6e,
    0x20,
    0x72,
    0x6f,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x73,
    0x0a,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x4a,
    0x61,
    0x76,
    0x61,
    0x53,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x6d,
    0x65,
    0x64,
    0x69,
    0x61,
    0x3d,
    0x22,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x77,
    0x69,
    0x74,
    0x68,
    0x20,
    0x74,
    0x68,
    0x65,
    0x20,
    0x65,
    0x78,
    0x63,
    0x65,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x6f,
    0x66,
    0x20,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x20,
    0x68,
    0x65,
    0x69,
    0x67,
    0x68,
    0x74,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x77,
    0x69,
    0x64,
    0x74,
    0x68,
    0x3d,
    0x22,
    0x31,
    0x22,
    0x20,
    0x3d,
    0x27,
    0x2b,
    0x65,
    0x6e,
    0x63,
    0x6f,
    0x64,
    0x65,
    0x55,
    0x52,
    0x49,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x6f,
    0x6e,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x61,
    0x6c,
    0x74,
    0x65,
    0x72,
    0x6e,
    0x61,
    0x74,
    0x65,
    0x22,
    0x20,
    0x0a,
    0x62,
    0x6f,
    0x64,
    0x79,
    0x2c,
    0x20,
    0x74,
    0x72,
    0x2c,
    0x20,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x2c,
    0x20,
    0x74,
    0x65,
    0x78,
    0x74,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x72,
    0x6f,
    0x62,
    0x6f,
    0x74,
    0x73,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x6d,
    0x65,
    0x74,
    0x68,
    0x6f,
    0x64,
    0x3d,
    0x22,
    0x70,
    0x6f,
    0x73,
    0x74,
    0x22,
    0x20,
    0x61,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3d,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x63,
    0x73,
    0x73,
    0x22,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x3e,
    0x61,
    0x72,
    0x69,
    0x61,
    0x2d,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x72,
    0x75,
    0x65,
    0x22,
    0x3e,
    0xc2,
    0xb7,
    0x3c,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x6c,
    0x3d,
    0x30,
    0x3b,
    0x7d,
    0x29,
    0x28,
    0x29,
    0x3b,
    0x0a,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x28,
    0x29,
    0x7b,
    0x62,
    0x61,
    0x63,
    0x6b,
    0x67,
    0x72,
    0x6f,
    0x75,
    0x6e,
    0x64,
    0x2d,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x3a,
    0x20,
    0x75,
    0x72,
    0x6c,
    0x28,
    0x2f,
    0x61,
    0x3e,
    0x3c,
    0x2f,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x09,
    0x09,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x22,
    0x20,
    0x61,
    0x72,
    0x69,
    0x61,
    0x2d,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x72,
    0x75,
    0x3e,
    0x20,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x6c,
    0x61,
    0x6e,
    0x67,
    0x75,
    0x61,
    0x67,
    0x65,
    0x3d,
    0x22,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x22,
    0x20,
    0x2f,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x3e,
    0x0a,
    0x3c,
    0x6f,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x20,
    0x76,
    0x61,
    0x6c,
    0x75,
    0x65,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x2f,
    0x64,
    0x69,
    0x76,
    0x3e,
    0x3c,
    0x64,
    0x69,
    0x76,
    0x20,
    0x63,
    0x6c,
    0x61,
    0x73,
    0x73,
    0x3d,
    0x72,
    0x61,
    0x74,
    0x6f,
    0x72,
    0x22,
    0x20,
    0x61,
    0x72,
    0x69,
    0x61,
    0x2d,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x3d,
    0x22,
    0x74,
    0x72,
    0x65,
    0x3d,
    0x28,
    0x6e,
    0x65,
    0x77,
    0x20,
    0x44,
    0x61,
    0x74,
    0x65,
    0x29,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x54,
    0x69,
    0x6d,
    0x65,
    0x28,
    0x29,
    0x70,
    0x6f,
    0x72,
    0x74,
    0x75,
    0x67,
    0x75,
    0xc3,
    0xaa,
    0x73,
    0x20,
    0x28,
    0x64,
    0x6f,
    0x20,
    0x42,
    0x72,
    0x61,
    0x73,
    0x69,
    0x6c,
    0x29,
    0xd0,
    0xbe,
    0xd1,
    0x80,
    0xd0,
    0xb3,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb7,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x8c,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd0,
    0xb7,
    0xd0,
    0xbe,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd0,
    0xbd,
    0xd0,
    0xb8,
    0xd1,
    0x8f,
    0xd1,
    0x80,
    0xd0,
    0xb5,
    0xd0,
    0xb3,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd1,
    0x80,
    0xd0,
    0xb0,
    0xd1,
    0x86,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb7,
    0xd0,
    0xbc,
    0xd0,
    0xbe,
    0xd0,
    0xb6,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd0,
    0xbe,
    0xd0,
    0xb1,
    0xd1,
    0x8f,
    0xd0,
    0xb7,
    0xd0,
    0xb0,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xbd,
    0xd0,
    0xb0,
    0x3c,
    0x21,
    0x44,
    0x4f,
    0x43,
    0x54,
    0x59,
    0x50,
    0x45,
    0x20,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x50,
    0x55,
    0x42,
    0x4c,
    0x49,
    0x43,
    0x20,
    0x22,
    0x6e,
    0x74,
    0x2d,
    0x54,
    0x79,
    0x70,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x2f,
    0x2f,
    0x45,
    0x4e,
    0x22,
    0x20,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x6e,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2d,
    0x2f,
    0x2f,
    0x57,
    0x33,
    0x43,
    0x2f,
    0x2f,
    0x44,
    0x54,
    0x44,
    0x20,
    0x58,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x31,
    0x2e,
    0x30,
    0x20,
    0x54,
    0x44,
    0x54,
    0x44,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x31,
    0x2d,
    0x74,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x77,
    0x33,
    0x2e,
    0x6f,
    0x72,
    0x67,
    0x2f,
    0x54,
    0x52,
    0x2f,
    0x78,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x31,
    0x2f,
    0x70,
    0x65,
    0x20,
    0x3d,
    0x20,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x3b,
    0x3c,
    0x6d,
    0x65,
    0x74,
    0x61,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x65,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x69,
    0x6f,
    0x6e,
    0x70,
    0x61,
    0x72,
    0x65,
    0x6e,
    0x74,
    0x4e,
    0x6f,
    0x64,
    0x65,
    0x2e,
    0x69,
    0x6e,
    0x73,
    0x65,
    0x72,
    0x74,
    0x42,
    0x65,
    0x66,
    0x6f,
    0x72,
    0x65,
    0x3c,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6a,
    0x73,
    0x22,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x28,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x29,
    0x2e,
    0x72,
    0x65,
    0x61,
    0x64,
    0x79,
    0x28,
    0x66,
    0x75,
    0x6e,
    0x63,
    0x74,
    0x69,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x69,
    0x6d,
    0x61,
    0x67,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x55,
    0x41,
    0x2d,
    0x43,
    0x6f,
    0x6d,
    0x70,
    0x61,
    0x74,
    0x69,
    0x62,
    0x6c,
    0x65,
    0x22,
    0x20,
    0x63,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x3d,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x68,
    0x6f,
    0x72,
    0x74,
    0x63,
    0x75,
    0x74,
    0x20,
    0x69,
    0x63,
    0x6f,
    0x6e,
    0x3c,
    0x6c,
    0x69,
    0x6e,
    0x6b,
    0x20,
    0x72,
    0x65,
    0x6c,
    0x3d,
    0x22,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x73,
    0x68,
    0x65,
    0x65,
    0x74,
    0x22,
    0x20,
    0x3c,
    0x2f,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x3e,
    0x0a,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x3d,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x3c,
    0x61,
    0x20,
    0x74,
    0x61,
    0x72,
    0x67,
    0x65,
    0x74,
    0x3d,
    0x22,
    0x5f,
    0x62,
    0x6c,
    0x61,
    0x6e,
    0x6b,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x20,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x61,
    0x2e,
    0x74,
    0x79,
    0x70,
    0x65,
    0x20,
    0x3d,
    0x20,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x6e,
    0x73,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x2f,
    0x2f,
    0x57,
    0x33,
    0x43,
    0x2f,
    0x2f,
    0x44,
    0x54,
    0x44,
    0x20,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x34,
    0x2e,
    0x30,
    0x31,
    0x20,
    0x54,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x79,
    0x54,
    0x61,
    0x67,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x28,
    0x27,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x29,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x68,
    0x69,
    0x64,
    0x64,
    0x65,
    0x6e,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x3c,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x22,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x22,
    0x3e,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x42,
    0x79,
    0x49,
    0x64,
    0x28,
    0x3d,
    0x64,
    0x6f,
    0x63,
    0x75,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x2e,
    0x63,
    0x72,
    0x65,
    0x61,
    0x74,
    0x65,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x28,
    0x27,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x69,
    0x6e,
    0x70,
    0x75,
    0x74,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x22,
    0x20,
    0x6e,
    0x61,
    0x6d,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x2e,
    0x67,
    0x65,
    0x74,
    0x45,
    0x6c,
    0x65,
    0x6d,
    0x65,
    0x6e,
    0x74,
    0x73,
    0x42,
    0x79,
    0x54,
    0x61,
    0x67,
    0x4e,
    0x61,
    0x6d,
    0x65,
    0x28,
    0x73,
    0x6e,
    0x69,
    0x63,
    0x61,
    0x6c,
    0x22,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x43,
    0x2f,
    0x2f,
    0x44,
    0x54,
    0x44,
    0x20,
    0x48,
    0x54,
    0x4d,
    0x4c,
    0x20,
    0x34,
    0x2e,
    0x30,
    0x31,
    0x20,
    0x54,
    0x72,
    0x61,
    0x6e,
    0x73,
    0x69,
    0x74,
    0x3c,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x3e,
    0x0a,
    0x0a,
    0x3c,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x22,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x63,
    0x73,
    0x73,
    0x22,
    0x3e,
    0x69,
    0x6f,
    0x6e,
    0x61,
    0x6c,
    0x2e,
    0x64,
    0x74,
    0x64,
    0x22,
    0x3e,
    0x0a,
    0x3c,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x20,
    0x78,
    0x6d,
    0x6c,
    0x6e,
    0x73,
    0x3d,
    0x68,
    0x74,
    0x74,
    0x70,
    0x2d,
    0x65,
    0x71,
    0x75,
    0x69,
    0x76,
    0x3d,
    0x22,
    0x43,
    0x6f,
    0x6e,
    0x74,
    0x65,
    0x6e,
    0x74,
    0x2d,
    0x54,
    0x79,
    0x70,
    0x65,
    0x64,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x20,
    0x63,
    0x65,
    0x6c,
    0x6c,
    0x73,
    0x70,
    0x61,
    0x63,
    0x69,
    0x6e,
    0x67,
    0x3d,
    0x22,
    0x30,
    0x22,
    0x68,
    0x74,
    0x6d,
    0x6c,
    0x3b,
    0x20,
    0x63,
    0x68,
    0x61,
    0x72,
    0x73,
    0x65,
    0x74,
    0x3d,
    0x75,
    0x74,
    0x66,
    0x2d,
    0x38,
    0x22,
    0x20,
    0x2f,
    0x3e,
    0x0a,
    0x20,
    0x73,
    0x74,
    0x79,
    0x6c,
    0x65,
    0x3d,
    0x22,
    0x64,
    0x69,
    0x73,
    0x70,
    0x6c,
    0x61,
    0x79,
    0x3a,
    0x6e,
    0x6f,
    0x6e,
    0x65,
    0x3b,
    0x22,
    0x3e,
    0x3c,
    0x3c,
    0x6c,
    0x69,
    0x3e,
    0x3c,
    0x61,
    0x20,
    0x68,
    0x72,
    0x65,
    0x66,
    0x3d,
    0x22,
    0x68,
    0x74,
    0x74,
    0x70,
    0x3a,
    0x2f,
    0x2f,
    0x77,
    0x77,
    0x77,
    0x2e,
    0x20,
    0x74,
    0x79,
    0x70,
    0x65,
    0x3d,
    0x27,
    0x74,
    0x65,
    0x78,
    0x74,
    0x2f,
    0x6a,
    0x61,
    0x76,
    0x61,
    0x73,
    0x63,
    0x72,
    0x69,
    0x70,
    0x74,
    0x27,
    0x3e,
    0xd0,
    0xb4,
    0xd0,
    0xb5,
    0xd1,
    0x8f,
    0xd1,
    0x82,
    0xd0,
    0xb5,
    0xd0,
    0xbb,
    0xd1,
    0x8c,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xd1,
    0x81,
    0xd0,
    0xbe,
    0xd0,
    0xbe,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb5,
    0xd1,
    0x82,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb8,
    0xd0,
    0xb8,
    0xd0,
    0xbf,
    0xd1,
    0x80,
    0xd0,
    0xbe,
    0xd0,
    0xb8,
    0xd0,
    0xb7,
    0xd0,
    0xb2,
    0xd0,
    0xbe,
    0xd0,
    0xb4,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb2,
    0xd0,
    0xb0,
    0xd0,
    0xb1,
    0xd0,
    0xb5,
    0xd0,
    0xb7,
    0xd0,
    0xbe,
    0xd0,
    0xbf,
    0xd0,
    0xb0,
    0xd1,
    0x81,
    0xd0,
    0xbd,
    0xd0,
    0xbe,
    0xd1,
    0x81,
    0xd1,
    0x82,
    0xd0,
    0xb8,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x89,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb9,
    0xe0,
    0xa5,
    0x8b,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa5,
    0x87,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa7,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xad,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xab,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x82,
    0xe0,
    0xa4,
    0x97,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa5,
    0x81,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb7,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x89,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa5,
    0x80,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x87,
    0xe0,
    0xa4,
    0x9f,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0x9c,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0x9e,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xaa,
    0xe0,
    0xa4,
    0xa8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xb5,
    0xe0,
    0xa4,
    0xbe,
    0xe0,
    0xa4,
    0x88,
    0xe0,
    0xa4,
    0xb8,
    0xe0,
    0xa4,
    0x95,
    0xe0,
    0xa5,
    0x8d,
    0xe0,
    0xa4,
    0xb0,
    0xe0,
    0xa4,
    0xbf,
    0xe0,
    0xa4,
    0xaf,
    0xe0,
    0xa4,
    0xa4,
    0xe0,
    0xa4,
    0xbe
]);
// Used by the browser version
exports.init = function() {
    return exports.dictionary;
};


/***/ }),

/***/ 2948:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Collection of static dictionary words.
*/ var data = __webpack_require__(6832);
exports.init = function() {
    exports.dictionary = data.init();
};
exports.offsetsByLength = new Uint32Array([
    0,
    0,
    0,
    0,
    0,
    4096,
    9216,
    21504,
    35840,
    44032,
    53248,
    63488,
    74752,
    87040,
    93696,
    100864,
    104704,
    106752,
    108928,
    113536,
    115968,
    118528,
    119872,
    121280,
    122016
]);
exports.sizeBitsByLength = new Uint8Array([
    0,
    0,
    0,
    0,
    10,
    10,
    11,
    11,
    10,
    10,
    10,
    10,
    10,
    9,
    9,
    8,
    7,
    7,
    8,
    7,
    7,
    6,
    6,
    5,
    5
]);
exports.minDictionaryWordLength = 4;
exports.maxDictionaryWordLength = 24;


/***/ }),

/***/ 9433:
/***/ ((__unused_webpack_module, exports) => {

function HuffmanCode(bits, value) {
    this.bits = bits; /* number of bits used for this symbol */ 
    this.value = value; /* symbol value or table offset */ 
}
exports.h = HuffmanCode;
var MAX_LENGTH = 15;
/* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the
   bit-wise reversal of the len least significant bits of key. */ function GetNextKey(key, len) {
    var step = 1 << len - 1;
    while(key & step){
        step >>= 1;
    }
    return (key & step - 1) + step;
}
/* Stores code in table[0], table[step], table[2*step], ..., table[end] */ /* Assumes that end is an integer multiple of step */ function ReplicateValue(table, i, step, end, code) {
    do {
        end -= step;
        table[i + end] = new HuffmanCode(code.bits, code.value);
    }while (end > 0);
}
/* Returns the table width of the next 2nd level table. count is the histogram
   of bit lengths for the remaining symbols, len is the code length of the next
   processed symbol */ function NextTableBitSize(count, len, root_bits) {
    var left = 1 << len - root_bits;
    while(len < MAX_LENGTH){
        left -= count[len];
        if (left <= 0) break;
        ++len;
        left <<= 1;
    }
    return len - root_bits;
}
exports.g = function(root_table, table, root_bits, code_lengths, code_lengths_size) {
    var start_table = table;
    var code; /* current table entry */ 
    var len; /* current code length */ 
    var symbol; /* symbol index in original or sorted table */ 
    var key; /* reversed prefix code */ 
    var step; /* step size to replicate values in current table */ 
    var low; /* low bits for current root entry */ 
    var mask; /* mask for low bits */ 
    var table_bits; /* key length of current table */ 
    var table_size; /* size of current table */ 
    var total_size; /* sum of root table size and 2nd level table sizes */ 
    var sorted; /* symbols sorted by code length */ 
    var count = new Int32Array(MAX_LENGTH + 1); /* number of codes of each length */ 
    var offset = new Int32Array(MAX_LENGTH + 1); /* offsets in sorted table for each length */ 
    sorted = new Int32Array(code_lengths_size);
    /* build histogram of code lengths */ for(symbol = 0; symbol < code_lengths_size; symbol++){
        count[code_lengths[symbol]]++;
    }
    /* generate offsets into sorted symbol table by code length */ offset[1] = 0;
    for(len = 1; len < MAX_LENGTH; len++){
        offset[len + 1] = offset[len] + count[len];
    }
    /* sort symbols by length, by symbol order within each length */ for(symbol = 0; symbol < code_lengths_size; symbol++){
        if (code_lengths[symbol] !== 0) {
            sorted[offset[code_lengths[symbol]]++] = symbol;
        }
    }
    table_bits = root_bits;
    table_size = 1 << table_bits;
    total_size = table_size;
    /* special case code with only one value */ if (offset[MAX_LENGTH] === 1) {
        for(key = 0; key < total_size; ++key){
            root_table[table + key] = new HuffmanCode(0, sorted[0] & 0xffff);
        }
        return total_size;
    }
    /* fill in root table */ key = 0;
    symbol = 0;
    for(len = 1, step = 2; len <= root_bits; ++len, step <<= 1){
        for(; count[len] > 0; --count[len]){
            code = new HuffmanCode(len & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + key, step, table_size, code);
            key = GetNextKey(key, len);
        }
    }
    /* fill in 2nd level tables and add pointers to root table */ mask = total_size - 1;
    low = -1;
    for(len = root_bits + 1, step = 2; len <= MAX_LENGTH; ++len, step <<= 1){
        for(; count[len] > 0; --count[len]){
            if ((key & mask) !== low) {
                table += table_size;
                table_bits = NextTableBitSize(count, len, root_bits);
                table_size = 1 << table_bits;
                total_size += table_size;
                low = key & mask;
                root_table[start_table + low] = new HuffmanCode(table_bits + root_bits & 0xff, table - start_table - low & 0xffff);
            }
            code = new HuffmanCode(len - root_bits & 0xff, sorted[symbol++] & 0xffff);
            ReplicateValue(root_table, table + (key >> root_bits), step, table_size, code);
            key = GetNextKey(key, len);
        }
    }
    return total_size;
};


/***/ }),

/***/ 7914:
/***/ ((__unused_webpack_module, exports) => {

/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Lookup tables to map prefix codes to value ranges. This is used during
   decoding of the block lengths, literal insertion lengths and copy lengths.
*/ /* Represents the range of values belonging to a prefix code: */ /* [offset, offset + 2^nbits) */ function PrefixCodeRange(offset, nbits) {
    this.offset = offset;
    this.nbits = nbits;
}
exports.kBlockLengthPrefixCode = [
    new PrefixCodeRange(1, 2),
    new PrefixCodeRange(5, 2),
    new PrefixCodeRange(9, 2),
    new PrefixCodeRange(13, 2),
    new PrefixCodeRange(17, 3),
    new PrefixCodeRange(25, 3),
    new PrefixCodeRange(33, 3),
    new PrefixCodeRange(41, 3),
    new PrefixCodeRange(49, 4),
    new PrefixCodeRange(65, 4),
    new PrefixCodeRange(81, 4),
    new PrefixCodeRange(97, 4),
    new PrefixCodeRange(113, 5),
    new PrefixCodeRange(145, 5),
    new PrefixCodeRange(177, 5),
    new PrefixCodeRange(209, 5),
    new PrefixCodeRange(241, 6),
    new PrefixCodeRange(305, 6),
    new PrefixCodeRange(369, 7),
    new PrefixCodeRange(497, 8),
    new PrefixCodeRange(753, 9),
    new PrefixCodeRange(1265, 10),
    new PrefixCodeRange(2289, 11),
    new PrefixCodeRange(4337, 12),
    new PrefixCodeRange(8433, 13),
    new PrefixCodeRange(16625, 24)
];
exports.kInsertLengthPrefixCode = [
    new PrefixCodeRange(0, 0),
    new PrefixCodeRange(1, 0),
    new PrefixCodeRange(2, 0),
    new PrefixCodeRange(3, 0),
    new PrefixCodeRange(4, 0),
    new PrefixCodeRange(5, 0),
    new PrefixCodeRange(6, 1),
    new PrefixCodeRange(8, 1),
    new PrefixCodeRange(10, 2),
    new PrefixCodeRange(14, 2),
    new PrefixCodeRange(18, 3),
    new PrefixCodeRange(26, 3),
    new PrefixCodeRange(34, 4),
    new PrefixCodeRange(50, 4),
    new PrefixCodeRange(66, 5),
    new PrefixCodeRange(98, 5),
    new PrefixCodeRange(130, 6),
    new PrefixCodeRange(194, 7),
    new PrefixCodeRange(322, 8),
    new PrefixCodeRange(578, 9),
    new PrefixCodeRange(1090, 10),
    new PrefixCodeRange(2114, 12),
    new PrefixCodeRange(6210, 14),
    new PrefixCodeRange(22594, 24)
];
exports.kCopyLengthPrefixCode = [
    new PrefixCodeRange(2, 0),
    new PrefixCodeRange(3, 0),
    new PrefixCodeRange(4, 0),
    new PrefixCodeRange(5, 0),
    new PrefixCodeRange(6, 0),
    new PrefixCodeRange(7, 0),
    new PrefixCodeRange(8, 0),
    new PrefixCodeRange(9, 0),
    new PrefixCodeRange(10, 1),
    new PrefixCodeRange(12, 1),
    new PrefixCodeRange(14, 2),
    new PrefixCodeRange(18, 2),
    new PrefixCodeRange(22, 3),
    new PrefixCodeRange(30, 3),
    new PrefixCodeRange(38, 4),
    new PrefixCodeRange(54, 4),
    new PrefixCodeRange(70, 5),
    new PrefixCodeRange(102, 5),
    new PrefixCodeRange(134, 6),
    new PrefixCodeRange(198, 7),
    new PrefixCodeRange(326, 8),
    new PrefixCodeRange(582, 9),
    new PrefixCodeRange(1094, 10),
    new PrefixCodeRange(2118, 24)
];
exports.kInsertRangeLut = [
    0,
    0,
    8,
    8,
    0,
    16,
    8,
    16,
    16
];
exports.kCopyRangeLut = [
    0,
    8,
    0,
    8,
    16,
    0,
    16,
    8,
    16
];


/***/ }),

/***/ 6706:
/***/ ((__unused_webpack_module, exports) => {

function BrotliInput(buffer) {
    this.buffer = buffer;
    this.pos = 0;
}
BrotliInput.prototype.read = function(buf, i, count) {
    if (this.pos + count > this.buffer.length) {
        count = this.buffer.length - this.pos;
    }
    for(var p = 0; p < count; p++)buf[i + p] = this.buffer[this.pos + p];
    this.pos += count;
    return count;
};
exports.g = BrotliInput;
function BrotliOutput(buf) {
    this.buffer = buf;
    this.pos = 0;
}
BrotliOutput.prototype.write = function(buf, count) {
    if (this.pos + count > this.buffer.length) throw new Error("Output buffer is not large enough");
    this.buffer.set(buf.subarray(0, count), this.pos);
    this.pos += count;
    return count;
};
exports.j = BrotliOutput;


/***/ }),

/***/ 7621:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Transformations on dictionary words.
*/ var BrotliDictionary = __webpack_require__(2948);
var kIdentity = 0;
var kOmitLast1 = 1;
var kOmitLast2 = 2;
var kOmitLast3 = 3;
var kOmitLast4 = 4;
var kOmitLast5 = 5;
var kOmitLast6 = 6;
var kOmitLast7 = 7;
var kOmitLast8 = 8;
var kOmitLast9 = 9;
var kUppercaseFirst = 10;
var kUppercaseAll = 11;
var kOmitFirst1 = 12;
var kOmitFirst2 = 13;
var kOmitFirst3 = 14;
var kOmitFirst4 = 15;
var kOmitFirst5 = 16;
var kOmitFirst6 = 17;
var kOmitFirst7 = 18;
var kOmitFirst8 = 19;
var kOmitFirst9 = 20;
function Transform(prefix, transform, suffix) {
    this.prefix = new Uint8Array(prefix.length);
    this.transform = transform;
    this.suffix = new Uint8Array(suffix.length);
    for(var i = 0; i < prefix.length; i++)this.prefix[i] = prefix.charCodeAt(i);
    for(var i = 0; i < suffix.length; i++)this.suffix[i] = suffix.charCodeAt(i);
}
var kTransforms = [
    new Transform("", kIdentity, ""),
    new Transform("", kIdentity, " "),
    new Transform(" ", kIdentity, " "),
    new Transform("", kOmitFirst1, ""),
    new Transform("", kUppercaseFirst, " "),
    new Transform("", kIdentity, " the "),
    new Transform(" ", kIdentity, ""),
    new Transform("s ", kIdentity, " "),
    new Transform("", kIdentity, " of "),
    new Transform("", kUppercaseFirst, ""),
    new Transform("", kIdentity, " and "),
    new Transform("", kOmitFirst2, ""),
    new Transform("", kOmitLast1, ""),
    new Transform(", ", kIdentity, " "),
    new Transform("", kIdentity, ", "),
    new Transform(" ", kUppercaseFirst, " "),
    new Transform("", kIdentity, " in "),
    new Transform("", kIdentity, " to "),
    new Transform("e ", kIdentity, " "),
    new Transform("", kIdentity, '"'),
    new Transform("", kIdentity, "."),
    new Transform("", kIdentity, '">'),
    new Transform("", kIdentity, "\n"),
    new Transform("", kOmitLast3, ""),
    new Transform("", kIdentity, "]"),
    new Transform("", kIdentity, " for "),
    new Transform("", kOmitFirst3, ""),
    new Transform("", kOmitLast2, ""),
    new Transform("", kIdentity, " a "),
    new Transform("", kIdentity, " that "),
    new Transform(" ", kUppercaseFirst, ""),
    new Transform("", kIdentity, ". "),
    new Transform(".", kIdentity, ""),
    new Transform(" ", kIdentity, ", "),
    new Transform("", kOmitFirst4, ""),
    new Transform("", kIdentity, " with "),
    new Transform("", kIdentity, "'"),
    new Transform("", kIdentity, " from "),
    new Transform("", kIdentity, " by "),
    new Transform("", kOmitFirst5, ""),
    new Transform("", kOmitFirst6, ""),
    new Transform(" the ", kIdentity, ""),
    new Transform("", kOmitLast4, ""),
    new Transform("", kIdentity, ". The "),
    new Transform("", kUppercaseAll, ""),
    new Transform("", kIdentity, " on "),
    new Transform("", kIdentity, " as "),
    new Transform("", kIdentity, " is "),
    new Transform("", kOmitLast7, ""),
    new Transform("", kOmitLast1, "ing "),
    new Transform("", kIdentity, "\n	"),
    new Transform("", kIdentity, ":"),
    new Transform(" ", kIdentity, ". "),
    new Transform("", kIdentity, "ed "),
    new Transform("", kOmitFirst9, ""),
    new Transform("", kOmitFirst7, ""),
    new Transform("", kOmitLast6, ""),
    new Transform("", kIdentity, "("),
    new Transform("", kUppercaseFirst, ", "),
    new Transform("", kOmitLast8, ""),
    new Transform("", kIdentity, " at "),
    new Transform("", kIdentity, "ly "),
    new Transform(" the ", kIdentity, " of "),
    new Transform("", kOmitLast5, ""),
    new Transform("", kOmitLast9, ""),
    new Transform(" ", kUppercaseFirst, ", "),
    new Transform("", kUppercaseFirst, '"'),
    new Transform(".", kIdentity, "("),
    new Transform("", kUppercaseAll, " "),
    new Transform("", kUppercaseFirst, '">'),
    new Transform("", kIdentity, '="'),
    new Transform(" ", kIdentity, "."),
    new Transform(".com/", kIdentity, ""),
    new Transform(" the ", kIdentity, " of the "),
    new Transform("", kUppercaseFirst, "'"),
    new Transform("", kIdentity, ". This "),
    new Transform("", kIdentity, ","),
    new Transform(".", kIdentity, " "),
    new Transform("", kUppercaseFirst, "("),
    new Transform("", kUppercaseFirst, "."),
    new Transform("", kIdentity, " not "),
    new Transform(" ", kIdentity, '="'),
    new Transform("", kIdentity, "er "),
    new Transform(" ", kUppercaseAll, " "),
    new Transform("", kIdentity, "al "),
    new Transform(" ", kUppercaseAll, ""),
    new Transform("", kIdentity, "='"),
    new Transform("", kUppercaseAll, '"'),
    new Transform("", kUppercaseFirst, ". "),
    new Transform(" ", kIdentity, "("),
    new Transform("", kIdentity, "ful "),
    new Transform(" ", kUppercaseFirst, ". "),
    new Transform("", kIdentity, "ive "),
    new Transform("", kIdentity, "less "),
    new Transform("", kUppercaseAll, "'"),
    new Transform("", kIdentity, "est "),
    new Transform(" ", kUppercaseFirst, "."),
    new Transform("", kUppercaseAll, '">'),
    new Transform(" ", kIdentity, "='"),
    new Transform("", kUppercaseFirst, ","),
    new Transform("", kIdentity, "ize "),
    new Transform("", kUppercaseAll, "."),
    new Transform("\xc2\xa0", kIdentity, ""),
    new Transform(" ", kIdentity, ","),
    new Transform("", kUppercaseFirst, '="'),
    new Transform("", kUppercaseAll, '="'),
    new Transform("", kIdentity, "ous "),
    new Transform("", kUppercaseAll, ", "),
    new Transform("", kUppercaseFirst, "='"),
    new Transform(" ", kUppercaseFirst, ","),
    new Transform(" ", kUppercaseAll, '="'),
    new Transform(" ", kUppercaseAll, ", "),
    new Transform("", kUppercaseAll, ","),
    new Transform("", kUppercaseAll, "("),
    new Transform("", kUppercaseAll, ". "),
    new Transform(" ", kUppercaseAll, "."),
    new Transform("", kUppercaseAll, "='"),
    new Transform(" ", kUppercaseAll, ". "),
    new Transform(" ", kUppercaseFirst, '="'),
    new Transform(" ", kUppercaseAll, "='"),
    new Transform(" ", kUppercaseFirst, "='")
];
exports.kTransforms = kTransforms;
exports.kNumTransforms = kTransforms.length;
function ToUpperCase(p, i) {
    if (p[i] < 0xc0) {
        if (p[i] >= 97 && p[i] <= 122) {
            p[i] ^= 32;
        }
        return 1;
    }
    /* An overly simplified uppercasing model for utf-8. */ if (p[i] < 0xe0) {
        p[i + 1] ^= 32;
        return 2;
    }
    /* An arbitrary transform for three byte characters. */ p[i + 2] ^= 5;
    return 3;
}
exports.transformDictionaryWord = function(dst, idx, word, len, transform) {
    var prefix = kTransforms[transform].prefix;
    var suffix = kTransforms[transform].suffix;
    var t = kTransforms[transform].transform;
    var skip = t < kOmitFirst1 ? 0 : t - (kOmitFirst1 - 1);
    var i = 0;
    var start_idx = idx;
    var uppercase;
    if (skip > len) {
        skip = len;
    }
    var prefix_pos = 0;
    while(prefix_pos < prefix.length){
        dst[idx++] = prefix[prefix_pos++];
    }
    word += skip;
    len -= skip;
    if (t <= kOmitLast9) {
        len -= t;
    }
    for(i = 0; i < len; i++){
        dst[idx++] = BrotliDictionary.dictionary[word + i];
    }
    uppercase = idx - len;
    if (t === kUppercaseFirst) {
        ToUpperCase(dst, uppercase);
    } else if (t === kUppercaseAll) {
        while(len > 0){
            var step = ToUpperCase(dst, uppercase);
            uppercase += step;
            len -= step;
        }
    }
    var suffix_pos = 0;
    while(suffix_pos < suffix.length){
        dst[idx++] = suffix[suffix_pos++];
    }
    return idx - start_idx;
};


/***/ }),

/***/ 3393:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = __webpack_require__(5730).BrotliDecompressBuffer;


/***/ }),

/***/ 4983:
/***/ ((module) => {

"use strict";

var clone = function() {
    "use strict";
    function _instanceof(obj, type) {
        return type != null && obj instanceof type;
    }
    var nativeMap;
    try {
        nativeMap = Map;
    } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function() {};
    }
    var nativeSet;
    try {
        nativeSet = Set;
    } catch (_) {
        nativeSet = function() {};
    }
    var nativePromise;
    try {
        nativePromise = Promise;
    } catch (_) {
        nativePromise = function() {};
    }
    /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/ function clone(parent, circular, depth, prototype, includeNonEnumerable) {
        if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
        }
        // maintain two arrays for circular references, where corresponding parents
        // and children have the same index
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined") circular = true;
        if (typeof depth == "undefined") depth = Infinity;
        // recurse this function so we don't reset allParents and allChildren
        function _clone(parent, depth) {
            // cloning null always returns null
            if (parent === null) return null;
            if (depth === 0) return parent;
            var child;
            var proto;
            if (typeof parent != "object") {
                return parent;
            }
            if (_instanceof(parent, nativeMap)) {
                child = new nativeMap();
            } else if (_instanceof(parent, nativeSet)) {
                child = new nativeSet();
            } else if (_instanceof(parent, nativePromise)) {
                child = new nativePromise(function(resolve, reject) {
                    parent.then(function(value) {
                        resolve(_clone(value, depth - 1));
                    }, function(err) {
                        reject(_clone(err, depth - 1));
                    });
                });
            } else if (clone.__isArray(parent)) {
                child = [];
            } else if (clone.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
            } else if (clone.__isDate(parent)) {
                child = new Date(parent.getTime());
            } else if (useBuffer && Buffer.isBuffer(parent)) {
                if (Buffer.allocUnsafe) {
                    // Node.js >= 4.5.0
                    child = Buffer.allocUnsafe(parent.length);
                } else {
                    // Older Node.js versions
                    child = new Buffer(parent.length);
                }
                parent.copy(child);
                return child;
            } else if (_instanceof(parent, Error)) {
                child = Object.create(parent);
            } else {
                if (typeof prototype == "undefined") {
                    proto = Object.getPrototypeOf(parent);
                    child = Object.create(proto);
                } else {
                    child = Object.create(prototype);
                    proto = prototype;
                }
            }
            if (circular) {
                var index = allParents.indexOf(parent);
                if (index != -1) {
                    return allChildren[index];
                }
                allParents.push(parent);
                allChildren.push(child);
            }
            if (_instanceof(parent, nativeMap)) {
                parent.forEach(function(value, key) {
                    var keyChild = _clone(key, depth - 1);
                    var valueChild = _clone(value, depth - 1);
                    child.set(keyChild, valueChild);
                });
            }
            if (_instanceof(parent, nativeSet)) {
                parent.forEach(function(value) {
                    var entryChild = _clone(value, depth - 1);
                    child.add(entryChild);
                });
            }
            for(var i in parent){
                var attrs;
                if (proto) {
                    attrs = Object.getOwnPropertyDescriptor(proto, i);
                }
                if (attrs && attrs.set == null) {
                    continue;
                }
                child[i] = _clone(parent[i], depth - 1);
            }
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent);
                for(var i = 0; i < symbols.length; i++){
                    // Don't need to worry about cloning a symbol because it is a primitive,
                    // like a number or string.
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                        continue;
                    }
                    child[symbol] = _clone(parent[symbol], depth - 1);
                    if (!descriptor.enumerable) {
                        Object.defineProperty(child, symbol, {
                            enumerable: false
                        });
                    }
                }
            }
            if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent);
                for(var i = 0; i < allPropertyNames.length; i++){
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
                    if (descriptor && descriptor.enumerable) {
                        continue;
                    }
                    child[propertyName] = _clone(parent[propertyName], depth - 1);
                    Object.defineProperty(child, propertyName, {
                        enumerable: false
                    });
                }
            }
            return child;
        }
        return _clone(parent, depth);
    }
    /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;
        var c = function() {};
        c.prototype = parent;
        return new c();
    };
    // private utility functions
    function __objToStr(o) {
        return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;
    function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
    }
    clone.__isDate = __isDate;
    function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
    }
    clone.__isArray = __isArray;
    function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
    }
    clone.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
        var flags = "";
        if (re.global) flags += "g";
        if (re.ignoreCase) flags += "i";
        if (re.multiline) flags += "m";
        return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;
    return clone;
}();
if ( true && module.exports) {
    module.exports = clone;
}


/***/ }),

/***/ 2662:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Lookup tables
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        // Compute lookup tables
        (function() {
            // Compute double table
            var d = [];
            for(var i = 0; i < 256; i++){
                if (i < 128) {
                    d[i] = i << 1;
                } else {
                    d[i] = i << 1 ^ 0x11b;
                }
            }
            // Walk GF(2^8)
            var x = 0;
            var xi = 0;
            for(var i = 0; i < 256; i++){
                // Compute sbox
                var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
                SBOX[x] = sx;
                INV_SBOX[sx] = x;
                // Compute multiplication
                var x2 = d[x];
                var x4 = d[x2];
                var x8 = d[x4];
                // Compute sub bytes, mix columns tables
                var t = d[sx] * 0x101 ^ sx * 0x1010100;
                SUB_MIX_0[x] = t << 24 | t >>> 8;
                SUB_MIX_1[x] = t << 16 | t >>> 16;
                SUB_MIX_2[x] = t << 8 | t >>> 24;
                SUB_MIX_3[x] = t;
                // Compute inv sub bytes, inv mix columns tables
                var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
                INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
                INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
                INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
                INV_SUB_MIX_3[sx] = t;
                // Compute next counter
                if (!x) {
                    x = xi = 1;
                } else {
                    x = x2 ^ d[d[d[x8 ^ x2]]];
                    xi ^= d[d[xi]];
                }
            }
        })();
        // Precomputed Rcon lookup
        var RCON = [
            0x00,
            0x01,
            0x02,
            0x04,
            0x08,
            0x10,
            0x20,
            0x40,
            0x80,
            0x1b,
            0x36
        ];
        /**
	     * AES block cipher algorithm.
	     */ var AES = C_algo.AES = BlockCipher.extend({
            _doReset: function() {
                var t;
                // Skip reset of nRounds has been set before and key did not change
                if (this._nRounds && this._keyPriorReset === this._key) {
                    return;
                }
                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;
                // Compute number of rounds
                var nRounds = this._nRounds = keySize + 6;
                // Compute number of key schedule rows
                var ksRows = (nRounds + 1) * 4;
                // Compute key schedule
                var keySchedule = this._keySchedule = [];
                for(var ksRow = 0; ksRow < ksRows; ksRow++){
                    if (ksRow < keySize) {
                        keySchedule[ksRow] = keyWords[ksRow];
                    } else {
                        t = keySchedule[ksRow - 1];
                        if (!(ksRow % keySize)) {
                            // Rot word
                            t = t << 8 | t >>> 24;
                            // Sub word
                            t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
                            // Mix Rcon
                            t ^= RCON[ksRow / keySize | 0] << 24;
                        } else if (keySize > 6 && ksRow % keySize == 4) {
                            // Sub word
                            t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
                        }
                        keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                    }
                }
                // Compute inv key schedule
                var invKeySchedule = this._invKeySchedule = [];
                for(var invKsRow = 0; invKsRow < ksRows; invKsRow++){
                    var ksRow = ksRows - invKsRow;
                    if (invKsRow % 4) {
                        var t = keySchedule[ksRow];
                    } else {
                        var t = keySchedule[ksRow - 4];
                    }
                    if (invKsRow < 4 || ksRow <= 4) {
                        invKeySchedule[invKsRow] = t;
                    } else {
                        invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
                    }
                }
            },
            encryptBlock: function(M, offset) {
                this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function(M, offset) {
                // Swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
                this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                // Inv swap 2nd and 4th rows
                var t = M[offset + 1];
                M[offset + 1] = M[offset + 3];
                M[offset + 3] = t;
            },
            _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
                // Shortcut
                var nRounds = this._nRounds;
                // Get input, add round key
                var s0 = M[offset] ^ keySchedule[0];
                var s1 = M[offset + 1] ^ keySchedule[1];
                var s2 = M[offset + 2] ^ keySchedule[2];
                var s3 = M[offset + 3] ^ keySchedule[3];
                // Key schedule row counter
                var ksRow = 4;
                // Rounds
                for(var round = 1; round < nRounds; round++){
                    // Shift rows, sub bytes, mix columns, add round key
                    var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
                    var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
                    var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
                    var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];
                    // Update state
                    s0 = t0;
                    s1 = t1;
                    s2 = t2;
                    s3 = t3;
                }
                // Shift rows, sub bytes, add round key
                var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                // Set output
                M[offset] = t0;
                M[offset + 1] = t1;
                M[offset + 2] = t2;
                M[offset + 3] = t3;
            },
            keySize: 256 / 32
        });
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
	     */ C.AES = BlockCipher._createHelper(AES);
    })();
    return CryptoJS.AES;
});


/***/ }),

/***/ 6001:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        const N = 16;
        //Origin pbox and sbox, derived from PI
        const ORIG_P = [
            0x243F6A88,
            0x85A308D3,
            0x13198A2E,
            0x03707344,
            0xA4093822,
            0x299F31D0,
            0x082EFA98,
            0xEC4E6C89,
            0x452821E6,
            0x38D01377,
            0xBE5466CF,
            0x34E90C6C,
            0xC0AC29B7,
            0xC97C50DD,
            0x3F84D5B5,
            0xB5470917,
            0x9216D5D9,
            0x8979FB1B
        ];
        const ORIG_S = [
            [
                0xD1310BA6,
                0x98DFB5AC,
                0x2FFD72DB,
                0xD01ADFB7,
                0xB8E1AFED,
                0x6A267E96,
                0xBA7C9045,
                0xF12C7F99,
                0x24A19947,
                0xB3916CF7,
                0x0801F2E2,
                0x858EFC16,
                0x636920D8,
                0x71574E69,
                0xA458FEA3,
                0xF4933D7E,
                0x0D95748F,
                0x728EB658,
                0x718BCD58,
                0x82154AEE,
                0x7B54A41D,
                0xC25A59B5,
                0x9C30D539,
                0x2AF26013,
                0xC5D1B023,
                0x286085F0,
                0xCA417918,
                0xB8DB38EF,
                0x8E79DCB0,
                0x603A180E,
                0x6C9E0E8B,
                0xB01E8A3E,
                0xD71577C1,
                0xBD314B27,
                0x78AF2FDA,
                0x55605C60,
                0xE65525F3,
                0xAA55AB94,
                0x57489862,
                0x63E81440,
                0x55CA396A,
                0x2AAB10B6,
                0xB4CC5C34,
                0x1141E8CE,
                0xA15486AF,
                0x7C72E993,
                0xB3EE1411,
                0x636FBC2A,
                0x2BA9C55D,
                0x741831F6,
                0xCE5C3E16,
                0x9B87931E,
                0xAFD6BA33,
                0x6C24CF5C,
                0x7A325381,
                0x28958677,
                0x3B8F4898,
                0x6B4BB9AF,
                0xC4BFE81B,
                0x66282193,
                0x61D809CC,
                0xFB21A991,
                0x487CAC60,
                0x5DEC8032,
                0xEF845D5D,
                0xE98575B1,
                0xDC262302,
                0xEB651B88,
                0x23893E81,
                0xD396ACC5,
                0x0F6D6FF3,
                0x83F44239,
                0x2E0B4482,
                0xA4842004,
                0x69C8F04A,
                0x9E1F9B5E,
                0x21C66842,
                0xF6E96C9A,
                0x670C9C61,
                0xABD388F0,
                0x6A51A0D2,
                0xD8542F68,
                0x960FA728,
                0xAB5133A3,
                0x6EEF0B6C,
                0x137A3BE4,
                0xBA3BF050,
                0x7EFB2A98,
                0xA1F1651D,
                0x39AF0176,
                0x66CA593E,
                0x82430E88,
                0x8CEE8619,
                0x456F9FB4,
                0x7D84A5C3,
                0x3B8B5EBE,
                0xE06F75D8,
                0x85C12073,
                0x401A449F,
                0x56C16AA6,
                0x4ED3AA62,
                0x363F7706,
                0x1BFEDF72,
                0x429B023D,
                0x37D0D724,
                0xD00A1248,
                0xDB0FEAD3,
                0x49F1C09B,
                0x075372C9,
                0x80991B7B,
                0x25D479D8,
                0xF6E8DEF7,
                0xE3FE501A,
                0xB6794C3B,
                0x976CE0BD,
                0x04C006BA,
                0xC1A94FB6,
                0x409F60C4,
                0x5E5C9EC2,
                0x196A2463,
                0x68FB6FAF,
                0x3E6C53B5,
                0x1339B2EB,
                0x3B52EC6F,
                0x6DFC511F,
                0x9B30952C,
                0xCC814544,
                0xAF5EBD09,
                0xBEE3D004,
                0xDE334AFD,
                0x660F2807,
                0x192E4BB3,
                0xC0CBA857,
                0x45C8740F,
                0xD20B5F39,
                0xB9D3FBDB,
                0x5579C0BD,
                0x1A60320A,
                0xD6A100C6,
                0x402C7279,
                0x679F25FE,
                0xFB1FA3CC,
                0x8EA5E9F8,
                0xDB3222F8,
                0x3C7516DF,
                0xFD616B15,
                0x2F501EC8,
                0xAD0552AB,
                0x323DB5FA,
                0xFD238760,
                0x53317B48,
                0x3E00DF82,
                0x9E5C57BB,
                0xCA6F8CA0,
                0x1A87562E,
                0xDF1769DB,
                0xD542A8F6,
                0x287EFFC3,
                0xAC6732C6,
                0x8C4F5573,
                0x695B27B0,
                0xBBCA58C8,
                0xE1FFA35D,
                0xB8F011A0,
                0x10FA3D98,
                0xFD2183B8,
                0x4AFCB56C,
                0x2DD1D35B,
                0x9A53E479,
                0xB6F84565,
                0xD28E49BC,
                0x4BFB9790,
                0xE1DDF2DA,
                0xA4CB7E33,
                0x62FB1341,
                0xCEE4C6E8,
                0xEF20CADA,
                0x36774C01,
                0xD07E9EFE,
                0x2BF11FB4,
                0x95DBDA4D,
                0xAE909198,
                0xEAAD8E71,
                0x6B93D5A0,
                0xD08ED1D0,
                0xAFC725E0,
                0x8E3C5B2F,
                0x8E7594B7,
                0x8FF6E2FB,
                0xF2122B64,
                0x8888B812,
                0x900DF01C,
                0x4FAD5EA0,
                0x688FC31C,
                0xD1CFF191,
                0xB3A8C1AD,
                0x2F2F2218,
                0xBE0E1777,
                0xEA752DFE,
                0x8B021FA1,
                0xE5A0CC0F,
                0xB56F74E8,
                0x18ACF3D6,
                0xCE89E299,
                0xB4A84FE0,
                0xFD13E0B7,
                0x7CC43B81,
                0xD2ADA8D9,
                0x165FA266,
                0x80957705,
                0x93CC7314,
                0x211A1477,
                0xE6AD2065,
                0x77B5FA86,
                0xC75442F5,
                0xFB9D35CF,
                0xEBCDAF0C,
                0x7B3E89A0,
                0xD6411BD3,
                0xAE1E7E49,
                0x00250E2D,
                0x2071B35E,
                0x226800BB,
                0x57B8E0AF,
                0x2464369B,
                0xF009B91E,
                0x5563911D,
                0x59DFA6AA,
                0x78C14389,
                0xD95A537F,
                0x207D5BA2,
                0x02E5B9C5,
                0x83260376,
                0x6295CFA9,
                0x11C81968,
                0x4E734A41,
                0xB3472DCA,
                0x7B14A94A,
                0x1B510052,
                0x9A532915,
                0xD60F573F,
                0xBC9BC6E4,
                0x2B60A476,
                0x81E67400,
                0x08BA6FB5,
                0x571BE91F,
                0xF296EC6B,
                0x2A0DD915,
                0xB6636521,
                0xE7B9F9B6,
                0xFF34052E,
                0xC5855664,
                0x53B02D5D,
                0xA99F8FA1,
                0x08BA4799,
                0x6E85076A
            ],
            [
                0x4B7A70E9,
                0xB5B32944,
                0xDB75092E,
                0xC4192623,
                0xAD6EA6B0,
                0x49A7DF7D,
                0x9CEE60B8,
                0x8FEDB266,
                0xECAA8C71,
                0x699A17FF,
                0x5664526C,
                0xC2B19EE1,
                0x193602A5,
                0x75094C29,
                0xA0591340,
                0xE4183A3E,
                0x3F54989A,
                0x5B429D65,
                0x6B8FE4D6,
                0x99F73FD6,
                0xA1D29C07,
                0xEFE830F5,
                0x4D2D38E6,
                0xF0255DC1,
                0x4CDD2086,
                0x8470EB26,
                0x6382E9C6,
                0x021ECC5E,
                0x09686B3F,
                0x3EBAEFC9,
                0x3C971814,
                0x6B6A70A1,
                0x687F3584,
                0x52A0E286,
                0xB79C5305,
                0xAA500737,
                0x3E07841C,
                0x7FDEAE5C,
                0x8E7D44EC,
                0x5716F2B8,
                0xB03ADA37,
                0xF0500C0D,
                0xF01C1F04,
                0x0200B3FF,
                0xAE0CF51A,
                0x3CB574B2,
                0x25837A58,
                0xDC0921BD,
                0xD19113F9,
                0x7CA92FF6,
                0x94324773,
                0x22F54701,
                0x3AE5E581,
                0x37C2DADC,
                0xC8B57634,
                0x9AF3DDA7,
                0xA9446146,
                0x0FD0030E,
                0xECC8C73E,
                0xA4751E41,
                0xE238CD99,
                0x3BEA0E2F,
                0x3280BBA1,
                0x183EB331,
                0x4E548B38,
                0x4F6DB908,
                0x6F420D03,
                0xF60A04BF,
                0x2CB81290,
                0x24977C79,
                0x5679B072,
                0xBCAF89AF,
                0xDE9A771F,
                0xD9930810,
                0xB38BAE12,
                0xDCCF3F2E,
                0x5512721F,
                0x2E6B7124,
                0x501ADDE6,
                0x9F84CD87,
                0x7A584718,
                0x7408DA17,
                0xBC9F9ABC,
                0xE94B7D8C,
                0xEC7AEC3A,
                0xDB851DFA,
                0x63094366,
                0xC464C3D2,
                0xEF1C1847,
                0x3215D908,
                0xDD433B37,
                0x24C2BA16,
                0x12A14D43,
                0x2A65C451,
                0x50940002,
                0x133AE4DD,
                0x71DFF89E,
                0x10314E55,
                0x81AC77D6,
                0x5F11199B,
                0x043556F1,
                0xD7A3C76B,
                0x3C11183B,
                0x5924A509,
                0xF28FE6ED,
                0x97F1FBFA,
                0x9EBABF2C,
                0x1E153C6E,
                0x86E34570,
                0xEAE96FB1,
                0x860E5E0A,
                0x5A3E2AB3,
                0x771FE71C,
                0x4E3D06FA,
                0x2965DCB9,
                0x99E71D0F,
                0x803E89D6,
                0x5266C825,
                0x2E4CC978,
                0x9C10B36A,
                0xC6150EBA,
                0x94E2EA78,
                0xA5FC3C53,
                0x1E0A2DF4,
                0xF2F74EA7,
                0x361D2B3D,
                0x1939260F,
                0x19C27960,
                0x5223A708,
                0xF71312B6,
                0xEBADFE6E,
                0xEAC31F66,
                0xE3BC4595,
                0xA67BC883,
                0xB17F37D1,
                0x018CFF28,
                0xC332DDEF,
                0xBE6C5AA5,
                0x65582185,
                0x68AB9802,
                0xEECEA50F,
                0xDB2F953B,
                0x2AEF7DAD,
                0x5B6E2F84,
                0x1521B628,
                0x29076170,
                0xECDD4775,
                0x619F1510,
                0x13CCA830,
                0xEB61BD96,
                0x0334FE1E,
                0xAA0363CF,
                0xB5735C90,
                0x4C70A239,
                0xD59E9E0B,
                0xCBAADE14,
                0xEECC86BC,
                0x60622CA7,
                0x9CAB5CAB,
                0xB2F3846E,
                0x648B1EAF,
                0x19BDF0CA,
                0xA02369B9,
                0x655ABB50,
                0x40685A32,
                0x3C2AB4B3,
                0x319EE9D5,
                0xC021B8F7,
                0x9B540B19,
                0x875FA099,
                0x95F7997E,
                0x623D7DA8,
                0xF837889A,
                0x97E32D77,
                0x11ED935F,
                0x16681281,
                0x0E358829,
                0xC7E61FD6,
                0x96DEDFA1,
                0x7858BA99,
                0x57F584A5,
                0x1B227263,
                0x9B83C3FF,
                0x1AC24696,
                0xCDB30AEB,
                0x532E3054,
                0x8FD948E4,
                0x6DBC3128,
                0x58EBF2EF,
                0x34C6FFEA,
                0xFE28ED61,
                0xEE7C3C73,
                0x5D4A14D9,
                0xE864B7E3,
                0x42105D14,
                0x203E13E0,
                0x45EEE2B6,
                0xA3AAABEA,
                0xDB6C4F15,
                0xFACB4FD0,
                0xC742F442,
                0xEF6ABBB5,
                0x654F3B1D,
                0x41CD2105,
                0xD81E799E,
                0x86854DC7,
                0xE44B476A,
                0x3D816250,
                0xCF62A1F2,
                0x5B8D2646,
                0xFC8883A0,
                0xC1C7B6A3,
                0x7F1524C3,
                0x69CB7492,
                0x47848A0B,
                0x5692B285,
                0x095BBF00,
                0xAD19489D,
                0x1462B174,
                0x23820E00,
                0x58428D2A,
                0x0C55F5EA,
                0x1DADF43E,
                0x233F7061,
                0x3372F092,
                0x8D937E41,
                0xD65FECF1,
                0x6C223BDB,
                0x7CDE3759,
                0xCBEE7460,
                0x4085F2A7,
                0xCE77326E,
                0xA6078084,
                0x19F8509E,
                0xE8EFD855,
                0x61D99735,
                0xA969A7AA,
                0xC50C06C2,
                0x5A04ABFC,
                0x800BCADC,
                0x9E447A2E,
                0xC3453484,
                0xFDD56705,
                0x0E1E9EC9,
                0xDB73DBD3,
                0x105588CD,
                0x675FDA79,
                0xE3674340,
                0xC5C43465,
                0x713E38D8,
                0x3D28F89E,
                0xF16DFF20,
                0x153E21E7,
                0x8FB03D4A,
                0xE6E39F2B,
                0xDB83ADF7
            ],
            [
                0xE93D5A68,
                0x948140F7,
                0xF64C261C,
                0x94692934,
                0x411520F7,
                0x7602D4F7,
                0xBCF46B2E,
                0xD4A20068,
                0xD4082471,
                0x3320F46A,
                0x43B7D4B7,
                0x500061AF,
                0x1E39F62E,
                0x97244546,
                0x14214F74,
                0xBF8B8840,
                0x4D95FC1D,
                0x96B591AF,
                0x70F4DDD3,
                0x66A02F45,
                0xBFBC09EC,
                0x03BD9785,
                0x7FAC6DD0,
                0x31CB8504,
                0x96EB27B3,
                0x55FD3941,
                0xDA2547E6,
                0xABCA0A9A,
                0x28507825,
                0x530429F4,
                0x0A2C86DA,
                0xE9B66DFB,
                0x68DC1462,
                0xD7486900,
                0x680EC0A4,
                0x27A18DEE,
                0x4F3FFEA2,
                0xE887AD8C,
                0xB58CE006,
                0x7AF4D6B6,
                0xAACE1E7C,
                0xD3375FEC,
                0xCE78A399,
                0x406B2A42,
                0x20FE9E35,
                0xD9F385B9,
                0xEE39D7AB,
                0x3B124E8B,
                0x1DC9FAF7,
                0x4B6D1856,
                0x26A36631,
                0xEAE397B2,
                0x3A6EFA74,
                0xDD5B4332,
                0x6841E7F7,
                0xCA7820FB,
                0xFB0AF54E,
                0xD8FEB397,
                0x454056AC,
                0xBA489527,
                0x55533A3A,
                0x20838D87,
                0xFE6BA9B7,
                0xD096954B,
                0x55A867BC,
                0xA1159A58,
                0xCCA92963,
                0x99E1DB33,
                0xA62A4A56,
                0x3F3125F9,
                0x5EF47E1C,
                0x9029317C,
                0xFDF8E802,
                0x04272F70,
                0x80BB155C,
                0x05282CE3,
                0x95C11548,
                0xE4C66D22,
                0x48C1133F,
                0xC70F86DC,
                0x07F9C9EE,
                0x41041F0F,
                0x404779A4,
                0x5D886E17,
                0x325F51EB,
                0xD59BC0D1,
                0xF2BCC18F,
                0x41113564,
                0x257B7834,
                0x602A9C60,
                0xDFF8E8A3,
                0x1F636C1B,
                0x0E12B4C2,
                0x02E1329E,
                0xAF664FD1,
                0xCAD18115,
                0x6B2395E0,
                0x333E92E1,
                0x3B240B62,
                0xEEBEB922,
                0x85B2A20E,
                0xE6BA0D99,
                0xDE720C8C,
                0x2DA2F728,
                0xD0127845,
                0x95B794FD,
                0x647D0862,
                0xE7CCF5F0,
                0x5449A36F,
                0x877D48FA,
                0xC39DFD27,
                0xF33E8D1E,
                0x0A476341,
                0x992EFF74,
                0x3A6F6EAB,
                0xF4F8FD37,
                0xA812DC60,
                0xA1EBDDF8,
                0x991BE14C,
                0xDB6E6B0D,
                0xC67B5510,
                0x6D672C37,
                0x2765D43B,
                0xDCD0E804,
                0xF1290DC7,
                0xCC00FFA3,
                0xB5390F92,
                0x690FED0B,
                0x667B9FFB,
                0xCEDB7D9C,
                0xA091CF0B,
                0xD9155EA3,
                0xBB132F88,
                0x515BAD24,
                0x7B9479BF,
                0x763BD6EB,
                0x37392EB3,
                0xCC115979,
                0x8026E297,
                0xF42E312D,
                0x6842ADA7,
                0xC66A2B3B,
                0x12754CCC,
                0x782EF11C,
                0x6A124237,
                0xB79251E7,
                0x06A1BBE6,
                0x4BFB6350,
                0x1A6B1018,
                0x11CAEDFA,
                0x3D25BDD8,
                0xE2E1C3C9,
                0x44421659,
                0x0A121386,
                0xD90CEC6E,
                0xD5ABEA2A,
                0x64AF674E,
                0xDA86A85F,
                0xBEBFE988,
                0x64E4C3FE,
                0x9DBC8057,
                0xF0F7C086,
                0x60787BF8,
                0x6003604D,
                0xD1FD8346,
                0xF6381FB0,
                0x7745AE04,
                0xD736FCCC,
                0x83426B33,
                0xF01EAB71,
                0xB0804187,
                0x3C005E5F,
                0x77A057BE,
                0xBDE8AE24,
                0x55464299,
                0xBF582E61,
                0x4E58F48F,
                0xF2DDFDA2,
                0xF474EF38,
                0x8789BDC2,
                0x5366F9C3,
                0xC8B38E74,
                0xB475F255,
                0x46FCD9B9,
                0x7AEB2661,
                0x8B1DDF84,
                0x846A0E79,
                0x915F95E2,
                0x466E598E,
                0x20B45770,
                0x8CD55591,
                0xC902DE4C,
                0xB90BACE1,
                0xBB8205D0,
                0x11A86248,
                0x7574A99E,
                0xB77F19B6,
                0xE0A9DC09,
                0x662D09A1,
                0xC4324633,
                0xE85A1F02,
                0x09F0BE8C,
                0x4A99A025,
                0x1D6EFE10,
                0x1AB93D1D,
                0x0BA5A4DF,
                0xA186F20F,
                0x2868F169,
                0xDCB7DA83,
                0x573906FE,
                0xA1E2CE9B,
                0x4FCD7F52,
                0x50115E01,
                0xA70683FA,
                0xA002B5C4,
                0x0DE6D027,
                0x9AF88C27,
                0x773F8641,
                0xC3604C06,
                0x61A806B5,
                0xF0177A28,
                0xC0F586E0,
                0x006058AA,
                0x30DC7D62,
                0x11E69ED7,
                0x2338EA63,
                0x53C2DD94,
                0xC2C21634,
                0xBBCBEE56,
                0x90BCB6DE,
                0xEBFC7DA1,
                0xCE591D76,
                0x6F05E409,
                0x4B7C0188,
                0x39720A3D,
                0x7C927C24,
                0x86E3725F,
                0x724D9DB9,
                0x1AC15BB4,
                0xD39EB8FC,
                0xED545578,
                0x08FCA5B5,
                0xD83D7CD3,
                0x4DAD0FC4,
                0x1E50EF5E,
                0xB161E6F8,
                0xA28514D9,
                0x6C51133C,
                0x6FD5C7E7,
                0x56E14EC4,
                0x362ABFCE,
                0xDDC6C837,
                0xD79A3234,
                0x92638212,
                0x670EFA8E,
                0x406000E0
            ],
            [
                0x3A39CE37,
                0xD3FAF5CF,
                0xABC27737,
                0x5AC52D1B,
                0x5CB0679E,
                0x4FA33742,
                0xD3822740,
                0x99BC9BBE,
                0xD5118E9D,
                0xBF0F7315,
                0xD62D1C7E,
                0xC700C47B,
                0xB78C1B6B,
                0x21A19045,
                0xB26EB1BE,
                0x6A366EB4,
                0x5748AB2F,
                0xBC946E79,
                0xC6A376D2,
                0x6549C2C8,
                0x530FF8EE,
                0x468DDE7D,
                0xD5730A1D,
                0x4CD04DC6,
                0x2939BBDB,
                0xA9BA4650,
                0xAC9526E8,
                0xBE5EE304,
                0xA1FAD5F0,
                0x6A2D519A,
                0x63EF8CE2,
                0x9A86EE22,
                0xC089C2B8,
                0x43242EF6,
                0xA51E03AA,
                0x9CF2D0A4,
                0x83C061BA,
                0x9BE96A4D,
                0x8FE51550,
                0xBA645BD6,
                0x2826A2F9,
                0xA73A3AE1,
                0x4BA99586,
                0xEF5562E9,
                0xC72FEFD3,
                0xF752F7DA,
                0x3F046F69,
                0x77FA0A59,
                0x80E4A915,
                0x87B08601,
                0x9B09E6AD,
                0x3B3EE593,
                0xE990FD5A,
                0x9E34D797,
                0x2CF0B7D9,
                0x022B8B51,
                0x96D5AC3A,
                0x017DA67D,
                0xD1CF3ED6,
                0x7C7D2D28,
                0x1F9F25CF,
                0xADF2B89B,
                0x5AD6B472,
                0x5A88F54C,
                0xE029AC71,
                0xE019A5E6,
                0x47B0ACFD,
                0xED93FA9B,
                0xE8D3C48D,
                0x283B57CC,
                0xF8D56629,
                0x79132E28,
                0x785F0191,
                0xED756055,
                0xF7960E44,
                0xE3D35E8C,
                0x15056DD4,
                0x88F46DBA,
                0x03A16125,
                0x0564F0BD,
                0xC3EB9E15,
                0x3C9057A2,
                0x97271AEC,
                0xA93A072A,
                0x1B3F6D9B,
                0x1E6321F5,
                0xF59C66FB,
                0x26DCF319,
                0x7533D928,
                0xB155FDF5,
                0x03563482,
                0x8ABA3CBB,
                0x28517711,
                0xC20AD9F8,
                0xABCC5167,
                0xCCAD925F,
                0x4DE81751,
                0x3830DC8E,
                0x379D5862,
                0x9320F991,
                0xEA7A90C2,
                0xFB3E7BCE,
                0x5121CE64,
                0x774FBE32,
                0xA8B6E37E,
                0xC3293D46,
                0x48DE5369,
                0x6413E680,
                0xA2AE0810,
                0xDD6DB224,
                0x69852DFD,
                0x09072166,
                0xB39A460A,
                0x6445C0DD,
                0x586CDECF,
                0x1C20C8AE,
                0x5BBEF7DD,
                0x1B588D40,
                0xCCD2017F,
                0x6BB4E3BB,
                0xDDA26A7E,
                0x3A59FF45,
                0x3E350A44,
                0xBCB4CDD5,
                0x72EACEA8,
                0xFA6484BB,
                0x8D6612AE,
                0xBF3C6F47,
                0xD29BE463,
                0x542F5D9E,
                0xAEC2771B,
                0xF64E6370,
                0x740E0D8D,
                0xE75B1357,
                0xF8721671,
                0xAF537D5D,
                0x4040CB08,
                0x4EB4E2CC,
                0x34D2466A,
                0x0115AF84,
                0xE1B00428,
                0x95983A1D,
                0x06B89FB4,
                0xCE6EA048,
                0x6F3F3B82,
                0x3520AB82,
                0x011A1D4B,
                0x277227F8,
                0x611560B1,
                0xE7933FDC,
                0xBB3A792B,
                0x344525BD,
                0xA08839E1,
                0x51CE794B,
                0x2F32C9B7,
                0xA01FBAC9,
                0xE01CC87E,
                0xBCC7D1F6,
                0xCF0111C3,
                0xA1E8AAC7,
                0x1A908749,
                0xD44FBD9A,
                0xD0DADECB,
                0xD50ADA38,
                0x0339C32A,
                0xC6913667,
                0x8DF9317C,
                0xE0B12B4F,
                0xF79E59B7,
                0x43F5BB3A,
                0xF2D519FF,
                0x27D9459C,
                0xBF97222C,
                0x15E6FC2A,
                0x0F91FC71,
                0x9B941525,
                0xFAE59361,
                0xCEB69CEB,
                0xC2A86459,
                0x12BAA8D1,
                0xB6C1075E,
                0xE3056A0C,
                0x10D25065,
                0xCB03A442,
                0xE0EC6E0E,
                0x1698DB3B,
                0x4C98A0BE,
                0x3278E964,
                0x9F1F9532,
                0xE0D392DF,
                0xD3A0342B,
                0x8971F21E,
                0x1B0A7441,
                0x4BA3348C,
                0xC5BE7120,
                0xC37632D8,
                0xDF359F8D,
                0x9B992F2E,
                0xE60B6F47,
                0x0FE3F11D,
                0xE54CDA54,
                0x1EDAD891,
                0xCE6279CF,
                0xCD3E7E6F,
                0x1618B166,
                0xFD2C1D05,
                0x848FD2C5,
                0xF6FB2299,
                0xF523F357,
                0xA6327623,
                0x93A83531,
                0x56CCCD02,
                0xACF08162,
                0x5A75EBB5,
                0x6E163697,
                0x88D273CC,
                0xDE966292,
                0x81B949D0,
                0x4C50901B,
                0x71C65614,
                0xE6C6C7BD,
                0x327A140A,
                0x45E1D006,
                0xC3F27B9A,
                0xC9AA53FD,
                0x62A80F00,
                0xBB25BFE2,
                0x35BDD2F6,
                0x71126905,
                0xB2040222,
                0xB6CBCF7C,
                0xCD769C2B,
                0x53113EC0,
                0x1640E3D3,
                0x38ABBD60,
                0x2547ADF0,
                0xBA38209C,
                0xF746CE76,
                0x77AFA1C5,
                0x20756060,
                0x85CBFE4E,
                0x8AE88DD8,
                0x7AAAF9B0,
                0x4CF9AA7E,
                0x1948C25C,
                0x02FB8A8C,
                0x01C36AE4,
                0xD6EBE1F9,
                0x90D4F869,
                0xA65CDEA0,
                0x3F09252D,
                0xC208E69F,
                0xB74E6132,
                0xCE77E25B,
                0x578FDFE3,
                0x3AC372E6
            ]
        ];
        var BLOWFISH_CTX = {
            pbox: [],
            sbox: []
        };
        function F(ctx, x) {
            let a = x >> 24 & 0xFF;
            let b = x >> 16 & 0xFF;
            let c = x >> 8 & 0xFF;
            let d = x & 0xFF;
            let y = ctx.sbox[0][a] + ctx.sbox[1][b];
            y = y ^ ctx.sbox[2][c];
            y = y + ctx.sbox[3][d];
            return y;
        }
        function BlowFish_Encrypt(ctx, left, right) {
            let Xl = left;
            let Xr = right;
            let temp;
            for(let i = 0; i < N; ++i){
                Xl = Xl ^ ctx.pbox[i];
                Xr = F(ctx, Xl) ^ Xr;
                temp = Xl;
                Xl = Xr;
                Xr = temp;
            }
            temp = Xl;
            Xl = Xr;
            Xr = temp;
            Xr = Xr ^ ctx.pbox[N];
            Xl = Xl ^ ctx.pbox[N + 1];
            return {
                left: Xl,
                right: Xr
            };
        }
        function BlowFish_Decrypt(ctx, left, right) {
            let Xl = left;
            let Xr = right;
            let temp;
            for(let i = N + 1; i > 1; --i){
                Xl = Xl ^ ctx.pbox[i];
                Xr = F(ctx, Xl) ^ Xr;
                temp = Xl;
                Xl = Xr;
                Xr = temp;
            }
            temp = Xl;
            Xl = Xr;
            Xr = temp;
            Xr = Xr ^ ctx.pbox[1];
            Xl = Xl ^ ctx.pbox[0];
            return {
                left: Xl,
                right: Xr
            };
        }
        /**
	     * Initialization ctx's pbox and sbox.
	     *
	     * @param {Object} ctx The object has pbox and sbox.
	     * @param {Array} key An array of 32-bit words.
	     * @param {int} keysize The length of the key.
	     *
	     * @example
	     *
	     *     BlowFishInit(BLOWFISH_CTX, key, 128/32);
	     */ function BlowFishInit(ctx, key, keysize) {
            for(let Row = 0; Row < 4; Row++){
                ctx.sbox[Row] = [];
                for(let Col = 0; Col < 256; Col++){
                    ctx.sbox[Row][Col] = ORIG_S[Row][Col];
                }
            }
            let keyIndex = 0;
            for(let index = 0; index < N + 2; index++){
                ctx.pbox[index] = ORIG_P[index] ^ key[keyIndex];
                keyIndex++;
                if (keyIndex >= keysize) {
                    keyIndex = 0;
                }
            }
            let Data1 = 0;
            let Data2 = 0;
            let res = 0;
            for(let i = 0; i < N + 2; i += 2){
                res = BlowFish_Encrypt(ctx, Data1, Data2);
                Data1 = res.left;
                Data2 = res.right;
                ctx.pbox[i] = Data1;
                ctx.pbox[i + 1] = Data2;
            }
            for(let i = 0; i < 4; i++){
                for(let j = 0; j < 256; j += 2){
                    res = BlowFish_Encrypt(ctx, Data1, Data2);
                    Data1 = res.left;
                    Data2 = res.right;
                    ctx.sbox[i][j] = Data1;
                    ctx.sbox[i][j + 1] = Data2;
                }
            }
            return true;
        }
        /**
	     * Blowfish block cipher algorithm.
	     */ var Blowfish = C_algo.Blowfish = BlockCipher.extend({
            _doReset: function() {
                // Skip reset of nRounds has been set before and key did not change
                if (this._keyPriorReset === this._key) {
                    return;
                }
                // Shortcuts
                var key = this._keyPriorReset = this._key;
                var keyWords = key.words;
                var keySize = key.sigBytes / 4;
                //Initialization pbox and sbox
                BlowFishInit(BLOWFISH_CTX, keyWords, keySize);
            },
            encryptBlock: function(M, offset) {
                var res = BlowFish_Encrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
                M[offset] = res.left;
                M[offset + 1] = res.right;
            },
            decryptBlock: function(M, offset) {
                var res = BlowFish_Decrypt(BLOWFISH_CTX, M[offset], M[offset + 1]);
                M[offset] = res.left;
                M[offset + 1] = res.right;
            },
            blockSize: 64 / 32,
            keySize: 128 / 32,
            ivSize: 64 / 32
        });
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Blowfish.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Blowfish.decrypt(ciphertext, key, cfg);
	     */ C.Blowfish = BlockCipher._createHelper(Blowfish);
    })();
    return CryptoJS.Blowfish;
});


/***/ }),

/***/ 9302:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(970));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Cipher core components.
	 */ CryptoJS.lib.Cipher || function(undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
	     * Abstract base cipher template.
	     *
	     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
	     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
	     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
	     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
	     */ var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
	         * Configuration options.
	         *
	         * @property {WordArray} iv The IV to use for this operation.
	         */ cfg: Base.extend(),
            /**
	         * Creates this cipher in encryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
	         */ createEncryptor: function(key, cfg) {
                return this.create(this._ENC_XFORM_MODE, key, cfg);
            },
            /**
	         * Creates this cipher in decryption mode.
	         *
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {Cipher} A cipher instance.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
	         */ createDecryptor: function(key, cfg) {
                return this.create(this._DEC_XFORM_MODE, key, cfg);
            },
            /**
	         * Initializes a newly created cipher.
	         *
	         * @param {number} xformMode Either the encryption or decryption transormation mode constant.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @example
	         *
	         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
	         */ init: function(xformMode, key, cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Store transform mode and key
                this._xformMode = xformMode;
                this._key = key;
                // Set initial values
                this.reset();
            },
            /**
	         * Resets this cipher to its initial state.
	         *
	         * @example
	         *
	         *     cipher.reset();
	         */ reset: function() {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-cipher logic
                this._doReset();
            },
            /**
	         * Adds data to be encrypted or decrypted.
	         *
	         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.process('data');
	         *     var encrypted = cipher.process(wordArray);
	         */ process: function(dataUpdate) {
                // Append
                this._append(dataUpdate);
                // Process available blocks
                return this._process();
            },
            /**
	         * Finalizes the encryption or decryption process.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
	         *
	         * @return {WordArray} The data after final processing.
	         *
	         * @example
	         *
	         *     var encrypted = cipher.finalize();
	         *     var encrypted = cipher.finalize('data');
	         *     var encrypted = cipher.finalize(wordArray);
	         */ finalize: function(dataUpdate) {
                // Final data update
                if (dataUpdate) {
                    this._append(dataUpdate);
                }
                // Perform concrete-cipher logic
                var finalProcessedData = this._doFinalize();
                return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            /**
	         * Creates shortcut functions to a cipher's object interface.
	         *
	         * @param {Cipher} cipher The cipher to create a helper for.
	         *
	         * @return {Object} An object with encrypt and decrypt shortcut functions.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
	         */ _createHelper: function() {
                function selectCipherStrategy(key) {
                    if (typeof key == "string") {
                        return PasswordBasedCipher;
                    } else {
                        return SerializableCipher;
                    }
                }
                return function(cipher) {
                    return {
                        encrypt: function(message, key, cfg) {
                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                        },
                        decrypt: function(ciphertext, key, cfg) {
                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                        }
                    };
                };
            }()
        });
        /**
	     * Abstract base stream cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
	     */ var StreamCipher = C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function() {
                // Process partial blocks
                var finalProcessedBlocks = this._process(!!"flush");
                return finalProcessedBlocks;
            },
            blockSize: 1
        });
        /**
	     * Mode namespace.
	     */ var C_mode = C.mode = {};
        /**
	     * Abstract base block cipher mode template.
	     */ var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
	         * Creates this mode for encryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
	         */ createEncryptor: function(cipher, iv) {
                return this.Encryptor.create(cipher, iv);
            },
            /**
	         * Creates this mode for decryption.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
	         */ createDecryptor: function(cipher, iv) {
                return this.Decryptor.create(cipher, iv);
            },
            /**
	         * Initializes a newly created mode.
	         *
	         * @param {Cipher} cipher A block cipher instance.
	         * @param {Array} iv The IV words.
	         *
	         * @example
	         *
	         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
	         */ init: function(cipher, iv) {
                this._cipher = cipher;
                this._iv = iv;
            }
        });
        /**
	     * Cipher Block Chaining mode.
	     */ var CBC = C_mode.CBC = function() {
            /**
	         * Abstract base CBC mode.
	         */ var CBC = BlockCipherMode.extend();
            /**
	         * CBC encryptor.
	         */ CBC.Encryptor = CBC.extend({
                /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */ processBlock: function(words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // XOR and encrypt
                    xorBlock.call(this, words, offset, blockSize);
                    cipher.encryptBlock(words, offset);
                    // Remember this block to use with next block
                    this._prevBlock = words.slice(offset, offset + blockSize);
                }
            });
            /**
	         * CBC decryptor.
	         */ CBC.Decryptor = CBC.extend({
                /**
	             * Processes the data block at offset.
	             *
	             * @param {Array} words The data words to operate on.
	             * @param {number} offset The offset where the block starts.
	             *
	             * @example
	             *
	             *     mode.processBlock(data.words, offset);
	             */ processBlock: function(words, offset) {
                    // Shortcuts
                    var cipher = this._cipher;
                    var blockSize = cipher.blockSize;
                    // Remember this block to use with next block
                    var thisBlock = words.slice(offset, offset + blockSize);
                    // Decrypt and XOR
                    cipher.decryptBlock(words, offset);
                    xorBlock.call(this, words, offset, blockSize);
                    // This block becomes the previous block
                    this._prevBlock = thisBlock;
                }
            });
            function xorBlock(words, offset, blockSize) {
                var block;
                // Shortcut
                var iv = this._iv;
                // Choose mixing block
                if (iv) {
                    block = iv;
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                } else {
                    block = this._prevBlock;
                }
                // XOR blocks
                for(var i = 0; i < blockSize; i++){
                    words[offset + i] ^= block[i];
                }
            }
            return CBC;
        }();
        /**
	     * Padding namespace.
	     */ var C_pad = C.pad = {};
        /**
	     * PKCS #5/7 padding strategy.
	     */ var Pkcs7 = C_pad.Pkcs7 = {
            /**
	         * Pads data using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to pad.
	         * @param {number} blockSize The multiple that the data should be padded to.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
	         */ pad: function(data, blockSize) {
                // Shortcut
                var blockSizeBytes = blockSize * 4;
                // Count padding bytes
                var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                // Create padding word
                var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
                // Create padding
                var paddingWords = [];
                for(var i = 0; i < nPaddingBytes; i += 4){
                    paddingWords.push(paddingWord);
                }
                var padding = WordArray.create(paddingWords, nPaddingBytes);
                // Add padding
                data.concat(padding);
            },
            /**
	         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
	         *
	         * @param {WordArray} data The data to unpad.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     CryptoJS.pad.Pkcs7.unpad(wordArray);
	         */ unpad: function(data) {
                // Get number of padding bytes from last byte
                var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
                // Remove padding
                data.sigBytes -= nPaddingBytes;
            }
        };
        /**
	     * Abstract base block cipher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
	     */ var BlockCipher = C_lib.BlockCipher = Cipher.extend({
            /**
	         * Configuration options.
	         *
	         * @property {Mode} mode The block mode to use. Default: CBC
	         * @property {Padding} padding The padding strategy to use. Default: Pkcs7
	         */ cfg: Cipher.cfg.extend({
                mode: CBC,
                padding: Pkcs7
            }),
            reset: function() {
                var modeCreator;
                // Reset cipher
                Cipher.reset.call(this);
                // Shortcuts
                var cfg = this.cfg;
                var iv = cfg.iv;
                var mode = cfg.mode;
                // Reset block mode
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    modeCreator = mode.createEncryptor;
                } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    modeCreator = mode.createDecryptor;
                    // Keep at least one block in the buffer for unpadding
                    this._minBufferSize = 1;
                }
                if (this._mode && this._mode.__creator == modeCreator) {
                    this._mode.init(this, iv && iv.words);
                } else {
                    this._mode = modeCreator.call(mode, this, iv && iv.words);
                    this._mode.__creator = modeCreator;
                }
            },
            _doProcessBlock: function(words, offset) {
                this._mode.processBlock(words, offset);
            },
            _doFinalize: function() {
                var finalProcessedBlocks;
                // Shortcut
                var padding = this.cfg.padding;
                // Finalize
                if (this._xformMode == this._ENC_XFORM_MODE) {
                    // Pad data
                    padding.pad(this._data, this.blockSize);
                    // Process final blocks
                    finalProcessedBlocks = this._process(!!"flush");
                } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {
                    // Process final blocks
                    finalProcessedBlocks = this._process(!!"flush");
                    // Unpad data
                    padding.unpad(finalProcessedBlocks);
                }
                return finalProcessedBlocks;
            },
            blockSize: 128 / 32
        });
        /**
	     * A collection of cipher parameters.
	     *
	     * @property {WordArray} ciphertext The raw ciphertext.
	     * @property {WordArray} key The key to this ciphertext.
	     * @property {WordArray} iv The IV used in the ciphering operation.
	     * @property {WordArray} salt The salt used with a key derivation function.
	     * @property {Cipher} algorithm The cipher algorithm.
	     * @property {Mode} mode The block mode used in the ciphering operation.
	     * @property {Padding} padding The padding scheme used in the ciphering operation.
	     * @property {number} blockSize The block size of the cipher.
	     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
	     */ var CipherParams = C_lib.CipherParams = Base.extend({
            /**
	         * Initializes a newly created cipher params object.
	         *
	         * @param {Object} cipherParams An object with any of the possible cipher parameters.
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.lib.CipherParams.create({
	         *         ciphertext: ciphertextWordArray,
	         *         key: keyWordArray,
	         *         iv: ivWordArray,
	         *         salt: saltWordArray,
	         *         algorithm: CryptoJS.algo.AES,
	         *         mode: CryptoJS.mode.CBC,
	         *         padding: CryptoJS.pad.PKCS7,
	         *         blockSize: 4,
	         *         formatter: CryptoJS.format.OpenSSL
	         *     });
	         */ init: function(cipherParams) {
                this.mixIn(cipherParams);
            },
            /**
	         * Converts this cipher params object to a string.
	         *
	         * @param {Format} formatter (Optional) The formatting strategy to use.
	         *
	         * @return {string} The stringified cipher params.
	         *
	         * @throws Error If neither the formatter nor the default formatter is set.
	         *
	         * @example
	         *
	         *     var string = cipherParams + '';
	         *     var string = cipherParams.toString();
	         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
	         */ toString: function(formatter) {
                return (formatter || this.formatter).stringify(this);
            }
        });
        /**
	     * Format namespace.
	     */ var C_format = C.format = {};
        /**
	     * OpenSSL formatting strategy.
	     */ var OpenSSLFormatter = C_format.OpenSSL = {
            /**
	         * Converts a cipher params object to an OpenSSL-compatible string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The OpenSSL-compatible string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
	         */ stringify: function(cipherParams) {
                var wordArray;
                // Shortcuts
                var ciphertext = cipherParams.ciphertext;
                var salt = cipherParams.salt;
                // Format
                if (salt) {
                    wordArray = WordArray.create([
                        0x53616c74,
                        0x65645f5f
                    ]).concat(salt).concat(ciphertext);
                } else {
                    wordArray = ciphertext;
                }
                return wordArray.toString(Base64);
            },
            /**
	         * Converts an OpenSSL-compatible string to a cipher params object.
	         *
	         * @param {string} openSSLStr The OpenSSL-compatible string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
	         */ parse: function(openSSLStr) {
                var salt;
                // Parse base64
                var ciphertext = Base64.parse(openSSLStr);
                // Shortcut
                var ciphertextWords = ciphertext.words;
                // Test for salt
                if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
                    // Extract salt
                    salt = WordArray.create(ciphertextWords.slice(2, 4));
                    // Remove salt from ciphertext
                    ciphertextWords.splice(0, 4);
                    ciphertext.sigBytes -= 16;
                }
                return CipherParams.create({
                    ciphertext: ciphertext,
                    salt: salt
                });
            }
        };
        /**
	     * A cipher wrapper that returns ciphertext as a serializable cipher params object.
	     */ var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
	         * Configuration options.
	         *
	         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
	         */ cfg: Base.extend({
                format: OpenSSLFormatter
            }),
            /**
	         * Encrypts a message.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */ encrypt: function(cipher, message, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Encrypt
                var encryptor = cipher.createEncryptor(key, cfg);
                var ciphertext = encryptor.finalize(message);
                // Shortcut
                var cipherCfg = encryptor.cfg;
                // Create and return serializable cipher params
                return CipherParams.create({
                    ciphertext: ciphertext,
                    key: key,
                    iv: cipherCfg.iv,
                    algorithm: cipher,
                    mode: cipherCfg.mode,
                    padding: cipherCfg.padding,
                    blockSize: cipher.blockSize,
                    formatter: cfg.format
                });
            },
            /**
	         * Decrypts serialized ciphertext.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {WordArray} key The key.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
	         */ decrypt: function(cipher, ciphertext, key, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Decrypt
                var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                return plaintext;
            },
            /**
	         * Converts serialized ciphertext to CipherParams,
	         * else assumed CipherParams already and returns ciphertext unchanged.
	         *
	         * @param {CipherParams|string} ciphertext The ciphertext.
	         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
	         *
	         * @return {CipherParams} The unserialized ciphertext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
	         */ _parse: function(ciphertext, format) {
                if (typeof ciphertext == "string") {
                    return format.parse(ciphertext, this);
                } else {
                    return ciphertext;
                }
            }
        });
        /**
	     * Key derivation function namespace.
	     */ var C_kdf = C.kdf = {};
        /**
	     * OpenSSL key derivation function.
	     */ var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
	         * Derives a key and IV from a password.
	         *
	         * @param {string} password The password to derive from.
	         * @param {number} keySize The size in words of the key to generate.
	         * @param {number} ivSize The size in words of the IV to generate.
	         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
	         *
	         * @return {CipherParams} A cipher params object with the key, IV, and salt.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
	         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
	         */ execute: function(password, keySize, ivSize, salt, hasher) {
                // Generate random salt
                if (!salt) {
                    salt = WordArray.random(64 / 8);
                }
                // Derive key and IV
                if (!hasher) {
                    var key = EvpKDF.create({
                        keySize: keySize + ivSize
                    }).compute(password, salt);
                } else {
                    var key = EvpKDF.create({
                        keySize: keySize + ivSize,
                        hasher: hasher
                    }).compute(password, salt);
                }
                // Separate key and IV
                var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                key.sigBytes = keySize * 4;
                // Return params
                return CipherParams.create({
                    key: key,
                    iv: iv,
                    salt: salt
                });
            }
        };
        /**
	     * A serializable cipher wrapper that derives the key from a password,
	     * and returns ciphertext as a serializable cipher params object.
	     */ var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
	         * Configuration options.
	         *
	         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
	         */ cfg: SerializableCipher.cfg.extend({
                kdf: OpenSSLKdf
            }),
            /**
	         * Encrypts a message using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {WordArray|string} message The message to encrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {CipherParams} A cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
	         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
	         */ encrypt: function(cipher, message, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, cfg.salt, cfg.hasher);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Encrypt
                var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                // Mix in derived params
                ciphertext.mixIn(derivedParams);
                return ciphertext;
            },
            /**
	         * Decrypts serialized ciphertext using a password.
	         *
	         * @param {Cipher} cipher The cipher algorithm to use.
	         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
	         * @param {string} password The password.
	         * @param {Object} cfg (Optional) The configuration options to use for this operation.
	         *
	         * @return {WordArray} The plaintext.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
	         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
	         */ decrypt: function(cipher, ciphertext, password, cfg) {
                // Apply config defaults
                cfg = this.cfg.extend(cfg);
                // Convert string to CipherParams
                ciphertext = this._parse(ciphertext, cfg.format);
                // Derive key and other params
                var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt, cfg.hasher);
                // Add IV to config
                cfg.iv = derivedParams.iv;
                // Decrypt
                var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                return plaintext;
            }
        });
    }();
});


/***/ }),

/***/ 6805:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory();
    } else {}
})(void 0, function() {
    /*globals window, global, require*/ /**
	 * CryptoJS core components.
	 */ var CryptoJS = CryptoJS || function(Math1, undefined) {
        var crypto;
        // Native crypto from window (Browser)
        if (false) {}
        // Native crypto in web worker (Browser)
        if (typeof self !== "undefined" && self.crypto) {
            crypto = self.crypto;
        }
        // Native crypto from worker
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
            crypto = globalThis.crypto;
        }
        // Native (experimental IE 11) crypto from window (Browser)
        if (!crypto && "undefined" !== "undefined" && 0) {}
        // Native crypto from global (NodeJS)
        if (!crypto && typeof global !== "undefined" && global.crypto) {
            crypto = global.crypto;
        }
        // Native crypto import via require (NodeJS)
        if (!crypto && "function" === "function") {
            try {
                crypto = __webpack_require__(6113);
            } catch (err) {}
        }
        /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */ var cryptoSecureRandomInt = function() {
            if (crypto) {
                // Use getRandomValues method (Browser)
                if (typeof crypto.getRandomValues === "function") {
                    try {
                        return crypto.getRandomValues(new Uint32Array(1))[0];
                    } catch (err) {}
                }
                // Use randomBytes method (NodeJS)
                if (typeof crypto.randomBytes === "function") {
                    try {
                        return crypto.randomBytes(4).readInt32LE();
                    } catch (err) {}
                }
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
        };
        /*
	     * Local polyfill of Object.create

	     */ var create = Object.create || function() {
            function F() {}
            return function(obj) {
                var subtype;
                F.prototype = obj;
                subtype = new F();
                F.prototype = null;
                return subtype;
            };
        }();
        /**
	     * CryptoJS namespace.
	     */ var C = {};
        /**
	     * Library namespace.
	     */ var C_lib = C.lib = {};
        /**
	     * Base object for prototypal inheritance.
	     */ var Base = C_lib.Base = function() {
            return {
                /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */ extend: function(overrides) {
                    // Spawn
                    var subtype = create(this);
                    // Augment
                    if (overrides) {
                        subtype.mixIn(overrides);
                    }
                    // Create default initializer
                    if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                        subtype.init = function() {
                            subtype.$super.init.apply(this, arguments);
                        };
                    }
                    // Initializer's prototype is the subtype object
                    subtype.init.prototype = subtype;
                    // Reference supertype
                    subtype.$super = this;
                    return subtype;
                },
                /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */ create: function() {
                    var instance = this.extend();
                    instance.init.apply(instance, arguments);
                    return instance;
                },
                /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */ init: function() {},
                /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */ mixIn: function(properties) {
                    for(var propertyName in properties){
                        if (properties.hasOwnProperty(propertyName)) {
                            this[propertyName] = properties[propertyName];
                        }
                    }
                    // IE won't copy toString using the loop above
                    if (properties.hasOwnProperty("toString")) {
                        this.toString = properties.toString;
                    }
                },
                /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */ clone: function() {
                    return this.init.prototype.extend(this);
                }
            };
        }();
        /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */ var WordArray = C_lib.WordArray = Base.extend({
            /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */ init: function(words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined) {
                    this.sigBytes = sigBytes;
                } else {
                    this.sigBytes = words.length * 4;
                }
            },
            /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */ toString: function(encoder) {
                return (encoder || Hex).stringify(this);
            },
            /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */ concat: function(wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;
                // Clamp excess bits
                this.clamp();
                // Concat
                if (thisSigBytes % 4) {
                    // Copy one byte at a time
                    for(var i = 0; i < thatSigBytes; i++){
                        var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                        thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                    }
                } else {
                    // Copy one word at a time
                    for(var j = 0; j < thatSigBytes; j += 4){
                        thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                    }
                }
                this.sigBytes += thatSigBytes;
                // Chainable
                return this;
            },
            /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */ clamp: function() {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;
                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
                words.length = Math1.ceil(sigBytes / 4);
            },
            /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */ clone: function() {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);
                return clone;
            },
            /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */ random: function(nBytes) {
                var words = [];
                for(var i = 0; i < nBytes; i += 4){
                    words.push(cryptoSecureRandomInt());
                }
                return new WordArray.init(words, nBytes);
            }
        });
        /**
	     * Encoder namespace.
	     */ var C_enc = C.enc = {};
        /**
	     * Hex encoding strategy.
	     */ var Hex = C_enc.Hex = {
            /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var hexChars = [];
                for(var i = 0; i < sigBytes; i++){
                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join("");
            },
            /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */ parse: function(hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;
                // Convert
                var words = [];
                for(var i = 0; i < hexStrLength; i += 2){
                    words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
                }
                return new WordArray.init(words, hexStrLength / 2);
            }
        };
        /**
	     * Latin1 encoding strategy.
	     */ var Latin1 = C_enc.Latin1 = {
            /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var latin1Chars = [];
                for(var i = 0; i < sigBytes; i++){
                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    latin1Chars.push(String.fromCharCode(bite));
                }
                return latin1Chars.join("");
            },
            /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */ parse: function(latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;
                // Convert
                var words = [];
                for(var i = 0; i < latin1StrLength; i++){
                    words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
                }
                return new WordArray.init(words, latin1StrLength);
            }
        };
        /**
	     * UTF-8 encoding strategy.
	     */ var Utf8 = C_enc.Utf8 = {
            /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */ stringify: function(wordArray) {
                try {
                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                } catch (e) {
                    throw new Error("Malformed UTF-8 data");
                }
            },
            /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */ parse: function(utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
        };
        /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */ var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */ reset: function() {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
            },
            /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */ _append: function(data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == "string") {
                    data = Utf8.parse(data);
                }
                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
            },
            /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */ _process: function(doFlush) {
                var processedWords;
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;
                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) {
                    // Round up to include partial blocks
                    nBlocksReady = Math1.ceil(nBlocksReady);
                } else {
                    // Round down to include only full blocks,
                    // less the number of blocks that must remain in the buffer
                    nBlocksReady = Math1.max((nBlocksReady | 0) - this._minBufferSize, 0);
                }
                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;
                // Count bytes ready
                var nBytesReady = Math1.min(nWordsReady * 4, dataSigBytes);
                // Process blocks
                if (nWordsReady) {
                    for(var offset = 0; offset < nWordsReady; offset += blockSize){
                        // Perform concrete-algorithm logic
                        this._doProcessBlock(dataWords, offset);
                    }
                    // Remove processed words
                    processedWords = dataWords.splice(0, nWordsReady);
                    data.sigBytes -= nBytesReady;
                }
                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
            },
            /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */ clone: function() {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();
                return clone;
            },
            _minBufferSize: 0
        });
        /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */ var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
	         * Configuration options.
	         */ cfg: Base.extend(),
            /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */ init: function(cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Set initial values
                this.reset();
            },
            /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */ reset: function() {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-hasher logic
                this._doReset();
            },
            /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */ update: function(messageUpdate) {
                // Append
                this._append(messageUpdate);
                // Update the hash
                this._process();
                // Chainable
                return this;
            },
            /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */ finalize: function(messageUpdate) {
                // Final message update
                if (messageUpdate) {
                    this._append(messageUpdate);
                }
                // Perform concrete-hasher logic
                var hash = this._doFinalize();
                return hash;
            },
            blockSize: 512 / 32,
            /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */ _createHelper: function(hasher) {
                return function(message, cfg) {
                    return new hasher.init(cfg).finalize(message);
                };
            },
            /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */ _createHmacHelper: function(hasher) {
                return function(message, key) {
                    return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
            }
        });
        /**
	     * Algorithm namespace.
	     */ var C_algo = C.algo = {};
        return C;
    }(Math);
    return CryptoJS;
});


/***/ }),

/***/ 1647:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
	     * Base64 encoding strategy.
	     */ var Base64 = C_enc.Base64 = {
            /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = this._map;
                // Clamp excess bits
                wordArray.clamp();
                // Convert
                var base64Chars = [];
                for(var i = 0; i < sigBytes; i += 3){
                    var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                    var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                    var triplet = byte1 << 16 | byte2 << 8 | byte3;
                    for(var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++){
                        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                    }
                }
                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    while(base64Chars.length % 4){
                        base64Chars.push(paddingChar);
                    }
                }
                return base64Chars.join("");
            },
            /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */ parse: function(base64Str) {
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for(var j = 0; j < map.length; j++){
                        reverseMap[map.charCodeAt(j)] = j;
                    }
                }
                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) {
                        base64StrLength = paddingIndex;
                    }
                }
                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for(var i = 0; i < base64StrLength; i++){
                if (i % 4) {
                    var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                    var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                    var bitsCombined = bits1 | bits2;
                    words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                    nBytes++;
                }
            }
            return WordArray.create(words, nBytes);
        }
    })();
    return CryptoJS.enc.Base64;
});


/***/ }),

/***/ 6380:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
	     * Base64url encoding strategy.
	     */ var Base64url = C_enc.Base64url = {
            /**
	         * Converts a word array to a Base64url string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @param {boolean} urlSafe Whether to use url safe
	         *
	         * @return {string} The Base64url string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
	         */ stringify: function(wordArray, urlSafe) {
                if (urlSafe === undefined) {
                    urlSafe = true;
                }
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = urlSafe ? this._safe_map : this._map;
                // Clamp excess bits
                wordArray.clamp();
                // Convert
                var base64Chars = [];
                for(var i = 0; i < sigBytes; i += 3){
                    var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                    var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                    var triplet = byte1 << 16 | byte2 << 8 | byte3;
                    for(var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++){
                        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                    }
                }
                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    while(base64Chars.length % 4){
                        base64Chars.push(paddingChar);
                    }
                }
                return base64Chars.join("");
            },
            /**
	         * Converts a Base64url string to a word array.
	         *
	         * @param {string} base64Str The Base64url string.
	         *
	         * @param {boolean} urlSafe Whether to use url safe
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
	         */ parse: function(base64Str, urlSafe) {
                if (urlSafe === undefined) {
                    urlSafe = true;
                }
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = urlSafe ? this._safe_map : this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for(var j = 0; j < map.length; j++){
                        reverseMap[map.charCodeAt(j)] = j;
                    }
                }
                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) {
                        base64StrLength = paddingIndex;
                    }
                }
                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for(var i = 0; i < base64StrLength; i++){
                if (i % 4) {
                    var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                    var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                    var bitsCombined = bits1 | bits2;
                    words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                    nBytes++;
                }
            }
            return WordArray.create(words, nBytes);
        }
    })();
    return CryptoJS.enc.Base64url;
});


/***/ }),

/***/ 6191:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
	     * UTF-16 BE encoding strategy.
	     */ var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
            /**
	         * Converts a word array to a UTF-16 BE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 BE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for(var i = 0; i < sigBytes; i += 2){
                    var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join("");
            },
            /**
	         * Converts a UTF-16 BE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 BE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
	         */ parse: function(utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for(var i = 0; i < utf16StrLength; i++){
                    words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        /**
	     * UTF-16 LE encoding strategy.
	     */ C_enc.Utf16LE = {
            /**
	         * Converts a word array to a UTF-16 LE string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-16 LE string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var utf16Chars = [];
                for(var i = 0; i < sigBytes; i += 2){
                    var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
                    utf16Chars.push(String.fromCharCode(codePoint));
                }
                return utf16Chars.join("");
            },
            /**
	         * Converts a UTF-16 LE string to a word array.
	         *
	         * @param {string} utf16Str The UTF-16 LE string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
	         */ parse: function(utf16Str) {
                // Shortcut
                var utf16StrLength = utf16Str.length;
                // Convert
                var words = [];
                for(var i = 0; i < utf16StrLength; i++){
                    words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
                }
                return WordArray.create(words, utf16StrLength * 2);
            }
        };
        function swapEndian(word) {
            return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
        }
    })();
    return CryptoJS.enc.Utf16;
});


/***/ }),

/***/ 970:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(2036), __webpack_require__(9733));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        /**
	     * This key derivation function is meant to conform with EVP_BytesToKey.
	     * www.openssl.org/docs/crypto/EVP_BytesToKey.html
	     */ var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hash algorithm to use. Default: MD5
	         * @property {number} iterations The number of iterations to perform. Default: 1
	         */ cfg: Base.extend({
                keySize: 128 / 32,
                hasher: MD5,
                iterations: 1
            }),
            /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.EvpKDF.create();
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
	         */ init: function(cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
	         * Derives a key from a password.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */ compute: function(password, salt) {
                var block;
                // Shortcut
                var cfg = this.cfg;
                // Init hasher
                var hasher = cfg.hasher.create();
                // Initial values
                var derivedKey = WordArray.create();
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while(derivedKeyWords.length < keySize){
                    if (block) {
                        hasher.update(block);
                    }
                    block = hasher.update(password).finalize(salt);
                    hasher.reset();
                    // Iterations
                    for(var i = 1; i < iterations; i++){
                        block = hasher.finalize(block);
                        hasher.reset();
                    }
                    derivedKey.concat(block);
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
	     * Derives a key from a password.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.EvpKDF(password, salt);
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
	     */ C.EvpKDF = function(password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
        };
    })();
    return CryptoJS.EvpKDF;
});


/***/ }),

/***/ 2527:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function(undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
            /**
	         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
	         *
	         * @param {CipherParams} cipherParams The cipher params object.
	         *
	         * @return {string} The hexadecimally encoded string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
	         */ stringify: function(cipherParams) {
                return cipherParams.ciphertext.toString(Hex);
            },
            /**
	         * Converts a hexadecimally encoded ciphertext string to a cipher params object.
	         *
	         * @param {string} input The hexadecimally encoded string.
	         *
	         * @return {CipherParams} The cipher params object.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
	         */ parse: function(input) {
                var ciphertext = Hex.parse(input);
                return CipherParams.create({
                    ciphertext: ciphertext
                });
            }
        };
    })();
    return CryptoJS.format.Hex;
});


/***/ }),

/***/ 9733:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        /**
	     * HMAC algorithm.
	     */ var HMAC = C_algo.HMAC = Base.extend({
            /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */ init: function(hasher, key) {
                // Init hasher
                hasher = this._hasher = new hasher.init();
                // Convert string to WordArray, else assume WordArray already
                if (typeof key == "string") {
                    key = Utf8.parse(key);
                }
                // Shortcuts
                var hasherBlockSize = hasher.blockSize;
                var hasherBlockSizeBytes = hasherBlockSize * 4;
                // Allow arbitrary length keys
                if (key.sigBytes > hasherBlockSizeBytes) {
                    key = hasher.finalize(key);
                }
                // Clamp excess bits
                key.clamp();
                // Clone key for inner and outer pads
                var oKey = this._oKey = key.clone();
                var iKey = this._iKey = key.clone();
                // Shortcuts
                var oKeyWords = oKey.words;
                var iKeyWords = iKey.words;
                // XOR keys with pad constants
                for(var i = 0; i < hasherBlockSize; i++){
                    oKeyWords[i] ^= 0x5c5c5c5c;
                    iKeyWords[i] ^= 0x36363636;
                }
                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                // Set initial values
                this.reset();
            },
            /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */ reset: function() {
                // Shortcut
                var hasher = this._hasher;
                // Reset
                hasher.reset();
                hasher.update(this._iKey);
            },
            /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */ update: function(messageUpdate) {
                this._hasher.update(messageUpdate);
                // Chainable
                return this;
            },
            /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */ finalize: function(messageUpdate) {
                // Shortcut
                var hasher = this._hasher;
                // Compute HMAC
                var innerHash = hasher.finalize(messageUpdate);
                hasher.reset();
                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                return hmac;
            }
        });
    })();
});


/***/ }),

/***/ 9128:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(8204), __webpack_require__(1517), __webpack_require__(6191), __webpack_require__(1647), __webpack_require__(6380), __webpack_require__(6916), __webpack_require__(2036), __webpack_require__(5855), __webpack_require__(4987), __webpack_require__(1123), __webpack_require__(9060), __webpack_require__(1472), __webpack_require__(7107), __webpack_require__(9733), __webpack_require__(6056), __webpack_require__(970), __webpack_require__(9302), __webpack_require__(5143), __webpack_require__(3867), __webpack_require__(258), __webpack_require__(430), __webpack_require__(629), __webpack_require__(405), __webpack_require__(111), __webpack_require__(824), __webpack_require__(7170), __webpack_require__(3347), __webpack_require__(2527), __webpack_require__(2662), __webpack_require__(7918), __webpack_require__(5896), __webpack_require__(9643), __webpack_require__(1015), __webpack_require__(6001));
    } else {}
})(void 0, function(CryptoJS) {
    return CryptoJS;
});


/***/ }),

/***/ 1517:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Check if typed arrays are supported
        if (typeof ArrayBuffer != "function") {
            return;
        }
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        // Reference original init
        var superInit = WordArray.init;
        // Augment WordArray.init to handle typed arrays
        var subInit = WordArray.init = function(typedArray) {
            // Convert buffers to uint8
            if (typedArray instanceof ArrayBuffer) {
                typedArray = new Uint8Array(typedArray);
            }
            // Convert other array views to uint8
            if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
                typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            }
            // Handle Uint8Array
            if (typedArray instanceof Uint8Array) {
                // Shortcut
                var typedArrayByteLength = typedArray.byteLength;
                // Extract bytes
                var words = [];
                for(var i = 0; i < typedArrayByteLength; i++){
                    words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
                }
                // Initialize this word array
                superInit.call(this, words, typedArrayByteLength);
            } else {
                // Else call normal init
                superInit.apply(this, arguments);
            }
        };
        subInit.prototype = WordArray;
    })();
    return CryptoJS.lib.WordArray;
});


/***/ }),

/***/ 6916:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function(Math1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var T = [];
        // Compute constants
        (function() {
            for(var i = 0; i < 64; i++){
                T[i] = Math1.abs(Math1.sin(i + 1)) * 0x100000000 | 0;
            }
        })();
        /**
	     * MD5 hash algorithm.
	     */ var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function() {
                this._hash = new WordArray.init([
                    0x67452301,
                    0xefcdab89,
                    0x98badcfe,
                    0x10325476
                ]);
            },
            _doProcessBlock: function(M, offset) {
                // Swap endian
                for(var i = 0; i < 16; i++){
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
                }
                // Shortcuts
                var H = this._hash.words;
                var M_offset_0 = M[offset + 0];
                var M_offset_1 = M[offset + 1];
                var M_offset_2 = M[offset + 2];
                var M_offset_3 = M[offset + 3];
                var M_offset_4 = M[offset + 4];
                var M_offset_5 = M[offset + 5];
                var M_offset_6 = M[offset + 6];
                var M_offset_7 = M[offset + 7];
                var M_offset_8 = M[offset + 8];
                var M_offset_9 = M[offset + 9];
                var M_offset_10 = M[offset + 10];
                var M_offset_11 = M[offset + 11];
                var M_offset_12 = M[offset + 12];
                var M_offset_13 = M[offset + 13];
                var M_offset_14 = M[offset + 14];
                var M_offset_15 = M[offset + 15];
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                // Computation
                a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                a = II(a, b, c, d, M_offset_0, 6, T[48]);
                d = II(d, a, b, c, M_offset_7, 10, T[49]);
                c = II(c, d, a, b, M_offset_14, 15, T[50]);
                b = II(b, c, d, a, M_offset_5, 21, T[51]);
                a = II(a, b, c, d, M_offset_12, 6, T[52]);
                d = II(d, a, b, c, M_offset_3, 10, T[53]);
                c = II(c, d, a, b, M_offset_10, 15, T[54]);
                b = II(b, c, d, a, M_offset_1, 21, T[55]);
                a = II(a, b, c, d, M_offset_8, 6, T[56]);
                d = II(d, a, b, c, M_offset_15, 10, T[57]);
                c = II(c, d, a, b, M_offset_6, 15, T[58]);
                b = II(b, c, d, a, M_offset_13, 21, T[59]);
                a = II(a, b, c, d, M_offset_4, 6, T[60]);
                d = II(d, a, b, c, M_offset_11, 10, T[61]);
                c = II(c, d, a, b, M_offset_2, 15, T[62]);
                b = II(b, c, d, a, M_offset_9, 21, T[63]);
                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                var nBitsTotalH = Math1.floor(nBitsTotal / 0x100000000);
                var nBitsTotalL = nBitsTotal;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for(var i = 0; i < 4; i++){
                    // Shortcut
                    var H_i = H[i];
                    H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
                }
                // Return final computed hash
                return hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function FF(a, b, c, d, x, s, t) {
            var n = a + (b & c | ~b & d) + x + t;
            return (n << s | n >>> 32 - s) + b;
        }
        function GG(a, b, c, d, x, s, t) {
            var n = a + (b & d | c & ~d) + x + t;
            return (n << s | n >>> 32 - s) + b;
        }
        function HH(a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + x + t;
            return (n << s | n >>> 32 - s) + b;
        }
        function II(a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + x + t;
            return (n << s | n >>> 32 - s) + b;
        }
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */ C.MD5 = Hasher._createHelper(MD5);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */ C.HmacMD5 = Hasher._createHmacHelper(MD5);
    })(Math);
    return CryptoJS.MD5;
});


/***/ }),

/***/ 5143:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Cipher Feedback block mode.
	 */ CryptoJS.mode.CFB = function() {
        var CFB = CryptoJS.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
            processBlock: function(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // Remember this block to use with next block
                this._prevBlock = words.slice(offset, offset + blockSize);
            }
        });
        CFB.Decryptor = CFB.extend({
            processBlock: function(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                // Remember this block to use with next block
                var thisBlock = words.slice(offset, offset + blockSize);
                generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                // This block becomes the previous block
                this._prevBlock = thisBlock;
            }
        });
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
            var keystream;
            // Shortcut
            var iv = this._iv;
            // Generate keystream
            if (iv) {
                keystream = iv.slice(0);
                // Remove IV for subsequent blocks
                this._iv = undefined;
            } else {
                keystream = this._prevBlock;
            }
            cipher.encryptBlock(keystream, 0);
            // Encrypt
            for(var i = 0; i < blockSize; i++){
                words[offset + i] ^= keystream[i];
            }
        }
        return CFB;
    }();
    return CryptoJS.mode.CFB;
});


/***/ }),

/***/ 258:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /** @preserve
	 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
	 * derived from CryptoJS.mode.CTR
	 * Jan Hruby jhruby.web@gmail.com
	 */ CryptoJS.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        function incWord(word) {
            if ((word >> 24 & 0xff) === 0xff) {
                var b1 = word >> 16 & 0xff;
                var b2 = word >> 8 & 0xff;
                var b3 = word & 0xff;
                if (b1 === 0xff) {
                    b1 = 0;
                    if (b2 === 0xff) {
                        b2 = 0;
                        if (b3 === 0xff) {
                            b3 = 0;
                        } else {
                            ++b3;
                        }
                    } else {
                        ++b2;
                    }
                } else {
                    ++b1;
                }
                word = 0;
                word += b1 << 16;
                word += b2 << 8;
                word += b3;
            } else {
                word += 0x01 << 24;
            }
            return word;
        }
        function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
                // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
                counter[1] = incWord(counter[1]);
            }
            return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                incCounter(counter);
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for(var i = 0; i < blockSize; i++){
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
    }();
    return CryptoJS.mode.CTRGladman;
});


/***/ }),

/***/ 3867:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Counter block mode.
	 */ CryptoJS.mode.CTR = function() {
        var CTR = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
            processBlock: function(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var counter = this._counter;
                // Generate keystream
                if (iv) {
                    counter = this._counter = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                var keystream = counter.slice(0);
                cipher.encryptBlock(keystream, 0);
                // Increment counter
                counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
                // Encrypt
                for(var i = 0; i < blockSize; i++){
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
    }();
    return CryptoJS.mode.CTR;
});


/***/ }),

/***/ 629:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Electronic Codebook block mode.
	 */ CryptoJS.mode.ECB = function() {
        var ECB = CryptoJS.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
            processBlock: function(words, offset) {
                this._cipher.encryptBlock(words, offset);
            }
        });
        ECB.Decryptor = ECB.extend({
            processBlock: function(words, offset) {
                this._cipher.decryptBlock(words, offset);
            }
        });
        return ECB;
    }();
    return CryptoJS.mode.ECB;
});


/***/ }),

/***/ 430:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Output Feedback block mode.
	 */ CryptoJS.mode.OFB = function() {
        var OFB = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function(words, offset) {
                // Shortcuts
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var iv = this._iv;
                var keystream = this._keystream;
                // Generate keystream
                if (iv) {
                    keystream = this._keystream = iv.slice(0);
                    // Remove IV for subsequent blocks
                    this._iv = undefined;
                }
                cipher.encryptBlock(keystream, 0);
                // Encrypt
                for(var i = 0; i < blockSize; i++){
                    words[offset + i] ^= keystream[i];
                }
            }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
    }();
    return CryptoJS.mode.OFB;
});


/***/ }),

/***/ 405:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * ANSI X.923 padding strategy.
	 */ CryptoJS.pad.AnsiX923 = {
        pad: function(data, blockSize) {
            // Shortcuts
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
            // Compute last byte position
            var lastBytePos = dataSigBytes + nPaddingBytes - 1;
            // Pad
            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
            data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    return CryptoJS.pad.Ansix923;
});


/***/ }),

/***/ 111:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * ISO 10126 padding strategy.
	 */ CryptoJS.pad.Iso10126 = {
        pad: function(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Count padding bytes
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            // Pad
            data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([
                nPaddingBytes << 24
            ], 1));
        },
        unpad: function(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;
            // Remove padding
            data.sigBytes -= nPaddingBytes;
        }
    };
    return CryptoJS.pad.Iso10126;
});


/***/ }),

/***/ 824:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * ISO/IEC 9797-1 Padding Method 2.
	 */ CryptoJS.pad.Iso97971 = {
        pad: function(data, blockSize) {
            // Add 0x80 byte
            data.concat(CryptoJS.lib.WordArray.create([
                0x80000000
            ], 1));
            // Zero pad the rest
            CryptoJS.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
            // Remove zero padding
            CryptoJS.pad.ZeroPadding.unpad(data);
            // Remove one more byte -- the 0x80 byte
            data.sigBytes--;
        }
    };
    return CryptoJS.pad.Iso97971;
});


/***/ }),

/***/ 3347:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * A noop padding strategy.
	 */ CryptoJS.pad.NoPadding = {
        pad: function() {},
        unpad: function() {}
    };
    return CryptoJS.pad.NoPadding;
});


/***/ }),

/***/ 7170:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    /**
	 * Zero padding strategy.
	 */ CryptoJS.pad.ZeroPadding = {
        pad: function(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4;
            // Pad
            data.clamp();
            data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
            // Shortcut
            var dataWords = data.words;
            // Unpad
            var i = data.sigBytes - 1;
            for(var i = data.sigBytes - 1; i >= 0; i--){
                if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff) {
                    data.sigBytes = i + 1;
                    break;
                }
            }
        }
    };
    return CryptoJS.pad.ZeroPadding;
});


/***/ }),

/***/ 6056:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(5855), __webpack_require__(9733));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var HMAC = C_algo.HMAC;
        /**
	     * Password-Based Key Derivation Function 2 algorithm.
	     */ var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            /**
	         * Configuration options.
	         *
	         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
	         * @property {Hasher} hasher The hasher to use. Default: SHA256
	         * @property {number} iterations The number of iterations to perform. Default: 250000
	         */ cfg: Base.extend({
                keySize: 128 / 32,
                hasher: SHA256,
                iterations: 250000
            }),
            /**
	         * Initializes a newly created key derivation function.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for the derivation.
	         *
	         * @example
	         *
	         *     var kdf = CryptoJS.algo.PBKDF2.create();
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
	         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
	         */ init: function(cfg) {
                this.cfg = this.cfg.extend(cfg);
            },
            /**
	         * Computes the Password-Based Key Derivation Function 2.
	         *
	         * @param {WordArray|string} password The password.
	         * @param {WordArray|string} salt A salt.
	         *
	         * @return {WordArray} The derived key.
	         *
	         * @example
	         *
	         *     var key = kdf.compute(password, salt);
	         */ compute: function(password, salt) {
                // Shortcut
                var cfg = this.cfg;
                // Init HMAC
                var hmac = HMAC.create(cfg.hasher, password);
                // Initial values
                var derivedKey = WordArray.create();
                var blockIndex = WordArray.create([
                    0x00000001
                ]);
                // Shortcuts
                var derivedKeyWords = derivedKey.words;
                var blockIndexWords = blockIndex.words;
                var keySize = cfg.keySize;
                var iterations = cfg.iterations;
                // Generate key
                while(derivedKeyWords.length < keySize){
                    var block = hmac.update(salt).finalize(blockIndex);
                    hmac.reset();
                    // Shortcuts
                    var blockWords = block.words;
                    var blockWordsLength = blockWords.length;
                    // Iterations
                    var intermediate = block;
                    for(var i = 1; i < iterations; i++){
                        intermediate = hmac.finalize(intermediate);
                        hmac.reset();
                        // Shortcut
                        var intermediateWords = intermediate.words;
                        // XOR intermediate with block
                        for(var j = 0; j < blockWordsLength; j++){
                            blockWords[j] ^= intermediateWords[j];
                        }
                    }
                    derivedKey.concat(block);
                    blockIndexWords[0]++;
                }
                derivedKey.sigBytes = keySize * 4;
                return derivedKey;
            }
        });
        /**
	     * Computes the Password-Based Key Derivation Function 2.
	     *
	     * @param {WordArray|string} password The password.
	     * @param {WordArray|string} salt A salt.
	     * @param {Object} cfg (Optional) The configuration options to use for this computation.
	     *
	     * @return {WordArray} The derived key.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var key = CryptoJS.PBKDF2(password, salt);
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
	     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
	     */ C.PBKDF2 = function(password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
        };
    })();
    return CryptoJS.PBKDF2;
});


/***/ }),

/***/ 1015:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
	     * Rabbit stream cipher algorithm.
	     *
	     * This is a legacy version that neglected to convert the key to little-endian.
	     * This error doesn't affect the cipher's security,
	     * but it does affect its compatibility with other implementations.
	     */ var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function() {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Generate initial state values
                var X = this._X = [
                    K[0],
                    K[3] << 16 | K[2] >>> 16,
                    K[1],
                    K[0] << 16 | K[3] >>> 16,
                    K[2],
                    K[1] << 16 | K[0] >>> 16,
                    K[3],
                    K[2] << 16 | K[1] >>> 16
                ];
                // Generate initial counter values
                var C = this._C = [
                    K[2] << 16 | K[2] >>> 16,
                    K[0] & 0xffff0000 | K[1] & 0x0000ffff,
                    K[3] << 16 | K[3] >>> 16,
                    K[1] & 0xffff0000 | K[2] & 0x0000ffff,
                    K[0] << 16 | K[0] >>> 16,
                    K[2] & 0xffff0000 | K[3] & 0x0000ffff,
                    K[1] << 16 | K[1] >>> 16,
                    K[3] & 0xffff0000 | K[0] & 0x0000ffff
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for(var i = 0; i < 4; i++){
                    nextState.call(this);
                }
                // Modify the counters
                for(var i = 0; i < 8; i++){
                    C[i] ^= X[i + 4 & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                    var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                    var i1 = i0 >>> 16 | i2 & 0xffff0000;
                    var i3 = i2 << 16 | i0 & 0x0000ffff;
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for(var i = 0; i < 4; i++){
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function(M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                for(var i = 0; i < 4; i++){
                    // Swap endian
                    S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for(var i = 0; i < 8; i++){
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = C[0] + 0x4d34d34d + this._b | 0;
            C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            // Calculate the g-values
            for(var i = 0; i < 8; i++){
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
	     */ C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
    })();
    return CryptoJS.RabbitLegacy;
});


/***/ }),

/***/ 9643:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        // Reusable objects
        var S = [];
        var C_ = [];
        var G = [];
        /**
	     * Rabbit stream cipher algorithm
	     */ var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function() {
                // Shortcuts
                var K = this._key.words;
                var iv = this.cfg.iv;
                // Swap endian
                for(var i = 0; i < 4; i++){
                    K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
                }
                // Generate initial state values
                var X = this._X = [
                    K[0],
                    K[3] << 16 | K[2] >>> 16,
                    K[1],
                    K[0] << 16 | K[3] >>> 16,
                    K[2],
                    K[1] << 16 | K[0] >>> 16,
                    K[3],
                    K[2] << 16 | K[1] >>> 16
                ];
                // Generate initial counter values
                var C = this._C = [
                    K[2] << 16 | K[2] >>> 16,
                    K[0] & 0xffff0000 | K[1] & 0x0000ffff,
                    K[3] << 16 | K[3] >>> 16,
                    K[1] & 0xffff0000 | K[2] & 0x0000ffff,
                    K[0] << 16 | K[0] >>> 16,
                    K[2] & 0xffff0000 | K[3] & 0x0000ffff,
                    K[1] << 16 | K[1] >>> 16,
                    K[3] & 0xffff0000 | K[0] & 0x0000ffff
                ];
                // Carry bit
                this._b = 0;
                // Iterate the system four times
                for(var i = 0; i < 4; i++){
                    nextState.call(this);
                }
                // Modify the counters
                for(var i = 0; i < 8; i++){
                    C[i] ^= X[i + 4 & 7];
                }
                // IV setup
                if (iv) {
                    // Shortcuts
                    var IV = iv.words;
                    var IV_0 = IV[0];
                    var IV_1 = IV[1];
                    // Generate four subvectors
                    var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
                    var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
                    var i1 = i0 >>> 16 | i2 & 0xffff0000;
                    var i3 = i2 << 16 | i0 & 0x0000ffff;
                    // Modify counter values
                    C[0] ^= i0;
                    C[1] ^= i1;
                    C[2] ^= i2;
                    C[3] ^= i3;
                    C[4] ^= i0;
                    C[5] ^= i1;
                    C[6] ^= i2;
                    C[7] ^= i3;
                    // Iterate the system four times
                    for(var i = 0; i < 4; i++){
                        nextState.call(this);
                    }
                }
            },
            _doProcessBlock: function(M, offset) {
                // Shortcut
                var X = this._X;
                // Iterate the system
                nextState.call(this);
                // Generate four keystream words
                S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                for(var i = 0; i < 4; i++){
                    // Swap endian
                    S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;
                    // Encrypt
                    M[offset + i] ^= S[i];
                }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
        });
        function nextState() {
            // Shortcuts
            var X = this._X;
            var C = this._C;
            // Save old counter values
            for(var i = 0; i < 8; i++){
                C_[i] = C[i];
            }
            // Calculate new counter values
            C[0] = C[0] + 0x4d34d34d + this._b | 0;
            C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            // Calculate the g-values
            for(var i = 0; i < 8; i++){
                var gx = X[i] + C[i];
                // Construct high and low argument for squaring
                var ga = gx & 0xffff;
                var gb = gx >>> 16;
                // Calculate high and low result of squaring
                var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);
                // High XOR low
                G[i] = gh ^ gl;
            }
            // Calculate new state values
            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
	     */ C.Rabbit = StreamCipher._createHelper(Rabbit);
    })();
    return CryptoJS.Rabbit;
});


/***/ }),

/***/ 5896:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        /**
	     * RC4 stream cipher algorithm.
	     */ var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function() {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                var keySigBytes = key.sigBytes;
                // Init sbox
                var S = this._S = [];
                for(var i = 0; i < 256; i++){
                    S[i] = i;
                }
                // Key setup
                for(var i = 0, j = 0; i < 256; i++){
                    var keyByteIndex = i % keySigBytes;
                    var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;
                    j = (j + S[i] + keyByte) % 256;
                    // Swap
                    var t = S[i];
                    S[i] = S[j];
                    S[j] = t;
                }
                // Counters
                this._i = this._j = 0;
            },
            _doProcessBlock: function(M, offset) {
                M[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
        });
        function generateKeystreamWord() {
            // Shortcuts
            var S = this._S;
            var i = this._i;
            var j = this._j;
            // Generate keystream word
            var keystreamWord = 0;
            for(var n = 0; n < 4; n++){
                i = (i + 1) % 256;
                j = (j + S[i]) % 256;
                // Swap
                var t = S[i];
                S[i] = S[j];
                S[j] = t;
                keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
            }
            // Update counters
            this._i = i;
            this._j = j;
            return keystreamWord;
        }
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
	     */ C.RC4 = StreamCipher._createHelper(RC4);
        /**
	     * Modified RC4 stream cipher algorithm.
	     */ var RC4Drop = C_algo.RC4Drop = RC4.extend({
            /**
	         * Configuration options.
	         *
	         * @property {number} drop The number of keystream words to drop. Default 192
	         */ cfg: RC4.cfg.extend({
                drop: 192
            }),
            _doReset: function() {
                RC4._doReset.call(this);
                // Drop
                for(var i = this.cfg.drop; i > 0; i--){
                    generateKeystreamWord.call(this);
                }
            }
        });
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
	     */ C.RC4Drop = StreamCipher._createHelper(RC4Drop);
    })();
    return CryptoJS.RC4;
});


/***/ }),

/***/ 7107:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    /** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/ (function(Math1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var _zl = WordArray.create([
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            7,
            4,
            13,
            1,
            10,
            6,
            15,
            3,
            12,
            0,
            9,
            5,
            2,
            14,
            11,
            8,
            3,
            10,
            14,
            4,
            9,
            15,
            8,
            1,
            2,
            7,
            0,
            6,
            13,
            11,
            5,
            12,
            1,
            9,
            11,
            10,
            0,
            8,
            12,
            4,
            13,
            3,
            7,
            15,
            14,
            5,
            6,
            2,
            4,
            0,
            5,
            9,
            7,
            12,
            2,
            10,
            14,
            1,
            3,
            8,
            11,
            6,
            15,
            13
        ]);
        var _zr = WordArray.create([
            5,
            14,
            7,
            0,
            9,
            2,
            11,
            4,
            13,
            6,
            15,
            8,
            1,
            10,
            3,
            12,
            6,
            11,
            3,
            7,
            0,
            13,
            5,
            10,
            14,
            15,
            8,
            12,
            4,
            9,
            1,
            2,
            15,
            5,
            1,
            3,
            7,
            14,
            6,
            9,
            11,
            8,
            12,
            2,
            10,
            0,
            4,
            13,
            8,
            6,
            4,
            1,
            3,
            11,
            15,
            0,
            5,
            12,
            2,
            13,
            9,
            7,
            10,
            14,
            12,
            15,
            10,
            4,
            1,
            5,
            8,
            7,
            6,
            2,
            13,
            14,
            0,
            3,
            9,
            11
        ]);
        var _sl = WordArray.create([
            11,
            14,
            15,
            12,
            5,
            8,
            7,
            9,
            11,
            13,
            14,
            15,
            6,
            7,
            9,
            8,
            7,
            6,
            8,
            13,
            11,
            9,
            7,
            15,
            7,
            12,
            15,
            9,
            11,
            7,
            13,
            12,
            11,
            13,
            6,
            7,
            14,
            9,
            13,
            15,
            14,
            8,
            13,
            6,
            5,
            12,
            7,
            5,
            11,
            12,
            14,
            15,
            14,
            15,
            9,
            8,
            9,
            14,
            5,
            6,
            8,
            6,
            5,
            12,
            9,
            15,
            5,
            11,
            6,
            8,
            13,
            12,
            5,
            12,
            13,
            14,
            11,
            8,
            5,
            6
        ]);
        var _sr = WordArray.create([
            8,
            9,
            9,
            11,
            13,
            15,
            15,
            5,
            7,
            7,
            8,
            11,
            14,
            14,
            12,
            6,
            9,
            13,
            15,
            7,
            12,
            8,
            9,
            11,
            7,
            7,
            12,
            7,
            6,
            15,
            13,
            11,
            9,
            7,
            15,
            11,
            8,
            6,
            6,
            14,
            12,
            13,
            5,
            14,
            13,
            13,
            7,
            5,
            15,
            5,
            8,
            11,
            14,
            14,
            6,
            14,
            6,
            9,
            12,
            9,
            12,
            5,
            15,
            8,
            8,
            5,
            12,
            9,
            12,
            5,
            14,
            6,
            8,
            13,
            6,
            5,
            15,
            13,
            11,
            11
        ]);
        var _hl = WordArray.create([
            0x00000000,
            0x5A827999,
            0x6ED9EBA1,
            0x8F1BBCDC,
            0xA953FD4E
        ]);
        var _hr = WordArray.create([
            0x50A28BE6,
            0x5C4DD124,
            0x6D703EF3,
            0x7A6D76E9,
            0x00000000
        ]);
        /**
	     * RIPEMD160 hash algorithm.
	     */ var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function() {
                this._hash = WordArray.create([
                    0x67452301,
                    0xEFCDAB89,
                    0x98BADCFE,
                    0x10325476,
                    0xC3D2E1F0
                ]);
            },
            _doProcessBlock: function(M, offset) {
                // Swap endian
                for(var i = 0; i < 16; i++){
                    // Shortcuts
                    var offset_i = offset + i;
                    var M_offset_i = M[offset_i];
                    // Swap
                    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
                }
                // Shortcut
                var H = this._hash.words;
                var hl = _hl.words;
                var hr = _hr.words;
                var zl = _zl.words;
                var zr = _zr.words;
                var sl = _sl.words;
                var sr = _sr.words;
                // Working variables
                var al, bl, cl, dl, el;
                var ar, br, cr, dr, er;
                ar = al = H[0];
                br = bl = H[1];
                cr = cl = H[2];
                dr = dl = H[3];
                er = el = H[4];
                // Computation
                var t;
                for(var i = 0; i < 80; i += 1){
                    t = al + M[offset + zl[i]] | 0;
                    if (i < 16) {
                        t += f1(bl, cl, dl) + hl[0];
                    } else if (i < 32) {
                        t += f2(bl, cl, dl) + hl[1];
                    } else if (i < 48) {
                        t += f3(bl, cl, dl) + hl[2];
                    } else if (i < 64) {
                        t += f4(bl, cl, dl) + hl[3];
                    } else {
                        t += f5(bl, cl, dl) + hl[4];
                    }
                    t = t | 0;
                    t = rotl(t, sl[i]);
                    t = t + el | 0;
                    al = el;
                    el = dl;
                    dl = rotl(cl, 10);
                    cl = bl;
                    bl = t;
                    t = ar + M[offset + zr[i]] | 0;
                    if (i < 16) {
                        t += f5(br, cr, dr) + hr[0];
                    } else if (i < 32) {
                        t += f4(br, cr, dr) + hr[1];
                    } else if (i < 48) {
                        t += f3(br, cr, dr) + hr[2];
                    } else if (i < 64) {
                        t += f2(br, cr, dr) + hr[3];
                    } else {
                        t += f1(br, cr, dr) + hr[4];
                    }
                    t = t | 0;
                    t = rotl(t, sr[i]);
                    t = t + er | 0;
                    ar = er;
                    er = dr;
                    dr = rotl(cr, 10);
                    cr = br;
                    br = t;
                }
                // Intermediate hash value
                t = H[1] + cl + dr | 0;
                H[1] = H[2] + dl + er | 0;
                H[2] = H[3] + el + ar | 0;
                H[3] = H[4] + al + br | 0;
                H[4] = H[0] + bl + cr | 0;
                H[0] = t;
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
                data.sigBytes = (dataWords.length + 1) * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var hash = this._hash;
                var H = hash.words;
                // Swap endian
                for(var i = 0; i < 5; i++){
                    // Shortcut
                    var H_i = H[i];
                    // Swap
                    H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
                }
                // Return final computed hash
                return hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        function f1(x, y, z) {
            return x ^ y ^ z;
        }
        function f2(x, y, z) {
            return x & y | ~x & z;
        }
        function f3(x, y, z) {
            return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
            return x & z | y & ~z;
        }
        function f5(x, y, z) {
            return x ^ (y | ~z);
        }
        function rotl(x, n) {
            return x << n | x >>> 32 - n;
        }
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.RIPEMD160('message');
	     *     var hash = CryptoJS.RIPEMD160(wordArray);
	     */ C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
	     */ C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
    })(Math);
    return CryptoJS.RIPEMD160;
});


/***/ }),

/***/ 2036:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Reusable object
        var W = [];
        /**
	     * SHA-1 hash algorithm.
	     */ var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function() {
                this._hash = new WordArray.init([
                    0x67452301,
                    0xefcdab89,
                    0x98badcfe,
                    0x10325476,
                    0xc3d2e1f0
                ]);
            },
            _doProcessBlock: function(M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                // Computation
                for(var i = 0; i < 80; i++){
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    } else {
                        var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                        W[i] = n << 1 | n >>> 31;
                    }
                    var t = (a << 5 | a >>> 27) + e + W[i];
                    if (i < 20) {
                        t += (b & c | ~b & d) + 0x5a827999;
                    } else if (i < 40) {
                        t += (b ^ c ^ d) + 0x6ed9eba1;
                    } else if (i < 60) {
                        t += (b & c | b & d | c & d) - 0x70e44324;
                    } else /* if (i < 80) */ {
                        t += (b ^ c ^ d) - 0x359d3e2a;
                    }
                    e = d;
                    d = c;
                    c = b << 30 | b >>> 2;
                    b = a;
                    a = t;
                }
                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
                H[4] = H[4] + e | 0;
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA1('message');
	     *     var hash = CryptoJS.SHA1(wordArray);
	     */ C.SHA1 = Hasher._createHelper(SHA1);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA1(message, key);
	     */ C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
    })();
    return CryptoJS.SHA1;
});


/***/ }),

/***/ 4987:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(5855));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        /**
	     * SHA-224 hash algorithm.
	     */ var SHA224 = C_algo.SHA224 = SHA256.extend({
            _doReset: function() {
                this._hash = new WordArray.init([
                    0xc1059ed8,
                    0x367cd507,
                    0x3070dd17,
                    0xf70e5939,
                    0xffc00b31,
                    0x68581511,
                    0x64f98fa7,
                    0xbefa4fa4
                ]);
            },
            _doFinalize: function() {
                var hash = SHA256._doFinalize.call(this);
                hash.sigBytes -= 4;
                return hash;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA224('message');
	     *     var hash = CryptoJS.SHA224(wordArray);
	     */ C.SHA224 = SHA256._createHelper(SHA224);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA224(message, key);
	     */ C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
    })();
    return CryptoJS.SHA224;
});


/***/ }),

/***/ 5855:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function(Math1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Initialization and round constants tables
        var H = [];
        var K = [];
        // Compute constants
        (function() {
            function isPrime(n) {
                var sqrtN = Math1.sqrt(n);
                for(var factor = 2; factor <= sqrtN; factor++){
                    if (!(n % factor)) {
                        return false;
                    }
                }
                return true;
            }
            function getFractionalBits(n) {
                return (n - (n | 0)) * 0x100000000 | 0;
            }
            var n = 2;
            var nPrime = 0;
            while(nPrime < 64){
                if (isPrime(n)) {
                    if (nPrime < 8) {
                        H[nPrime] = getFractionalBits(Math1.pow(n, 1 / 2));
                    }
                    K[nPrime] = getFractionalBits(Math1.pow(n, 1 / 3));
                    nPrime++;
                }
                n++;
            }
        })();
        // Reusable object
        var W = [];
        /**
	     * SHA-256 hash algorithm.
	     */ var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
                this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function(M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                var f = H[5];
                var g = H[6];
                var h = H[7];
                // Computation
                for(var i = 0; i < 64; i++){
                    if (i < 16) {
                        W[i] = M[offset + i] | 0;
                    } else {
                        var gamma0x = W[i - 15];
                        var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                        var gamma1x = W[i - 2];
                        var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                    }
                    var ch = e & f ^ ~e & g;
                    var maj = a & b ^ a & c ^ b & c;
                    var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                    var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                    var t1 = h + sigma1 + ch + K[i] + W[i];
                    var t2 = sigma0 + maj;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
                H[4] = H[4] + e | 0;
                H[5] = H[5] + f | 0;
                H[6] = H[6] + g | 0;
                H[7] = H[7] + h | 0;
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math1.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */ C.SHA256 = Hasher._createHelper(SHA256);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */ C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    })(Math);
    return CryptoJS.SHA256;
});


/***/ }),

/***/ 1472:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(8204));
    } else {}
})(void 0, function(CryptoJS) {
    (function(Math1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        // Constants tables
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        // Compute Constants
        (function() {
            // Compute rho offset constants
            var x = 1, y = 0;
            for(var t = 0; t < 24; t++){
                RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
                var newX = y % 5;
                var newY = (2 * x + 3 * y) % 5;
                x = newX;
                y = newY;
            }
            // Compute pi index constants
            for(var x = 0; x < 5; x++){
                for(var y = 0; y < 5; y++){
                    PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
                }
            }
            // Compute round constants
            var LFSR = 0x01;
            for(var i = 0; i < 24; i++){
                var roundConstantMsw = 0;
                var roundConstantLsw = 0;
                for(var j = 0; j < 7; j++){
                    if (LFSR & 0x01) {
                        var bitPosition = (1 << j) - 1;
                        if (bitPosition < 32) {
                            roundConstantLsw ^= 1 << bitPosition;
                        } else /* if (bitPosition >= 32) */ {
                            roundConstantMsw ^= 1 << bitPosition - 32;
                        }
                    }
                    // Compute next LFSR
                    if (LFSR & 0x80) {
                        // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
                        LFSR = LFSR << 1 ^ 0x71;
                    } else {
                        LFSR <<= 1;
                    }
                }
                ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
        })();
        // Reusable objects for temporary values
        var T = [];
        (function() {
            for(var i = 0; i < 25; i++){
                T[i] = X64Word.create();
            }
        })();
        /**
	     * SHA-3 hash algorithm.
	     */ var SHA3 = C_algo.SHA3 = Hasher.extend({
            /**
	         * Configuration options.
	         *
	         * @property {number} outputLength
	         *   The desired number of bits in the output hash.
	         *   Only values permitted are: 224, 256, 384, 512.
	         *   Default: 512
	         */ cfg: Hasher.cfg.extend({
                outputLength: 512
            }),
            _doReset: function() {
                var state = this._state = [];
                for(var i = 0; i < 25; i++){
                    state[i] = new X64Word.init();
                }
                this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function(M, offset) {
                // Shortcuts
                var state = this._state;
                var nBlockSizeLanes = this.blockSize / 2;
                // Absorb
                for(var i = 0; i < nBlockSizeLanes; i++){
                    // Shortcuts
                    var M2i = M[offset + 2 * i];
                    var M2i1 = M[offset + 2 * i + 1];
                    // Swap endian
                    M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
                    M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;
                    // Absorb message into state
                    var lane = state[i];
                    lane.high ^= M2i1;
                    lane.low ^= M2i;
                }
                // Rounds
                for(var round = 0; round < 24; round++){
                    // Theta
                    for(var x = 0; x < 5; x++){
                        // Mix column lanes
                        var tMsw = 0, tLsw = 0;
                        for(var y = 0; y < 5; y++){
                            var lane = state[x + 5 * y];
                            tMsw ^= lane.high;
                            tLsw ^= lane.low;
                        }
                        // Temporary values
                        var Tx = T[x];
                        Tx.high = tMsw;
                        Tx.low = tLsw;
                    }
                    for(var x = 0; x < 5; x++){
                        // Shortcuts
                        var Tx4 = T[(x + 4) % 5];
                        var Tx1 = T[(x + 1) % 5];
                        var Tx1Msw = Tx1.high;
                        var Tx1Lsw = Tx1.low;
                        // Mix surrounding columns
                        var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                        var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                        for(var y = 0; y < 5; y++){
                            var lane = state[x + 5 * y];
                            lane.high ^= tMsw;
                            lane.low ^= tLsw;
                        }
                    }
                    // Rho Pi
                    for(var laneIndex = 1; laneIndex < 25; laneIndex++){
                        var tMsw;
                        var tLsw;
                        // Shortcuts
                        var lane = state[laneIndex];
                        var laneMsw = lane.high;
                        var laneLsw = lane.low;
                        var rhoOffset = RHO_OFFSETS[laneIndex];
                        // Rotate lanes
                        if (rhoOffset < 32) {
                            tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                            tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                        } else /* if (rhoOffset >= 32) */ {
                            tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                            tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                        }
                        // Transpose lanes
                        var TPiLane = T[PI_INDEXES[laneIndex]];
                        TPiLane.high = tMsw;
                        TPiLane.low = tLsw;
                    }
                    // Rho pi at x = y = 0
                    var T0 = T[0];
                    var state0 = state[0];
                    T0.high = state0.high;
                    T0.low = state0.low;
                    // Chi
                    for(var x = 0; x < 5; x++){
                        for(var y = 0; y < 5; y++){
                            // Shortcuts
                            var laneIndex = x + 5 * y;
                            var lane = state[laneIndex];
                            var TLane = T[laneIndex];
                            var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                            var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                            // Mix rows
                            lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                            lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                        }
                    }
                    // Iota
                    var lane = state[0];
                    var roundConstant = ROUND_CONSTANTS[round];
                    lane.high ^= roundConstant.high;
                    lane.low ^= roundConstant.low;
                }
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                var blockSizeBits = this.blockSize * 32;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
                dataWords[(Math1.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Shortcuts
                var state = this._state;
                var outputLengthBytes = this.cfg.outputLength / 8;
                var outputLengthLanes = outputLengthBytes / 8;
                // Squeeze
                var hashWords = [];
                for(var i = 0; i < outputLengthLanes; i++){
                    // Shortcuts
                    var lane = state[i];
                    var laneMsw = lane.high;
                    var laneLsw = lane.low;
                    // Swap endian
                    laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
                    laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;
                    // Squeeze state to retrieve hash
                    hashWords.push(laneLsw);
                    hashWords.push(laneMsw);
                }
                // Return final computed hash
                return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                var state = clone._state = this._state.slice(0);
                for(var i = 0; i < 25; i++){
                    state[i] = state[i].clone();
                }
                return clone;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA3('message');
	     *     var hash = CryptoJS.SHA3(wordArray);
	     */ C.SHA3 = Hasher._createHelper(SHA3);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA3(message, key);
	     */ C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
    })(Math);
    return CryptoJS.SHA3;
});


/***/ }),

/***/ 9060:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(8204), __webpack_require__(1123));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        /**
	     * SHA-384 hash algorithm.
	     */ var SHA384 = C_algo.SHA384 = SHA512.extend({
            _doReset: function() {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0xcbbb9d5d, 0xc1059ed8),
                    new X64Word.init(0x629a292a, 0x367cd507),
                    new X64Word.init(0x9159015a, 0x3070dd17),
                    new X64Word.init(0x152fecd8, 0xf70e5939),
                    new X64Word.init(0x67332667, 0xffc00b31),
                    new X64Word.init(0x8eb44a87, 0x68581511),
                    new X64Word.init(0xdb0c2e0d, 0x64f98fa7),
                    new X64Word.init(0x47b5481d, 0xbefa4fa4)
                ]);
            },
            _doFinalize: function() {
                var hash = SHA512._doFinalize.call(this);
                hash.sigBytes -= 16;
                return hash;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA384('message');
	     *     var hash = CryptoJS.SHA384(wordArray);
	     */ C.SHA384 = SHA512._createHelper(SHA384);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA384(message, key);
	     */ C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
    })();
    return CryptoJS.SHA384;
});


/***/ }),

/***/ 1123:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(8204));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
        }
        // Constants
        var K = [
            X64Word_create(0x428a2f98, 0xd728ae22),
            X64Word_create(0x71374491, 0x23ef65cd),
            X64Word_create(0xb5c0fbcf, 0xec4d3b2f),
            X64Word_create(0xe9b5dba5, 0x8189dbbc),
            X64Word_create(0x3956c25b, 0xf348b538),
            X64Word_create(0x59f111f1, 0xb605d019),
            X64Word_create(0x923f82a4, 0xaf194f9b),
            X64Word_create(0xab1c5ed5, 0xda6d8118),
            X64Word_create(0xd807aa98, 0xa3030242),
            X64Word_create(0x12835b01, 0x45706fbe),
            X64Word_create(0x243185be, 0x4ee4b28c),
            X64Word_create(0x550c7dc3, 0xd5ffb4e2),
            X64Word_create(0x72be5d74, 0xf27b896f),
            X64Word_create(0x80deb1fe, 0x3b1696b1),
            X64Word_create(0x9bdc06a7, 0x25c71235),
            X64Word_create(0xc19bf174, 0xcf692694),
            X64Word_create(0xe49b69c1, 0x9ef14ad2),
            X64Word_create(0xefbe4786, 0x384f25e3),
            X64Word_create(0x0fc19dc6, 0x8b8cd5b5),
            X64Word_create(0x240ca1cc, 0x77ac9c65),
            X64Word_create(0x2de92c6f, 0x592b0275),
            X64Word_create(0x4a7484aa, 0x6ea6e483),
            X64Word_create(0x5cb0a9dc, 0xbd41fbd4),
            X64Word_create(0x76f988da, 0x831153b5),
            X64Word_create(0x983e5152, 0xee66dfab),
            X64Word_create(0xa831c66d, 0x2db43210),
            X64Word_create(0xb00327c8, 0x98fb213f),
            X64Word_create(0xbf597fc7, 0xbeef0ee4),
            X64Word_create(0xc6e00bf3, 0x3da88fc2),
            X64Word_create(0xd5a79147, 0x930aa725),
            X64Word_create(0x06ca6351, 0xe003826f),
            X64Word_create(0x14292967, 0x0a0e6e70),
            X64Word_create(0x27b70a85, 0x46d22ffc),
            X64Word_create(0x2e1b2138, 0x5c26c926),
            X64Word_create(0x4d2c6dfc, 0x5ac42aed),
            X64Word_create(0x53380d13, 0x9d95b3df),
            X64Word_create(0x650a7354, 0x8baf63de),
            X64Word_create(0x766a0abb, 0x3c77b2a8),
            X64Word_create(0x81c2c92e, 0x47edaee6),
            X64Word_create(0x92722c85, 0x1482353b),
            X64Word_create(0xa2bfe8a1, 0x4cf10364),
            X64Word_create(0xa81a664b, 0xbc423001),
            X64Word_create(0xc24b8b70, 0xd0f89791),
            X64Word_create(0xc76c51a3, 0x0654be30),
            X64Word_create(0xd192e819, 0xd6ef5218),
            X64Word_create(0xd6990624, 0x5565a910),
            X64Word_create(0xf40e3585, 0x5771202a),
            X64Word_create(0x106aa070, 0x32bbd1b8),
            X64Word_create(0x19a4c116, 0xb8d2d0c8),
            X64Word_create(0x1e376c08, 0x5141ab53),
            X64Word_create(0x2748774c, 0xdf8eeb99),
            X64Word_create(0x34b0bcb5, 0xe19b48a8),
            X64Word_create(0x391c0cb3, 0xc5c95a63),
            X64Word_create(0x4ed8aa4a, 0xe3418acb),
            X64Word_create(0x5b9cca4f, 0x7763e373),
            X64Word_create(0x682e6ff3, 0xd6b2b8a3),
            X64Word_create(0x748f82ee, 0x5defb2fc),
            X64Word_create(0x78a5636f, 0x43172f60),
            X64Word_create(0x84c87814, 0xa1f0ab72),
            X64Word_create(0x8cc70208, 0x1a6439ec),
            X64Word_create(0x90befffa, 0x23631e28),
            X64Word_create(0xa4506ceb, 0xde82bde9),
            X64Word_create(0xbef9a3f7, 0xb2c67915),
            X64Word_create(0xc67178f2, 0xe372532b),
            X64Word_create(0xca273ece, 0xea26619c),
            X64Word_create(0xd186b8c7, 0x21c0c207),
            X64Word_create(0xeada7dd6, 0xcde0eb1e),
            X64Word_create(0xf57d4f7f, 0xee6ed178),
            X64Word_create(0x06f067aa, 0x72176fba),
            X64Word_create(0x0a637dc5, 0xa2c898a6),
            X64Word_create(0x113f9804, 0xbef90dae),
            X64Word_create(0x1b710b35, 0x131c471b),
            X64Word_create(0x28db77f5, 0x23047d84),
            X64Word_create(0x32caab7b, 0x40c72493),
            X64Word_create(0x3c9ebe0a, 0x15c9bebc),
            X64Word_create(0x431d67c4, 0x9c100d4c),
            X64Word_create(0x4cc5d4be, 0xcb3e42b6),
            X64Word_create(0x597f299c, 0xfc657e2a),
            X64Word_create(0x5fcb6fab, 0x3ad6faec),
            X64Word_create(0x6c44198c, 0x4a475817)
        ];
        // Reusable objects
        var W = [];
        (function() {
            for(var i = 0; i < 80; i++){
                W[i] = X64Word_create();
            }
        })();
        /**
	     * SHA-512 hash algorithm.
	     */ var SHA512 = C_algo.SHA512 = Hasher.extend({
            _doReset: function() {
                this._hash = new X64WordArray.init([
                    new X64Word.init(0x6a09e667, 0xf3bcc908),
                    new X64Word.init(0xbb67ae85, 0x84caa73b),
                    new X64Word.init(0x3c6ef372, 0xfe94f82b),
                    new X64Word.init(0xa54ff53a, 0x5f1d36f1),
                    new X64Word.init(0x510e527f, 0xade682d1),
                    new X64Word.init(0x9b05688c, 0x2b3e6c1f),
                    new X64Word.init(0x1f83d9ab, 0xfb41bd6b),
                    new X64Word.init(0x5be0cd19, 0x137e2179)
                ]);
            },
            _doProcessBlock: function(M, offset) {
                // Shortcuts
                var H = this._hash.words;
                var H0 = H[0];
                var H1 = H[1];
                var H2 = H[2];
                var H3 = H[3];
                var H4 = H[4];
                var H5 = H[5];
                var H6 = H[6];
                var H7 = H[7];
                var H0h = H0.high;
                var H0l = H0.low;
                var H1h = H1.high;
                var H1l = H1.low;
                var H2h = H2.high;
                var H2l = H2.low;
                var H3h = H3.high;
                var H3l = H3.low;
                var H4h = H4.high;
                var H4l = H4.low;
                var H5h = H5.high;
                var H5l = H5.low;
                var H6h = H6.high;
                var H6l = H6.low;
                var H7h = H7.high;
                var H7l = H7.low;
                // Working variables
                var ah = H0h;
                var al = H0l;
                var bh = H1h;
                var bl = H1l;
                var ch = H2h;
                var cl = H2l;
                var dh = H3h;
                var dl = H3l;
                var eh = H4h;
                var el = H4l;
                var fh = H5h;
                var fl = H5l;
                var gh = H6h;
                var gl = H6l;
                var hh = H7h;
                var hl = H7l;
                // Rounds
                for(var i = 0; i < 80; i++){
                    var Wil;
                    var Wih;
                    // Shortcut
                    var Wi = W[i];
                    // Extend message
                    if (i < 16) {
                        Wih = Wi.high = M[offset + i * 2] | 0;
                        Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                    } else {
                        // Gamma0
                        var gamma0x = W[i - 15];
                        var gamma0xh = gamma0x.high;
                        var gamma0xl = gamma0x.low;
                        var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                        var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                        // Gamma1
                        var gamma1x = W[i - 2];
                        var gamma1xh = gamma1x.high;
                        var gamma1xl = gamma1x.low;
                        var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                        var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                        var Wi7 = W[i - 7];
                        var Wi7h = Wi7.high;
                        var Wi7l = Wi7.low;
                        var Wi16 = W[i - 16];
                        var Wi16h = Wi16.high;
                        var Wi16l = Wi16.low;
                        Wil = gamma0l + Wi7l;
                        Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                        Wil = Wil + gamma1l;
                        Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                        Wil = Wil + Wi16l;
                        Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                        Wi.high = Wih;
                        Wi.low = Wil;
                    }
                    var chh = eh & fh ^ ~eh & gh;
                    var chl = el & fl ^ ~el & gl;
                    var majh = ah & bh ^ ah & ch ^ bh & ch;
                    var majl = al & bl ^ al & cl ^ bl & cl;
                    var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                    var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                    var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                    var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
                    // t1 = h + sigma1 + ch + K[i] + W[i]
                    var Ki = K[i];
                    var Kih = Ki.high;
                    var Kil = Ki.low;
                    var t1l = hl + sigma1l;
                    var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                    var t1l = t1l + chl;
                    var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                    var t1l = t1l + Kil;
                    var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                    var t1l = t1l + Wil;
                    var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
                    // t2 = sigma0 + maj
                    var t2l = sigma0l + majl;
                    var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
                    // Update working variables
                    hh = gh;
                    hl = gl;
                    gh = fh;
                    gl = fl;
                    fh = eh;
                    fl = el;
                    el = dl + t1l | 0;
                    eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                    dh = ch;
                    dl = cl;
                    ch = bh;
                    cl = bl;
                    bh = ah;
                    bl = al;
                    al = t1l + t2l | 0;
                    ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
                }
                // Intermediate hash value
                H0l = H0.low = H0l + al;
                H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
                H1l = H1.low = H1l + bl;
                H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
                H2l = H2.low = H2l + cl;
                H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
                H3l = H3.low = H3l + dl;
                H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
                H4l = H4.low = H4l + el;
                H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
                H5l = H5.low = H5l + fl;
                H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
                H6l = H6.low = H6l + gl;
                H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
                H7l = H7.low = H7l + hl;
                H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Convert hash to 32-bit word array before returning
                var hash = this._hash.toX32();
                // Return final computed hash
                return hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            },
            blockSize: 1024 / 32
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA512('message');
	     *     var hash = CryptoJS.SHA512(wordArray);
	     */ C.SHA512 = Hasher._createHelper(SHA512);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA512(message, key);
	     */ C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
    })();
    return CryptoJS.SHA512;
});


/***/ }),

/***/ 7918:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory, undef) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805), __webpack_require__(1647), __webpack_require__(6916), __webpack_require__(970), __webpack_require__(9302));
    } else {}
})(void 0, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        // Permuted Choice 1 constants
        var PC1 = [
            57,
            49,
            41,
            33,
            25,
            17,
            9,
            1,
            58,
            50,
            42,
            34,
            26,
            18,
            10,
            2,
            59,
            51,
            43,
            35,
            27,
            19,
            11,
            3,
            60,
            52,
            44,
            36,
            63,
            55,
            47,
            39,
            31,
            23,
            15,
            7,
            62,
            54,
            46,
            38,
            30,
            22,
            14,
            6,
            61,
            53,
            45,
            37,
            29,
            21,
            13,
            5,
            28,
            20,
            12,
            4
        ];
        // Permuted Choice 2 constants
        var PC2 = [
            14,
            17,
            11,
            24,
            1,
            5,
            3,
            28,
            15,
            6,
            21,
            10,
            23,
            19,
            12,
            4,
            26,
            8,
            16,
            7,
            27,
            20,
            13,
            2,
            41,
            52,
            31,
            37,
            47,
            55,
            30,
            40,
            51,
            45,
            33,
            48,
            44,
            49,
            39,
            56,
            34,
            53,
            46,
            42,
            50,
            36,
            29,
            32
        ];
        // Cumulative bit shift constants
        var BIT_SHIFTS = [
            1,
            2,
            4,
            6,
            8,
            10,
            12,
            14,
            15,
            17,
            19,
            21,
            23,
            25,
            27,
            28
        ];
        // SBOXes and round permutation constants
        var SBOX_P = [
            {
                0x0: 0x808200,
                0x10000000: 0x8000,
                0x20000000: 0x808002,
                0x30000000: 0x2,
                0x40000000: 0x200,
                0x50000000: 0x808202,
                0x60000000: 0x800202,
                0x70000000: 0x800000,
                0x80000000: 0x202,
                0x90000000: 0x800200,
                0xa0000000: 0x8200,
                0xb0000000: 0x808000,
                0xc0000000: 0x8002,
                0xd0000000: 0x800002,
                0xe0000000: 0x0,
                0xf0000000: 0x8202,
                0x8000000: 0x0,
                0x18000000: 0x808202,
                0x28000000: 0x8202,
                0x38000000: 0x8000,
                0x48000000: 0x808200,
                0x58000000: 0x200,
                0x68000000: 0x808002,
                0x78000000: 0x2,
                0x88000000: 0x800200,
                0x98000000: 0x8200,
                0xa8000000: 0x808000,
                0xb8000000: 0x800202,
                0xc8000000: 0x800002,
                0xd8000000: 0x8002,
                0xe8000000: 0x202,
                0xf8000000: 0x800000,
                0x1: 0x8000,
                0x10000001: 0x2,
                0x20000001: 0x808200,
                0x30000001: 0x800000,
                0x40000001: 0x808002,
                0x50000001: 0x8200,
                0x60000001: 0x200,
                0x70000001: 0x800202,
                0x80000001: 0x808202,
                0x90000001: 0x808000,
                0xa0000001: 0x800002,
                0xb0000001: 0x8202,
                0xc0000001: 0x202,
                0xd0000001: 0x800200,
                0xe0000001: 0x8002,
                0xf0000001: 0x0,
                0x8000001: 0x808202,
                0x18000001: 0x808000,
                0x28000001: 0x800000,
                0x38000001: 0x200,
                0x48000001: 0x8000,
                0x58000001: 0x800002,
                0x68000001: 0x2,
                0x78000001: 0x8202,
                0x88000001: 0x8002,
                0x98000001: 0x800202,
                0xa8000001: 0x202,
                0xb8000001: 0x808200,
                0xc8000001: 0x800200,
                0xd8000001: 0x0,
                0xe8000001: 0x8200,
                0xf8000001: 0x808002
            },
            {
                0x0: 0x40084010,
                0x1000000: 0x4000,
                0x2000000: 0x80000,
                0x3000000: 0x40080010,
                0x4000000: 0x40000010,
                0x5000000: 0x40084000,
                0x6000000: 0x40004000,
                0x7000000: 0x10,
                0x8000000: 0x84000,
                0x9000000: 0x40004010,
                0xa000000: 0x40000000,
                0xb000000: 0x84010,
                0xc000000: 0x80010,
                0xd000000: 0x0,
                0xe000000: 0x4010,
                0xf000000: 0x40080000,
                0x800000: 0x40004000,
                0x1800000: 0x84010,
                0x2800000: 0x10,
                0x3800000: 0x40004010,
                0x4800000: 0x40084010,
                0x5800000: 0x40000000,
                0x6800000: 0x80000,
                0x7800000: 0x40080010,
                0x8800000: 0x80010,
                0x9800000: 0x0,
                0xa800000: 0x4000,
                0xb800000: 0x40080000,
                0xc800000: 0x40000010,
                0xd800000: 0x84000,
                0xe800000: 0x40084000,
                0xf800000: 0x4010,
                0x10000000: 0x0,
                0x11000000: 0x40080010,
                0x12000000: 0x40004010,
                0x13000000: 0x40084000,
                0x14000000: 0x40080000,
                0x15000000: 0x10,
                0x16000000: 0x84010,
                0x17000000: 0x4000,
                0x18000000: 0x4010,
                0x19000000: 0x80000,
                0x1a000000: 0x80010,
                0x1b000000: 0x40000010,
                0x1c000000: 0x84000,
                0x1d000000: 0x40004000,
                0x1e000000: 0x40000000,
                0x1f000000: 0x40084010,
                0x10800000: 0x84010,
                0x11800000: 0x80000,
                0x12800000: 0x40080000,
                0x13800000: 0x4000,
                0x14800000: 0x40004000,
                0x15800000: 0x40084010,
                0x16800000: 0x10,
                0x17800000: 0x40000000,
                0x18800000: 0x40084000,
                0x19800000: 0x40000010,
                0x1a800000: 0x40004010,
                0x1b800000: 0x80010,
                0x1c800000: 0x0,
                0x1d800000: 0x4010,
                0x1e800000: 0x40080010,
                0x1f800000: 0x84000
            },
            {
                0x0: 0x104,
                0x100000: 0x0,
                0x200000: 0x4000100,
                0x300000: 0x10104,
                0x400000: 0x10004,
                0x500000: 0x4000004,
                0x600000: 0x4010104,
                0x700000: 0x4010000,
                0x800000: 0x4000000,
                0x900000: 0x4010100,
                0xa00000: 0x10100,
                0xb00000: 0x4010004,
                0xc00000: 0x4000104,
                0xd00000: 0x10000,
                0xe00000: 0x4,
                0xf00000: 0x100,
                0x80000: 0x4010100,
                0x180000: 0x4010004,
                0x280000: 0x0,
                0x380000: 0x4000100,
                0x480000: 0x4000004,
                0x580000: 0x10000,
                0x680000: 0x10004,
                0x780000: 0x104,
                0x880000: 0x4,
                0x980000: 0x100,
                0xa80000: 0x4010000,
                0xb80000: 0x10104,
                0xc80000: 0x10100,
                0xd80000: 0x4000104,
                0xe80000: 0x4010104,
                0xf80000: 0x4000000,
                0x1000000: 0x4010100,
                0x1100000: 0x10004,
                0x1200000: 0x10000,
                0x1300000: 0x4000100,
                0x1400000: 0x100,
                0x1500000: 0x4010104,
                0x1600000: 0x4000004,
                0x1700000: 0x0,
                0x1800000: 0x4000104,
                0x1900000: 0x4000000,
                0x1a00000: 0x4,
                0x1b00000: 0x10100,
                0x1c00000: 0x4010000,
                0x1d00000: 0x104,
                0x1e00000: 0x10104,
                0x1f00000: 0x4010004,
                0x1080000: 0x4000000,
                0x1180000: 0x104,
                0x1280000: 0x4010100,
                0x1380000: 0x0,
                0x1480000: 0x10004,
                0x1580000: 0x4000100,
                0x1680000: 0x100,
                0x1780000: 0x4010004,
                0x1880000: 0x10000,
                0x1980000: 0x4010104,
                0x1a80000: 0x10104,
                0x1b80000: 0x4000004,
                0x1c80000: 0x4000104,
                0x1d80000: 0x4010000,
                0x1e80000: 0x4,
                0x1f80000: 0x10100
            },
            {
                0x0: 0x80401000,
                0x10000: 0x80001040,
                0x20000: 0x401040,
                0x30000: 0x80400000,
                0x40000: 0x0,
                0x50000: 0x401000,
                0x60000: 0x80000040,
                0x70000: 0x400040,
                0x80000: 0x80000000,
                0x90000: 0x400000,
                0xa0000: 0x40,
                0xb0000: 0x80001000,
                0xc0000: 0x80400040,
                0xd0000: 0x1040,
                0xe0000: 0x1000,
                0xf0000: 0x80401040,
                0x8000: 0x80001040,
                0x18000: 0x40,
                0x28000: 0x80400040,
                0x38000: 0x80001000,
                0x48000: 0x401000,
                0x58000: 0x80401040,
                0x68000: 0x0,
                0x78000: 0x80400000,
                0x88000: 0x1000,
                0x98000: 0x80401000,
                0xa8000: 0x400000,
                0xb8000: 0x1040,
                0xc8000: 0x80000000,
                0xd8000: 0x400040,
                0xe8000: 0x401040,
                0xf8000: 0x80000040,
                0x100000: 0x400040,
                0x110000: 0x401000,
                0x120000: 0x80000040,
                0x130000: 0x0,
                0x140000: 0x1040,
                0x150000: 0x80400040,
                0x160000: 0x80401000,
                0x170000: 0x80001040,
                0x180000: 0x80401040,
                0x190000: 0x80000000,
                0x1a0000: 0x80400000,
                0x1b0000: 0x401040,
                0x1c0000: 0x80001000,
                0x1d0000: 0x400000,
                0x1e0000: 0x40,
                0x1f0000: 0x1000,
                0x108000: 0x80400000,
                0x118000: 0x80401040,
                0x128000: 0x0,
                0x138000: 0x401000,
                0x148000: 0x400040,
                0x158000: 0x80000000,
                0x168000: 0x80001040,
                0x178000: 0x40,
                0x188000: 0x80000040,
                0x198000: 0x1000,
                0x1a8000: 0x80001000,
                0x1b8000: 0x80400040,
                0x1c8000: 0x1040,
                0x1d8000: 0x80401000,
                0x1e8000: 0x400000,
                0x1f8000: 0x401040
            },
            {
                0x0: 0x80,
                0x1000: 0x1040000,
                0x2000: 0x40000,
                0x3000: 0x20000000,
                0x4000: 0x20040080,
                0x5000: 0x1000080,
                0x6000: 0x21000080,
                0x7000: 0x40080,
                0x8000: 0x1000000,
                0x9000: 0x20040000,
                0xa000: 0x20000080,
                0xb000: 0x21040080,
                0xc000: 0x21040000,
                0xd000: 0x0,
                0xe000: 0x1040080,
                0xf000: 0x21000000,
                0x800: 0x1040080,
                0x1800: 0x21000080,
                0x2800: 0x80,
                0x3800: 0x1040000,
                0x4800: 0x40000,
                0x5800: 0x20040080,
                0x6800: 0x21040000,
                0x7800: 0x20000000,
                0x8800: 0x20040000,
                0x9800: 0x0,
                0xa800: 0x21040080,
                0xb800: 0x1000080,
                0xc800: 0x20000080,
                0xd800: 0x21000000,
                0xe800: 0x1000000,
                0xf800: 0x40080,
                0x10000: 0x40000,
                0x11000: 0x80,
                0x12000: 0x20000000,
                0x13000: 0x21000080,
                0x14000: 0x1000080,
                0x15000: 0x21040000,
                0x16000: 0x20040080,
                0x17000: 0x1000000,
                0x18000: 0x21040080,
                0x19000: 0x21000000,
                0x1a000: 0x1040000,
                0x1b000: 0x20040000,
                0x1c000: 0x40080,
                0x1d000: 0x20000080,
                0x1e000: 0x0,
                0x1f000: 0x1040080,
                0x10800: 0x21000080,
                0x11800: 0x1000000,
                0x12800: 0x1040000,
                0x13800: 0x20040080,
                0x14800: 0x20000000,
                0x15800: 0x1040080,
                0x16800: 0x80,
                0x17800: 0x21040000,
                0x18800: 0x40080,
                0x19800: 0x21040080,
                0x1a800: 0x0,
                0x1b800: 0x21000000,
                0x1c800: 0x1000080,
                0x1d800: 0x40000,
                0x1e800: 0x20040000,
                0x1f800: 0x20000080
            },
            {
                0x0: 0x10000008,
                0x100: 0x2000,
                0x200: 0x10200000,
                0x300: 0x10202008,
                0x400: 0x10002000,
                0x500: 0x200000,
                0x600: 0x200008,
                0x700: 0x10000000,
                0x800: 0x0,
                0x900: 0x10002008,
                0xa00: 0x202000,
                0xb00: 0x8,
                0xc00: 0x10200008,
                0xd00: 0x202008,
                0xe00: 0x2008,
                0xf00: 0x10202000,
                0x80: 0x10200000,
                0x180: 0x10202008,
                0x280: 0x8,
                0x380: 0x200000,
                0x480: 0x202008,
                0x580: 0x10000008,
                0x680: 0x10002000,
                0x780: 0x2008,
                0x880: 0x200008,
                0x980: 0x2000,
                0xa80: 0x10002008,
                0xb80: 0x10200008,
                0xc80: 0x0,
                0xd80: 0x10202000,
                0xe80: 0x202000,
                0xf80: 0x10000000,
                0x1000: 0x10002000,
                0x1100: 0x10200008,
                0x1200: 0x10202008,
                0x1300: 0x2008,
                0x1400: 0x200000,
                0x1500: 0x10000000,
                0x1600: 0x10000008,
                0x1700: 0x202000,
                0x1800: 0x202008,
                0x1900: 0x0,
                0x1a00: 0x8,
                0x1b00: 0x10200000,
                0x1c00: 0x2000,
                0x1d00: 0x10002008,
                0x1e00: 0x10202000,
                0x1f00: 0x200008,
                0x1080: 0x8,
                0x1180: 0x202000,
                0x1280: 0x200000,
                0x1380: 0x10000008,
                0x1480: 0x10002000,
                0x1580: 0x2008,
                0x1680: 0x10202008,
                0x1780: 0x10200000,
                0x1880: 0x10202000,
                0x1980: 0x10200008,
                0x1a80: 0x2000,
                0x1b80: 0x202008,
                0x1c80: 0x200008,
                0x1d80: 0x0,
                0x1e80: 0x10000000,
                0x1f80: 0x10002008
            },
            {
                0x0: 0x100000,
                0x10: 0x2000401,
                0x20: 0x400,
                0x30: 0x100401,
                0x40: 0x2100401,
                0x50: 0x0,
                0x60: 0x1,
                0x70: 0x2100001,
                0x80: 0x2000400,
                0x90: 0x100001,
                0xa0: 0x2000001,
                0xb0: 0x2100400,
                0xc0: 0x2100000,
                0xd0: 0x401,
                0xe0: 0x100400,
                0xf0: 0x2000000,
                0x8: 0x2100001,
                0x18: 0x0,
                0x28: 0x2000401,
                0x38: 0x2100400,
                0x48: 0x100000,
                0x58: 0x2000001,
                0x68: 0x2000000,
                0x78: 0x401,
                0x88: 0x100401,
                0x98: 0x2000400,
                0xa8: 0x2100000,
                0xb8: 0x100001,
                0xc8: 0x400,
                0xd8: 0x2100401,
                0xe8: 0x1,
                0xf8: 0x100400,
                0x100: 0x2000000,
                0x110: 0x100000,
                0x120: 0x2000401,
                0x130: 0x2100001,
                0x140: 0x100001,
                0x150: 0x2000400,
                0x160: 0x2100400,
                0x170: 0x100401,
                0x180: 0x401,
                0x190: 0x2100401,
                0x1a0: 0x100400,
                0x1b0: 0x1,
                0x1c0: 0x0,
                0x1d0: 0x2100000,
                0x1e0: 0x2000001,
                0x1f0: 0x400,
                0x108: 0x100400,
                0x118: 0x2000401,
                0x128: 0x2100001,
                0x138: 0x1,
                0x148: 0x2000000,
                0x158: 0x100000,
                0x168: 0x401,
                0x178: 0x2100400,
                0x188: 0x2000001,
                0x198: 0x2100000,
                0x1a8: 0x0,
                0x1b8: 0x2100401,
                0x1c8: 0x100401,
                0x1d8: 0x400,
                0x1e8: 0x2000400,
                0x1f8: 0x100001
            },
            {
                0x0: 0x8000820,
                0x1: 0x20000,
                0x2: 0x8000000,
                0x3: 0x20,
                0x4: 0x20020,
                0x5: 0x8020820,
                0x6: 0x8020800,
                0x7: 0x800,
                0x8: 0x8020000,
                0x9: 0x8000800,
                0xa: 0x20800,
                0xb: 0x8020020,
                0xc: 0x820,
                0xd: 0x0,
                0xe: 0x8000020,
                0xf: 0x20820,
                0x80000000: 0x800,
                0x80000001: 0x8020820,
                0x80000002: 0x8000820,
                0x80000003: 0x8000000,
                0x80000004: 0x8020000,
                0x80000005: 0x20800,
                0x80000006: 0x20820,
                0x80000007: 0x20,
                0x80000008: 0x8000020,
                0x80000009: 0x820,
                0x8000000a: 0x20020,
                0x8000000b: 0x8020800,
                0x8000000c: 0x0,
                0x8000000d: 0x8020020,
                0x8000000e: 0x8000800,
                0x8000000f: 0x20000,
                0x10: 0x20820,
                0x11: 0x8020800,
                0x12: 0x20,
                0x13: 0x800,
                0x14: 0x8000800,
                0x15: 0x8000020,
                0x16: 0x8020020,
                0x17: 0x20000,
                0x18: 0x0,
                0x19: 0x20020,
                0x1a: 0x8020000,
                0x1b: 0x8000820,
                0x1c: 0x8020820,
                0x1d: 0x20800,
                0x1e: 0x820,
                0x1f: 0x8000000,
                0x80000010: 0x20000,
                0x80000011: 0x800,
                0x80000012: 0x8020020,
                0x80000013: 0x20820,
                0x80000014: 0x20,
                0x80000015: 0x8020000,
                0x80000016: 0x8000000,
                0x80000017: 0x8000820,
                0x80000018: 0x8020820,
                0x80000019: 0x8000020,
                0x8000001a: 0x8000800,
                0x8000001b: 0x0,
                0x8000001c: 0x20800,
                0x8000001d: 0x820,
                0x8000001e: 0x20020,
                0x8000001f: 0x8020800
            }
        ];
        // Masks that select the SBOX input
        var SBOX_MASK = [
            0xf8000001,
            0x1f800000,
            0x01f80000,
            0x001f8000,
            0x0001f800,
            0x00001f80,
            0x000001f8,
            0x8000001f
        ];
        /**
	     * DES block cipher algorithm.
	     */ var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function() {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Select 56 bits according to PC1
                var keyBits = [];
                for(var i = 0; i < 56; i++){
                    var keyBitPos = PC1[i] - 1;
                    keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
                }
                // Assemble 16 subkeys
                var subKeys = this._subKeys = [];
                for(var nSubKey = 0; nSubKey < 16; nSubKey++){
                    // Create subkey
                    var subKey = subKeys[nSubKey] = [];
                    // Shortcut
                    var bitShift = BIT_SHIFTS[nSubKey];
                    // Select 48 bits according to PC2
                    for(var i = 0; i < 24; i++){
                        // Select from the left 28 key bits
                        subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                        // Select from the right 28 key bits
                        subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                    }
                    // Since each subkey is applied to an expanded 32-bit input,
                    // the subkey can be broken into 8 values scaled to 32-bits,
                    // which allows the key to be used without expansion
                    subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                    for(var i = 1; i < 7; i++){
                        subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                    }
                    subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
                }
                // Compute inverse subkeys
                var invSubKeys = this._invSubKeys = [];
                for(var i = 0; i < 16; i++){
                    invSubKeys[i] = subKeys[15 - i];
                }
            },
            encryptBlock: function(M, offset) {
                this._doCryptBlock(M, offset, this._subKeys);
            },
            decryptBlock: function(M, offset) {
                this._doCryptBlock(M, offset, this._invSubKeys);
            },
            _doCryptBlock: function(M, offset, subKeys) {
                // Get input
                this._lBlock = M[offset];
                this._rBlock = M[offset + 1];
                // Initial permutation
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeLR.call(this, 1, 0x55555555);
                // Rounds
                for(var round = 0; round < 16; round++){
                    // Shortcuts
                    var subKey = subKeys[round];
                    var lBlock = this._lBlock;
                    var rBlock = this._rBlock;
                    // Feistel function
                    var f = 0;
                    for(var i = 0; i < 8; i++){
                        f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                    }
                    this._lBlock = rBlock;
                    this._rBlock = lBlock ^ f;
                }
                // Undo swap from last round
                var t = this._lBlock;
                this._lBlock = this._rBlock;
                this._rBlock = t;
                // Final permutation
                exchangeLR.call(this, 1, 0x55555555);
                exchangeRL.call(this, 8, 0x00ff00ff);
                exchangeRL.call(this, 2, 0x33333333);
                exchangeLR.call(this, 16, 0x0000ffff);
                exchangeLR.call(this, 4, 0x0f0f0f0f);
                // Set output
                M[offset] = this._lBlock;
                M[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        // Swap bits across the left and right words
        function exchangeLR(offset, mask) {
            var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
            this._rBlock ^= t;
            this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
            var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
            this._lBlock ^= t;
            this._rBlock ^= t << offset;
        }
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
	     */ C.DES = BlockCipher._createHelper(DES);
        /**
	     * Triple-DES block cipher algorithm.
	     */ var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function() {
                // Shortcuts
                var key = this._key;
                var keyWords = key.words;
                // Make sure the key length is valid (64, 128 or >= 192 bit)
                if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
                    throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
                }
                // Extend the key according to the keying options defined in 3DES standard
                var key1 = keyWords.slice(0, 2);
                var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
                var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
                // Create DES instances
                this._des1 = DES.createEncryptor(WordArray.create(key1));
                this._des2 = DES.createEncryptor(WordArray.create(key2));
                this._des3 = DES.createEncryptor(WordArray.create(key3));
            },
            encryptBlock: function(M, offset) {
                this._des1.encryptBlock(M, offset);
                this._des2.decryptBlock(M, offset);
                this._des3.encryptBlock(M, offset);
            },
            decryptBlock: function(M, offset) {
                this._des3.decryptBlock(M, offset);
                this._des2.encryptBlock(M, offset);
                this._des1.decryptBlock(M, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
        });
        /**
	     * Shortcut functions to the cipher's object interface.
	     *
	     * @example
	     *
	     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
	     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
	     */ C.TripleDES = BlockCipher._createHelper(TripleDES);
    })();
    return CryptoJS.TripleDES;
});


/***/ }),

/***/ 8204:
/***/ ((module, exports, __webpack_require__) => {

"use strict";

;
(function(root, factory) {
    if (true) {
        // CommonJS
        module.exports = exports = factory(__webpack_require__(6805));
    } else {}
})(void 0, function(CryptoJS) {
    (function(undefined) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        /**
	     * x64 namespace.
	     */ var C_x64 = C.x64 = {};
        /**
	     * A 64-bit word.
	     */ var X64Word = C_x64.Word = Base.extend({
            /**
	         * Initializes a newly created 64-bit word.
	         *
	         * @param {number} high The high 32 bits.
	         * @param {number} low The low 32 bits.
	         *
	         * @example
	         *
	         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
	         */ init: function(high, low) {
                this.high = high;
                this.low = low;
            }
        });
        /**
	     * An array of 64-bit words.
	     *
	     * @property {Array} words The array of CryptoJS.x64.Word objects.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */ var X64WordArray = C_x64.WordArray = Base.extend({
            /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create();
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ]);
	         *
	         *     var wordArray = CryptoJS.x64.WordArray.create([
	         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
	         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
	         *     ], 10);
	         */ init: function(words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined) {
                    this.sigBytes = sigBytes;
                } else {
                    this.sigBytes = words.length * 8;
                }
            },
            /**
	         * Converts this 64-bit word array to a 32-bit word array.
	         *
	         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
	         *
	         * @example
	         *
	         *     var x32WordArray = x64WordArray.toX32();
	         */ toX32: function() {
                // Shortcuts
                var x64Words = this.words;
                var x64WordsLength = x64Words.length;
                // Convert
                var x32Words = [];
                for(var i = 0; i < x64WordsLength; i++){
                    var x64Word = x64Words[i];
                    x32Words.push(x64Word.high);
                    x32Words.push(x64Word.low);
                }
                return X32WordArray.create(x32Words, this.sigBytes);
            },
            /**
	         * Creates a copy of this word array.
	         *
	         * @return {X64WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = x64WordArray.clone();
	         */ clone: function() {
                var clone = Base.clone.call(this);
                // Clone "words" array
                var words = clone.words = this.words.slice(0);
                // Clone each X64Word object
                var wordsLength = words.length;
                for(var i = 0; i < wordsLength; i++){
                    words[i] = words[i].clone();
                }
                return clone;
            }
        });
    })();
    return CryptoJS;
});


/***/ }),

/***/ 9792:
/***/ ((module) => {

"use strict";

var INITIAL_STATE = 1;
var FAIL_STATE = 0;
/**
 * A StateMachine represents a deterministic finite automaton.
 * It can perform matches over a sequence of values, similar to a regular expression.
 */ class StateMachine {
    constructor(dfa){
        this.stateTable = dfa.stateTable;
        this.accepting = dfa.accepting;
        this.tags = dfa.tags;
    }
    /**
   * Returns an iterable object that yields pattern matches over the input sequence.
   * Matches are of the form [startIndex, endIndex, tags].
   */ match(str) {
        var self = this;
        return {
            *[Symbol.iterator] () {
                var state = INITIAL_STATE;
                var startRun = null;
                var lastAccepting = null;
                var lastState = null;
                for(var p = 0; p < str.length; p++){
                    var c = str[p];
                    lastState = state;
                    state = self.stateTable[state][c];
                    if (state === FAIL_STATE) {
                        // yield the last match if any
                        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                            yield [
                                startRun,
                                lastAccepting,
                                self.tags[lastState]
                            ];
                        } // reset the state as if we started over from the initial state
                        state = self.stateTable[INITIAL_STATE][c];
                        startRun = null;
                    } // start a run if not in the failure state
                    if (state !== FAIL_STATE && startRun == null) {
                        startRun = p;
                    } // if accepting, mark the potential match end
                    if (self.accepting[state]) {
                        lastAccepting = p;
                    } // reset the state to the initial state if we get into the failure state
                    if (state === FAIL_STATE) {
                        state = INITIAL_STATE;
                    }
                } // yield the last match if any
                if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {
                    yield [
                        startRun,
                        lastAccepting,
                        self.tags[state]
                    ];
                }
            }
        };
    }
    /**
   * For each match over the input sequence, action functions matching
   * the tag definitions in the input pattern are called with the startIndex,
   * endIndex, and sub-match sequence.
   */ apply(str, actions) {
        for (var [start, end, tags] of this.match(str)){
            for (var tag of tags){
                if (typeof actions[tag] === "function") {
                    actions[tag](start, end, str.slice(start, end + 1));
                }
            }
        }
    }
}
module.exports = StateMachine; //# sourceMappingURL=index.js.map


/***/ }),

/***/ 9591:
/***/ ((module) => {

"use strict";

// do not edit .js files directly - edit src/index.jst
module.exports = function equal(a, b) {
    if (a === b) return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor) return false;
        var length, i, keys;
        if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length) return false;
            for(i = length; i-- !== 0;)if (!equal(a[i], b[i])) return false;
            return true;
        }
        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) return false;
        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
        for(i = length; i-- !== 0;){
            var key = keys[i];
            if (!equal(a[key], b[key])) return false;
        }
        return true;
    }
    // true if both NaN, false otherwise
    return a !== a && b !== b;
};


/***/ }),

/***/ 9266:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _fs = __webpack_require__(7147);
var _fs2 = _interopRequireDefault(_fs);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var tags = __webpack_require__(2413);
/*
 unsignedByte,
 asciiStrings,
 unsignedShort,
 unsignedLong,
 unsignedRational,
 signedByte,
 undefined,
 signedShort,
 signedLong,
 signedRational,
 singleFloat,
 doubleFloat
 */ var bytes = [
    0,
    1,
    1,
    2,
    4,
    8,
    1,
    1,
    2,
    4,
    8,
    4,
    8
];
var SOIMarkerLength = 2;
var JPEGSOIMarker = 0xffd8;
var TIFFINTEL = 0x4949;
var TIFFMOTOROLA = 0x4d4d;
var APPMarkerLength = 2;
var APPMarkerBegin = 0xffe0;
var APPMarkerEnd = 0xffef;
var data = void 0;
/**
 * @param buffer {Buffer}
 * @returns {Boolean}
 * @example
 * var content = fs.readFileSync("~/Picture/IMG_0911.JPG");
 * var isImage = isValid(content);
 * console.log(isImage);
 */ var isValid = function isValid(buffer) {
    try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === JPEGSOIMarker;
    } catch (e) {
        throw new Error("Unsupport file format.");
    }
};
/**
 * @param buffer {Buffer}
 * @returns {Boolean}
 * @example
 */ var isTiff = function isTiff(buffer) {
    try {
        var SOIMarker = buffer.readUInt16BE(0);
        return SOIMarker === TIFFINTEL || SOIMarker === TIFFMOTOROLA;
    } catch (e) {
        throw new Error("Unsupport file format.");
    }
};
/**
 * @param buffer {Buffer}
 * @returns {Number}
 * @example
 * var content = fs.readFileSync("~/Picture/IMG_0911.JPG");
 * var APPNumber = checkAPPn(content);
 * console.log(APPNumber);
 */ var checkAPPn = function checkAPPn(buffer) {
    try {
        var APPMarkerTag = buffer.readUInt16BE(0);
        var isInRange = APPMarkerTag >= APPMarkerBegin && APPMarkerTag <= APPMarkerEnd;
        return isInRange ? APPMarkerTag - APPMarkerBegin : false;
    } catch (e) {
        throw new Error("Invalid APP Tag.");
    }
};
/**
 * @param buffer {Buffer}
 * @param tagCollection {Object}
 * @param order {Boolean}
 * @param offset {Number}
 * @returns {Object}
 * @example
 * var content = fs.readFileSync("~/Picture/IMG_0911.JPG");
 * var exifFragments = IFDHandler(content, 0, true, 8);
 * console.log(exifFragments.value);
 */ var IFDHandler = function IFDHandler(buffer, tagCollection, order, offset) {
    var entriesNumber = order ? buffer.readUInt16BE(0) : buffer.readUInt16LE(0);
    if (entriesNumber === 0) {
        return {};
    }
    var entriesNumberLength = 2;
    var entries = buffer.slice(entriesNumberLength);
    var entryLength = 12;
    // let nextIFDPointerBegin = entriesNumberLength + entryLength * entriesNumber;
    // let bigNextIFDPointer= buffer.readUInt32BE(nextIFDPointerBegin) ;
    // let littleNextIFDPointer= buffer.readUInt32LE(nextIFDPointerBegin);
    // let nextIFDPointer = order ?bigNextIFDPointer:littleNextIFDPointer;
    var exif = {};
    var entryCount = 0;
    for(entryCount; entryCount < entriesNumber; entryCount += 1){
        var entryBegin = entryCount * entryLength;
        var entry = entries.slice(entryBegin, entryBegin + entryLength);
        var tagBegin = 0;
        var tagLength = 2;
        var dataFormatBegin = tagBegin + tagLength;
        var dataFormatLength = 2;
        var componentsBegin = dataFormatBegin + dataFormatLength;
        var componentsNumberLength = 4;
        var dataValueBegin = componentsBegin + componentsNumberLength;
        var dataValueLength = 4;
        var tagAddress = entry.slice(tagBegin, dataFormatBegin);
        var tagNumber = order ? tagAddress.toString("hex") : tagAddress.reverse().toString("hex");
        var tagName = tagCollection[tagNumber];
        var bigDataFormat = entry.readUInt16BE(dataFormatBegin);
        var littleDataFormat = entry.readUInt16LE(dataFormatBegin);
        var dataFormat = order ? bigDataFormat : littleDataFormat;
        var componentsByte = bytes[dataFormat];
        var bigComponentsNumber = entry.readUInt32BE(componentsBegin);
        var littleComponentNumber = entry.readUInt32LE(componentsBegin);
        var componentsNumber = order ? bigComponentsNumber : littleComponentNumber;
        var dataLength = componentsNumber * componentsByte;
        var dataValue = entry.slice(dataValueBegin, dataValueBegin + dataValueLength);
        if (dataLength > 4) {
            var dataOffset = (order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0)) - offset;
            dataValue = buffer.slice(dataOffset, dataOffset + dataLength);
        }
        var tagValue = void 0;
        if (tagName) {
            switch(dataFormat){
                case 1:
                    tagValue = dataValue.readUInt8(0);
                    break;
                case 2:
                    tagValue = dataValue.toString("ascii").replace(/\0+$/, "");
                    break;
                case 3:
                    tagValue = order ? dataValue.readUInt16BE(0) : dataValue.readUInt16LE(0);
                    break;
                case 4:
                    tagValue = order ? dataValue.readUInt32BE(0) : dataValue.readUInt32LE(0);
                    break;
                case 5:
                    tagValue = [];
                    for(var i = 0; i < dataValue.length; i += 8){
                        var bigTagValue = dataValue.readUInt32BE(i) / dataValue.readUInt32BE(i + 4);
                        var littleTagValue = dataValue.readUInt32LE(i) / dataValue.readUInt32LE(i + 4);
                        tagValue.push(order ? bigTagValue : littleTagValue);
                    }
                    break;
                case 7:
                    switch(tagName){
                        case "ExifVersion":
                            tagValue = dataValue.toString();
                            break;
                        case "FlashPixVersion":
                            tagValue = dataValue.toString();
                            break;
                        case "SceneType":
                            tagValue = dataValue.readUInt8(0);
                            break;
                        default:
                            tagValue = "0x" + dataValue.toString("hex", 0, 15);
                            break;
                    }
                    break;
                case 10:
                    {
                        var bigOrder = dataValue.readInt32BE(0) / dataValue.readInt32BE(4);
                        var littleOrder = dataValue.readInt32LE(0) / dataValue.readInt32LE(4);
                        tagValue = order ? bigOrder : littleOrder;
                        break;
                    }
                default:
                    tagValue = "0x" + dataValue.toString("hex");
                    break;
            }
            exif[tagName] = tagValue;
        }
    /*
     else {
     console.log(`Unkown Tag [0x${tagNumber}].`);
     }
     */ }
    return exif;
};
/**
 * @param buf {Buffer}
 * @returns {Undefined}
 * @example
 * var content = fs.readFileSync("~/Picture/IMG_0911.JPG");
 * var exifFragments = EXIFHandler(content);
 */ var EXIFHandler = function EXIFHandler(buf) {
    var pad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var buffer = buf;
    if (pad) {
        buffer = buf.slice(APPMarkerLength);
        var length = buffer.readUInt16BE(0);
        buffer = buffer.slice(0, length);
        var lengthLength = 2;
        buffer = buffer.slice(lengthLength);
        var identifierLength = 5;
        buffer = buffer.slice(identifierLength);
        var padLength = 1;
        buffer = buffer.slice(padLength);
    }
    var byteOrderLength = 2;
    var byteOrder = buffer.toString("ascii", 0, byteOrderLength) === "MM";
    var fortyTwoLength = 2;
    var fortyTwoEnd = byteOrderLength + fortyTwoLength;
    var big42 = buffer.readUInt32BE(fortyTwoEnd);
    var little42 = buffer.readUInt32LE(fortyTwoEnd);
    var offsetOfIFD = byteOrder ? big42 : little42;
    buffer = buffer.slice(offsetOfIFD);
    if (buffer.length > 0) {
        data = IFDHandler(buffer, tags.ifd, byteOrder, offsetOfIFD);
        if (data.ExifIFDPointer) {
            buffer = buffer.slice(data.ExifIFDPointer - offsetOfIFD);
            data.SubExif = IFDHandler(buffer, tags.ifd, byteOrder, data.ExifIFDPointer);
        }
        if (data.GPSInfoIFDPointer) {
            var gps = data.GPSInfoIFDPointer;
            buffer = buffer.slice(data.ExifIFDPointer ? gps - data.ExifIFDPointer : gps - offsetOfIFD);
            data.GPSInfo = IFDHandler(buffer, tags.gps, byteOrder, gps);
        }
    }
};
/**
 * @param buffer {Buffer}
 * @returns {Undefined}
 * @example
 * var content = fs.readFileSync("~/Picture/IMG_0911.JPG");
 * var exifFragments = APPnHandler(content);
 */ var APPnHandler = function APPnHandler(buffer) {
    var APPMarkerTag = checkAPPn(buffer);
    if (APPMarkerTag !== false) {
        // APP0 is 0, and 0==false
        var length = buffer.readUInt16BE(APPMarkerLength);
        switch(APPMarkerTag){
            case 1:
                // EXIF
                EXIFHandler(buffer);
                break;
            default:
                APPnHandler(buffer.slice(APPMarkerLength + length));
                break;
        }
    }
};
/**
 * @param buffer {Buffer}
 * @returns {Object}
 * @example
 */ var fromBuffer = function fromBuffer(buffer) {
    if (!buffer) {
        throw new Error("buffer not found");
    }
    data = undefined;
    if (isValid(buffer)) {
        buffer = buffer.slice(SOIMarkerLength);
        data = {};
        APPnHandler(buffer);
    } else if (isTiff(buffer)) {
        data = {};
        EXIFHandler(buffer, false);
    }
    return data;
};
/**
 * @param file {String}
 * @returns {Object}
 * @example
 * var exif = sync("~/Picture/IMG_1981.JPG");
 * console.log(exif.createTime);
 */ var sync = function sync(file) {
    if (!file) {
        throw new Error("File not found");
    }
    var buffer = _fs2.default.readFileSync(file);
    return fromBuffer(buffer);
};
/**
 * @param file {String}
 * @param callback {Function}
 * @example
 * async("~/Picture/IMG_0707.JPG", (err, data) => {
 *     if(err) {
 *         console.log(err);
 *     }
 *     if(data) {
 *         console.log(data.ExifOffset.createTime);
 *     }
 * }
 */ var async = function async(file, callback) {
    data = undefined;
    new Promise(function(resolve, reject) {
        if (!file) {
            reject(new Error("❓File not found."));
        }
        _fs2.default.readFile(file, function(err, buffer) {
            if (err) {
                reject(err);
            } else {
                try {
                    if (isValid(buffer)) {
                        var buf = buffer.slice(SOIMarkerLength);
                        data = {};
                        APPnHandler(buf);
                        resolve(data);
                    } else if (isTiff(buffer)) {
                        data = {};
                        EXIFHandler(buffer, false);
                        resolve(data);
                    } else {
                        reject(new Error("\uD83D\uDE31Unsupport file type."));
                    }
                } catch (e) {
                    reject(e);
                }
            }
        });
    }, function(error) {
        callback(error, undefined);
    }).then(function(d) {
        callback(undefined, d);
    }).catch(function(error) {
        callback(error, undefined);
    });
};
exports.fromBuffer = fromBuffer;
exports.parse = async;
exports.parseSync = sync; //# sourceMappingURL=index.js.map


/***/ }),

/***/ 8034:
/***/ ((__unused_webpack_module, exports) => {

var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
;
(function(exports1) {
    "use strict";
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var PLUS = "+".charCodeAt(0);
    var SLASH = "/".charCodeAt(0);
    var NUMBER = "0".charCodeAt(0);
    var LOWER = "a".charCodeAt(0);
    var UPPER = "A".charCodeAt(0);
    var PLUS_URL_SAFE = "-".charCodeAt(0);
    var SLASH_URL_SAFE = "_".charCodeAt(0);
    function decode(elt) {
        var code = elt.charCodeAt(0);
        if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'
        ;
        if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'
        ;
        if (code < NUMBER) return -1 //no match
        ;
        if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
        if (code < UPPER + 26) return code - UPPER;
        if (code < LOWER + 26) return code - LOWER + 26;
    }
    function b64ToByteArray(b64) {
        var i, j, l, tmp, placeHolders, arr;
        if (b64.length % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
        }
        // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice
        var len = b64.length;
        placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
        // base64 is 4/3 + up to two characters of the original data
        arr = new Arr(b64.length * 3 / 4 - placeHolders);
        // if there are placeholders, only get up to the last complete 4 chars
        l = placeHolders > 0 ? b64.length - 4 : b64.length;
        var L = 0;
        function push(v) {
            arr[L++] = v;
        }
        for(i = 0, j = 0; i < l; i += 4, j += 3){
            tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
            push((tmp & 0xFF0000) >> 16);
            push((tmp & 0xFF00) >> 8);
            push(tmp & 0xFF);
        }
        if (placeHolders === 2) {
            tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
            push(tmp & 0xFF);
        } else if (placeHolders === 1) {
            tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
            push(tmp >> 8 & 0xFF);
            push(tmp & 0xFF);
        }
        return arr;
    }
    function uint8ToBase64(uint8) {
        var i, extraBytes = uint8.length % 3, output = "", temp, length;
        function encode(num) {
            return lookup.charAt(num);
        }
        function tripletToBase64(num) {
            return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
        }
        // go through the array every three bytes, we'll deal with trailing stuff later
        for(i = 0, length = uint8.length - extraBytes; i < length; i += 3){
            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
            output += tripletToBase64(temp);
        }
        // pad the end with zeros, but make sure to not forget the extra bytes
        switch(extraBytes){
            case 1:
                temp = uint8[uint8.length - 1];
                output += encode(temp >> 2);
                output += encode(temp << 4 & 0x3F);
                output += "==";
                break;
            case 2:
                temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
                output += encode(temp >> 10);
                output += encode(temp >> 4 & 0x3F);
                output += encode(temp << 2 & 0x3F);
                output += "=";
                break;
        }
        return output;
    }
    exports1.toByteArray = b64ToByteArray;
    exports1.fromByteArray = uint8ToBase64;
})( false ? 0 : exports);


/***/ }),

/***/ 553:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var stream = __webpack_require__(2781);
var zlib = __webpack_require__(9796);
var CryptoJS = __webpack_require__(9128);
var fs = __webpack_require__(7147);
var fontkit = __webpack_require__(933);
var events = __webpack_require__(2361);
var LineBreaker = __webpack_require__(5035);
var exif = __webpack_require__(9266);
var PNG = __webpack_require__(6292);
class PDFAbstractReference {
    toString() {
        throw new Error("Must be implemented by subclasses");
    }
}
class PDFTree {
    constructor(options = {}){
        this._items = {};
        this.limits = typeof options.limits === "boolean" ? options.limits : true;
    }
    add(key, val) {
        return this._items[key] = val;
    }
    get(key) {
        return this._items[key];
    }
    toString() {
        const sortedKeys = Object.keys(this._items).sort((a, b)=>this._compareKeys(a, b));
        const out = [
            "<<"
        ];
        if (this.limits && sortedKeys.length > 1) {
            const first = sortedKeys[0], last = sortedKeys[sortedKeys.length - 1];
            out.push(`  /Limits ${PDFObject.convert([
                this._dataForKey(first),
                this._dataForKey(last)
            ])}`);
        }
        out.push(`  /${this._keysName()} [`);
        for (let key of sortedKeys){
            out.push(`    ${PDFObject.convert(this._dataForKey(key))} ${PDFObject.convert(this._items[key])}`);
        }
        out.push("]");
        out.push(">>");
        return out.join("\n");
    }
    _compareKeys() {
        throw new Error("Must be implemented by subclasses");
    }
    _keysName() {
        throw new Error("Must be implemented by subclasses");
    }
    _dataForKey() {
        throw new Error("Must be implemented by subclasses");
    }
}
class SpotColor {
    constructor(doc, name, C, M, Y, K){
        this.id = "CS" + Object.keys(doc.spotColors).length;
        this.name = name;
        this.values = [
            C,
            M,
            Y,
            K
        ];
        this.ref = doc.ref([
            "Separation",
            this.name,
            "DeviceCMYK",
            {
                Range: [
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1
                ],
                C0: [
                    0,
                    0,
                    0,
                    0
                ],
                C1: this.values.map((value)=>value / 100),
                FunctionType: 2,
                Domain: [
                    0,
                    1
                ],
                N: 1
            }
        ]);
        this.ref.end();
    }
    toString() {
        return `${this.ref.id} 0 R`;
    }
}
const pad = (str, length)=>(Array(length + 1).join("0") + str).slice(-length);
const escapableRe = /[\n\r\t\b\f()\\]/g;
const escapable = {
    "\n": "\\n",
    "\r": "\\r",
    "	": "\\t",
    "\b": "\\b",
    "\f": "\\f",
    "\\": "\\\\",
    "(": "\\(",
    ")": "\\)"
};
const swapBytes = function(buff) {
    const l = buff.length;
    if (l & 0x01) {
        throw new Error("Buffer length must be even");
    } else {
        for(let i = 0, end = l - 1; i < end; i += 2){
            const a = buff[i];
            buff[i] = buff[i + 1];
            buff[i + 1] = a;
        }
    }
    return buff;
};
class PDFObject {
    static convert(object, encryptFn = null) {
        if (typeof object === "string") {
            return `/${object}`;
        } else if (object instanceof String) {
            let string = object;
            let isUnicode = false;
            for(let i = 0, end = string.length; i < end; i++){
                if (string.charCodeAt(i) > 0x7f) {
                    isUnicode = true;
                    break;
                }
            }
            let stringBuffer;
            if (isUnicode) {
                stringBuffer = swapBytes(Buffer.from(`\ufeff${string}`, "utf16le"));
            } else {
                stringBuffer = Buffer.from(string.valueOf(), "ascii");
            }
            if (encryptFn) {
                string = encryptFn(stringBuffer).toString("binary");
            } else {
                string = stringBuffer.toString("binary");
            }
            string = string.replace(escapableRe, (c)=>escapable[c]);
            return `(${string})`;
        } else if (Buffer.isBuffer(object)) {
            return `<${object.toString("hex")}>`;
        } else if (object instanceof PDFAbstractReference || object instanceof PDFTree || object instanceof SpotColor) {
            return object.toString();
        } else if (object instanceof Date) {
            let string = `D:${pad(object.getUTCFullYear(), 4)}` + pad(object.getUTCMonth() + 1, 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + "Z";
            if (encryptFn) {
                string = encryptFn(Buffer.from(string, "ascii")).toString("binary");
                string = string.replace(escapableRe, (c)=>escapable[c]);
            }
            return `(${string})`;
        } else if (Array.isArray(object)) {
            const items = object.map((e)=>PDFObject.convert(e, encryptFn)).join(" ");
            return `[${items}]`;
        } else if (({}).toString.call(object) === "[object Object]") {
            const out = [
                "<<"
            ];
            for(let key in object){
                const val = object[key];
                out.push(`/${key} ${PDFObject.convert(val, encryptFn)}`);
            }
            out.push(">>");
            return out.join("\n");
        } else if (typeof object === "number") {
            return PDFObject.number(object);
        } else {
            return `${object}`;
        }
    }
    static number(n) {
        if (n > -1e21 && n < 1e21) {
            return Math.round(n * 1e6) / 1e6;
        }
        throw new Error(`unsupported number: ${n}`);
    }
}
class PDFReference extends PDFAbstractReference {
    constructor(document, id, data = {}){
        super();
        this.document = document;
        this.id = id;
        this.data = data;
        this.gen = 0;
        this.compress = this.document.compress && !this.data.Filter;
        this.uncompressedLength = 0;
        this.buffer = [];
    }
    write(chunk) {
        if (!(chunk instanceof Uint8Array)) {
            chunk = Buffer.from(chunk + "\n", "binary");
        }
        this.uncompressedLength += chunk.length;
        if (this.data.Length == null) {
            this.data.Length = 0;
        }
        this.buffer.push(chunk);
        this.data.Length += chunk.length;
        if (this.compress) {
            this.data.Filter = "FlateDecode";
        }
    }
    end(chunk) {
        if (chunk) {
            this.write(chunk);
        }
        this.finalize();
    }
    finalize() {
        this.offset = this.document._offset;
        const encryptFn = this.document._security ? this.document._security.getEncryptFn(this.id, this.gen) : null;
        if (this.buffer.length) {
            this.buffer = Buffer.concat(this.buffer);
            if (this.compress) {
                this.buffer = zlib.deflateSync(this.buffer);
            }
            if (encryptFn) {
                this.buffer = encryptFn(this.buffer);
            }
            this.data.Length = this.buffer.length;
        }
        this.document._write(`${this.id} ${this.gen} obj`);
        this.document._write(PDFObject.convert(this.data, encryptFn));
        if (this.buffer.length) {
            this.document._write("stream");
            this.document._write(this.buffer);
            this.buffer = [];
            this.document._write("\nendstream");
        }
        this.document._write("endobj");
        this.document._refEnd(this);
    }
    toString() {
        return `${this.id} ${this.gen} R`;
    }
}
const fArray = new Float32Array(1);
const uArray = new Uint32Array(fArray.buffer);
function PDFNumber(n) {
    const rounded = Math.fround(n);
    if (rounded <= n) return rounded;
    fArray[0] = n;
    if (n <= 0) {
        uArray[0] += 1;
    } else {
        uArray[0] -= 1;
    }
    return fArray[0];
}
function normalizeSides(sides, defaultDefinition = undefined, transformer = (v)=>v) {
    if (sides == null || typeof sides === "object" && Object.keys(sides).length === 0) {
        sides = defaultDefinition;
    }
    if (sides == null || typeof sides !== "object") {
        sides = {
            top: sides,
            right: sides,
            bottom: sides,
            left: sides
        };
    } else if (Array.isArray(sides)) {
        if (sides.length === 2) {
            sides = {
                vertical: sides[0],
                horizontal: sides[1]
            };
        } else {
            sides = {
                top: sides[0],
                right: sides[1],
                bottom: sides[2],
                left: sides[3]
            };
        }
    }
    if ("vertical" in sides || "horizontal" in sides) {
        sides = {
            top: sides.vertical,
            right: sides.horizontal,
            bottom: sides.vertical,
            left: sides.horizontal
        };
    }
    return {
        top: transformer(sides.top),
        right: transformer(sides.right),
        bottom: transformer(sides.bottom),
        left: transformer(sides.left)
    };
}
const MM_TO_CM = 1 / 10;
const CM_TO_IN = 1 / 2.54;
const PX_TO_IN = 1 / 96;
const IN_TO_PT = 72;
const PC_TO_PT = 12;
function cosine(a) {
    if (a === 0) return 1;
    if (a === 90) return 0;
    if (a === 180) return -1;
    if (a === 270) return 0;
    return Math.cos(a * Math.PI / 180);
}
function sine(a) {
    if (a === 0) return 0;
    if (a === 90) return 1;
    if (a === 180) return 0;
    if (a === 270) return -1;
    return Math.sin(a * Math.PI / 180);
}
const DEFAULT_MARGINS = {
    top: 72,
    left: 72,
    bottom: 72,
    right: 72
};
const SIZES = {
    "4A0": [
        4767.87,
        6740.79
    ],
    "2A0": [
        3370.39,
        4767.87
    ],
    A0: [
        2383.94,
        3370.39
    ],
    A1: [
        1683.78,
        2383.94
    ],
    A2: [
        1190.55,
        1683.78
    ],
    A3: [
        841.89,
        1190.55
    ],
    A4: [
        595.28,
        841.89
    ],
    A5: [
        419.53,
        595.28
    ],
    A6: [
        297.64,
        419.53
    ],
    A7: [
        209.76,
        297.64
    ],
    A8: [
        147.4,
        209.76
    ],
    A9: [
        104.88,
        147.4
    ],
    A10: [
        73.7,
        104.88
    ],
    B0: [
        2834.65,
        4008.19
    ],
    B1: [
        2004.09,
        2834.65
    ],
    B2: [
        1417.32,
        2004.09
    ],
    B3: [
        1000.63,
        1417.32
    ],
    B4: [
        708.66,
        1000.63
    ],
    B5: [
        498.9,
        708.66
    ],
    B6: [
        354.33,
        498.9
    ],
    B7: [
        249.45,
        354.33
    ],
    B8: [
        175.75,
        249.45
    ],
    B9: [
        124.72,
        175.75
    ],
    B10: [
        87.87,
        124.72
    ],
    C0: [
        2599.37,
        3676.54
    ],
    C1: [
        1836.85,
        2599.37
    ],
    C2: [
        1298.27,
        1836.85
    ],
    C3: [
        918.43,
        1298.27
    ],
    C4: [
        649.13,
        918.43
    ],
    C5: [
        459.21,
        649.13
    ],
    C6: [
        323.15,
        459.21
    ],
    C7: [
        229.61,
        323.15
    ],
    C8: [
        161.57,
        229.61
    ],
    C9: [
        113.39,
        161.57
    ],
    C10: [
        79.37,
        113.39
    ],
    RA0: [
        2437.8,
        3458.27
    ],
    RA1: [
        1729.13,
        2437.8
    ],
    RA2: [
        1218.9,
        1729.13
    ],
    RA3: [
        864.57,
        1218.9
    ],
    RA4: [
        609.45,
        864.57
    ],
    SRA0: [
        2551.18,
        3628.35
    ],
    SRA1: [
        1814.17,
        2551.18
    ],
    SRA2: [
        1275.59,
        1814.17
    ],
    SRA3: [
        907.09,
        1275.59
    ],
    SRA4: [
        637.8,
        907.09
    ],
    EXECUTIVE: [
        521.86,
        756.0
    ],
    FOLIO: [
        612.0,
        936.0
    ],
    LEGAL: [
        612.0,
        1008.0
    ],
    LETTER: [
        612.0,
        792.0
    ],
    TABLOID: [
        792.0,
        1224.0
    ]
};
class PDFPage {
    constructor(document, options = {}){
        this.document = document;
        this._options = options;
        this.size = options.size || "letter";
        this.layout = options.layout || "portrait";
        const dimensions = Array.isArray(this.size) ? this.size : SIZES[this.size.toUpperCase()];
        this.width = dimensions[this.layout === "portrait" ? 0 : 1];
        this.height = dimensions[this.layout === "portrait" ? 1 : 0];
        this.content = this.document.ref();
        if (options.font) document.font(options.font, options.fontFamily);
        if (options.fontSize) document.fontSize(options.fontSize);
        this.margins = normalizeSides(options.margin ?? options.margins, DEFAULT_MARGINS, (x)=>document.sizeToPoint(x, 0, this));
        this.resources = this.document.ref({
            ProcSet: [
                "PDF",
                "Text",
                "ImageB",
                "ImageC",
                "ImageI"
            ]
        });
        this.dictionary = this.document.ref({
            Type: "Page",
            Parent: this.document._root.data.Pages,
            MediaBox: [
                0,
                0,
                this.width,
                this.height
            ],
            Contents: this.content,
            Resources: this.resources
        });
        this.markings = [];
    }
    get fonts() {
        const data = this.resources.data;
        return data.Font != null ? data.Font : data.Font = {};
    }
    get xobjects() {
        const data = this.resources.data;
        return data.XObject != null ? data.XObject : data.XObject = {};
    }
    get ext_gstates() {
        const data = this.resources.data;
        return data.ExtGState != null ? data.ExtGState : data.ExtGState = {};
    }
    get patterns() {
        const data = this.resources.data;
        return data.Pattern != null ? data.Pattern : data.Pattern = {};
    }
    get colorSpaces() {
        const data = this.resources.data;
        return data.ColorSpace || (data.ColorSpace = {});
    }
    get annotations() {
        const data = this.dictionary.data;
        return data.Annots != null ? data.Annots : data.Annots = [];
    }
    get structParentTreeKey() {
        const data = this.dictionary.data;
        return data.StructParents != null ? data.StructParents : data.StructParents = this.document.createStructParentTreeNextKey();
    }
    get contentWidth() {
        return this.width - this.margins.left - this.margins.right;
    }
    get contentHeight() {
        return this.height - this.margins.top - this.margins.bottom;
    }
    maxY() {
        return this.height - this.margins.bottom;
    }
    write(chunk) {
        return this.content.write(chunk);
    }
    _setTabOrder() {
        if (!this.dictionary.Tabs && this.document.hasMarkInfoDictionary()) {
            this.dictionary.data.Tabs = "S";
        }
    }
    end() {
        this._setTabOrder();
        this.dictionary.end();
        this.resources.data.ColorSpace = this.resources.data.ColorSpace || {};
        for (let color of Object.values(this.document.spotColors)){
            this.resources.data.ColorSpace[color.id] = color;
        }
        this.resources.end();
        return this.content.end();
    }
}
class PDFNameTree extends PDFTree {
    _compareKeys(a, b) {
        return a.localeCompare(b);
    }
    _keysName() {
        return "Names";
    }
    _dataForKey(k) {
        return new String(k);
    }
}
function inRange(value, rangeGroup) {
    if (value < rangeGroup[0]) return false;
    let startRange = 0;
    let endRange = rangeGroup.length / 2;
    while(startRange <= endRange){
        const middleRange = Math.floor((startRange + endRange) / 2);
        const arrayIndex = middleRange * 2;
        if (value >= rangeGroup[arrayIndex] && value <= rangeGroup[arrayIndex + 1]) {
            return true;
        }
        if (value > rangeGroup[arrayIndex + 1]) {
            startRange = middleRange + 1;
        } else {
            endRange = middleRange - 1;
        }
    }
    return false;
}
const unassigned_code_points = [
    0x0221,
    0x0221,
    0x0234,
    0x024f,
    0x02ae,
    0x02af,
    0x02ef,
    0x02ff,
    0x0350,
    0x035f,
    0x0370,
    0x0373,
    0x0376,
    0x0379,
    0x037b,
    0x037d,
    0x037f,
    0x0383,
    0x038b,
    0x038b,
    0x038d,
    0x038d,
    0x03a2,
    0x03a2,
    0x03cf,
    0x03cf,
    0x03f7,
    0x03ff,
    0x0487,
    0x0487,
    0x04cf,
    0x04cf,
    0x04f6,
    0x04f7,
    0x04fa,
    0x04ff,
    0x0510,
    0x0530,
    0x0557,
    0x0558,
    0x0560,
    0x0560,
    0x0588,
    0x0588,
    0x058b,
    0x0590,
    0x05a2,
    0x05a2,
    0x05ba,
    0x05ba,
    0x05c5,
    0x05cf,
    0x05eb,
    0x05ef,
    0x05f5,
    0x060b,
    0x060d,
    0x061a,
    0x061c,
    0x061e,
    0x0620,
    0x0620,
    0x063b,
    0x063f,
    0x0656,
    0x065f,
    0x06ee,
    0x06ef,
    0x06ff,
    0x06ff,
    0x070e,
    0x070e,
    0x072d,
    0x072f,
    0x074b,
    0x077f,
    0x07b2,
    0x0900,
    0x0904,
    0x0904,
    0x093a,
    0x093b,
    0x094e,
    0x094f,
    0x0955,
    0x0957,
    0x0971,
    0x0980,
    0x0984,
    0x0984,
    0x098d,
    0x098e,
    0x0991,
    0x0992,
    0x09a9,
    0x09a9,
    0x09b1,
    0x09b1,
    0x09b3,
    0x09b5,
    0x09ba,
    0x09bb,
    0x09bd,
    0x09bd,
    0x09c5,
    0x09c6,
    0x09c9,
    0x09ca,
    0x09ce,
    0x09d6,
    0x09d8,
    0x09db,
    0x09de,
    0x09de,
    0x09e4,
    0x09e5,
    0x09fb,
    0x0a01,
    0x0a03,
    0x0a04,
    0x0a0b,
    0x0a0e,
    0x0a11,
    0x0a12,
    0x0a29,
    0x0a29,
    0x0a31,
    0x0a31,
    0x0a34,
    0x0a34,
    0x0a37,
    0x0a37,
    0x0a3a,
    0x0a3b,
    0x0a3d,
    0x0a3d,
    0x0a43,
    0x0a46,
    0x0a49,
    0x0a4a,
    0x0a4e,
    0x0a58,
    0x0a5d,
    0x0a5d,
    0x0a5f,
    0x0a65,
    0x0a75,
    0x0a80,
    0x0a84,
    0x0a84,
    0x0a8c,
    0x0a8c,
    0x0a8e,
    0x0a8e,
    0x0a92,
    0x0a92,
    0x0aa9,
    0x0aa9,
    0x0ab1,
    0x0ab1,
    0x0ab4,
    0x0ab4,
    0x0aba,
    0x0abb,
    0x0ac6,
    0x0ac6,
    0x0aca,
    0x0aca,
    0x0ace,
    0x0acf,
    0x0ad1,
    0x0adf,
    0x0ae1,
    0x0ae5,
    0x0af0,
    0x0b00,
    0x0b04,
    0x0b04,
    0x0b0d,
    0x0b0e,
    0x0b11,
    0x0b12,
    0x0b29,
    0x0b29,
    0x0b31,
    0x0b31,
    0x0b34,
    0x0b35,
    0x0b3a,
    0x0b3b,
    0x0b44,
    0x0b46,
    0x0b49,
    0x0b4a,
    0x0b4e,
    0x0b55,
    0x0b58,
    0x0b5b,
    0x0b5e,
    0x0b5e,
    0x0b62,
    0x0b65,
    0x0b71,
    0x0b81,
    0x0b84,
    0x0b84,
    0x0b8b,
    0x0b8d,
    0x0b91,
    0x0b91,
    0x0b96,
    0x0b98,
    0x0b9b,
    0x0b9b,
    0x0b9d,
    0x0b9d,
    0x0ba0,
    0x0ba2,
    0x0ba5,
    0x0ba7,
    0x0bab,
    0x0bad,
    0x0bb6,
    0x0bb6,
    0x0bba,
    0x0bbd,
    0x0bc3,
    0x0bc5,
    0x0bc9,
    0x0bc9,
    0x0bce,
    0x0bd6,
    0x0bd8,
    0x0be6,
    0x0bf3,
    0x0c00,
    0x0c04,
    0x0c04,
    0x0c0d,
    0x0c0d,
    0x0c11,
    0x0c11,
    0x0c29,
    0x0c29,
    0x0c34,
    0x0c34,
    0x0c3a,
    0x0c3d,
    0x0c45,
    0x0c45,
    0x0c49,
    0x0c49,
    0x0c4e,
    0x0c54,
    0x0c57,
    0x0c5f,
    0x0c62,
    0x0c65,
    0x0c70,
    0x0c81,
    0x0c84,
    0x0c84,
    0x0c8d,
    0x0c8d,
    0x0c91,
    0x0c91,
    0x0ca9,
    0x0ca9,
    0x0cb4,
    0x0cb4,
    0x0cba,
    0x0cbd,
    0x0cc5,
    0x0cc5,
    0x0cc9,
    0x0cc9,
    0x0cce,
    0x0cd4,
    0x0cd7,
    0x0cdd,
    0x0cdf,
    0x0cdf,
    0x0ce2,
    0x0ce5,
    0x0cf0,
    0x0d01,
    0x0d04,
    0x0d04,
    0x0d0d,
    0x0d0d,
    0x0d11,
    0x0d11,
    0x0d29,
    0x0d29,
    0x0d3a,
    0x0d3d,
    0x0d44,
    0x0d45,
    0x0d49,
    0x0d49,
    0x0d4e,
    0x0d56,
    0x0d58,
    0x0d5f,
    0x0d62,
    0x0d65,
    0x0d70,
    0x0d81,
    0x0d84,
    0x0d84,
    0x0d97,
    0x0d99,
    0x0db2,
    0x0db2,
    0x0dbc,
    0x0dbc,
    0x0dbe,
    0x0dbf,
    0x0dc7,
    0x0dc9,
    0x0dcb,
    0x0dce,
    0x0dd5,
    0x0dd5,
    0x0dd7,
    0x0dd7,
    0x0de0,
    0x0df1,
    0x0df5,
    0x0e00,
    0x0e3b,
    0x0e3e,
    0x0e5c,
    0x0e80,
    0x0e83,
    0x0e83,
    0x0e85,
    0x0e86,
    0x0e89,
    0x0e89,
    0x0e8b,
    0x0e8c,
    0x0e8e,
    0x0e93,
    0x0e98,
    0x0e98,
    0x0ea0,
    0x0ea0,
    0x0ea4,
    0x0ea4,
    0x0ea6,
    0x0ea6,
    0x0ea8,
    0x0ea9,
    0x0eac,
    0x0eac,
    0x0eba,
    0x0eba,
    0x0ebe,
    0x0ebf,
    0x0ec5,
    0x0ec5,
    0x0ec7,
    0x0ec7,
    0x0ece,
    0x0ecf,
    0x0eda,
    0x0edb,
    0x0ede,
    0x0eff,
    0x0f48,
    0x0f48,
    0x0f6b,
    0x0f70,
    0x0f8c,
    0x0f8f,
    0x0f98,
    0x0f98,
    0x0fbd,
    0x0fbd,
    0x0fcd,
    0x0fce,
    0x0fd0,
    0x0fff,
    0x1022,
    0x1022,
    0x1028,
    0x1028,
    0x102b,
    0x102b,
    0x1033,
    0x1035,
    0x103a,
    0x103f,
    0x105a,
    0x109f,
    0x10c6,
    0x10cf,
    0x10f9,
    0x10fa,
    0x10fc,
    0x10ff,
    0x115a,
    0x115e,
    0x11a3,
    0x11a7,
    0x11fa,
    0x11ff,
    0x1207,
    0x1207,
    0x1247,
    0x1247,
    0x1249,
    0x1249,
    0x124e,
    0x124f,
    0x1257,
    0x1257,
    0x1259,
    0x1259,
    0x125e,
    0x125f,
    0x1287,
    0x1287,
    0x1289,
    0x1289,
    0x128e,
    0x128f,
    0x12af,
    0x12af,
    0x12b1,
    0x12b1,
    0x12b6,
    0x12b7,
    0x12bf,
    0x12bf,
    0x12c1,
    0x12c1,
    0x12c6,
    0x12c7,
    0x12cf,
    0x12cf,
    0x12d7,
    0x12d7,
    0x12ef,
    0x12ef,
    0x130f,
    0x130f,
    0x1311,
    0x1311,
    0x1316,
    0x1317,
    0x131f,
    0x131f,
    0x1347,
    0x1347,
    0x135b,
    0x1360,
    0x137d,
    0x139f,
    0x13f5,
    0x1400,
    0x1677,
    0x167f,
    0x169d,
    0x169f,
    0x16f1,
    0x16ff,
    0x170d,
    0x170d,
    0x1715,
    0x171f,
    0x1737,
    0x173f,
    0x1754,
    0x175f,
    0x176d,
    0x176d,
    0x1771,
    0x1771,
    0x1774,
    0x177f,
    0x17dd,
    0x17df,
    0x17ea,
    0x17ff,
    0x180f,
    0x180f,
    0x181a,
    0x181f,
    0x1878,
    0x187f,
    0x18aa,
    0x1dff,
    0x1e9c,
    0x1e9f,
    0x1efa,
    0x1eff,
    0x1f16,
    0x1f17,
    0x1f1e,
    0x1f1f,
    0x1f46,
    0x1f47,
    0x1f4e,
    0x1f4f,
    0x1f58,
    0x1f58,
    0x1f5a,
    0x1f5a,
    0x1f5c,
    0x1f5c,
    0x1f5e,
    0x1f5e,
    0x1f7e,
    0x1f7f,
    0x1fb5,
    0x1fb5,
    0x1fc5,
    0x1fc5,
    0x1fd4,
    0x1fd5,
    0x1fdc,
    0x1fdc,
    0x1ff0,
    0x1ff1,
    0x1ff5,
    0x1ff5,
    0x1fff,
    0x1fff,
    0x2053,
    0x2056,
    0x2058,
    0x205e,
    0x2064,
    0x2069,
    0x2072,
    0x2073,
    0x208f,
    0x209f,
    0x20b2,
    0x20cf,
    0x20eb,
    0x20ff,
    0x213b,
    0x213c,
    0x214c,
    0x2152,
    0x2184,
    0x218f,
    0x23cf,
    0x23ff,
    0x2427,
    0x243f,
    0x244b,
    0x245f,
    0x24ff,
    0x24ff,
    0x2614,
    0x2615,
    0x2618,
    0x2618,
    0x267e,
    0x267f,
    0x268a,
    0x2700,
    0x2705,
    0x2705,
    0x270a,
    0x270b,
    0x2728,
    0x2728,
    0x274c,
    0x274c,
    0x274e,
    0x274e,
    0x2753,
    0x2755,
    0x2757,
    0x2757,
    0x275f,
    0x2760,
    0x2795,
    0x2797,
    0x27b0,
    0x27b0,
    0x27bf,
    0x27cf,
    0x27ec,
    0x27ef,
    0x2b00,
    0x2e7f,
    0x2e9a,
    0x2e9a,
    0x2ef4,
    0x2eff,
    0x2fd6,
    0x2fef,
    0x2ffc,
    0x2fff,
    0x3040,
    0x3040,
    0x3097,
    0x3098,
    0x3100,
    0x3104,
    0x312d,
    0x3130,
    0x318f,
    0x318f,
    0x31b8,
    0x31ef,
    0x321d,
    0x321f,
    0x3244,
    0x3250,
    0x327c,
    0x327e,
    0x32cc,
    0x32cf,
    0x32ff,
    0x32ff,
    0x3377,
    0x337a,
    0x33de,
    0x33df,
    0x33ff,
    0x33ff,
    0x4db6,
    0x4dff,
    0x9fa6,
    0x9fff,
    0xa48d,
    0xa48f,
    0xa4c7,
    0xabff,
    0xd7a4,
    0xd7ff,
    0xfa2e,
    0xfa2f,
    0xfa6b,
    0xfaff,
    0xfb07,
    0xfb12,
    0xfb18,
    0xfb1c,
    0xfb37,
    0xfb37,
    0xfb3d,
    0xfb3d,
    0xfb3f,
    0xfb3f,
    0xfb42,
    0xfb42,
    0xfb45,
    0xfb45,
    0xfbb2,
    0xfbd2,
    0xfd40,
    0xfd4f,
    0xfd90,
    0xfd91,
    0xfdc8,
    0xfdcf,
    0xfdfd,
    0xfdff,
    0xfe10,
    0xfe1f,
    0xfe24,
    0xfe2f,
    0xfe47,
    0xfe48,
    0xfe53,
    0xfe53,
    0xfe67,
    0xfe67,
    0xfe6c,
    0xfe6f,
    0xfe75,
    0xfe75,
    0xfefd,
    0xfefe,
    0xff00,
    0xff00,
    0xffbf,
    0xffc1,
    0xffc8,
    0xffc9,
    0xffd0,
    0xffd1,
    0xffd8,
    0xffd9,
    0xffdd,
    0xffdf,
    0xffe7,
    0xffe7,
    0xffef,
    0xfff8,
    0x10000,
    0x102ff,
    0x1031f,
    0x1031f,
    0x10324,
    0x1032f,
    0x1034b,
    0x103ff,
    0x10426,
    0x10427,
    0x1044e,
    0x1cfff,
    0x1d0f6,
    0x1d0ff,
    0x1d127,
    0x1d129,
    0x1d1de,
    0x1d3ff,
    0x1d455,
    0x1d455,
    0x1d49d,
    0x1d49d,
    0x1d4a0,
    0x1d4a1,
    0x1d4a3,
    0x1d4a4,
    0x1d4a7,
    0x1d4a8,
    0x1d4ad,
    0x1d4ad,
    0x1d4ba,
    0x1d4ba,
    0x1d4bc,
    0x1d4bc,
    0x1d4c1,
    0x1d4c1,
    0x1d4c4,
    0x1d4c4,
    0x1d506,
    0x1d506,
    0x1d50b,
    0x1d50c,
    0x1d515,
    0x1d515,
    0x1d51d,
    0x1d51d,
    0x1d53a,
    0x1d53a,
    0x1d53f,
    0x1d53f,
    0x1d545,
    0x1d545,
    0x1d547,
    0x1d549,
    0x1d551,
    0x1d551,
    0x1d6a4,
    0x1d6a7,
    0x1d7ca,
    0x1d7cd,
    0x1d800,
    0x1fffd,
    0x2a6d7,
    0x2f7ff,
    0x2fa1e,
    0x2fffd,
    0x30000,
    0x3fffd,
    0x40000,
    0x4fffd,
    0x50000,
    0x5fffd,
    0x60000,
    0x6fffd,
    0x70000,
    0x7fffd,
    0x80000,
    0x8fffd,
    0x90000,
    0x9fffd,
    0xa0000,
    0xafffd,
    0xb0000,
    0xbfffd,
    0xc0000,
    0xcfffd,
    0xd0000,
    0xdfffd,
    0xe0000,
    0xe0000,
    0xe0002,
    0xe001f,
    0xe0080,
    0xefffd
];
const isUnassignedCodePoint = (character)=>inRange(character, unassigned_code_points);
const commonly_mapped_to_nothing = [
    0x00ad,
    0x00ad,
    0x034f,
    0x034f,
    0x1806,
    0x1806,
    0x180b,
    0x180b,
    0x180c,
    0x180c,
    0x180d,
    0x180d,
    0x200b,
    0x200b,
    0x200c,
    0x200c,
    0x200d,
    0x200d,
    0x2060,
    0x2060,
    0xfe00,
    0xfe00,
    0xfe01,
    0xfe01,
    0xfe02,
    0xfe02,
    0xfe03,
    0xfe03,
    0xfe04,
    0xfe04,
    0xfe05,
    0xfe05,
    0xfe06,
    0xfe06,
    0xfe07,
    0xfe07,
    0xfe08,
    0xfe08,
    0xfe09,
    0xfe09,
    0xfe0a,
    0xfe0a,
    0xfe0b,
    0xfe0b,
    0xfe0c,
    0xfe0c,
    0xfe0d,
    0xfe0d,
    0xfe0e,
    0xfe0e,
    0xfe0f,
    0xfe0f,
    0xfeff,
    0xfeff
];
const isCommonlyMappedToNothing = (character)=>inRange(character, commonly_mapped_to_nothing);
const non_ASCII_space_characters = [
    0x00a0,
    0x00a0,
    0x1680,
    0x1680,
    0x2000,
    0x2000,
    0x2001,
    0x2001,
    0x2002,
    0x2002,
    0x2003,
    0x2003,
    0x2004,
    0x2004,
    0x2005,
    0x2005,
    0x2006,
    0x2006,
    0x2007,
    0x2007,
    0x2008,
    0x2008,
    0x2009,
    0x2009,
    0x200a,
    0x200a,
    0x200b,
    0x200b,
    0x202f,
    0x202f,
    0x205f,
    0x205f,
    0x3000,
    0x3000
];
const isNonASCIISpaceCharacter = (character)=>inRange(character, non_ASCII_space_characters);
const non_ASCII_controls_characters = [
    0x0080,
    0x009f,
    0x06dd,
    0x06dd,
    0x070f,
    0x070f,
    0x180e,
    0x180e,
    0x200c,
    0x200c,
    0x200d,
    0x200d,
    0x2028,
    0x2028,
    0x2029,
    0x2029,
    0x2060,
    0x2060,
    0x2061,
    0x2061,
    0x2062,
    0x2062,
    0x2063,
    0x2063,
    0x206a,
    0x206f,
    0xfeff,
    0xfeff,
    0xfff9,
    0xfffc,
    0x1d173,
    0x1d17a
];
const non_character_codepoints = [
    0xfdd0,
    0xfdef,
    0xfffe,
    0xffff,
    0x1fffe,
    0x1ffff,
    0x2fffe,
    0x2ffff,
    0x3fffe,
    0x3ffff,
    0x4fffe,
    0x4ffff,
    0x5fffe,
    0x5ffff,
    0x6fffe,
    0x6ffff,
    0x7fffe,
    0x7ffff,
    0x8fffe,
    0x8ffff,
    0x9fffe,
    0x9ffff,
    0xafffe,
    0xaffff,
    0xbfffe,
    0xbffff,
    0xcfffe,
    0xcffff,
    0xdfffe,
    0xdffff,
    0xefffe,
    0xeffff,
    0x10fffe,
    0x10ffff
];
const prohibited_characters = [
    0,
    0x001f,
    0x007f,
    0x007f,
    0x0340,
    0x0340,
    0x0341,
    0x0341,
    0x200e,
    0x200e,
    0x200f,
    0x200f,
    0x202a,
    0x202a,
    0x202b,
    0x202b,
    0x202c,
    0x202c,
    0x202d,
    0x202d,
    0x202e,
    0x202e,
    0x206a,
    0x206a,
    0x206b,
    0x206b,
    0x206c,
    0x206c,
    0x206d,
    0x206d,
    0x206e,
    0x206e,
    0x206f,
    0x206f,
    0x2ff0,
    0x2ffb,
    0xd800,
    0xdfff,
    0xe000,
    0xf8ff,
    0xfff9,
    0xfff9,
    0xfffa,
    0xfffa,
    0xfffb,
    0xfffb,
    0xfffc,
    0xfffc,
    0xfffd,
    0xfffd,
    0xe0001,
    0xe0001,
    0xe0020,
    0xe007f,
    0xf0000,
    0xffffd,
    0x100000,
    0x10fffd
];
const isProhibitedCharacter = (character)=>inRange(character, non_ASCII_space_characters) || inRange(character, prohibited_characters) || inRange(character, non_ASCII_controls_characters) || inRange(character, non_character_codepoints);
const bidirectional_r_al = [
    0x05be,
    0x05be,
    0x05c0,
    0x05c0,
    0x05c3,
    0x05c3,
    0x05d0,
    0x05ea,
    0x05f0,
    0x05f4,
    0x061b,
    0x061b,
    0x061f,
    0x061f,
    0x0621,
    0x063a,
    0x0640,
    0x064a,
    0x066d,
    0x066f,
    0x0671,
    0x06d5,
    0x06dd,
    0x06dd,
    0x06e5,
    0x06e6,
    0x06fa,
    0x06fe,
    0x0700,
    0x070d,
    0x0710,
    0x0710,
    0x0712,
    0x072c,
    0x0780,
    0x07a5,
    0x07b1,
    0x07b1,
    0x200f,
    0x200f,
    0xfb1d,
    0xfb1d,
    0xfb1f,
    0xfb28,
    0xfb2a,
    0xfb36,
    0xfb38,
    0xfb3c,
    0xfb3e,
    0xfb3e,
    0xfb40,
    0xfb41,
    0xfb43,
    0xfb44,
    0xfb46,
    0xfbb1,
    0xfbd3,
    0xfd3d,
    0xfd50,
    0xfd8f,
    0xfd92,
    0xfdc7,
    0xfdf0,
    0xfdfc,
    0xfe70,
    0xfe74,
    0xfe76,
    0xfefc
];
const isBidirectionalRAL = (character)=>inRange(character, bidirectional_r_al);
const bidirectional_l = [
    0x0041,
    0x005a,
    0x0061,
    0x007a,
    0x00aa,
    0x00aa,
    0x00b5,
    0x00b5,
    0x00ba,
    0x00ba,
    0x00c0,
    0x00d6,
    0x00d8,
    0x00f6,
    0x00f8,
    0x0220,
    0x0222,
    0x0233,
    0x0250,
    0x02ad,
    0x02b0,
    0x02b8,
    0x02bb,
    0x02c1,
    0x02d0,
    0x02d1,
    0x02e0,
    0x02e4,
    0x02ee,
    0x02ee,
    0x037a,
    0x037a,
    0x0386,
    0x0386,
    0x0388,
    0x038a,
    0x038c,
    0x038c,
    0x038e,
    0x03a1,
    0x03a3,
    0x03ce,
    0x03d0,
    0x03f5,
    0x0400,
    0x0482,
    0x048a,
    0x04ce,
    0x04d0,
    0x04f5,
    0x04f8,
    0x04f9,
    0x0500,
    0x050f,
    0x0531,
    0x0556,
    0x0559,
    0x055f,
    0x0561,
    0x0587,
    0x0589,
    0x0589,
    0x0903,
    0x0903,
    0x0905,
    0x0939,
    0x093d,
    0x0940,
    0x0949,
    0x094c,
    0x0950,
    0x0950,
    0x0958,
    0x0961,
    0x0964,
    0x0970,
    0x0982,
    0x0983,
    0x0985,
    0x098c,
    0x098f,
    0x0990,
    0x0993,
    0x09a8,
    0x09aa,
    0x09b0,
    0x09b2,
    0x09b2,
    0x09b6,
    0x09b9,
    0x09be,
    0x09c0,
    0x09c7,
    0x09c8,
    0x09cb,
    0x09cc,
    0x09d7,
    0x09d7,
    0x09dc,
    0x09dd,
    0x09df,
    0x09e1,
    0x09e6,
    0x09f1,
    0x09f4,
    0x09fa,
    0x0a05,
    0x0a0a,
    0x0a0f,
    0x0a10,
    0x0a13,
    0x0a28,
    0x0a2a,
    0x0a30,
    0x0a32,
    0x0a33,
    0x0a35,
    0x0a36,
    0x0a38,
    0x0a39,
    0x0a3e,
    0x0a40,
    0x0a59,
    0x0a5c,
    0x0a5e,
    0x0a5e,
    0x0a66,
    0x0a6f,
    0x0a72,
    0x0a74,
    0x0a83,
    0x0a83,
    0x0a85,
    0x0a8b,
    0x0a8d,
    0x0a8d,
    0x0a8f,
    0x0a91,
    0x0a93,
    0x0aa8,
    0x0aaa,
    0x0ab0,
    0x0ab2,
    0x0ab3,
    0x0ab5,
    0x0ab9,
    0x0abd,
    0x0ac0,
    0x0ac9,
    0x0ac9,
    0x0acb,
    0x0acc,
    0x0ad0,
    0x0ad0,
    0x0ae0,
    0x0ae0,
    0x0ae6,
    0x0aef,
    0x0b02,
    0x0b03,
    0x0b05,
    0x0b0c,
    0x0b0f,
    0x0b10,
    0x0b13,
    0x0b28,
    0x0b2a,
    0x0b30,
    0x0b32,
    0x0b33,
    0x0b36,
    0x0b39,
    0x0b3d,
    0x0b3e,
    0x0b40,
    0x0b40,
    0x0b47,
    0x0b48,
    0x0b4b,
    0x0b4c,
    0x0b57,
    0x0b57,
    0x0b5c,
    0x0b5d,
    0x0b5f,
    0x0b61,
    0x0b66,
    0x0b70,
    0x0b83,
    0x0b83,
    0x0b85,
    0x0b8a,
    0x0b8e,
    0x0b90,
    0x0b92,
    0x0b95,
    0x0b99,
    0x0b9a,
    0x0b9c,
    0x0b9c,
    0x0b9e,
    0x0b9f,
    0x0ba3,
    0x0ba4,
    0x0ba8,
    0x0baa,
    0x0bae,
    0x0bb5,
    0x0bb7,
    0x0bb9,
    0x0bbe,
    0x0bbf,
    0x0bc1,
    0x0bc2,
    0x0bc6,
    0x0bc8,
    0x0bca,
    0x0bcc,
    0x0bd7,
    0x0bd7,
    0x0be7,
    0x0bf2,
    0x0c01,
    0x0c03,
    0x0c05,
    0x0c0c,
    0x0c0e,
    0x0c10,
    0x0c12,
    0x0c28,
    0x0c2a,
    0x0c33,
    0x0c35,
    0x0c39,
    0x0c41,
    0x0c44,
    0x0c60,
    0x0c61,
    0x0c66,
    0x0c6f,
    0x0c82,
    0x0c83,
    0x0c85,
    0x0c8c,
    0x0c8e,
    0x0c90,
    0x0c92,
    0x0ca8,
    0x0caa,
    0x0cb3,
    0x0cb5,
    0x0cb9,
    0x0cbe,
    0x0cbe,
    0x0cc0,
    0x0cc4,
    0x0cc7,
    0x0cc8,
    0x0cca,
    0x0ccb,
    0x0cd5,
    0x0cd6,
    0x0cde,
    0x0cde,
    0x0ce0,
    0x0ce1,
    0x0ce6,
    0x0cef,
    0x0d02,
    0x0d03,
    0x0d05,
    0x0d0c,
    0x0d0e,
    0x0d10,
    0x0d12,
    0x0d28,
    0x0d2a,
    0x0d39,
    0x0d3e,
    0x0d40,
    0x0d46,
    0x0d48,
    0x0d4a,
    0x0d4c,
    0x0d57,
    0x0d57,
    0x0d60,
    0x0d61,
    0x0d66,
    0x0d6f,
    0x0d82,
    0x0d83,
    0x0d85,
    0x0d96,
    0x0d9a,
    0x0db1,
    0x0db3,
    0x0dbb,
    0x0dbd,
    0x0dbd,
    0x0dc0,
    0x0dc6,
    0x0dcf,
    0x0dd1,
    0x0dd8,
    0x0ddf,
    0x0df2,
    0x0df4,
    0x0e01,
    0x0e30,
    0x0e32,
    0x0e33,
    0x0e40,
    0x0e46,
    0x0e4f,
    0x0e5b,
    0x0e81,
    0x0e82,
    0x0e84,
    0x0e84,
    0x0e87,
    0x0e88,
    0x0e8a,
    0x0e8a,
    0x0e8d,
    0x0e8d,
    0x0e94,
    0x0e97,
    0x0e99,
    0x0e9f,
    0x0ea1,
    0x0ea3,
    0x0ea5,
    0x0ea5,
    0x0ea7,
    0x0ea7,
    0x0eaa,
    0x0eab,
    0x0ead,
    0x0eb0,
    0x0eb2,
    0x0eb3,
    0x0ebd,
    0x0ebd,
    0x0ec0,
    0x0ec4,
    0x0ec6,
    0x0ec6,
    0x0ed0,
    0x0ed9,
    0x0edc,
    0x0edd,
    0x0f00,
    0x0f17,
    0x0f1a,
    0x0f34,
    0x0f36,
    0x0f36,
    0x0f38,
    0x0f38,
    0x0f3e,
    0x0f47,
    0x0f49,
    0x0f6a,
    0x0f7f,
    0x0f7f,
    0x0f85,
    0x0f85,
    0x0f88,
    0x0f8b,
    0x0fbe,
    0x0fc5,
    0x0fc7,
    0x0fcc,
    0x0fcf,
    0x0fcf,
    0x1000,
    0x1021,
    0x1023,
    0x1027,
    0x1029,
    0x102a,
    0x102c,
    0x102c,
    0x1031,
    0x1031,
    0x1038,
    0x1038,
    0x1040,
    0x1057,
    0x10a0,
    0x10c5,
    0x10d0,
    0x10f8,
    0x10fb,
    0x10fb,
    0x1100,
    0x1159,
    0x115f,
    0x11a2,
    0x11a8,
    0x11f9,
    0x1200,
    0x1206,
    0x1208,
    0x1246,
    0x1248,
    0x1248,
    0x124a,
    0x124d,
    0x1250,
    0x1256,
    0x1258,
    0x1258,
    0x125a,
    0x125d,
    0x1260,
    0x1286,
    0x1288,
    0x1288,
    0x128a,
    0x128d,
    0x1290,
    0x12ae,
    0x12b0,
    0x12b0,
    0x12b2,
    0x12b5,
    0x12b8,
    0x12be,
    0x12c0,
    0x12c0,
    0x12c2,
    0x12c5,
    0x12c8,
    0x12ce,
    0x12d0,
    0x12d6,
    0x12d8,
    0x12ee,
    0x12f0,
    0x130e,
    0x1310,
    0x1310,
    0x1312,
    0x1315,
    0x1318,
    0x131e,
    0x1320,
    0x1346,
    0x1348,
    0x135a,
    0x1361,
    0x137c,
    0x13a0,
    0x13f4,
    0x1401,
    0x1676,
    0x1681,
    0x169a,
    0x16a0,
    0x16f0,
    0x1700,
    0x170c,
    0x170e,
    0x1711,
    0x1720,
    0x1731,
    0x1735,
    0x1736,
    0x1740,
    0x1751,
    0x1760,
    0x176c,
    0x176e,
    0x1770,
    0x1780,
    0x17b6,
    0x17be,
    0x17c5,
    0x17c7,
    0x17c8,
    0x17d4,
    0x17da,
    0x17dc,
    0x17dc,
    0x17e0,
    0x17e9,
    0x1810,
    0x1819,
    0x1820,
    0x1877,
    0x1880,
    0x18a8,
    0x1e00,
    0x1e9b,
    0x1ea0,
    0x1ef9,
    0x1f00,
    0x1f15,
    0x1f18,
    0x1f1d,
    0x1f20,
    0x1f45,
    0x1f48,
    0x1f4d,
    0x1f50,
    0x1f57,
    0x1f59,
    0x1f59,
    0x1f5b,
    0x1f5b,
    0x1f5d,
    0x1f5d,
    0x1f5f,
    0x1f7d,
    0x1f80,
    0x1fb4,
    0x1fb6,
    0x1fbc,
    0x1fbe,
    0x1fbe,
    0x1fc2,
    0x1fc4,
    0x1fc6,
    0x1fcc,
    0x1fd0,
    0x1fd3,
    0x1fd6,
    0x1fdb,
    0x1fe0,
    0x1fec,
    0x1ff2,
    0x1ff4,
    0x1ff6,
    0x1ffc,
    0x200e,
    0x200e,
    0x2071,
    0x2071,
    0x207f,
    0x207f,
    0x2102,
    0x2102,
    0x2107,
    0x2107,
    0x210a,
    0x2113,
    0x2115,
    0x2115,
    0x2119,
    0x211d,
    0x2124,
    0x2124,
    0x2126,
    0x2126,
    0x2128,
    0x2128,
    0x212a,
    0x212d,
    0x212f,
    0x2131,
    0x2133,
    0x2139,
    0x213d,
    0x213f,
    0x2145,
    0x2149,
    0x2160,
    0x2183,
    0x2336,
    0x237a,
    0x2395,
    0x2395,
    0x249c,
    0x24e9,
    0x3005,
    0x3007,
    0x3021,
    0x3029,
    0x3031,
    0x3035,
    0x3038,
    0x303c,
    0x3041,
    0x3096,
    0x309d,
    0x309f,
    0x30a1,
    0x30fa,
    0x30fc,
    0x30ff,
    0x3105,
    0x312c,
    0x3131,
    0x318e,
    0x3190,
    0x31b7,
    0x31f0,
    0x321c,
    0x3220,
    0x3243,
    0x3260,
    0x327b,
    0x327f,
    0x32b0,
    0x32c0,
    0x32cb,
    0x32d0,
    0x32fe,
    0x3300,
    0x3376,
    0x337b,
    0x33dd,
    0x33e0,
    0x33fe,
    0x3400,
    0x4db5,
    0x4e00,
    0x9fa5,
    0xa000,
    0xa48c,
    0xac00,
    0xd7a3,
    0xd800,
    0xfa2d,
    0xfa30,
    0xfa6a,
    0xfb00,
    0xfb06,
    0xfb13,
    0xfb17,
    0xff21,
    0xff3a,
    0xff41,
    0xff5a,
    0xff66,
    0xffbe,
    0xffc2,
    0xffc7,
    0xffca,
    0xffcf,
    0xffd2,
    0xffd7,
    0xffda,
    0xffdc,
    0x10300,
    0x1031e,
    0x10320,
    0x10323,
    0x10330,
    0x1034a,
    0x10400,
    0x10425,
    0x10428,
    0x1044d,
    0x1d000,
    0x1d0f5,
    0x1d100,
    0x1d126,
    0x1d12a,
    0x1d166,
    0x1d16a,
    0x1d172,
    0x1d183,
    0x1d184,
    0x1d18c,
    0x1d1a9,
    0x1d1ae,
    0x1d1dd,
    0x1d400,
    0x1d454,
    0x1d456,
    0x1d49c,
    0x1d49e,
    0x1d49f,
    0x1d4a2,
    0x1d4a2,
    0x1d4a5,
    0x1d4a6,
    0x1d4a9,
    0x1d4ac,
    0x1d4ae,
    0x1d4b9,
    0x1d4bb,
    0x1d4bb,
    0x1d4bd,
    0x1d4c0,
    0x1d4c2,
    0x1d4c3,
    0x1d4c5,
    0x1d505,
    0x1d507,
    0x1d50a,
    0x1d50d,
    0x1d514,
    0x1d516,
    0x1d51c,
    0x1d51e,
    0x1d539,
    0x1d53b,
    0x1d53e,
    0x1d540,
    0x1d544,
    0x1d546,
    0x1d546,
    0x1d54a,
    0x1d550,
    0x1d552,
    0x1d6a3,
    0x1d6a8,
    0x1d7c9,
    0x20000,
    0x2a6d6,
    0x2f800,
    0x2fa1d,
    0xf0000,
    0xffffd,
    0x100000,
    0x10fffd
];
const isBidirectionalL = (character)=>inRange(character, bidirectional_l);
const mapping2space = isNonASCIISpaceCharacter;
const mapping2nothing = isCommonlyMappedToNothing;
const getCodePoint = (character)=>character.codePointAt(0);
const first = (x)=>x[0];
const last = (x)=>x[x.length - 1];
function toCodePoints(input) {
    const codepoints = [];
    const size = input.length;
    for(let i = 0; i < size; i += 1){
        const before = input.charCodeAt(i);
        if (before >= 0xd800 && before <= 0xdbff && size > i + 1) {
            const next = input.charCodeAt(i + 1);
            if (next >= 0xdc00 && next <= 0xdfff) {
                codepoints.push((before - 0xd800) * 0x400 + next - 0xdc00 + 0x10000);
                i += 1;
                continue;
            }
        }
        codepoints.push(before);
    }
    return codepoints;
}
function saslprep(input, opts = {}) {
    if (typeof input !== "string") {
        throw new TypeError("Expected string.");
    }
    if (input.length === 0) {
        return "";
    }
    const mapped_input = toCodePoints(input).map((character)=>mapping2space(character) ? 0x20 : character).filter((character)=>!mapping2nothing(character));
    const normalized_input = String.fromCodePoint.apply(null, mapped_input).normalize("NFKC");
    const normalized_map = toCodePoints(normalized_input);
    const hasProhibited = normalized_map.some(isProhibitedCharacter);
    if (hasProhibited) {
        throw new Error("Prohibited character, see https://tools.ietf.org/html/rfc4013#section-2.3");
    }
    if (opts.allowUnassigned !== true) {
        const hasUnassigned = normalized_map.some(isUnassignedCodePoint);
        if (hasUnassigned) {
            throw new Error("Unassigned code point, see https://tools.ietf.org/html/rfc4013#section-2.5");
        }
    }
    const hasBidiRAL = normalized_map.some(isBidirectionalRAL);
    const hasBidiL = normalized_map.some(isBidirectionalL);
    if (hasBidiRAL && hasBidiL) {
        throw new Error("String must not contain RandALCat and LCat at the same time," + " see https://tools.ietf.org/html/rfc3454#section-6");
    }
    const isFirstBidiRAL = isBidirectionalRAL(getCodePoint(first(normalized_input)));
    const isLastBidiRAL = isBidirectionalRAL(getCodePoint(last(normalized_input)));
    if (hasBidiRAL && !(isFirstBidiRAL && isLastBidiRAL)) {
        throw new Error("Bidirectional RandALCat character must be the first and the last" + " character of the string, see https://tools.ietf.org/html/rfc3454#section-6");
    }
    return normalized_input;
}
class PDFSecurity {
    static generateFileID(info = {}) {
        let infoStr = `${info.CreationDate.getTime()}\n`;
        for(let key in info){
            if (!info.hasOwnProperty(key)) {
                continue;
            }
            infoStr += `${key}: ${info[key].valueOf()}\n`;
        }
        return wordArrayToBuffer(CryptoJS.MD5(infoStr));
    }
    static generateRandomWordArray(bytes) {
        return CryptoJS.lib.WordArray.random(bytes);
    }
    static create(document, options = {}) {
        if (!options.ownerPassword && !options.userPassword) {
            return null;
        }
        return new PDFSecurity(document, options);
    }
    constructor(document, options = {}){
        if (!options.ownerPassword && !options.userPassword) {
            throw new Error("None of owner password and user password is defined.");
        }
        this.document = document;
        this._setupEncryption(options);
    }
    _setupEncryption(options) {
        switch(options.pdfVersion){
            case "1.4":
            case "1.5":
                this.version = 2;
                break;
            case "1.6":
            case "1.7":
                this.version = 4;
                break;
            case "1.7ext3":
                this.version = 5;
                break;
            default:
                this.version = 1;
                break;
        }
        const encDict = {
            Filter: "Standard"
        };
        switch(this.version){
            case 1:
            case 2:
            case 4:
                this._setupEncryptionV1V2V4(this.version, encDict, options);
                break;
            case 5:
                this._setupEncryptionV5(encDict, options);
                break;
        }
        this.dictionary = this.document.ref(encDict);
    }
    _setupEncryptionV1V2V4(v, encDict, options) {
        let r, permissions;
        switch(v){
            case 1:
                r = 2;
                this.keyBits = 40;
                permissions = getPermissionsR2(options.permissions);
                break;
            case 2:
                r = 3;
                this.keyBits = 128;
                permissions = getPermissionsR3(options.permissions);
                break;
            case 4:
                r = 4;
                this.keyBits = 128;
                permissions = getPermissionsR3(options.permissions);
                break;
        }
        const paddedUserPassword = processPasswordR2R3R4(options.userPassword);
        const paddedOwnerPassword = options.ownerPassword ? processPasswordR2R3R4(options.ownerPassword) : paddedUserPassword;
        const ownerPasswordEntry = getOwnerPasswordR2R3R4(r, this.keyBits, paddedUserPassword, paddedOwnerPassword);
        this.encryptionKey = getEncryptionKeyR2R3R4(r, this.keyBits, this.document._id, paddedUserPassword, ownerPasswordEntry, permissions);
        let userPasswordEntry;
        if (r === 2) {
            userPasswordEntry = getUserPasswordR2(this.encryptionKey);
        } else {
            userPasswordEntry = getUserPasswordR3R4(this.document._id, this.encryptionKey);
        }
        encDict.V = v;
        if (v >= 2) {
            encDict.Length = this.keyBits;
        }
        if (v === 4) {
            encDict.CF = {
                StdCF: {
                    AuthEvent: "DocOpen",
                    CFM: "AESV2",
                    Length: this.keyBits / 8
                }
            };
            encDict.StmF = "StdCF";
            encDict.StrF = "StdCF";
        }
        encDict.R = r;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.P = permissions;
    }
    _setupEncryptionV5(encDict, options) {
        this.keyBits = 256;
        const permissions = getPermissionsR3(options.permissions);
        const processedUserPassword = processPasswordR5(options.userPassword);
        const processedOwnerPassword = options.ownerPassword ? processPasswordR5(options.ownerPassword) : processedUserPassword;
        this.encryptionKey = getEncryptionKeyR5(PDFSecurity.generateRandomWordArray);
        const userPasswordEntry = getUserPasswordR5(processedUserPassword, PDFSecurity.generateRandomWordArray);
        const userKeySalt = CryptoJS.lib.WordArray.create(userPasswordEntry.words.slice(10, 12), 8);
        const userEncryptionKeyEntry = getUserEncryptionKeyR5(processedUserPassword, userKeySalt, this.encryptionKey);
        const ownerPasswordEntry = getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, PDFSecurity.generateRandomWordArray);
        const ownerKeySalt = CryptoJS.lib.WordArray.create(ownerPasswordEntry.words.slice(10, 12), 8);
        const ownerEncryptionKeyEntry = getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, this.encryptionKey);
        const permsEntry = getEncryptedPermissionsR5(permissions, this.encryptionKey, PDFSecurity.generateRandomWordArray);
        encDict.V = 5;
        encDict.Length = this.keyBits;
        encDict.CF = {
            StdCF: {
                AuthEvent: "DocOpen",
                CFM: "AESV3",
                Length: this.keyBits / 8
            }
        };
        encDict.StmF = "StdCF";
        encDict.StrF = "StdCF";
        encDict.R = 5;
        encDict.O = wordArrayToBuffer(ownerPasswordEntry);
        encDict.OE = wordArrayToBuffer(ownerEncryptionKeyEntry);
        encDict.U = wordArrayToBuffer(userPasswordEntry);
        encDict.UE = wordArrayToBuffer(userEncryptionKeyEntry);
        encDict.P = permissions;
        encDict.Perms = wordArrayToBuffer(permsEntry);
    }
    getEncryptFn(obj, gen) {
        let digest;
        if (this.version < 5) {
            digest = this.encryptionKey.clone().concat(CryptoJS.lib.WordArray.create([
                (obj & 0xff) << 24 | (obj & 0xff00) << 8 | obj >> 8 & 0xff00 | gen & 0xff,
                (gen & 0xff00) << 16
            ], 5));
        }
        if (this.version === 1 || this.version === 2) {
            let key = CryptoJS.MD5(digest);
            key.sigBytes = Math.min(16, this.keyBits / 8 + 5);
            return (buffer)=>wordArrayToBuffer(CryptoJS.RC4.encrypt(CryptoJS.lib.WordArray.create(buffer), key).ciphertext);
        }
        let key;
        if (this.version === 4) {
            key = CryptoJS.MD5(digest.concat(CryptoJS.lib.WordArray.create([
                0x73416c54
            ], 4)));
        } else {
            key = this.encryptionKey;
        }
        const iv = PDFSecurity.generateRandomWordArray(16);
        const options = {
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7,
            iv
        };
        return (buffer)=>wordArrayToBuffer(iv.clone().concat(CryptoJS.AES.encrypt(CryptoJS.lib.WordArray.create(buffer), key, options).ciphertext));
    }
    end() {
        this.dictionary.end();
    }
}
function getPermissionsR2(permissionObject = {}) {
    let permissions = 0xffffffc0 >> 0;
    if (permissionObject.printing) {
        permissions |= 4;
    }
    if (permissionObject.modifying) {
        permissions |= 8;
    }
    if (permissionObject.copying) {
        permissions |= 16;
    }
    if (permissionObject.annotating) {
        permissions |= 32;
    }
    return permissions;
}
function getPermissionsR3(permissionObject = {}) {
    let permissions = 0xfffff0c0 >> 0;
    if (permissionObject.printing === "lowResolution") {
        permissions |= 4;
    }
    if (permissionObject.printing === "highResolution") {
        permissions |= 2052;
    }
    if (permissionObject.modifying) {
        permissions |= 8;
    }
    if (permissionObject.copying) {
        permissions |= 16;
    }
    if (permissionObject.annotating) {
        permissions |= 32;
    }
    if (permissionObject.fillingForms) {
        permissions |= 256;
    }
    if (permissionObject.contentAccessibility) {
        permissions |= 512;
    }
    if (permissionObject.documentAssembly) {
        permissions |= 1024;
    }
    return permissions;
}
function getUserPasswordR2(encryptionKey) {
    return CryptoJS.RC4.encrypt(processPasswordR2R3R4(), encryptionKey).ciphertext;
}
function getUserPasswordR3R4(documentId, encryptionKey) {
    const key = encryptionKey.clone();
    let cipher = CryptoJS.MD5(processPasswordR2R3R4().concat(CryptoJS.lib.WordArray.create(documentId)));
    for(let i = 0; i < 20; i++){
        const xorRound = Math.ceil(key.sigBytes / 4);
        for(let j = 0; j < xorRound; j++){
            key.words[j] = encryptionKey.words[j] ^ (i | i << 8 | i << 16 | i << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
    }
    return cipher.concat(CryptoJS.lib.WordArray.create(null, 16));
}
function getOwnerPasswordR2R3R4(r, keyBits, paddedUserPassword, paddedOwnerPassword) {
    let digest = paddedOwnerPassword;
    let round = r >= 3 ? 51 : 1;
    for(let i = 0; i < round; i++){
        digest = CryptoJS.MD5(digest);
    }
    const key = digest.clone();
    key.sigBytes = keyBits / 8;
    let cipher = paddedUserPassword;
    round = r >= 3 ? 20 : 1;
    for(let i = 0; i < round; i++){
        const xorRound = Math.ceil(key.sigBytes / 4);
        for(let j = 0; j < xorRound; j++){
            key.words[j] = digest.words[j] ^ (i | i << 8 | i << 16 | i << 24);
        }
        cipher = CryptoJS.RC4.encrypt(cipher, key).ciphertext;
    }
    return cipher;
}
function getEncryptionKeyR2R3R4(r, keyBits, documentId, paddedUserPassword, ownerPasswordEntry, permissions) {
    let key = paddedUserPassword.clone().concat(ownerPasswordEntry).concat(CryptoJS.lib.WordArray.create([
        lsbFirstWord(permissions)
    ], 4)).concat(CryptoJS.lib.WordArray.create(documentId));
    const round = r >= 3 ? 51 : 1;
    for(let i = 0; i < round; i++){
        key = CryptoJS.MD5(key);
        key.sigBytes = keyBits / 8;
    }
    return key;
}
function getUserPasswordR5(processedUserPassword, generateRandomWordArray) {
    const validationSalt = generateRandomWordArray(8);
    const keySalt = generateRandomWordArray(8);
    return CryptoJS.SHA256(processedUserPassword.clone().concat(validationSalt)).concat(validationSalt).concat(keySalt);
}
function getUserEncryptionKeyR5(processedUserPassword, userKeySalt, encryptionKey) {
    const key = CryptoJS.SHA256(processedUserPassword.clone().concat(userKeySalt));
    const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
    };
    return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getOwnerPasswordR5(processedOwnerPassword, userPasswordEntry, generateRandomWordArray) {
    const validationSalt = generateRandomWordArray(8);
    const keySalt = generateRandomWordArray(8);
    return CryptoJS.SHA256(processedOwnerPassword.clone().concat(validationSalt).concat(userPasswordEntry)).concat(validationSalt).concat(keySalt);
}
function getOwnerEncryptionKeyR5(processedOwnerPassword, ownerKeySalt, userPasswordEntry, encryptionKey) {
    const key = CryptoJS.SHA256(processedOwnerPassword.clone().concat(ownerKeySalt).concat(userPasswordEntry));
    const options = {
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.NoPadding,
        iv: CryptoJS.lib.WordArray.create(null, 16)
    };
    return CryptoJS.AES.encrypt(encryptionKey, key, options).ciphertext;
}
function getEncryptionKeyR5(generateRandomWordArray) {
    return generateRandomWordArray(32);
}
function getEncryptedPermissionsR5(permissions, encryptionKey, generateRandomWordArray) {
    const cipher = CryptoJS.lib.WordArray.create([
        lsbFirstWord(permissions),
        0xffffffff,
        0x54616462
    ], 12).concat(generateRandomWordArray(4));
    const options = {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.NoPadding
    };
    return CryptoJS.AES.encrypt(cipher, encryptionKey, options).ciphertext;
}
function processPasswordR2R3R4(password = "") {
    const out = Buffer.alloc(32);
    const length = password.length;
    let index = 0;
    while(index < length && index < 32){
        const code = password.charCodeAt(index);
        if (code > 0xff) {
            throw new Error("Password contains one or more invalid characters.");
        }
        out[index] = code;
        index++;
    }
    while(index < 32){
        out[index] = PASSWORD_PADDING[index - length];
        index++;
    }
    return CryptoJS.lib.WordArray.create(out);
}
function processPasswordR5(password = "") {
    password = unescape(encodeURIComponent(saslprep(password)));
    const length = Math.min(127, password.length);
    const out = Buffer.alloc(length);
    for(let i = 0; i < length; i++){
        out[i] = password.charCodeAt(i);
    }
    return CryptoJS.lib.WordArray.create(out);
}
function lsbFirstWord(data) {
    return (data & 0xff) << 24 | (data & 0xff00) << 8 | data >> 8 & 0xff00 | data >> 24 & 0xff;
}
function wordArrayToBuffer(wordArray) {
    const byteArray = [];
    for(let i = 0; i < wordArray.sigBytes; i++){
        byteArray.push(wordArray.words[Math.floor(i / 4)] >> 8 * (3 - i % 4) & 0xff);
    }
    return Buffer.from(byteArray);
}
const PASSWORD_PADDING = [
    0x28,
    0xbf,
    0x4e,
    0x5e,
    0x4e,
    0x75,
    0x8a,
    0x41,
    0x64,
    0x00,
    0x4e,
    0x56,
    0xff,
    0xfa,
    0x01,
    0x08,
    0x2e,
    0x2e,
    0x00,
    0xb6,
    0xd0,
    0x68,
    0x3e,
    0x80,
    0x2f,
    0x0c,
    0xa9,
    0xfe,
    0x64,
    0x53,
    0x69,
    0x7a
];
const { number: number$2 } = PDFObject;
class PDFGradient$1 {
    constructor(doc){
        this.doc = doc;
        this.stops = [];
        this.embedded = false;
        this.transform = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
    }
    stop(pos, color, opacity) {
        if (opacity == null) {
            opacity = 1;
        }
        color = this.doc._normalizeColor(color);
        if (this.stops.length === 0) {
            if (color.length === 3) {
                this._colorSpace = "DeviceRGB";
            } else if (color.length === 4) {
                this._colorSpace = "DeviceCMYK";
            } else if (color.length === 1) {
                this._colorSpace = "DeviceGray";
            } else {
                throw new Error("Unknown color space");
            }
        } else if (this._colorSpace === "DeviceRGB" && color.length !== 3 || this._colorSpace === "DeviceCMYK" && color.length !== 4 || this._colorSpace === "DeviceGray" && color.length !== 1) {
            throw new Error("All gradient stops must use the same color space");
        }
        opacity = Math.max(0, Math.min(1, opacity));
        this.stops.push([
            pos,
            color,
            opacity
        ]);
        return this;
    }
    setTransform(m11, m12, m21, m22, dx, dy) {
        this.transform = [
            m11,
            m12,
            m21,
            m22,
            dx,
            dy
        ];
        return this;
    }
    embed(m) {
        let fn;
        const stopsLength = this.stops.length;
        if (stopsLength === 0) {
            return;
        }
        this.embedded = true;
        this.matrix = m;
        const last = this.stops[stopsLength - 1];
        if (last[0] < 1) {
            this.stops.push([
                1,
                last[1],
                last[2]
            ]);
        }
        const bounds = [];
        const encode = [];
        const stops = [];
        for(let i = 0; i < stopsLength - 1; i++){
            encode.push(0, 1);
            if (i + 2 !== stopsLength) {
                bounds.push(this.stops[i + 1][0]);
            }
            fn = this.doc.ref({
                FunctionType: 2,
                Domain: [
                    0,
                    1
                ],
                C0: this.stops[i + 0][1],
                C1: this.stops[i + 1][1],
                N: 1
            });
            stops.push(fn);
            fn.end();
        }
        if (stopsLength === 1) {
            fn = stops[0];
        } else {
            fn = this.doc.ref({
                FunctionType: 3,
                Domain: [
                    0,
                    1
                ],
                Functions: stops,
                Bounds: bounds,
                Encode: encode
            });
            fn.end();
        }
        this.id = `Sh${++this.doc._gradCount}`;
        const shader = this.shader(fn);
        shader.end();
        const pattern = this.doc.ref({
            Type: "Pattern",
            PatternType: 2,
            Shading: shader,
            Matrix: this.matrix.map(number$2)
        });
        pattern.end();
        if (this.stops.some((stop)=>stop[2] < 1)) {
            let grad = this.opacityGradient();
            grad._colorSpace = "DeviceGray";
            for (let stop of this.stops){
                grad.stop(stop[0], [
                    stop[2]
                ]);
            }
            grad = grad.embed(this.matrix);
            const pageBBox = [
                0,
                0,
                this.doc.page.width,
                this.doc.page.height
            ];
            const form = this.doc.ref({
                Type: "XObject",
                Subtype: "Form",
                FormType: 1,
                BBox: pageBBox,
                Group: {
                    Type: "Group",
                    S: "Transparency",
                    CS: "DeviceGray"
                },
                Resources: {
                    ProcSet: [
                        "PDF",
                        "Text",
                        "ImageB",
                        "ImageC",
                        "ImageI"
                    ],
                    Pattern: {
                        Sh1: grad
                    }
                }
            });
            form.write("/Pattern cs /Sh1 scn");
            form.end(`${pageBBox.join(" ")} re f`);
            const gstate = this.doc.ref({
                Type: "ExtGState",
                SMask: {
                    Type: "Mask",
                    S: "Luminosity",
                    G: form
                }
            });
            gstate.end();
            const opacityPattern = this.doc.ref({
                Type: "Pattern",
                PatternType: 1,
                PaintType: 1,
                TilingType: 2,
                BBox: pageBBox,
                XStep: pageBBox[2],
                YStep: pageBBox[3],
                Resources: {
                    ProcSet: [
                        "PDF",
                        "Text",
                        "ImageB",
                        "ImageC",
                        "ImageI"
                    ],
                    Pattern: {
                        Sh1: pattern
                    },
                    ExtGState: {
                        Gs1: gstate
                    }
                }
            });
            opacityPattern.write("/Gs1 gs /Pattern cs /Sh1 scn");
            opacityPattern.end(`${pageBBox.join(" ")} re f`);
            this.doc.page.patterns[this.id] = opacityPattern;
        } else {
            this.doc.page.patterns[this.id] = pattern;
        }
        return pattern;
    }
    apply(stroke) {
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = this.transform;
        const m = [
            m0 * m11 + m2 * m12,
            m1 * m11 + m3 * m12,
            m0 * m21 + m2 * m22,
            m1 * m21 + m3 * m22,
            m0 * dx + m2 * dy + m4,
            m1 * dx + m3 * dy + m5
        ];
        if (!this.embedded || m.join(" ") !== this.matrix.join(" ")) {
            this.embed(m);
        }
        this.doc._setColorSpace("Pattern", stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`/${this.id} ${op}`);
    }
}
class PDFLinearGradient$1 extends PDFGradient$1 {
    constructor(doc, x1, y1, x2, y2){
        super(doc);
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }
    shader(fn) {
        return this.doc.ref({
            ShadingType: 2,
            ColorSpace: this._colorSpace,
            Coords: [
                this.x1,
                this.y1,
                this.x2,
                this.y2
            ],
            Function: fn,
            Extend: [
                true,
                true
            ]
        });
    }
    opacityGradient() {
        return new PDFLinearGradient$1(this.doc, this.x1, this.y1, this.x2, this.y2);
    }
}
class PDFRadialGradient$1 extends PDFGradient$1 {
    constructor(doc, x1, y1, r1, x2, y2, r2){
        super(doc);
        this.doc = doc;
        this.x1 = x1;
        this.y1 = y1;
        this.r1 = r1;
        this.x2 = x2;
        this.y2 = y2;
        this.r2 = r2;
    }
    shader(fn) {
        return this.doc.ref({
            ShadingType: 3,
            ColorSpace: this._colorSpace,
            Coords: [
                this.x1,
                this.y1,
                this.r1,
                this.x2,
                this.y2,
                this.r2
            ],
            Function: fn,
            Extend: [
                true,
                true
            ]
        });
    }
    opacityGradient() {
        return new PDFRadialGradient$1(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
    }
}
var Gradient = {
    PDFGradient: PDFGradient$1,
    PDFLinearGradient: PDFLinearGradient$1,
    PDFRadialGradient: PDFRadialGradient$1
};
const underlyingColorSpaces = [
    "DeviceCMYK",
    "DeviceRGB"
];
class PDFTilingPattern$1 {
    constructor(doc, bBox, xStep, yStep, stream){
        this.doc = doc;
        this.bBox = bBox;
        this.xStep = xStep;
        this.yStep = yStep;
        this.stream = stream;
    }
    createPattern() {
        const resources = this.doc.ref();
        resources.end();
        const [m0, m1, m2, m3, m4, m5] = this.doc._ctm;
        const [m11, m12, m21, m22, dx, dy] = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        const m = [
            m0 * m11 + m2 * m12,
            m1 * m11 + m3 * m12,
            m0 * m21 + m2 * m22,
            m1 * m21 + m3 * m22,
            m0 * dx + m2 * dy + m4,
            m1 * dx + m3 * dy + m5
        ];
        const pattern = this.doc.ref({
            Type: "Pattern",
            PatternType: 1,
            PaintType: 2,
            TilingType: 2,
            BBox: this.bBox,
            XStep: this.xStep,
            YStep: this.yStep,
            Matrix: m.map((v)=>+v.toFixed(5)),
            Resources: resources
        });
        pattern.end(this.stream);
        return pattern;
    }
    embedPatternColorSpaces() {
        underlyingColorSpaces.forEach((csName)=>{
            const csId = this.getPatternColorSpaceId(csName);
            if (this.doc.page.colorSpaces[csId]) return;
            const cs = this.doc.ref([
                "Pattern",
                csName
            ]);
            cs.end();
            this.doc.page.colorSpaces[csId] = cs;
        });
    }
    getPatternColorSpaceId(underlyingColorspace) {
        return `CsP${underlyingColorspace}`;
    }
    embed() {
        if (!this.id) {
            this.doc._patternCount = this.doc._patternCount + 1;
            this.id = "P" + this.doc._patternCount;
            this.pattern = this.createPattern();
        }
        if (!this.doc.page.patterns[this.id]) {
            this.doc.page.patterns[this.id] = this.pattern;
        }
    }
    apply(stroke, patternColor) {
        this.embedPatternColorSpaces();
        this.embed();
        const normalizedColor = this.doc._normalizeColor(patternColor);
        if (!normalizedColor) throw Error(`invalid pattern color. (value: ${patternColor})`);
        const csId = this.getPatternColorSpaceId(this.doc._getColorSpace(normalizedColor));
        this.doc._setColorSpace(csId, stroke);
        const op = stroke ? "SCN" : "scn";
        return this.doc.addContent(`${normalizedColor.join(" ")} /${this.id} ${op}`);
    }
}
var pattern = {
    PDFTilingPattern: PDFTilingPattern$1
};
const { PDFGradient, PDFLinearGradient, PDFRadialGradient } = Gradient;
const { PDFTilingPattern } = pattern;
var ColorMixin = {
    initColor () {
        this.spotColors = {};
        this._opacityRegistry = {};
        this._opacityCount = 0;
        this._patternCount = 0;
        this._gradCount = 0;
    },
    _normalizeColor (color) {
        if (typeof color === "string") {
            if (color.charAt(0) === "#") {
                if (color.length === 4) {
                    color = color.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3");
                }
                const hex = parseInt(color.slice(1), 16);
                color = [
                    hex >> 16,
                    hex >> 8 & 0xff,
                    hex & 0xff
                ];
            } else if (namedColors[color]) {
                color = namedColors[color];
            } else if (this.spotColors[color]) {
                return this.spotColors[color];
            }
        }
        if (Array.isArray(color)) {
            if (color.length === 3) {
                color = color.map((part)=>part / 255);
            } else if (color.length === 4) {
                color = color.map((part)=>part / 100);
            }
            return color;
        }
        return null;
    },
    _setColor (color, stroke) {
        if (color instanceof PDFGradient) {
            color.apply(stroke);
            return true;
        } else if (Array.isArray(color) && color[0] instanceof PDFTilingPattern) {
            color[0].apply(stroke, color[1]);
            return true;
        }
        return this._setColorCore(color, stroke);
    },
    _setColorCore (color, stroke) {
        color = this._normalizeColor(color);
        if (!color) {
            return false;
        }
        const op = stroke ? "SCN" : "scn";
        const space = this._getColorSpace(color);
        this._setColorSpace(space, stroke);
        if (color instanceof SpotColor) {
            this.page.colorSpaces[color.id] = color.ref;
            this.addContent(`1 ${op}`);
        } else {
            this.addContent(`${color.join(" ")} ${op}`);
        }
        return true;
    },
    _setColorSpace (space, stroke) {
        const op = stroke ? "CS" : "cs";
        return this.addContent(`/${space} ${op}`);
    },
    _getColorSpace (color) {
        if (color instanceof SpotColor) {
            return color.id;
        }
        return color.length === 4 ? "DeviceCMYK" : "DeviceRGB";
    },
    fillColor (color, opacity) {
        const set = this._setColor(color, false);
        if (set) {
            this.fillOpacity(opacity);
        }
        this._fillColor = [
            color,
            opacity
        ];
        return this;
    },
    strokeColor (color, opacity) {
        const set = this._setColor(color, true);
        if (set) {
            this.strokeOpacity(opacity);
        }
        return this;
    },
    opacity (opacity) {
        this._doOpacity(opacity, opacity);
        return this;
    },
    fillOpacity (opacity) {
        this._doOpacity(opacity, null);
        return this;
    },
    strokeOpacity (opacity) {
        this._doOpacity(null, opacity);
        return this;
    },
    _doOpacity (fillOpacity, strokeOpacity) {
        let dictionary, name;
        if (fillOpacity == null && strokeOpacity == null) {
            return;
        }
        if (fillOpacity != null) {
            fillOpacity = Math.max(0, Math.min(1, fillOpacity));
        }
        if (strokeOpacity != null) {
            strokeOpacity = Math.max(0, Math.min(1, strokeOpacity));
        }
        const key = `${fillOpacity}_${strokeOpacity}`;
        if (this._opacityRegistry[key]) {
            [dictionary, name] = this._opacityRegistry[key];
        } else {
            dictionary = {
                Type: "ExtGState"
            };
            if (fillOpacity != null) {
                dictionary.ca = fillOpacity;
            }
            if (strokeOpacity != null) {
                dictionary.CA = strokeOpacity;
            }
            dictionary = this.ref(dictionary);
            dictionary.end();
            const id = ++this._opacityCount;
            name = `Gs${id}`;
            this._opacityRegistry[key] = [
                dictionary,
                name
            ];
        }
        this.page.ext_gstates[name] = dictionary;
        return this.addContent(`/${name} gs`);
    },
    linearGradient (x1, y1, x2, y2) {
        return new PDFLinearGradient(this, x1, y1, x2, y2);
    },
    radialGradient (x1, y1, r1, x2, y2, r2) {
        return new PDFRadialGradient(this, x1, y1, r1, x2, y2, r2);
    },
    pattern (bbox, xStep, yStep, stream) {
        return new PDFTilingPattern(this, bbox, xStep, yStep, stream);
    },
    addSpotColor (name, C, M, Y, K) {
        const color = new SpotColor(this, name, C, M, Y, K);
        this.spotColors[name] = color;
        return this;
    }
};
var namedColors = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    grey: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};
let cx, cy, px, py, sx, sy;
cx = cy = px = py = sx = sy = 0;
const parameters = {
    A: 7,
    a: 7,
    C: 6,
    c: 6,
    H: 1,
    h: 1,
    L: 2,
    l: 2,
    M: 2,
    m: 2,
    Q: 4,
    q: 4,
    S: 4,
    s: 4,
    T: 2,
    t: 2,
    V: 1,
    v: 1,
    Z: 0,
    z: 0
};
const parse = function(path) {
    let cmd;
    const ret = [];
    let args = [];
    let curArg = "";
    let foundDecimal = false;
    let params = 0;
    for (let c of path){
        if (parameters[c] != null) {
            params = parameters[c];
            if (cmd) {
                if (curArg.length > 0) {
                    args[args.length] = +curArg;
                }
                ret[ret.length] = {
                    cmd,
                    args
                };
                args = [];
                curArg = "";
                foundDecimal = false;
            }
            cmd = c;
        } else if ([
            " ",
            ","
        ].includes(c) || c === "-" && curArg.length > 0 && curArg[curArg.length - 1] !== "e" || c === "." && foundDecimal) {
            if (curArg.length === 0) {
                continue;
            }
            if (args.length === params) {
                ret[ret.length] = {
                    cmd,
                    args
                };
                args = [
                    +curArg
                ];
                if (cmd === "M") {
                    cmd = "L";
                }
                if (cmd === "m") {
                    cmd = "l";
                }
            } else {
                args[args.length] = +curArg;
            }
            foundDecimal = c === ".";
            curArg = [
                "-",
                "."
            ].includes(c) ? c : "";
        } else {
            curArg += c;
            if (c === ".") {
                foundDecimal = true;
            }
        }
    }
    if (curArg.length > 0) {
        if (args.length === params) {
            ret[ret.length] = {
                cmd,
                args
            };
            args = [
                +curArg
            ];
            if (cmd === "M") {
                cmd = "L";
            }
            if (cmd === "m") {
                cmd = "l";
            }
        } else {
            args[args.length] = +curArg;
        }
    }
    ret[ret.length] = {
        cmd,
        args
    };
    return ret;
};
const apply = function(commands, doc) {
    cx = cy = px = py = sx = sy = 0;
    for(let i = 0; i < commands.length; i++){
        const c = commands[i];
        if (typeof runners[c.cmd] === "function") {
            runners[c.cmd](doc, c.args);
        }
    }
};
const runners = {
    M (doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
    },
    m (doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        sx = cx;
        sy = cy;
        return doc.moveTo(cx, cy);
    },
    C (doc, a) {
        cx = a[4];
        cy = a[5];
        px = a[2];
        py = a[3];
        return doc.bezierCurveTo(...a);
    },
    c (doc, a) {
        doc.bezierCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);
        px = cx + a[2];
        py = cy + a[3];
        cx += a[4];
        return cy += a[5];
    },
    S (doc, a) {
        if (px === null) {
            px = cx;
            py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);
        px = a[0];
        py = a[1];
        cx = a[2];
        return cy = a[3];
    },
    s (doc, a) {
        if (px === null) {
            px = cx;
            py = cy;
        }
        doc.bezierCurveTo(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
    },
    Q (doc, a) {
        px = a[0];
        py = a[1];
        cx = a[2];
        cy = a[3];
        return doc.quadraticCurveTo(a[0], a[1], cx, cy);
    },
    q (doc, a) {
        doc.quadraticCurveTo(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);
        px = cx + a[0];
        py = cy + a[1];
        cx += a[2];
        return cy += a[3];
    },
    T (doc, a) {
        if (px === null) {
            px = cx;
            py = cy;
        } else {
            px = cx - (px - cx);
            py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, a[0], a[1]);
        px = cx - (px - cx);
        py = cy - (py - cy);
        cx = a[0];
        return cy = a[1];
    },
    t (doc, a) {
        if (px === null) {
            px = cx;
            py = cy;
        } else {
            px = cx - (px - cx);
            py = cy - (py - cy);
        }
        doc.quadraticCurveTo(px, py, cx + a[0], cy + a[1]);
        cx += a[0];
        return cy += a[1];
    },
    A (doc, a) {
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
    },
    a (doc, a) {
        a[5] += cx;
        a[6] += cy;
        solveArc(doc, cx, cy, a);
        cx = a[5];
        return cy = a[6];
    },
    L (doc, a) {
        cx = a[0];
        cy = a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    l (doc, a) {
        cx += a[0];
        cy += a[1];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    H (doc, a) {
        cx = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    h (doc, a) {
        cx += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    V (doc, a) {
        cy = a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    v (doc, a) {
        cy += a[0];
        px = py = null;
        return doc.lineTo(cx, cy);
    },
    Z (doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
    },
    z (doc) {
        doc.closePath();
        cx = sx;
        return cy = sy;
    }
};
const solveArc = function(doc, x, y, coords) {
    const [rx, ry, rot, large, sweep, ex, ey] = coords;
    const segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
    for (let seg of segs){
        const bez = segmentToBezier(...seg);
        doc.bezierCurveTo(...bez);
    }
};
const arcToSegments = function(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
    const th = rotateX * (Math.PI / 180);
    const sin_th = Math.sin(th);
    const cos_th = Math.cos(th);
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
    py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
    let pl = px * px / (rx * rx) + py * py / (ry * ry);
    if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
    }
    const a00 = cos_th / rx;
    const a01 = sin_th / rx;
    const a10 = -sin_th / ry;
    const a11 = cos_th / ry;
    const x0 = a00 * ox + a01 * oy;
    const y0 = a10 * ox + a11 * oy;
    const x1 = a00 * x + a01 * y;
    const y1 = a10 * x + a11 * y;
    const d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);
    let sfactor_sq = 1 / d - 0.25;
    if (sfactor_sq < 0) {
        sfactor_sq = 0;
    }
    let sfactor = Math.sqrt(sfactor_sq);
    if (sweep === large) {
        sfactor = -sfactor;
    }
    const xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);
    const yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);
    const th0 = Math.atan2(y0 - yc, x0 - xc);
    const th1 = Math.atan2(y1 - yc, x1 - xc);
    let th_arc = th1 - th0;
    if (th_arc < 0 && sweep === 1) {
        th_arc += 2 * Math.PI;
    } else if (th_arc > 0 && sweep === 0) {
        th_arc -= 2 * Math.PI;
    }
    const segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
    const result = [];
    for(let i = 0; i < segments; i++){
        const th2 = th0 + i * th_arc / segments;
        const th3 = th0 + (i + 1) * th_arc / segments;
        result[i] = [
            xc,
            yc,
            th2,
            th3,
            rx,
            ry,
            sin_th,
            cos_th
        ];
    }
    return result;
};
const segmentToBezier = function(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
    const a00 = cos_th * rx;
    const a01 = -sin_th * ry;
    const a10 = sin_th * rx;
    const a11 = cos_th * ry;
    const th_half = 0.5 * (th1 - th0);
    const t = 8 / 3 * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
    const x1 = cx + Math.cos(th0) - t * Math.sin(th0);
    const y1 = cy + Math.sin(th0) + t * Math.cos(th0);
    const x3 = cx + Math.cos(th1);
    const y3 = cy + Math.sin(th1);
    const x2 = x3 + t * Math.sin(th1);
    const y2 = y3 - t * Math.cos(th1);
    return [
        a00 * x1 + a01 * y1,
        a10 * x1 + a11 * y1,
        a00 * x2 + a01 * y2,
        a10 * x2 + a11 * y2,
        a00 * x3 + a01 * y3,
        a10 * x3 + a11 * y3
    ];
};
class SVGPath {
    static apply(doc, path) {
        const commands = parse(path);
        apply(commands, doc);
    }
}
const { number: number$1 } = PDFObject;
const KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);
var VectorMixin = {
    initVector () {
        this._ctm = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        this._ctmStack = [];
    },
    save () {
        this._ctmStack.push(this._ctm.slice());
        return this.addContent("q");
    },
    restore () {
        this._ctm = this._ctmStack.pop() || [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        return this.addContent("Q");
    },
    closePath () {
        return this.addContent("h");
    },
    lineWidth (w) {
        return this.addContent(`${number$1(w)} w`);
    },
    _CAP_STYLES: {
        BUTT: 0,
        ROUND: 1,
        SQUARE: 2
    },
    lineCap (c) {
        if (typeof c === "string") {
            c = this._CAP_STYLES[c.toUpperCase()];
        }
        return this.addContent(`${c} J`);
    },
    _JOIN_STYLES: {
        MITER: 0,
        ROUND: 1,
        BEVEL: 2
    },
    lineJoin (j) {
        if (typeof j === "string") {
            j = this._JOIN_STYLES[j.toUpperCase()];
        }
        return this.addContent(`${j} j`);
    },
    miterLimit (m) {
        return this.addContent(`${number$1(m)} M`);
    },
    dash (length, options = {}) {
        const originalLength = length;
        if (!Array.isArray(length)) {
            length = [
                length,
                options.space || length
            ];
        }
        const valid = length.every((x)=>Number.isFinite(x) && x > 0);
        if (!valid) {
            throw new Error(`dash(${JSON.stringify(originalLength)}, ${JSON.stringify(options)}) invalid, lengths must be numeric and greater than zero`);
        }
        length = length.map(number$1).join(" ");
        return this.addContent(`[${length}] ${number$1(options.phase || 0)} d`);
    },
    undash () {
        return this.addContent("[] 0 d");
    },
    moveTo (x, y) {
        return this.addContent(`${number$1(x)} ${number$1(y)} m`);
    },
    lineTo (x, y) {
        return this.addContent(`${number$1(x)} ${number$1(y)} l`);
    },
    bezierCurveTo (cp1x, cp1y, cp2x, cp2y, x, y) {
        return this.addContent(`${number$1(cp1x)} ${number$1(cp1y)} ${number$1(cp2x)} ${number$1(cp2y)} ${number$1(x)} ${number$1(y)} c`);
    },
    quadraticCurveTo (cpx, cpy, x, y) {
        return this.addContent(`${number$1(cpx)} ${number$1(cpy)} ${number$1(x)} ${number$1(y)} v`);
    },
    rect (x, y, w, h) {
        return this.addContent(`${number$1(x)} ${number$1(y)} ${number$1(w)} ${number$1(h)} re`);
    },
    roundedRect (x, y, w, h, r) {
        if (r == null) {
            r = 0;
        }
        r = Math.min(r, 0.5 * w, 0.5 * h);
        const c = r * (1.0 - KAPPA);
        this.moveTo(x + r, y);
        this.lineTo(x + w - r, y);
        this.bezierCurveTo(x + w - c, y, x + w, y + c, x + w, y + r);
        this.lineTo(x + w, y + h - r);
        this.bezierCurveTo(x + w, y + h - c, x + w - c, y + h, x + w - r, y + h);
        this.lineTo(x + r, y + h);
        this.bezierCurveTo(x + c, y + h, x, y + h - c, x, y + h - r);
        this.lineTo(x, y + r);
        this.bezierCurveTo(x, y + c, x + c, y, x + r, y);
        return this.closePath();
    },
    ellipse (x, y, r1, r2) {
        if (r2 == null) {
            r2 = r1;
        }
        x -= r1;
        y -= r2;
        const ox = r1 * KAPPA;
        const oy = r2 * KAPPA;
        const xe = x + r1 * 2;
        const ye = y + r2 * 2;
        const xm = x + r1;
        const ym = y + r2;
        this.moveTo(x, ym);
        this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
        this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
        this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
        this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
        return this.closePath();
    },
    circle (x, y, radius) {
        return this.ellipse(x, y, radius);
    },
    arc (x, y, radius, startAngle, endAngle, anticlockwise) {
        if (anticlockwise == null) {
            anticlockwise = false;
        }
        const TWO_PI = 2.0 * Math.PI;
        const HALF_PI = 0.5 * Math.PI;
        let deltaAng = endAngle - startAngle;
        if (Math.abs(deltaAng) > TWO_PI) {
            deltaAng = TWO_PI;
        } else if (deltaAng !== 0 && anticlockwise !== deltaAng < 0) {
            const dir = anticlockwise ? -1 : 1;
            deltaAng = dir * TWO_PI + deltaAng;
        }
        const numSegs = Math.ceil(Math.abs(deltaAng) / HALF_PI);
        const segAng = deltaAng / numSegs;
        const handleLen = segAng / HALF_PI * KAPPA * radius;
        let curAng = startAngle;
        let deltaCx = -Math.sin(curAng) * handleLen;
        let deltaCy = Math.cos(curAng) * handleLen;
        let ax = x + Math.cos(curAng) * radius;
        let ay = y + Math.sin(curAng) * radius;
        this.moveTo(ax, ay);
        for(let segIdx = 0; segIdx < numSegs; segIdx++){
            const cp1x = ax + deltaCx;
            const cp1y = ay + deltaCy;
            curAng += segAng;
            ax = x + Math.cos(curAng) * radius;
            ay = y + Math.sin(curAng) * radius;
            deltaCx = -Math.sin(curAng) * handleLen;
            deltaCy = Math.cos(curAng) * handleLen;
            const cp2x = ax - deltaCx;
            const cp2y = ay - deltaCy;
            this.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, ax, ay);
        }
        return this;
    },
    polygon (...points) {
        this.moveTo(...points.shift() || []);
        for (let point of points){
            this.lineTo(...point || []);
        }
        return this.closePath();
    },
    path (path) {
        SVGPath.apply(this, path);
        return this;
    },
    _windingRule (rule) {
        if (/even-?odd/.test(rule)) {
            return "*";
        }
        return "";
    },
    fill (color, rule) {
        if (/(even-?odd)|(non-?zero)/.test(color)) {
            rule = color;
            color = null;
        }
        if (color) {
            this.fillColor(color);
        }
        return this.addContent(`f${this._windingRule(rule)}`);
    },
    stroke (color) {
        if (color) {
            this.strokeColor(color);
        }
        return this.addContent("S");
    },
    fillAndStroke (fillColor, strokeColor, rule) {
        if (strokeColor == null) {
            strokeColor = fillColor;
        }
        const isFillRule = /(even-?odd)|(non-?zero)/;
        if (isFillRule.test(fillColor)) {
            rule = fillColor;
            fillColor = null;
        }
        if (isFillRule.test(strokeColor)) {
            rule = strokeColor;
            strokeColor = fillColor;
        }
        if (fillColor) {
            this.fillColor(fillColor);
            this.strokeColor(strokeColor);
        }
        return this.addContent(`B${this._windingRule(rule)}`);
    },
    clip (rule) {
        return this.addContent(`W${this._windingRule(rule)} n`);
    },
    transform (m11, m12, m21, m22, dx, dy) {
        if (m11 === 1 && m12 === 0 && m21 === 0 && m22 === 1 && dx === 0 && dy === 0) {
            return this;
        }
        const m = this._ctm;
        const [m0, m1, m2, m3, m4, m5] = m;
        m[0] = m0 * m11 + m2 * m12;
        m[1] = m1 * m11 + m3 * m12;
        m[2] = m0 * m21 + m2 * m22;
        m[3] = m1 * m21 + m3 * m22;
        m[4] = m0 * dx + m2 * dy + m4;
        m[5] = m1 * dx + m3 * dy + m5;
        const values = [
            m11,
            m12,
            m21,
            m22,
            dx,
            dy
        ].map((v)=>number$1(v)).join(" ");
        return this.addContent(`${values} cm`);
    },
    translate (x, y) {
        return this.transform(1, 0, 0, 1, x, y);
    },
    rotate (angle, options = {}) {
        let y;
        const rad = angle * Math.PI / 180;
        const cos = Math.cos(rad);
        const sin = Math.sin(rad);
        let x = y = 0;
        if (options.origin != null) {
            [x, y] = options.origin;
            const x1 = x * cos - y * sin;
            const y1 = x * sin + y * cos;
            x -= x1;
            y -= y1;
        }
        return this.transform(cos, sin, -sin, cos, x, y);
    },
    scale (xFactor, yFactor, options = {}) {
        let y;
        if (yFactor == null) {
            yFactor = xFactor;
        }
        if (typeof yFactor === "object") {
            options = yFactor;
            yFactor = xFactor;
        }
        let x = y = 0;
        if (options.origin != null) {
            [x, y] = options.origin;
            x -= xFactor * x;
            y -= yFactor * y;
        }
        return this.transform(xFactor, 0, 0, yFactor, x, y);
    }
};
const WIN_ANSI_MAP = {
    402: 131,
    8211: 150,
    8212: 151,
    8216: 145,
    8217: 146,
    8218: 130,
    8220: 147,
    8221: 148,
    8222: 132,
    8224: 134,
    8225: 135,
    8226: 149,
    8230: 133,
    8364: 128,
    8240: 137,
    8249: 139,
    8250: 155,
    710: 136,
    8482: 153,
    338: 140,
    339: 156,
    732: 152,
    352: 138,
    353: 154,
    376: 159,
    381: 142,
    382: 158
};
const characters = `\
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
  
space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question
  
at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore
  
grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef
  
Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis
  
space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown
  
Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls
  
agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis\
`.split(/\s+/);
class AFMFont {
    constructor(contents){
        this.attributes = {};
        this.glyphWidths = {};
        this.boundingBoxes = {};
        this.kernPairs = {};
        this.parse(contents);
        this.bbox = this.attributes["FontBBox"].split(/\s+/).map((e)=>+e);
        this.ascender = +(this.attributes["Ascender"] || 0);
        this.descender = +(this.attributes["Descender"] || 0);
        this.xHeight = +(this.attributes["XHeight"] || 0);
        this.capHeight = +(this.attributes["CapHeight"] || 0);
        this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
    }
    parse(contents) {
        let section = "";
        for (let line of contents.split("\n")){
            var match;
            var a;
            if (match = line.match(/^Start(\w+)/)) {
                section = match[1];
                continue;
            } else if (match = line.match(/^End(\w+)/)) {
                section = "";
                continue;
            }
            switch(section){
                case "FontMetrics":
                    match = line.match(/(^\w+)\s+(.*)/);
                    var key = match[1];
                    var value = match[2];
                    if (a = this.attributes[key]) {
                        if (!Array.isArray(a)) {
                            a = this.attributes[key] = [
                                a
                            ];
                        }
                        a.push(value);
                    } else {
                        this.attributes[key] = value;
                    }
                    break;
                case "CharMetrics":
                    if (!/^CH?\s/.test(line)) {
                        continue;
                    }
                    var name = line.match(/\bN\s+(\.?\w+)\s*;/)[1];
                    this.glyphWidths[name] = +line.match(/\bWX\s+(\d+)\s*;/)[1];
                    break;
                case "KernPairs":
                    match = line.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/);
                    if (match) {
                        this.kernPairs[match[1] + "\x00" + match[2]] = parseInt(match[3]);
                    }
                    break;
            }
        }
    }
    encodeText(text) {
        const res = [];
        for(let i = 0, len = text.length; i < len; i++){
            let char = text.charCodeAt(i);
            char = WIN_ANSI_MAP[char] || char;
            res.push(char.toString(16));
        }
        return res;
    }
    glyphsForString(string) {
        const glyphs = [];
        for(let i = 0, len = string.length; i < len; i++){
            const charCode = string.charCodeAt(i);
            glyphs.push(this.characterToGlyph(charCode));
        }
        return glyphs;
    }
    characterToGlyph(character) {
        return characters[WIN_ANSI_MAP[character] || character] || ".notdef";
    }
    widthOfGlyph(glyph) {
        return this.glyphWidths[glyph] || 0;
    }
    getKernPair(left, right) {
        return this.kernPairs[left + "\x00" + right] || 0;
    }
    advancesForGlyphs(glyphs) {
        const advances = [];
        for(let index = 0; index < glyphs.length; index++){
            const left = glyphs[index];
            const right = glyphs[index + 1];
            advances.push(this.widthOfGlyph(left) + this.getKernPair(left, right));
        }
        return advances;
    }
}
class PDFFont {
    constructor(){}
    encode() {
        throw new Error("Must be implemented by subclasses");
    }
    widthOfString() {
        throw new Error("Must be implemented by subclasses");
    }
    ref() {
        return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
    }
    finalize() {
        if (this.embedded || this.dictionary == null) {
            return;
        }
        this.embed();
        this.embedded = true;
    }
    embed() {
        throw new Error("Must be implemented by subclasses");
    }
    lineHeight(size, includeGap = false) {
        const gap = includeGap ? this.lineGap : 0;
        return (this.ascender + gap - this.descender) / 1000 * size;
    }
}
const STANDARD_FONTS = {
    Courier () {
        return fs.readFileSync(__dirname + "/data/Courier.afm", "utf8");
    },
    "Courier-Bold" () {
        return fs.readFileSync(__dirname + "/data/Courier-Bold.afm", "utf8");
    },
    "Courier-Oblique" () {
        return fs.readFileSync(__dirname + "/data/Courier-Oblique.afm", "utf8");
    },
    "Courier-BoldOblique" () {
        return fs.readFileSync(__dirname + "/data/Courier-BoldOblique.afm", "utf8");
    },
    Helvetica () {
        return fs.readFileSync(__dirname + "/data/Helvetica.afm", "utf8");
    },
    "Helvetica-Bold" () {
        return fs.readFileSync(__dirname + "/data/Helvetica-Bold.afm", "utf8");
    },
    "Helvetica-Oblique" () {
        return fs.readFileSync(__dirname + "/data/Helvetica-Oblique.afm", "utf8");
    },
    "Helvetica-BoldOblique" () {
        return fs.readFileSync(__dirname + "/data/Helvetica-BoldOblique.afm", "utf8");
    },
    "Times-Roman" () {
        return fs.readFileSync(__dirname + "/data/Times-Roman.afm", "utf8");
    },
    "Times-Bold" () {
        return fs.readFileSync(__dirname + "/data/Times-Bold.afm", "utf8");
    },
    "Times-Italic" () {
        return fs.readFileSync(__dirname + "/data/Times-Italic.afm", "utf8");
    },
    "Times-BoldItalic" () {
        return fs.readFileSync(__dirname + "/data/Times-BoldItalic.afm", "utf8");
    },
    Symbol () {
        return fs.readFileSync(__dirname + "/data/Symbol.afm", "utf8");
    },
    ZapfDingbats () {
        return fs.readFileSync(__dirname + "/data/ZapfDingbats.afm", "utf8");
    }
};
class StandardFont extends PDFFont {
    constructor(document, name, id){
        super();
        this.document = document;
        this.name = name;
        this.id = id;
        this.font = new AFMFont(STANDARD_FONTS[this.name]());
        ({ ascender: this.ascender, descender: this.descender, bbox: this.bbox, lineGap: this.lineGap, xHeight: this.xHeight, capHeight: this.capHeight } = this.font);
    }
    embed() {
        this.dictionary.data = {
            Type: "Font",
            BaseFont: this.name,
            Subtype: "Type1",
            Encoding: "WinAnsiEncoding"
        };
        return this.dictionary.end();
    }
    encode(text) {
        const encoded = this.font.encodeText(text);
        const glyphs = this.font.glyphsForString(`${text}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        const positions = [];
        for(let i = 0; i < glyphs.length; i++){
            const glyph = glyphs[i];
            positions.push({
                xAdvance: advances[i],
                yAdvance: 0,
                xOffset: 0,
                yOffset: 0,
                advanceWidth: this.font.widthOfGlyph(glyph)
            });
        }
        return [
            encoded,
            positions
        ];
    }
    widthOfString(string, size) {
        const glyphs = this.font.glyphsForString(`${string}`);
        const advances = this.font.advancesForGlyphs(glyphs);
        let width = 0;
        for (let advance of advances){
            width += advance;
        }
        const scale = size / 1000;
        return width * scale;
    }
    static isStandardFont(name) {
        return name in STANDARD_FONTS;
    }
}
const toHex = function(num) {
    return `0000${num.toString(16)}`.slice(-4);
};
class EmbeddedFont extends PDFFont {
    constructor(document, font, id){
        super();
        this.document = document;
        this.font = font;
        this.id = id;
        this.subset = this.font.createSubset();
        this.unicode = [
            [
                0
            ]
        ];
        this.widths = [
            this.font.getGlyph(0).advanceWidth
        ];
        this.name = this.font.postscriptName;
        this.scale = 1000 / this.font.unitsPerEm;
        this.ascender = this.font.ascent * this.scale;
        this.descender = this.font.descent * this.scale;
        this.xHeight = this.font.xHeight * this.scale;
        this.capHeight = this.font.capHeight * this.scale;
        this.lineGap = this.font.lineGap * this.scale;
        this.bbox = this.font.bbox;
        if (document.options.fontLayoutCache !== false) {
            this.layoutCache = Object.create(null);
        }
    }
    layoutRun(text, features) {
        const run = this.font.layout(text, features);
        for(let i = 0; i < run.positions.length; i++){
            const position = run.positions[i];
            for(let key in position){
                position[key] *= this.scale;
            }
            position.advanceWidth = run.glyphs[i].advanceWidth * this.scale;
        }
        return run;
    }
    layoutCached(text) {
        if (!this.layoutCache) {
            return this.layoutRun(text);
        }
        let cached;
        if (cached = this.layoutCache[text]) {
            return cached;
        }
        const run = this.layoutRun(text);
        this.layoutCache[text] = run;
        return run;
    }
    layout(text, features, onlyWidth) {
        if (features) {
            return this.layoutRun(text, features);
        }
        let glyphs = onlyWidth ? null : [];
        let positions = onlyWidth ? null : [];
        let advanceWidth = 0;
        let last = 0;
        let index = 0;
        while(index <= text.length){
            var needle;
            if (index === text.length && last < index || (needle = text.charAt(index), [
                " ",
                "	"
            ].includes(needle))) {
                const run = this.layoutCached(text.slice(last, ++index));
                if (!onlyWidth) {
                    glyphs = glyphs.concat(run.glyphs);
                    positions = positions.concat(run.positions);
                }
                advanceWidth += run.advanceWidth;
                last = index;
            } else {
                index++;
            }
        }
        return {
            glyphs,
            positions,
            advanceWidth
        };
    }
    encode(text, features) {
        const { glyphs, positions } = this.layout(text, features);
        const res = [];
        for(let i = 0; i < glyphs.length; i++){
            const glyph = glyphs[i];
            const gid = this.subset.includeGlyph(glyph.id);
            res.push(`0000${gid.toString(16)}`.slice(-4));
            if (this.widths[gid] == null) {
                this.widths[gid] = glyph.advanceWidth * this.scale;
            }
            if (this.unicode[gid] == null) {
                this.unicode[gid] = glyph.codePoints;
            }
        }
        return [
            res,
            positions
        ];
    }
    widthOfString(string, size, features) {
        const width = this.layout(string, features, true).advanceWidth;
        const scale = size / 1000;
        return width * scale;
    }
    embed() {
        const isCFF = this.subset.cff != null;
        const fontFile = this.document.ref();
        if (isCFF) {
            fontFile.data.Subtype = "CIDFontType0C";
        }
        fontFile.end(this.subset.encode());
        const familyClass = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : undefined) || 0) >> 8;
        let flags = 0;
        if (this.font.post.isFixedPitch) {
            flags |= 1 << 0;
        }
        if (1 <= familyClass && familyClass <= 7) {
            flags |= 1 << 1;
        }
        flags |= 1 << 2;
        if (familyClass === 10) {
            flags |= 1 << 3;
        }
        if (this.font.head.macStyle.italic) {
            flags |= 1 << 6;
        }
        const tag = [
            1,
            2,
            3,
            4,
            5,
            6
        ].map((i)=>String.fromCharCode((this.id.charCodeAt(i) || 73) + 17)).join("");
        const name = tag + "+" + this.font.postscriptName?.replaceAll(" ", "_");
        const { bbox } = this.font;
        const descriptor = this.document.ref({
            Type: "FontDescriptor",
            FontName: name,
            Flags: flags,
            FontBBox: [
                bbox.minX * this.scale,
                bbox.minY * this.scale,
                bbox.maxX * this.scale,
                bbox.maxY * this.scale
            ],
            ItalicAngle: this.font.italicAngle,
            Ascent: this.ascender,
            Descent: this.descender,
            CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
            XHeight: (this.font.xHeight || 0) * this.scale,
            StemV: 0
        });
        if (isCFF) {
            descriptor.data.FontFile3 = fontFile;
        } else {
            descriptor.data.FontFile2 = fontFile;
        }
        if (this.document.subset && this.document.subset === 1) {
            const CIDSet = Buffer.from("FFFFFFFFC0", "hex");
            const CIDSetRef = this.document.ref();
            CIDSetRef.write(CIDSet);
            CIDSetRef.end();
            descriptor.data.CIDSet = CIDSetRef;
        }
        descriptor.end();
        const descendantFontData = {
            Type: "Font",
            Subtype: "CIDFontType0",
            BaseFont: name,
            CIDSystemInfo: {
                Registry: new String("Adobe"),
                Ordering: new String("Identity"),
                Supplement: 0
            },
            FontDescriptor: descriptor,
            W: [
                0,
                this.widths
            ]
        };
        if (!isCFF) {
            descendantFontData.Subtype = "CIDFontType2";
            descendantFontData.CIDToGIDMap = "Identity";
        }
        const descendantFont = this.document.ref(descendantFontData);
        descendantFont.end();
        this.dictionary.data = {
            Type: "Font",
            Subtype: "Type0",
            BaseFont: name,
            Encoding: "Identity-H",
            DescendantFonts: [
                descendantFont
            ],
            ToUnicode: this.toUnicodeCmap()
        };
        return this.dictionary.end();
    }
    toUnicodeCmap() {
        const cmap = this.document.ref();
        const entries = [];
        for (let codePoints of this.unicode){
            const encoded = [];
            for (let value of codePoints){
                if (value > 0xffff) {
                    value -= 0x10000;
                    encoded.push(toHex(value >>> 10 & 0x3ff | 0xd800));
                    value = 0xdc00 | value & 0x3ff;
                }
                encoded.push(toHex(value));
            }
            entries.push(`<${encoded.join(" ")}>`);
        }
        const chunkSize = 256;
        const chunks = Math.ceil(entries.length / chunkSize);
        const ranges = [];
        for(let i = 0; i < chunks; i++){
            const start = i * chunkSize;
            const end = Math.min((i + 1) * chunkSize, entries.length);
            ranges.push(`<${toHex(start)}> <${toHex(end - 1)}> [${entries.slice(start, end).join(" ")}]`);
        }
        cmap.end(`\
/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
1 beginbfrange
${ranges.join("\n")}
endbfrange
endcmap
CMapName currentdict /CMap defineresource pop
end
end\
`);
        return cmap;
    }
}
class PDFFontFactory {
    static open(document, src, family, id) {
        let font;
        if (typeof src === "string") {
            if (StandardFont.isStandardFont(src)) {
                return new StandardFont(document, src, id);
            }
            src = fs.readFileSync(src);
        }
        if (src instanceof Uint8Array) {
            font = fontkit.create(src, family);
        } else if (src instanceof ArrayBuffer) {
            font = fontkit.create(new Uint8Array(src), family);
        }
        if (font == null) {
            throw new Error("Not a supported font format or standard PDF font.");
        }
        return new EmbeddedFont(document, font, id);
    }
}
const isEqualFont = (font1, font2)=>{
    if (font1.font._tables?.head?.checkSumAdjustment !== font2.font._tables?.head?.checkSumAdjustment) {
        return false;
    }
    if (JSON.stringify(font1.font._tables?.name?.records) !== JSON.stringify(font2.font._tables?.name?.records)) {
        return false;
    }
    return true;
};
var FontsMixin = {
    initFonts (defaultFont = "Helvetica", defaultFontFamily = null, defaultFontSize = 12) {
        this._fontFamilies = {};
        this._fontCount = 0;
        this._fontSource = defaultFont;
        this._fontFamily = defaultFontFamily;
        this._fontSize = defaultFontSize;
        this._font = null;
        this._remSize = defaultFontSize;
        this._registeredFonts = {};
        if (defaultFont) {
            this.font(defaultFont, defaultFontFamily);
        }
    },
    font (src, family, size) {
        let cacheKey, font;
        if (typeof family === "number") {
            size = family;
            family = null;
        }
        if (typeof src === "string" && this._registeredFonts[src]) {
            cacheKey = src;
            ({ src, family } = this._registeredFonts[src]);
        } else {
            cacheKey = family || src;
            if (typeof cacheKey !== "string") {
                cacheKey = null;
            }
        }
        this._fontSource = src;
        this._fontFamily = family;
        if (size != null) {
            this.fontSize(size);
        }
        if (font = this._fontFamilies[cacheKey]) {
            this._font = font;
            return this;
        }
        const id = `F${++this._fontCount}`;
        this._font = PDFFontFactory.open(this, src, family, id);
        if ((font = this._fontFamilies[this._font.name]) && isEqualFont(this._font, font)) {
            this._font = font;
            return this;
        }
        if (cacheKey) {
            this._fontFamilies[cacheKey] = this._font;
        }
        if (this._font.name) {
            this._fontFamilies[this._font.name] = this._font;
        }
        return this;
    },
    fontSize (_fontSize) {
        this._fontSize = this.sizeToPoint(_fontSize);
        return this;
    },
    currentLineHeight (includeGap) {
        return this._font.lineHeight(this._fontSize, includeGap);
    },
    registerFont (name, src, family) {
        this._registeredFonts[name] = {
            src,
            family
        };
        return this;
    },
    sizeToPoint (size, defaultValue = 0, page = this.page, percentageWidth = undefined) {
        if (!percentageWidth) percentageWidth = this._fontSize;
        if (typeof defaultValue !== "number") defaultValue = this.sizeToPoint(defaultValue);
        if (size === undefined) return defaultValue;
        if (typeof size === "number") return size;
        if (typeof size === "boolean") return Number(size);
        const match = String(size).match(/((\d+)?(\.\d+)?)(em|in|px|cm|mm|pc|ex|ch|rem|vw|vh|vmin|vmax|%|pt)?/);
        if (!match) throw new Error(`Unsupported size '${size}'`);
        let multiplier;
        switch(match[4]){
            case "em":
                multiplier = this._fontSize;
                break;
            case "in":
                multiplier = IN_TO_PT;
                break;
            case "px":
                multiplier = PX_TO_IN * IN_TO_PT;
                break;
            case "cm":
                multiplier = CM_TO_IN * IN_TO_PT;
                break;
            case "mm":
                multiplier = MM_TO_CM * CM_TO_IN * IN_TO_PT;
                break;
            case "pc":
                multiplier = PC_TO_PT;
                break;
            case "ex":
                multiplier = this.currentLineHeight();
                break;
            case "ch":
                multiplier = this.widthOfString("0");
                break;
            case "rem":
                multiplier = this._remSize;
                break;
            case "vw":
                multiplier = page.width / 100;
                break;
            case "vh":
                multiplier = page.height / 100;
                break;
            case "vmin":
                multiplier = Math.min(page.width, page.height) / 100;
                break;
            case "vmax":
                multiplier = Math.max(page.width, page.height) / 100;
                break;
            case "%":
                multiplier = percentageWidth / 100;
                break;
            case "pt":
            default:
                multiplier = 1;
        }
        return multiplier * Number(match[1]);
    }
};
const SOFT_HYPHEN = "\xad";
const HYPHEN = "-";
class LineWrapper extends events.EventEmitter {
    constructor(document, options){
        super();
        this.document = document;
        this.horizontalScaling = options.horizontalScaling || 100;
        this.indent = (options.indent || 0) * this.horizontalScaling / 100;
        this.characterSpacing = (options.characterSpacing || 0) * this.horizontalScaling / 100;
        this.wordSpacing = (options.wordSpacing === 0) * this.horizontalScaling / 100;
        this.columns = options.columns || 1;
        this.columnGap = (options.columnGap != null ? options.columnGap : 18) * this.horizontalScaling / 100;
        this.lineWidth = (options.width * this.horizontalScaling / 100 - this.columnGap * (this.columns - 1)) / this.columns;
        this.spaceLeft = this.lineWidth;
        this.startX = this.document.x;
        this.startY = this.document.y;
        this.column = 1;
        this.ellipsis = options.ellipsis;
        this.continuedX = 0;
        this.features = options.features;
        if (options.height != null) {
            this.height = options.height;
            this.maxY = PDFNumber(this.startY + options.height);
        } else {
            this.maxY = PDFNumber(this.document.page.maxY());
        }
        this.on("firstLine", (options)=>{
            const indent = this.continuedX || this.indent;
            this.document.x += indent;
            this.lineWidth -= indent;
            if (options.indentAllLines) {
                return;
            }
            this.once("line", ()=>{
                this.document.x -= indent;
                this.lineWidth += indent;
                if (options.continued && !this.continuedX) {
                    this.continuedX = this.indent;
                }
                if (!options.continued) {
                    this.continuedX = 0;
                }
            });
        });
        this.on("lastLine", (options)=>{
            const { align } = options;
            if (align === "justify") {
                options.align = "left";
            }
            this.lastLine = true;
            this.once("line", ()=>{
                this.document.y += options.paragraphGap || 0;
                options.align = align;
                return this.lastLine = false;
            });
        });
    }
    wordWidth(word) {
        return PDFNumber(this.document.widthOfString(word, this) + this.characterSpacing + this.wordSpacing);
    }
    canFit(word, w) {
        if (word[word.length - 1] != SOFT_HYPHEN) {
            return w <= this.spaceLeft;
        }
        return w + this.wordWidth(HYPHEN) <= this.spaceLeft;
    }
    eachWord(text, fn) {
        let bk;
        const breaker = new LineBreaker(text);
        let last = null;
        const wordWidths = Object.create(null);
        while(bk = breaker.nextBreak()){
            var shouldContinue;
            let word = text.slice((last != null ? last.position : undefined) || 0, bk.position);
            let w = wordWidths[word] != null ? wordWidths[word] : wordWidths[word] = this.wordWidth(word);
            if (w > this.lineWidth + this.continuedX) {
                let lbk = last;
                const fbk = {};
                while(word.length){
                    var l, mightGrow;
                    if (w > this.spaceLeft) {
                        l = Math.ceil(this.spaceLeft / (w / word.length));
                        w = this.wordWidth(word.slice(0, l));
                        mightGrow = w <= this.spaceLeft && l < word.length;
                    } else {
                        l = word.length;
                    }
                    let mustShrink = w > this.spaceLeft && l > 0;
                    while(mustShrink || mightGrow){
                        if (mustShrink) {
                            w = this.wordWidth(word.slice(0, --l));
                            mustShrink = w > this.spaceLeft && l > 0;
                        } else {
                            w = this.wordWidth(word.slice(0, ++l));
                            mustShrink = w > this.spaceLeft && l > 0;
                            mightGrow = w <= this.spaceLeft && l < word.length;
                        }
                    }
                    if (l === 0 && this.spaceLeft === this.lineWidth) {
                        l = 1;
                    }
                    fbk.required = bk.required || l < word.length;
                    shouldContinue = fn(word.slice(0, l), w, fbk, lbk);
                    lbk = {
                        required: false
                    };
                    word = word.slice(l);
                    w = this.wordWidth(word);
                    if (shouldContinue === false) {
                        break;
                    }
                }
            } else {
                shouldContinue = fn(word, w, bk, last);
            }
            if (shouldContinue === false) {
                break;
            }
            last = bk;
        }
    }
    wrap(text, options) {
        this.horizontalScaling = options.horizontalScaling || 100;
        if (options.indent != null) {
            this.indent = options.indent * this.horizontalScaling / 100;
        }
        if (options.characterSpacing != null) {
            this.characterSpacing = options.characterSpacing * this.horizontalScaling / 100;
        }
        if (options.wordSpacing != null) {
            this.wordSpacing = options.wordSpacing * this.horizontalScaling / 100;
        }
        if (options.ellipsis != null) {
            this.ellipsis = options.ellipsis;
        }
        const nextY = this.document.y + this.document.currentLineHeight(true);
        if (this.document.y > this.maxY || nextY > this.maxY) {
            this.nextSection();
        }
        let buffer = "";
        let textWidth = 0;
        let wc = 0;
        let lc = 0;
        let { y } = this.document;
        const emitLine = ()=>{
            options.textWidth = textWidth + this.wordSpacing * (wc - 1);
            options.wordCount = wc;
            options.lineWidth = this.lineWidth;
            ({ y } = this.document);
            this.emit("line", buffer, options, this);
            return lc++;
        };
        this.emit("sectionStart", options, this);
        this.eachWord(text, (word, w, bk, last)=>{
            if (last == null || last.required) {
                this.emit("firstLine", options, this);
                this.spaceLeft = this.lineWidth;
            }
            if (this.canFit(word, w)) {
                buffer += word;
                textWidth += w;
                wc++;
            }
            if (bk.required || !this.canFit(word, w)) {
                const lh = this.document.currentLineHeight(true);
                if (this.height != null && this.ellipsis && PDFNumber(this.document.y + lh * 2) > this.maxY && this.column >= this.columns) {
                    if (this.ellipsis === true) {
                        this.ellipsis = "…";
                    }
                    buffer = buffer.replace(/\s+$/, "");
                    textWidth = this.wordWidth(buffer + this.ellipsis);
                    while(buffer && textWidth > this.lineWidth){
                        buffer = buffer.slice(0, -1).replace(/\s+$/, "");
                        textWidth = this.wordWidth(buffer + this.ellipsis);
                    }
                    if (textWidth <= this.lineWidth) {
                        buffer = buffer + this.ellipsis;
                    }
                    textWidth = this.wordWidth(buffer);
                }
                if (bk.required) {
                    if (w > this.spaceLeft) {
                        emitLine();
                        buffer = word;
                        textWidth = w;
                        wc = 1;
                    }
                    this.emit("lastLine", options, this);
                }
                if (buffer[buffer.length - 1] == SOFT_HYPHEN) {
                    buffer = buffer.slice(0, -1) + HYPHEN;
                    this.spaceLeft -= this.wordWidth(HYPHEN);
                }
                emitLine();
                if (PDFNumber(this.document.y + lh) > this.maxY) {
                    const shouldContinue = this.nextSection();
                    if (!shouldContinue) {
                        wc = 0;
                        buffer = "";
                        return false;
                    }
                }
                if (bk.required) {
                    this.spaceLeft = this.lineWidth;
                    buffer = "";
                    textWidth = 0;
                    return wc = 0;
                } else {
                    this.spaceLeft = this.lineWidth - w;
                    buffer = word;
                    textWidth = w;
                    return wc = 1;
                }
            } else {
                return this.spaceLeft -= w;
            }
        });
        if (wc > 0) {
            this.emit("lastLine", options, this);
            emitLine();
        }
        this.emit("sectionEnd", options, this);
        if (options.continued === true) {
            if (lc > 1) {
                this.continuedX = 0;
            }
            this.continuedX += options.textWidth || 0;
            this.document.y = y;
        } else {
            this.document.x = this.startX;
        }
    }
    nextSection(options) {
        this.emit("sectionEnd", options, this);
        if (++this.column > this.columns) {
            if (this.height != null) {
                return false;
            }
            this.document.continueOnNewPage();
            this.column = 1;
            this.startY = this.document.page.margins.top;
            this.maxY = this.document.page.maxY();
            this.document.x = this.startX;
            if (this.document._fillColor) {
                this.document.fillColor(...this.document._fillColor);
            }
            this.emit("pageBreak", options, this);
        } else {
            this.document.x += this.lineWidth + this.columnGap;
            this.document.y = this.startY;
            this.emit("columnBreak", options, this);
        }
        this.emit("sectionStart", options, this);
        return true;
    }
}
const { number } = PDFObject;
var TextMixin = {
    initText () {
        this._line = this._line.bind(this);
        this.x = 0;
        this.y = 0;
        this._lineGap = 0;
    },
    lineGap (_lineGap) {
        this._lineGap = _lineGap;
        return this;
    },
    moveDown (lines) {
        if (lines == null) {
            lines = 1;
        }
        this.y += this.currentLineHeight(true) * lines + this._lineGap;
        return this;
    },
    moveUp (lines) {
        if (lines == null) {
            lines = 1;
        }
        this.y -= this.currentLineHeight(true) * lines + this._lineGap;
        return this;
    },
    _text (text, x, y, options, lineCallback) {
        options = this._initOptions(x, y, options);
        text = text == null ? "" : `${text}`;
        if (options.wordSpacing) {
            text = text.replace(/\s{2,}/g, " ");
        }
        const addStructure = ()=>{
            if (options.structParent) {
                options.structParent.add(this.struct(options.structType || "P", [
                    this.markStructureContent(options.structType || "P")
                ]));
            }
        };
        if (options.rotation !== 0) {
            this.save();
            this.rotate(-options.rotation, {
                origin: [
                    this.x,
                    this.y
                ]
            });
        }
        if (options.width) {
            let wrapper = this._wrapper;
            if (!wrapper) {
                wrapper = new LineWrapper(this, options);
                wrapper.on("line", lineCallback);
                wrapper.on("firstLine", addStructure);
            }
            this._wrapper = options.continued ? wrapper : null;
            this._textOptions = options.continued ? options : null;
            wrapper.wrap(text, options);
        } else {
            for (let line of text.split("\n")){
                addStructure();
                lineCallback(line, options);
            }
        }
        if (options.rotation !== 0) this.restore();
        return this;
    },
    text (text, x, y, options) {
        return this._text(text, x, y, options, this._line);
    },
    widthOfString (string, options = {}) {
        const horizontalScaling = options.horizontalScaling || 100;
        return (this._font.widthOfString(string, this._fontSize, options.features) + (options.characterSpacing || 0) * (string.length - 1)) * horizontalScaling / 100;
    },
    boundsOfString (string, x, y, options) {
        options = this._initOptions(x, y, options);
        ({ x, y } = this);
        const lineGap = options.lineGap ?? this._lineGap ?? 0;
        const lineHeight = this.currentLineHeight(true) + lineGap;
        let contentWidth = 0;
        string = String(string ?? "");
        if (options.wordSpacing) {
            string = string.replace(/\s{2,}/g, " ");
        }
        if (options.width) {
            let wrapper = new LineWrapper(this, options);
            wrapper.on("line", (text, options)=>{
                this.y += lineHeight;
                text = text.replace(/\n/g, "");
                if (text.length) {
                    let wordSpacing = options.wordSpacing ?? 0;
                    const characterSpacing = options.characterSpacing ?? 0;
                    if (options.width && options.align === "justify") {
                        const words = text.trim().split(/\s+/);
                        const textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
                        const spaceWidth = this.widthOfString(" ") + characterSpacing;
                        wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
                    }
                    contentWidth = Math.max(contentWidth, options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1));
                }
            });
            wrapper.wrap(string, options);
        } else {
            for (let line of string.split("\n")){
                const lineWidth = this.widthOfString(line, options);
                this.y += lineHeight;
                contentWidth = Math.max(contentWidth, lineWidth);
            }
        }
        let contentHeight = this.y - y;
        if (options.height) contentHeight = Math.min(contentHeight, options.height);
        this.x = x;
        this.y = y;
        if (options.rotation === 0) {
            return {
                x,
                y,
                width: contentWidth,
                height: contentHeight
            };
        } else if (options.rotation === 90) {
            return {
                x: x,
                y: y - contentWidth,
                width: contentHeight,
                height: contentWidth
            };
        } else if (options.rotation === 180) {
            return {
                x: x - contentWidth,
                y: y - contentHeight,
                width: contentWidth,
                height: contentHeight
            };
        } else if (options.rotation === 270) {
            return {
                x: x - contentHeight,
                y: y,
                width: contentHeight,
                height: contentWidth
            };
        }
        const cos = cosine(options.rotation);
        const sin = sine(options.rotation);
        const x1 = x;
        const y1 = y;
        const x2 = x + contentWidth * cos;
        const y2 = y - contentWidth * sin;
        const x3 = x + contentWidth * cos + contentHeight * sin;
        const y3 = y - contentWidth * sin + contentHeight * cos;
        const x4 = x + contentHeight * sin;
        const y4 = y + contentHeight * cos;
        const xMin = Math.min(x1, x2, x3, x4);
        const xMax = Math.max(x1, x2, x3, x4);
        const yMin = Math.min(y1, y2, y3, y4);
        const yMax = Math.max(y1, y2, y3, y4);
        return {
            x: xMin,
            y: yMin,
            width: xMax - xMin,
            height: yMax - yMin
        };
    },
    heightOfString (text, options) {
        const { x, y } = this;
        options = this._initOptions(options);
        options.height = Infinity;
        const lineGap = options.lineGap || this._lineGap || 0;
        this._text(text, this.x, this.y, options, ()=>{
            this.y += this.currentLineHeight(true) + lineGap;
        });
        const height = this.y - y;
        this.x = x;
        this.y = y;
        return height;
    },
    list (list, x, y, options, wrapper) {
        options = this._initOptions(x, y, options);
        const listType = options.listType || "bullet";
        const unit = Math.round(this._font.ascender / 1000 * this._fontSize);
        const midLine = unit / 2;
        const r = options.bulletRadius || unit / 3;
        const indent = options.textIndent || (listType === "bullet" ? r * 5 : unit * 2);
        const itemIndent = options.bulletIndent || (listType === "bullet" ? r * 8 : unit * 2);
        let level = 1;
        const items = [];
        const levels = [];
        const numbers = [];
        var flatten = function(list) {
            let n = 1;
            for(let i = 0; i < list.length; i++){
                const item = list[i];
                if (Array.isArray(item)) {
                    level++;
                    flatten(item);
                    level--;
                } else {
                    items.push(item);
                    levels.push(level);
                    if (listType !== "bullet") {
                        numbers.push(n++);
                    }
                }
            }
        };
        flatten(list);
        const label = function(n) {
            switch(listType){
                case "numbered":
                    return `${n}.`;
                case "lettered":
                    var letter = String.fromCharCode((n - 1) % 26 + 65);
                    var times = Math.floor((n - 1) / 26 + 1);
                    var text = Array(times + 1).join(letter);
                    return `${text}.`;
            }
        };
        const drawListItem = function(listItem, i) {
            wrapper = new LineWrapper(this, options);
            wrapper.on("line", this._line);
            level = 1;
            wrapper.once("firstLine", ()=>{
                let item, itemType, labelType, bodyType;
                if (options.structParent) {
                    if (options.structTypes) {
                        [itemType, labelType, bodyType] = options.structTypes;
                    } else {
                        [itemType, labelType, bodyType] = [
                            "LI",
                            "Lbl",
                            "LBody"
                        ];
                    }
                }
                if (itemType) {
                    item = this.struct(itemType);
                    options.structParent.add(item);
                } else if (options.structParent) {
                    item = options.structParent;
                }
                let l;
                if ((l = levels[i++]) !== level) {
                    const diff = itemIndent * (l - level);
                    this.x += diff;
                    wrapper.lineWidth -= diff;
                    level = l;
                }
                if (item && (labelType || bodyType)) {
                    item.add(this.struct(labelType || bodyType, [
                        this.markStructureContent(labelType || bodyType)
                    ]));
                }
                switch(listType){
                    case "bullet":
                        this.circle(this.x - indent + r, this.y + midLine, r);
                        this.fill();
                        break;
                    case "numbered":
                    case "lettered":
                        var text = label(numbers[i - 1]);
                        this._fragment(text, this.x - indent, this.y, options);
                        break;
                }
                if (item && labelType && bodyType) {
                    item.add(this.struct(bodyType, [
                        this.markStructureContent(bodyType)
                    ]));
                }
                if (item && item !== options.structParent) {
                    item.end();
                }
            });
            wrapper.on("sectionStart", ()=>{
                const pos = indent + itemIndent * (level - 1);
                this.x += pos;
                wrapper.lineWidth -= pos;
            });
            wrapper.on("sectionEnd", ()=>{
                const pos = indent + itemIndent * (level - 1);
                this.x -= pos;
                wrapper.lineWidth += pos;
            });
            wrapper.wrap(listItem, options);
        };
        for(let i = 0; i < items.length; i++){
            drawListItem.call(this, items[i], i);
        }
        return this;
    },
    _initOptions (x = {}, y, options = {}) {
        if (typeof x === "object") {
            options = x;
            x = null;
        }
        const result = Object.assign({}, options);
        if (this._textOptions) {
            for(let key in this._textOptions){
                const val = this._textOptions[key];
                if (key !== "continued") {
                    if (result[key] === undefined) {
                        result[key] = val;
                    }
                }
            }
        }
        if (x != null) {
            this.x = x;
        }
        if (y != null) {
            this.y = y;
        }
        if (result.lineBreak !== false) {
            if (result.width == null) {
                result.width = this.page.width - this.x - this.page.margins.right;
            }
            result.width = Math.max(result.width, 0);
        }
        if (!result.columns) {
            result.columns = 0;
        }
        if (result.columnGap == null) {
            result.columnGap = 18;
        }
        result.rotation = Number(options.rotation ?? 0) % 360;
        if (result.rotation < 0) result.rotation += 360;
        return result;
    },
    _line (text, options = {}, wrapper) {
        this._fragment(text, this.x, this.y, options);
        const lineGap = options.lineGap || this._lineGap || 0;
        if (!wrapper) {
            this.x += this.widthOfString(text, options);
        } else {
            this.y += this.currentLineHeight(true) + lineGap;
        }
    },
    _fragment (text, x, y, options) {
        let dy, encoded, i, positions, textWidth, words;
        text = `${text}`.replace(/\n/g, "");
        if (text.length === 0) {
            return;
        }
        const align = options.align || "left";
        let wordSpacing = options.wordSpacing || 0;
        const characterSpacing = options.characterSpacing || 0;
        const horizontalScaling = options.horizontalScaling || 100;
        if (options.width) {
            switch(align){
                case "right":
                    textWidth = this.widthOfString(text.replace(/\s+$/, ""), options);
                    x += options.lineWidth - textWidth;
                    break;
                case "center":
                    x += options.lineWidth / 2 - options.textWidth / 2;
                    break;
                case "justify":
                    words = text.trim().split(/\s+/);
                    textWidth = this.widthOfString(text.replace(/\s+/g, ""), options);
                    var spaceWidth = this.widthOfString(" ") + characterSpacing;
                    wordSpacing = Math.max(0, (options.lineWidth - textWidth) / Math.max(1, words.length - 1) - spaceWidth);
                    break;
            }
        }
        if (typeof options.baseline === "number") {
            dy = -options.baseline;
        } else {
            switch(options.baseline){
                case "svg-middle":
                    dy = 0.5 * this._font.xHeight;
                    break;
                case "middle":
                case "svg-central":
                    dy = 0.5 * (this._font.descender + this._font.ascender);
                    break;
                case "bottom":
                case "ideographic":
                    dy = this._font.descender;
                    break;
                case "alphabetic":
                    dy = 0;
                    break;
                case "mathematical":
                    dy = 0.5 * this._font.ascender;
                    break;
                case "hanging":
                    dy = 0.8 * this._font.ascender;
                    break;
                case "top":
                    dy = this._font.ascender;
                    break;
                default:
                    dy = this._font.ascender;
            }
            dy = dy / 1000 * this._fontSize;
        }
        const renderedWidth = options.textWidth + wordSpacing * (options.wordCount - 1) + characterSpacing * (text.length - 1);
        if (options.link != null) {
            this.link(x, y, renderedWidth, this.currentLineHeight(), options.link);
        }
        if (options.goTo != null) {
            this.goTo(x, y, renderedWidth, this.currentLineHeight(), options.goTo);
        }
        if (options.destination != null) {
            this.addNamedDestination(options.destination, "XYZ", x, y, null);
        }
        if (options.underline) {
            this.save();
            if (!options.stroke) {
                this.strokeColor(...this._fillColor || []);
            }
            const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
            this.lineWidth(lineWidth);
            let lineY = y + this.currentLineHeight() - lineWidth;
            this.moveTo(x, lineY);
            this.lineTo(x + renderedWidth, lineY);
            this.stroke();
            this.restore();
        }
        if (options.strike) {
            this.save();
            if (!options.stroke) {
                this.strokeColor(...this._fillColor || []);
            }
            const lineWidth = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
            this.lineWidth(lineWidth);
            let lineY = y + this.currentLineHeight() / 2;
            this.moveTo(x, lineY);
            this.lineTo(x + renderedWidth, lineY);
            this.stroke();
            this.restore();
        }
        this.save();
        if (options.oblique) {
            let skew;
            if (typeof options.oblique === "number") {
                skew = -Math.tan(options.oblique * Math.PI / 180);
            } else {
                skew = -0.25;
            }
            this.transform(1, 0, 0, 1, x, y);
            this.transform(1, 0, skew, 1, -skew * dy, 0);
            this.transform(1, 0, 0, 1, -x, -y);
        }
        this.transform(1, 0, 0, -1, 0, this.page.height);
        y = this.page.height - y - dy;
        if (this.page.fonts[this._font.id] == null) {
            this.page.fonts[this._font.id] = this._font.ref();
        }
        this.addContent("BT");
        this.addContent(`1 0 0 1 ${number(x)} ${number(y)} Tm`);
        this.addContent(`/${this._font.id} ${number(this._fontSize)} Tf`);
        const mode = options.fill && options.stroke ? 2 : options.stroke ? 1 : 0;
        if (mode) {
            this.addContent(`${mode} Tr`);
        }
        if (characterSpacing) {
            this.addContent(`${number(characterSpacing)} Tc`);
        }
        if (horizontalScaling !== 100) {
            this.addContent(`${horizontalScaling} Tz`);
        }
        if (wordSpacing) {
            words = text.trim().split(/\s+/);
            wordSpacing += this.widthOfString(" ") + characterSpacing;
            wordSpacing *= 1000 / this._fontSize;
            encoded = [];
            positions = [];
            for (let word of words){
                const [encodedWord, positionsWord] = this._font.encode(word, options.features);
                encoded = encoded.concat(encodedWord);
                positions = positions.concat(positionsWord);
                const space = {};
                const object = positions[positions.length - 1];
                for(let key in object){
                    const val = object[key];
                    space[key] = val;
                }
                space.xAdvance += wordSpacing;
                positions[positions.length - 1] = space;
            }
        } else {
            [encoded, positions] = this._font.encode(text, options.features);
        }
        const scale = this._fontSize / 1000;
        const commands = [];
        let last = 0;
        let hadOffset = false;
        const addSegment = (cur)=>{
            if (last < cur) {
                const hex = encoded.slice(last, cur).join("");
                const advance = positions[cur - 1].xAdvance - positions[cur - 1].advanceWidth;
                commands.push(`<${hex}> ${number(-advance)}`);
            }
            last = cur;
        };
        const flush = (i)=>{
            addSegment(i);
            if (commands.length > 0) {
                this.addContent(`[${commands.join(" ")}] TJ`);
                commands.length = 0;
            }
        };
        for(i = 0; i < positions.length; i++){
            const pos = positions[i];
            if (pos.xOffset || pos.yOffset) {
                flush(i);
                this.addContent(`1 0 0 1 ${number(x + pos.xOffset * scale)} ${number(y + pos.yOffset * scale)} Tm`);
                flush(i + 1);
                hadOffset = true;
            } else {
                if (hadOffset) {
                    this.addContent(`1 0 0 1 ${number(x)} ${number(y)} Tm`);
                    hadOffset = false;
                }
                if (pos.xAdvance - pos.advanceWidth !== 0) {
                    addSegment(i + 1);
                }
            }
            x += pos.xAdvance * scale;
        }
        flush(i);
        this.addContent("ET");
        this.restore();
    }
};
const MARKERS = [
    0xffc0,
    0xffc1,
    0xffc2,
    0xffc3,
    0xffc5,
    0xffc6,
    0xffc7,
    0xffc8,
    0xffc9,
    0xffca,
    0xffcb,
    0xffcc,
    0xffcd,
    0xffce,
    0xffcf
];
const COLOR_SPACE_MAP = {
    1: "DeviceGray",
    3: "DeviceRGB",
    4: "DeviceCMYK"
};
class JPEG {
    constructor(data, label){
        let marker;
        this.data = data;
        this.label = label;
        if (this.data.readUInt16BE(0) !== 0xffd8) {
            throw "SOI not found in JPEG";
        }
        this.orientation = exif.fromBuffer(this.data).Orientation || 1;
        let pos = 2;
        while(pos < this.data.length){
            marker = this.data.readUInt16BE(pos);
            pos += 2;
            if (MARKERS.includes(marker)) {
                break;
            }
            pos += this.data.readUInt16BE(pos);
        }
        if (!MARKERS.includes(marker)) {
            throw "Invalid JPEG.";
        }
        pos += 2;
        this.bits = this.data[pos++];
        this.height = this.data.readUInt16BE(pos);
        pos += 2;
        this.width = this.data.readUInt16BE(pos);
        pos += 2;
        const channels = this.data[pos++];
        this.colorSpace = COLOR_SPACE_MAP[channels];
        this.obj = null;
    }
    embed(document) {
        if (this.obj) {
            return;
        }
        this.obj = document.ref({
            Type: "XObject",
            Subtype: "Image",
            BitsPerComponent: this.bits,
            Width: this.width,
            Height: this.height,
            ColorSpace: this.colorSpace,
            Filter: "DCTDecode"
        });
        if (this.colorSpace === "DeviceCMYK") {
            this.obj.data["Decode"] = [
                1.0,
                0.0,
                1.0,
                0.0,
                1.0,
                0.0,
                1.0,
                0.0
            ];
        }
        this.obj.end(this.data);
        return this.data = null;
    }
}
class PNGImage {
    constructor(data, label){
        this.label = label;
        this.image = new PNG(data);
        this.width = this.image.width;
        this.height = this.image.height;
        this.imgData = this.image.imgData;
        this.obj = null;
    }
    embed(document) {
        let dataDecoded = false;
        this.document = document;
        if (this.obj) {
            return;
        }
        const hasAlphaChannel = this.image.hasAlphaChannel;
        const isInterlaced = this.image.interlaceMethod === 1;
        this.obj = this.document.ref({
            Type: "XObject",
            Subtype: "Image",
            BitsPerComponent: hasAlphaChannel ? 8 : this.image.bits,
            Width: this.width,
            Height: this.height,
            Filter: "FlateDecode"
        });
        if (!hasAlphaChannel) {
            const params = this.document.ref({
                Predictor: isInterlaced ? 1 : 15,
                Colors: this.image.colors,
                BitsPerComponent: this.image.bits,
                Columns: this.width
            });
            this.obj.data["DecodeParms"] = params;
            params.end();
        }
        if (this.image.palette.length === 0) {
            this.obj.data["ColorSpace"] = this.image.colorSpace;
        } else {
            const palette = this.document.ref();
            palette.end(Buffer.from(this.image.palette));
            this.obj.data["ColorSpace"] = [
                "Indexed",
                "DeviceRGB",
                this.image.palette.length / 3 - 1,
                palette
            ];
        }
        if (this.image.transparency.grayscale != null) {
            const val = this.image.transparency.grayscale;
            this.obj.data["Mask"] = [
                val,
                val
            ];
        } else if (this.image.transparency.rgb) {
            const { rgb } = this.image.transparency;
            const mask = [];
            for (let x of rgb){
                mask.push(x, x);
            }
            this.obj.data["Mask"] = mask;
        } else if (this.image.transparency.indexed) {
            dataDecoded = true;
            return this.loadIndexedAlphaChannel();
        } else if (hasAlphaChannel) {
            dataDecoded = true;
            return this.splitAlphaChannel();
        }
        if (isInterlaced && !dataDecoded) {
            return this.decodeData();
        }
        this.finalize();
    }
    finalize() {
        if (this.alphaChannel) {
            const sMask = this.document.ref({
                Type: "XObject",
                Subtype: "Image",
                Height: this.height,
                Width: this.width,
                BitsPerComponent: 8,
                Filter: "FlateDecode",
                ColorSpace: "DeviceGray",
                Decode: [
                    0,
                    1
                ]
            });
            sMask.end(this.alphaChannel);
            this.obj.data["SMask"] = sMask;
        }
        this.obj.end(this.imgData);
        this.image = null;
        return this.imgData = null;
    }
    splitAlphaChannel() {
        return this.image.decodePixels((pixels)=>{
            let a, p;
            const colorCount = this.image.colors;
            const pixelCount = this.width * this.height;
            const imgData = Buffer.alloc(pixelCount * colorCount);
            const alphaChannel = Buffer.alloc(pixelCount);
            let i = p = a = 0;
            const len = pixels.length;
            const skipByteCount = this.image.bits === 16 ? 1 : 0;
            while(i < len){
                for(let colorIndex = 0; colorIndex < colorCount; colorIndex++){
                    imgData[p++] = pixels[i++];
                    i += skipByteCount;
                }
                alphaChannel[a++] = pixels[i++];
                i += skipByteCount;
            }
            this.imgData = zlib.deflateSync(imgData);
            this.alphaChannel = zlib.deflateSync(alphaChannel);
            return this.finalize();
        });
    }
    loadIndexedAlphaChannel() {
        const transparency = this.image.transparency.indexed;
        return this.image.decodePixels((pixels)=>{
            const alphaChannel = Buffer.alloc(this.width * this.height);
            let i = 0;
            for(let j = 0, end = pixels.length; j < end; j++){
                alphaChannel[i++] = transparency[pixels[j]];
            }
            this.alphaChannel = zlib.deflateSync(alphaChannel);
            return this.finalize();
        });
    }
    decodeData() {
        this.image.decodePixels((pixels)=>{
            this.imgData = zlib.deflateSync(pixels);
            this.finalize();
        });
    }
}
class PDFImage {
    static open(src, label) {
        let data;
        if (Buffer.isBuffer(src)) {
            data = src;
        } else if (src instanceof ArrayBuffer) {
            data = Buffer.from(new Uint8Array(src));
        } else {
            const match = /^data:.+?;base64,(.*)$/.exec(src);
            if (match) {
                data = Buffer.from(match[1], "base64");
            } else {
                data = fs.readFileSync(src);
                if (!data) {
                    return;
                }
            }
        }
        if (data[0] === 0xff && data[1] === 0xd8) {
            return new JPEG(data, label);
        } else if (data[0] === 0x89 && data.toString("ascii", 1, 4) === "PNG") {
            return new PNGImage(data, label);
        } else {
            throw new Error("Unknown image format.");
        }
    }
}
var ImagesMixin = {
    initImages () {
        this._imageRegistry = {};
        this._imageCount = 0;
    },
    image (src, x, y, options = {}) {
        let bh, bp, bw, image, ip, left, left1, originX, originY;
        if (typeof x === "object") {
            options = x;
            x = null;
        }
        const ignoreOrientation = options.ignoreOrientation || options.ignoreOrientation !== false && this.options.ignoreOrientation;
        const inDocumentFlow = typeof y !== "number";
        x = (left = x != null ? x : options.x) != null ? left : this.x;
        y = (left1 = y != null ? y : options.y) != null ? left1 : this.y;
        if (typeof src === "string") {
            image = this._imageRegistry[src];
        }
        if (!image) {
            if (src.width && src.height) {
                image = src;
            } else {
                image = this.openImage(src);
            }
        }
        if (!image.obj) {
            image.embed(this);
        }
        if (this.page.xobjects[image.label] == null) {
            this.page.xobjects[image.label] = image.obj;
        }
        let { width, height } = image;
        if (!ignoreOrientation && image.orientation > 4) {
            [width, height] = [
                height,
                width
            ];
        }
        let w = options.width || width;
        let h = options.height || height;
        if (options.width && !options.height) {
            const wp = w / width;
            w = width * wp;
            h = height * wp;
        } else if (options.height && !options.width) {
            const hp = h / height;
            w = width * hp;
            h = height * hp;
        } else if (options.scale) {
            w = width * options.scale;
            h = height * options.scale;
        } else if (options.fit) {
            [bw, bh] = options.fit;
            bp = bw / bh;
            ip = width / height;
            if (ip > bp) {
                w = bw;
                h = bw / ip;
            } else {
                h = bh;
                w = bh * ip;
            }
        } else if (options.cover) {
            [bw, bh] = options.cover;
            bp = bw / bh;
            ip = width / height;
            if (ip > bp) {
                h = bh;
                w = bh * ip;
            } else {
                w = bw;
                h = bw / ip;
            }
        }
        if (options.fit || options.cover) {
            if (options.align === "center") {
                x = x + bw / 2 - w / 2;
            } else if (options.align === "right") {
                x = x + bw - w;
            }
            if (options.valign === "center") {
                y = y + bh / 2 - h / 2;
            } else if (options.valign === "bottom") {
                y = y + bh - h;
            }
        }
        let rotateAngle = 0;
        let xTransform = x;
        let yTransform = y;
        let hTransform = h;
        let wTransform = w;
        if (!ignoreOrientation) {
            switch(image.orientation){
                default:
                case 1:
                    hTransform = -h;
                    yTransform += h;
                    break;
                case 2:
                    wTransform = -w;
                    hTransform = -h;
                    xTransform += w;
                    yTransform += h;
                    break;
                case 3:
                    originX = x;
                    originY = y;
                    hTransform = -h;
                    xTransform -= w;
                    rotateAngle = 180;
                    break;
                case 4:
                    break;
                case 5:
                    originX = x;
                    originY = y;
                    wTransform = h;
                    hTransform = w;
                    yTransform -= hTransform;
                    rotateAngle = 90;
                    break;
                case 6:
                    originX = x;
                    originY = y;
                    wTransform = h;
                    hTransform = -w;
                    rotateAngle = 90;
                    break;
                case 7:
                    originX = x;
                    originY = y;
                    hTransform = -w;
                    wTransform = -h;
                    xTransform += h;
                    rotateAngle = 90;
                    break;
                case 8:
                    originX = x;
                    originY = y;
                    wTransform = h;
                    hTransform = -w;
                    xTransform -= h;
                    yTransform += w;
                    rotateAngle = -90;
                    break;
            }
        } else {
            hTransform = -h;
            yTransform += h;
        }
        if (options.link != null) {
            this.link(x, y, w, h, options.link);
        }
        if (options.goTo != null) {
            this.goTo(x, y, w, h, options.goTo);
        }
        if (options.destination != null) {
            this.addNamedDestination(options.destination, "XYZ", x, y, null);
        }
        if (inDocumentFlow) {
            this.y += h;
        }
        this.save();
        if (rotateAngle) {
            this.rotate(rotateAngle, {
                origin: [
                    originX,
                    originY
                ]
            });
        }
        this.transform(wTransform, 0, 0, hTransform, xTransform, yTransform);
        this.addContent(`/${image.label} Do`);
        this.restore();
        return this;
    },
    openImage (src) {
        let image;
        if (typeof src === "string") {
            image = this._imageRegistry[src];
        }
        if (!image) {
            image = PDFImage.open(src, `I${++this._imageCount}`);
            if (typeof src === "string") {
                this._imageRegistry[src] = image;
            }
        }
        return image;
    }
};
var AnnotationsMixin = {
    annotate (x, y, w, h, options) {
        options.Type = "Annot";
        options.Rect = this._convertRect(x, y, w, h);
        options.Border = [
            0,
            0,
            0
        ];
        if (options.Subtype === "Link" && typeof options.F === "undefined") {
            options.F = 1 << 2;
        }
        if (options.Subtype !== "Link") {
            if (options.C == null) {
                options.C = this._normalizeColor(options.color || [
                    0,
                    0,
                    0
                ]);
            }
        }
        delete options.color;
        if (typeof options.Dest === "string") {
            options.Dest = new String(options.Dest);
        }
        for(let key in options){
            const val = options[key];
            options[key[0].toUpperCase() + key.slice(1)] = val;
        }
        const ref = this.ref(options);
        this.page.annotations.push(ref);
        ref.end();
        return this;
    },
    note (x, y, w, h, contents, options = {}) {
        options.Subtype = "Text";
        options.Contents = new String(contents);
        if (options.Name == null) {
            options.Name = "Comment";
        }
        if (options.color == null) {
            options.color = [
                243,
                223,
                92
            ];
        }
        return this.annotate(x, y, w, h, options);
    },
    goTo (x, y, w, h, name, options = {}) {
        options.Subtype = "Link";
        options.A = this.ref({
            S: "GoTo",
            D: new String(name)
        });
        options.A.end();
        return this.annotate(x, y, w, h, options);
    },
    link (x, y, w, h, url, options = {}) {
        options.Subtype = "Link";
        if (typeof url === "number") {
            const pages = this._root.data.Pages.data;
            if (url >= 0 && url < pages.Kids.length) {
                options.A = this.ref({
                    S: "GoTo",
                    D: [
                        pages.Kids[url],
                        "XYZ",
                        null,
                        null,
                        null
                    ]
                });
                options.A.end();
            } else {
                throw new Error(`The document has no page ${url}`);
            }
        } else {
            options.A = this.ref({
                S: "URI",
                URI: new String(url)
            });
            options.A.end();
        }
        return this.annotate(x, y, w, h, options);
    },
    _markup (x, y, w, h, options = {}) {
        const [x1, y1, x2, y2] = this._convertRect(x, y, w, h);
        options.QuadPoints = [
            x1,
            y2,
            x2,
            y2,
            x1,
            y1,
            x2,
            y1
        ];
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
    },
    highlight (x, y, w, h, options = {}) {
        options.Subtype = "Highlight";
        if (options.color == null) {
            options.color = [
                241,
                238,
                148
            ];
        }
        return this._markup(x, y, w, h, options);
    },
    underline (x, y, w, h, options = {}) {
        options.Subtype = "Underline";
        return this._markup(x, y, w, h, options);
    },
    strike (x, y, w, h, options = {}) {
        options.Subtype = "StrikeOut";
        return this._markup(x, y, w, h, options);
    },
    lineAnnotation (x1, y1, x2, y2, options = {}) {
        options.Subtype = "Line";
        options.Contents = new String();
        options.L = [
            x1,
            this.page.height - y1,
            x2,
            this.page.height - y2
        ];
        return this.annotate(x1, y1, x2, y2, options);
    },
    rectAnnotation (x, y, w, h, options = {}) {
        options.Subtype = "Square";
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
    },
    ellipseAnnotation (x, y, w, h, options = {}) {
        options.Subtype = "Circle";
        options.Contents = new String();
        return this.annotate(x, y, w, h, options);
    },
    textAnnotation (x, y, w, h, text, options = {}) {
        options.Subtype = "FreeText";
        options.Contents = new String(text);
        options.DA = new String();
        return this.annotate(x, y, w, h, options);
    },
    fileAnnotation (x, y, w, h, file = {}, options = {}) {
        const filespec = this.file(file.src, Object.assign({
            hidden: true
        }, file));
        options.Subtype = "FileAttachment";
        options.FS = filespec;
        if (options.Contents) {
            options.Contents = new String(options.Contents);
        } else if (filespec.data.Desc) {
            options.Contents = filespec.data.Desc;
        }
        return this.annotate(x, y, w, h, options);
    },
    _convertRect (x1, y1, w, h) {
        let y2 = y1;
        y1 += h;
        let x2 = x1 + w;
        const [m0, m1, m2, m3, m4, m5] = this._ctm;
        x1 = m0 * x1 + m2 * y1 + m4;
        y1 = m1 * x1 + m3 * y1 + m5;
        x2 = m0 * x2 + m2 * y2 + m4;
        y2 = m1 * x2 + m3 * y2 + m5;
        return [
            x1,
            y1,
            x2,
            y2
        ];
    }
};
class PDFOutline {
    constructor(document, parent, title, dest, options = {
        expanded: false
    }){
        this.document = document;
        this.options = options;
        this.outlineData = {};
        if (dest !== null) {
            this.outlineData["Dest"] = [
                dest.dictionary,
                "Fit"
            ];
        }
        if (parent !== null) {
            this.outlineData["Parent"] = parent;
        }
        if (title !== null) {
            this.outlineData["Title"] = new String(title);
        }
        this.dictionary = this.document.ref(this.outlineData);
        this.children = [];
    }
    addItem(title, options = {
        expanded: false
    }) {
        const result = new PDFOutline(this.document, this.dictionary, title, this.document.page, options);
        this.children.push(result);
        return result;
    }
    endOutline() {
        if (this.children.length > 0) {
            if (this.options.expanded) {
                this.outlineData.Count = this.children.length;
            }
            const first = this.children[0], last = this.children[this.children.length - 1];
            this.outlineData.First = first.dictionary;
            this.outlineData.Last = last.dictionary;
            for(let i = 0, len = this.children.length; i < len; i++){
                const child = this.children[i];
                if (i > 0) {
                    child.outlineData.Prev = this.children[i - 1].dictionary;
                }
                if (i < this.children.length - 1) {
                    child.outlineData.Next = this.children[i + 1].dictionary;
                }
                child.endOutline();
            }
        }
        return this.dictionary.end();
    }
}
var OutlineMixin = {
    initOutline () {
        this.outline = new PDFOutline(this, null, null, null);
    },
    endOutline () {
        this.outline.endOutline();
        if (this.outline.children.length > 0) {
            this._root.data.Outlines = this.outline.dictionary;
            return this._root.data.PageMode = "UseOutlines";
        }
    }
};
class PDFStructureContent {
    constructor(pageRef, mcid){
        this.refs = [
            {
                pageRef,
                mcid
            }
        ];
    }
    push(structContent) {
        structContent.refs.forEach((ref)=>this.refs.push(ref));
    }
}
class PDFStructureElement {
    constructor(document, type, options = {}, children = null){
        this.document = document;
        this._attached = false;
        this._ended = false;
        this._flushed = false;
        this.dictionary = document.ref({
            S: type
        });
        const data = this.dictionary.data;
        if (Array.isArray(options) || this._isValidChild(options)) {
            children = options;
            options = {};
        }
        if (typeof options.title !== "undefined") {
            data.T = new String(options.title);
        }
        if (typeof options.lang !== "undefined") {
            data.Lang = new String(options.lang);
        }
        if (typeof options.alt !== "undefined") {
            data.Alt = new String(options.alt);
        }
        if (typeof options.expanded !== "undefined") {
            data.E = new String(options.expanded);
        }
        if (typeof options.actual !== "undefined") {
            data.ActualText = new String(options.actual);
        }
        this._children = [];
        if (children) {
            if (!Array.isArray(children)) {
                children = [
                    children
                ];
            }
            children.forEach((child)=>this.add(child));
            this.end();
        }
    }
    add(child) {
        if (this._ended) {
            throw new Error(`Cannot add child to already-ended structure element`);
        }
        if (!this._isValidChild(child)) {
            throw new Error(`Invalid structure element child`);
        }
        if (child instanceof PDFStructureElement) {
            child.setParent(this.dictionary);
            if (this._attached) {
                child.setAttached();
            }
        }
        if (child instanceof PDFStructureContent) {
            this._addContentToParentTree(child);
        }
        if (typeof child === "function" && this._attached) {
            child = this._contentForClosure(child);
        }
        this._children.push(child);
        return this;
    }
    _addContentToParentTree(content) {
        content.refs.forEach(({ pageRef, mcid })=>{
            const pageStructParents = this.document.getStructParentTree().get(pageRef.data.StructParents);
            pageStructParents[mcid] = this.dictionary;
        });
    }
    setParent(parentRef) {
        if (this.dictionary.data.P) {
            throw new Error(`Structure element added to more than one parent`);
        }
        this.dictionary.data.P = parentRef;
        this._flush();
    }
    setAttached() {
        if (this._attached) {
            return;
        }
        this._children.forEach((child, index)=>{
            if (child instanceof PDFStructureElement) {
                child.setAttached();
            }
            if (typeof child === "function") {
                this._children[index] = this._contentForClosure(child);
            }
        });
        this._attached = true;
        this._flush();
    }
    end() {
        if (this._ended) {
            return;
        }
        this._children.filter((child)=>child instanceof PDFStructureElement).forEach((child)=>child.end());
        this._ended = true;
        this._flush();
    }
    _isValidChild(child) {
        return child instanceof PDFStructureElement || child instanceof PDFStructureContent || typeof child === "function";
    }
    _contentForClosure(closure) {
        const content = this.document.markStructureContent(this.dictionary.data.S);
        closure();
        this.document.endMarkedContent();
        this._addContentToParentTree(content);
        return content;
    }
    _isFlushable() {
        if (!this.dictionary.data.P || !this._ended) {
            return false;
        }
        return this._children.every((child)=>{
            if (typeof child === "function") {
                return false;
            }
            if (child instanceof PDFStructureElement) {
                return child._isFlushable();
            }
            return true;
        });
    }
    _flush() {
        if (this._flushed || !this._isFlushable()) {
            return;
        }
        this.dictionary.data.K = [];
        this._children.forEach((child)=>this._flushChild(child));
        this.dictionary.end();
        this._children = [];
        this.dictionary.data.K = null;
        this._flushed = true;
    }
    _flushChild(child) {
        if (child instanceof PDFStructureElement) {
            this.dictionary.data.K.push(child.dictionary);
        }
        if (child instanceof PDFStructureContent) {
            child.refs.forEach(({ pageRef, mcid })=>{
                if (!this.dictionary.data.Pg) {
                    this.dictionary.data.Pg = pageRef;
                }
                if (this.dictionary.data.Pg === pageRef) {
                    this.dictionary.data.K.push(mcid);
                } else {
                    this.dictionary.data.K.push({
                        Type: "MCR",
                        Pg: pageRef,
                        MCID: mcid
                    });
                }
            });
        }
    }
}
class PDFNumberTree extends PDFTree {
    _compareKeys(a, b) {
        return parseInt(a) - parseInt(b);
    }
    _keysName() {
        return "Nums";
    }
    _dataForKey(k) {
        return parseInt(k);
    }
}
var MarkingsMixin = {
    initMarkings (options) {
        this.structChildren = [];
        if (options.tagged) {
            this.getMarkInfoDictionary().data.Marked = true;
            this.getStructTreeRoot();
        }
    },
    markContent (tag, options = null) {
        if (tag === "Artifact" || options && options.mcid) {
            let toClose = 0;
            this.page.markings.forEach((marking)=>{
                if (toClose || marking.structContent || marking.tag === "Artifact") {
                    toClose++;
                }
            });
            while(toClose--){
                this.endMarkedContent();
            }
        }
        if (!options) {
            this.page.markings.push({
                tag
            });
            this.addContent(`/${tag} BMC`);
            return this;
        }
        this.page.markings.push({
            tag,
            options
        });
        const dictionary = {};
        if (typeof options.mcid !== "undefined") {
            dictionary.MCID = options.mcid;
        }
        if (tag === "Artifact") {
            if (typeof options.type === "string") {
                dictionary.Type = options.type;
            }
            if (Array.isArray(options.bbox)) {
                dictionary.BBox = [
                    options.bbox[0],
                    this.page.height - options.bbox[3],
                    options.bbox[2],
                    this.page.height - options.bbox[1]
                ];
            }
            if (Array.isArray(options.attached) && options.attached.every((val)=>typeof val === "string")) {
                dictionary.Attached = options.attached;
            }
        }
        if (tag === "Span") {
            if (options.lang) {
                dictionary.Lang = new String(options.lang);
            }
            if (options.alt) {
                dictionary.Alt = new String(options.alt);
            }
            if (options.expanded) {
                dictionary.E = new String(options.expanded);
            }
            if (options.actual) {
                dictionary.ActualText = new String(options.actual);
            }
        }
        this.addContent(`/${tag} ${PDFObject.convert(dictionary)} BDC`);
        return this;
    },
    markStructureContent (tag, options = {}) {
        const pageStructParents = this.getStructParentTree().get(this.page.structParentTreeKey);
        const mcid = pageStructParents.length;
        pageStructParents.push(null);
        this.markContent(tag, {
            ...options,
            mcid
        });
        const structContent = new PDFStructureContent(this.page.dictionary, mcid);
        this.page.markings.slice(-1)[0].structContent = structContent;
        return structContent;
    },
    endMarkedContent () {
        this.page.markings.pop();
        this.addContent("EMC");
        return this;
    },
    struct (type, options = {}, children = null) {
        return new PDFStructureElement(this, type, options, children);
    },
    addStructure (structElem) {
        const structTreeRoot = this.getStructTreeRoot();
        structElem.setParent(structTreeRoot);
        structElem.setAttached();
        this.structChildren.push(structElem);
        if (!structTreeRoot.data.K) {
            structTreeRoot.data.K = [];
        }
        structTreeRoot.data.K.push(structElem.dictionary);
        return this;
    },
    initPageMarkings (pageMarkings) {
        pageMarkings.forEach((marking)=>{
            if (marking.structContent) {
                const structContent = marking.structContent;
                const newStructContent = this.markStructureContent(marking.tag, marking.options);
                structContent.push(newStructContent);
                this.page.markings.slice(-1)[0].structContent = structContent;
            } else {
                this.markContent(marking.tag, marking.options);
            }
        });
    },
    endPageMarkings (page) {
        const pageMarkings = page.markings;
        pageMarkings.forEach(()=>page.write("EMC"));
        page.markings = [];
        return pageMarkings;
    },
    getMarkInfoDictionary () {
        if (!this._root.data.MarkInfo) {
            this._root.data.MarkInfo = this.ref({});
        }
        return this._root.data.MarkInfo;
    },
    hasMarkInfoDictionary () {
        return !!this._root.data.MarkInfo;
    },
    getStructTreeRoot () {
        if (!this._root.data.StructTreeRoot) {
            this._root.data.StructTreeRoot = this.ref({
                Type: "StructTreeRoot",
                ParentTree: new PDFNumberTree(),
                ParentTreeNextKey: 0
            });
        }
        return this._root.data.StructTreeRoot;
    },
    getStructParentTree () {
        return this.getStructTreeRoot().data.ParentTree;
    },
    createStructParentTreeNextKey () {
        this.getMarkInfoDictionary();
        const structTreeRoot = this.getStructTreeRoot();
        const key = structTreeRoot.data.ParentTreeNextKey++;
        structTreeRoot.data.ParentTree.add(key, []);
        return key;
    },
    endMarkings () {
        const structTreeRoot = this._root.data.StructTreeRoot;
        if (structTreeRoot) {
            structTreeRoot.end();
            this.structChildren.forEach((structElem)=>structElem.end());
        }
        if (this._root.data.MarkInfo) {
            this._root.data.MarkInfo.end();
        }
    }
};
const FIELD_FLAGS = {
    readOnly: 1,
    required: 2,
    noExport: 4,
    multiline: 0x1000,
    password: 0x2000,
    toggleToOffButton: 0x4000,
    radioButton: 0x8000,
    pushButton: 0x10000,
    combo: 0x20000,
    edit: 0x40000,
    sort: 0x80000,
    multiSelect: 0x200000,
    noSpell: 0x400000
};
const FIELD_JUSTIFY = {
    left: 0,
    center: 1,
    right: 2
};
const VALUE_MAP = {
    value: "V",
    defaultValue: "DV"
};
const FORMAT_SPECIAL = {
    zip: "0",
    zipPlus4: "1",
    zip4: "1",
    phone: "2",
    ssn: "3"
};
const FORMAT_DEFAULT = {
    number: {
        nDec: 0,
        sepComma: false,
        negStyle: "MinusBlack",
        currency: "",
        currencyPrepend: true
    },
    percent: {
        nDec: 0,
        sepComma: false
    }
};
var AcroFormMixin = {
    initForm () {
        if (!this._font) {
            throw new Error("Must set a font before calling initForm method");
        }
        this._acroform = {
            fonts: {},
            defaultFont: this._font.name
        };
        this._acroform.fonts[this._font.id] = this._font.ref();
        let data = {
            Fields: [],
            NeedAppearances: true,
            DA: new String(`/${this._font.id} 0 Tf 0 g`),
            DR: {
                Font: {}
            }
        };
        data.DR.Font[this._font.id] = this._font.ref();
        const AcroForm = this.ref(data);
        this._root.data.AcroForm = AcroForm;
        return this;
    },
    endAcroForm () {
        if (this._root.data.AcroForm) {
            if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont) {
                throw new Error("No fonts specified for PDF form");
            }
            let fontDict = this._root.data.AcroForm.data.DR.Font;
            Object.keys(this._acroform.fonts).forEach((name)=>{
                fontDict[name] = this._acroform.fonts[name];
            });
            this._root.data.AcroForm.data.Fields.forEach((fieldRef)=>{
                this._endChild(fieldRef);
            });
            this._root.data.AcroForm.end();
        }
        return this;
    },
    _endChild (ref) {
        if (Array.isArray(ref.data.Kids)) {
            ref.data.Kids.forEach((childRef)=>{
                this._endChild(childRef);
            });
            ref.end();
        }
        return this;
    },
    formField (name, options = {}) {
        let fieldDict = this._fieldDict(name, null, options);
        let fieldRef = this.ref(fieldDict);
        this._addToParent(fieldRef);
        return fieldRef;
    },
    formAnnotation (name, type, x, y, w, h, options = {}) {
        let fieldDict = this._fieldDict(name, type, options);
        fieldDict.Subtype = "Widget";
        if (fieldDict.F === undefined) {
            fieldDict.F = 4;
        }
        this.annotate(x, y, w, h, fieldDict);
        let annotRef = this.page.annotations[this.page.annotations.length - 1];
        return this._addToParent(annotRef);
    },
    formText (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "text", x, y, w, h, options);
    },
    formPushButton (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "pushButton", x, y, w, h, options);
    },
    formCombo (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "combo", x, y, w, h, options);
    },
    formList (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "list", x, y, w, h, options);
    },
    formRadioButton (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "radioButton", x, y, w, h, options);
    },
    formCheckbox (name, x, y, w, h, options = {}) {
        return this.formAnnotation(name, "checkbox", x, y, w, h, options);
    },
    _addToParent (fieldRef) {
        let parent = fieldRef.data.Parent;
        if (parent) {
            if (!parent.data.Kids) {
                parent.data.Kids = [];
            }
            parent.data.Kids.push(fieldRef);
        } else {
            this._root.data.AcroForm.data.Fields.push(fieldRef);
        }
        return this;
    },
    _fieldDict (name, type, options = {}) {
        if (!this._acroform) {
            throw new Error("Call document.initForm() method before adding form elements to document");
        }
        let opts = Object.assign({}, options);
        if (type !== null) {
            opts = this._resolveType(type, options);
        }
        opts = this._resolveFlags(opts);
        opts = this._resolveJustify(opts);
        opts = this._resolveFont(opts);
        opts = this._resolveStrings(opts);
        opts = this._resolveColors(opts);
        opts = this._resolveFormat(opts);
        opts.T = new String(name);
        if (opts.parent) {
            opts.Parent = opts.parent;
            delete opts.parent;
        }
        return opts;
    },
    _resolveType (type, opts) {
        if (type === "text") {
            opts.FT = "Tx";
        } else if (type === "pushButton") {
            opts.FT = "Btn";
            opts.pushButton = true;
        } else if (type === "radioButton") {
            opts.FT = "Btn";
            opts.radioButton = true;
        } else if (type === "checkbox") {
            opts.FT = "Btn";
        } else if (type === "combo") {
            opts.FT = "Ch";
            opts.combo = true;
        } else if (type === "list") {
            opts.FT = "Ch";
        } else {
            throw new Error(`Invalid form annotation type '${type}'`);
        }
        return opts;
    },
    _resolveFormat (opts) {
        const f = opts.format;
        if (f && f.type) {
            let fnKeystroke;
            let fnFormat;
            let params = "";
            if (FORMAT_SPECIAL[f.type] !== undefined) {
                fnKeystroke = `AFSpecial_Keystroke`;
                fnFormat = `AFSpecial_Format`;
                params = FORMAT_SPECIAL[f.type];
            } else {
                let format = f.type.charAt(0).toUpperCase() + f.type.slice(1);
                fnKeystroke = `AF${format}_Keystroke`;
                fnFormat = `AF${format}_Format`;
                if (f.type === "date") {
                    fnKeystroke += "Ex";
                    params = String(f.param);
                } else if (f.type === "time") {
                    params = String(f.param);
                } else if (f.type === "number") {
                    let p = Object.assign({}, FORMAT_DEFAULT.number, f);
                    params = String([
                        String(p.nDec),
                        p.sepComma ? "0" : "1",
                        '"' + p.negStyle + '"',
                        "null",
                        '"' + p.currency + '"',
                        String(p.currencyPrepend)
                    ].join(","));
                } else if (f.type === "percent") {
                    let p = Object.assign({}, FORMAT_DEFAULT.percent, f);
                    params = String([
                        String(p.nDec),
                        p.sepComma ? "0" : "1"
                    ].join(","));
                }
            }
            opts.AA = opts.AA ? opts.AA : {};
            opts.AA.K = {
                S: "JavaScript",
                JS: new String(`${fnKeystroke}(${params});`)
            };
            opts.AA.F = {
                S: "JavaScript",
                JS: new String(`${fnFormat}(${params});`)
            };
        }
        delete opts.format;
        return opts;
    },
    _resolveColors (opts) {
        let color = this._normalizeColor(opts.backgroundColor);
        if (color) {
            if (!opts.MK) {
                opts.MK = {};
            }
            opts.MK.BG = color;
        }
        color = this._normalizeColor(opts.borderColor);
        if (color) {
            if (!opts.MK) {
                opts.MK = {};
            }
            opts.MK.BC = color;
        }
        delete opts.backgroundColor;
        delete opts.borderColor;
        return opts;
    },
    _resolveFlags (options) {
        let result = 0;
        Object.keys(options).forEach((key)=>{
            if (FIELD_FLAGS[key]) {
                if (options[key]) {
                    result |= FIELD_FLAGS[key];
                }
                delete options[key];
            }
        });
        if (result !== 0) {
            options.Ff = options.Ff ? options.Ff : 0;
            options.Ff |= result;
        }
        return options;
    },
    _resolveJustify (options) {
        let result = 0;
        if (options.align !== undefined) {
            if (typeof FIELD_JUSTIFY[options.align] === "number") {
                result = FIELD_JUSTIFY[options.align];
            }
            delete options.align;
        }
        if (result !== 0) {
            options.Q = result;
        }
        return options;
    },
    _resolveFont (options) {
        if (this._acroform.fonts[this._font.id] == null) {
            this._acroform.fonts[this._font.id] = this._font.ref();
        }
        if (this._acroform.defaultFont !== this._font.name) {
            options.DR = {
                Font: {}
            };
            const fontSize = options.fontSize || 0;
            options.DR.Font[this._font.id] = this._font.ref();
            options.DA = new String(`/${this._font.id} ${fontSize} Tf 0 g`);
        }
        return options;
    },
    _resolveStrings (options) {
        let select = [];
        function appendChoices(a) {
            if (Array.isArray(a)) {
                for(let idx = 0; idx < a.length; idx++){
                    if (typeof a[idx] === "string") {
                        select.push(new String(a[idx]));
                    } else {
                        select.push(a[idx]);
                    }
                }
            }
        }
        appendChoices(options.Opt);
        if (options.select) {
            appendChoices(options.select);
            delete options.select;
        }
        if (select.length) {
            options.Opt = select;
        }
        Object.keys(VALUE_MAP).forEach((key)=>{
            if (options[key] !== undefined) {
                options[VALUE_MAP[key]] = options[key];
                delete options[key];
            }
        });
        [
            "V",
            "DV"
        ].forEach((key)=>{
            if (typeof options[key] === "string") {
                options[key] = new String(options[key]);
            }
        });
        if (options.MK && options.MK.CA) {
            options.MK.CA = new String(options.MK.CA);
        }
        if (options.label) {
            options.MK = options.MK ? options.MK : {};
            options.MK.CA = new String(options.label);
            delete options.label;
        }
        return options;
    }
};
var AttachmentsMixin = {
    file (src, options = {}) {
        options.name = options.name || src;
        options.relationship = options.relationship || "Unspecified";
        const refBody = {
            Type: "EmbeddedFile",
            Params: {}
        };
        let data;
        if (!src) {
            throw new Error("No src specified");
        }
        if (Buffer.isBuffer(src)) {
            data = src;
        } else if (src instanceof ArrayBuffer) {
            data = Buffer.from(new Uint8Array(src));
        } else {
            const match = /^data:(.*?);base64,(.*)$/.exec(src);
            if (match) {
                if (match[1]) {
                    refBody.Subtype = match[1].replace("/", "#2F");
                }
                data = Buffer.from(match[2], "base64");
            } else {
                data = fs.readFileSync(src);
                if (!data) {
                    throw new Error(`Could not read contents of file at filepath ${src}`);
                }
                const { birthtime, ctime } = fs.statSync(src);
                refBody.Params.CreationDate = birthtime;
                refBody.Params.ModDate = ctime;
            }
        }
        if (options.creationDate instanceof Date) {
            refBody.Params.CreationDate = options.creationDate;
        }
        if (options.modifiedDate instanceof Date) {
            refBody.Params.ModDate = options.modifiedDate;
        }
        if (options.type) {
            refBody.Subtype = options.type.replace("/", "#2F");
        }
        const checksum = CryptoJS.MD5(CryptoJS.lib.WordArray.create(new Uint8Array(data)));
        refBody.Params.CheckSum = new String(checksum);
        refBody.Params.Size = data.byteLength;
        let ref;
        if (!this._fileRegistry) this._fileRegistry = {};
        let file = this._fileRegistry[options.name];
        if (file && isEqual(refBody, file)) {
            ref = file.ref;
        } else {
            ref = this.ref(refBody);
            ref.end(data);
            this._fileRegistry[options.name] = {
                ...refBody,
                ref
            };
        }
        const fileSpecBody = {
            Type: "Filespec",
            AFRelationship: options.relationship,
            F: new String(options.name),
            EF: {
                F: ref
            },
            UF: new String(options.name)
        };
        if (options.description) {
            fileSpecBody.Desc = new String(options.description);
        }
        const filespec = this.ref(fileSpecBody);
        filespec.end();
        if (!options.hidden) {
            this.addNamedEmbeddedFile(options.name, filespec);
        }
        if (this._root.data.AF) {
            this._root.data.AF.push(filespec);
        } else {
            this._root.data.AF = [
                filespec
            ];
        }
        return filespec;
    }
};
function isEqual(a, b) {
    return a.Subtype === b.Subtype && a.Params.CheckSum.toString() === b.Params.CheckSum.toString() && a.Params.Size === b.Params.Size && a.Params.CreationDate.getTime() === b.Params.CreationDate.getTime() && (a.Params.ModDate === undefined && b.Params.ModDate === undefined || a.Params.ModDate.getTime() === b.Params.ModDate.getTime());
}
var PDFA = {
    initPDFA (pSubset) {
        if (pSubset.charAt(pSubset.length - 3) === "-") {
            this.subset_conformance = pSubset.charAt(pSubset.length - 1).toUpperCase();
            this.subset = parseInt(pSubset.charAt(pSubset.length - 2));
        } else {
            this.subset_conformance = "B";
            this.subset = parseInt(pSubset.charAt(pSubset.length - 1));
        }
    },
    endSubset () {
        this._addPdfaMetadata();
        this._addColorOutputIntent();
    },
    _addColorOutputIntent () {
        const iccProfile = fs.readFileSync(`${__dirname}/data/sRGB_IEC61966_2_1.icc`);
        const colorProfileRef = this.ref({
            Length: iccProfile.length,
            N: 3
        });
        colorProfileRef.write(iccProfile);
        colorProfileRef.end();
        const intentRef = this.ref({
            Type: "OutputIntent",
            S: "GTS_PDFA1",
            Info: new String("sRGB IEC61966-2.1"),
            OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
            DestOutputProfile: colorProfileRef
        });
        intentRef.end();
        this._root.data.OutputIntents = [
            intentRef
        ];
    },
    _getPdfaid () {
        return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
    },
    _addPdfaMetadata () {
        this.appendXML(this._getPdfaid());
    }
};
var PDFUA = {
    initPDFUA () {
        this.subset = 1;
    },
    endSubset () {
        this._addPdfuaMetadata();
    },
    _addPdfuaMetadata () {
        this.appendXML(this._getPdfuaid());
    },
    _getPdfuaid () {
        return `
        <rdf:Description xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/" rdf:about="">
            <pdfuaid:part>${this.subset}</pdfuaid:part>
        </rdf:Description>
        `;
    }
};
var SubsetMixin = {
    _importSubset (subset) {
        Object.assign(this, subset);
    },
    initSubset (options) {
        switch(options.subset){
            case "PDF/A-1":
            case "PDF/A-1a":
            case "PDF/A-1b":
            case "PDF/A-2":
            case "PDF/A-2a":
            case "PDF/A-2b":
            case "PDF/A-3":
            case "PDF/A-3a":
            case "PDF/A-3b":
                this._importSubset(PDFA);
                this.initPDFA(options.subset);
                break;
            case "PDF/UA":
                this._importSubset(PDFUA);
                this.initPDFUA();
                break;
        }
    }
};
const ROW_FIELDS = [
    "height",
    "minHeight",
    "maxHeight"
];
const COLUMN_FIELDS = [
    "width",
    "minWidth",
    "maxWidth"
];
function memoize(fn, maxSize) {
    const cache = new Map();
    return function(...args) {
        const key = args[0];
        if (!cache.has(key)) {
            cache.set(key, fn(...args));
            if (cache.size > maxSize) cache.delete(cache.keys().next());
        }
        return cache.get(key);
    };
}
function isObject(item) {
    return item && typeof item === "object" && !Array.isArray(item);
}
function deepMerge(target, ...sources) {
    if (!isObject(target)) return target;
    target = deepClone(target);
    for (const source of sources){
        if (isObject(source)) {
            for(const key in source){
                if (isObject(source[key])) {
                    if (!(key in target)) target[key] = {};
                    target[key] = deepMerge(target[key], source[key]);
                } else if (source[key] !== undefined) {
                    target[key] = deepClone(source[key]);
                }
            }
        }
    }
    return target;
}
function deepClone(obj) {
    let result = obj;
    if (obj && typeof obj == "object") {
        result = Array.isArray(obj) ? [] : {};
        for(const key in obj)result[key] = deepClone(obj[key]);
    }
    return result;
}
function normalizedDefaultStyle(defaultStyleInternal) {
    let defaultStyle = defaultStyleInternal;
    if (typeof defaultStyle !== "object") defaultStyle = {
        text: defaultStyle
    };
    const defaultRowStyle = Object.fromEntries(Object.entries(defaultStyle).filter(([k])=>ROW_FIELDS.includes(k)));
    const defaultColStyle = Object.fromEntries(Object.entries(defaultStyle).filter(([k])=>COLUMN_FIELDS.includes(k)));
    defaultStyle.padding = normalizeSides(defaultStyle.padding);
    defaultStyle.border = normalizeSides(defaultStyle.border);
    defaultStyle.borderColor = normalizeSides(defaultStyle.borderColor);
    defaultStyle.align = normalizeAlignment(defaultStyle.align);
    return {
        defaultStyle,
        defaultRowStyle,
        defaultColStyle
    };
}
function normalizedRowStyle(defaultRowStyle, rowStyleInternal, i) {
    let rowStyle = rowStyleInternal(i);
    if (rowStyle == null || typeof rowStyle !== "object") {
        rowStyle = {
            height: rowStyle
        };
    }
    rowStyle.padding = normalizeSides(rowStyle.padding);
    rowStyle.border = normalizeSides(rowStyle.border);
    rowStyle.borderColor = normalizeSides(rowStyle.borderColor);
    rowStyle.align = normalizeAlignment(rowStyle.align);
    rowStyle = deepMerge(defaultRowStyle, rowStyle);
    const document = this.document;
    const page = document.page;
    const contentHeight = page.contentHeight;
    if (rowStyle.height == null || rowStyle.height === "auto") {
        rowStyle.height = "auto";
    } else {
        rowStyle.height = document.sizeToPoint(rowStyle.height, 0, page, contentHeight);
    }
    rowStyle.minHeight = document.sizeToPoint(rowStyle.minHeight, 0, page, contentHeight);
    rowStyle.maxHeight = document.sizeToPoint(rowStyle.maxHeight, 0, page, contentHeight);
    return rowStyle;
}
function normalizedColumnStyle(defaultColStyle, colStyleInternal, i) {
    let colStyle = colStyleInternal(i);
    if (colStyle == null || typeof colStyle !== "object") {
        colStyle = {
            width: colStyle
        };
    }
    colStyle.padding = normalizeSides(colStyle.padding);
    colStyle.border = normalizeSides(colStyle.border);
    colStyle.borderColor = normalizeSides(colStyle.borderColor);
    colStyle.align = normalizeAlignment(colStyle.align);
    colStyle = deepMerge(defaultColStyle, colStyle);
    if (colStyle.width == null || colStyle.width === "*") {
        colStyle.width = "*";
    } else {
        colStyle.width = this.document.sizeToPoint(colStyle.width, 0, this.document.page, this._maxWidth);
    }
    colStyle.minWidth = this.document.sizeToPoint(colStyle.minWidth, 0, this.document.page, this._maxWidth);
    colStyle.maxWidth = this.document.sizeToPoint(colStyle.maxWidth, 0, this.document.page, this._maxWidth);
    return colStyle;
}
function normalizeAlignment(align) {
    return align == null || typeof align === "string" ? {
        x: align,
        y: align
    } : align;
}
function normalizeTable() {
    const doc = this.document;
    const opts = this.opts;
    let index = doc._tableIndex++;
    this._id = new String(opts.id ?? `table-${index}`);
    this._position = {
        x: doc.sizeToPoint(opts.position?.x, doc.x),
        y: doc.sizeToPoint(opts.position?.y, doc.y)
    };
    this._maxWidth = doc.sizeToPoint(opts.maxWidth, doc.page.width - doc.page.margins.right - this._position.x);
    const { defaultStyle, defaultColStyle, defaultRowStyle } = normalizedDefaultStyle(opts.defaultStyle);
    this._defaultStyle = defaultStyle;
    let colStyle;
    if (opts.columnStyles) {
        if (Array.isArray(opts.columnStyles)) {
            colStyle = (i)=>opts.columnStyles[i];
        } else if (typeof opts.columnStyles === "function") {
            colStyle = memoize((i)=>opts.columnStyles(i), Infinity);
        } else if (typeof opts.columnStyles === "object") {
            colStyle = ()=>opts.columnStyles;
        }
    }
    if (!colStyle) colStyle = ()=>({});
    this._colStyle = normalizedColumnStyle.bind(this, defaultColStyle, colStyle);
    let rowStyle;
    if (opts.rowStyles) {
        if (Array.isArray(opts.rowStyles)) {
            rowStyle = (i)=>opts.rowStyles[i];
        } else if (typeof opts.rowStyles === "function") {
            rowStyle = memoize((i)=>opts.rowStyles(i), 10);
        } else if (typeof opts.rowStyles === "object") {
            rowStyle = ()=>opts.rowStyles;
        }
    }
    if (!rowStyle) rowStyle = ()=>({});
    this._rowStyle = normalizedRowStyle.bind(this, defaultRowStyle, rowStyle);
}
function normalizeText(text) {
    if (text != null) text = `${text}`;
    return text;
}
function normalizeCell(cell, rowIndex, colIndex) {
    const colStyle = this._colStyle(colIndex);
    let rowStyle = this._rowStyle(rowIndex);
    const font = deepMerge({}, colStyle.font, rowStyle.font, cell.font);
    const customFont = Object.values(font).filter((v)=>v != null).length > 0;
    const doc = this.document;
    const rollbackFont = doc._fontSource;
    const rollbackFontSize = doc._fontSize;
    const rollbackFontFamily = doc._fontFamily;
    if (customFont) {
        if (font.src) doc.font(font.src, font.family);
        if (font.size) doc.fontSize(font.size);
        rowStyle = this._rowStyle(rowIndex);
    }
    cell.padding = normalizeSides(cell.padding);
    cell.border = normalizeSides(cell.border);
    cell.borderColor = normalizeSides(cell.borderColor);
    const config = deepMerge(this._defaultStyle, colStyle, rowStyle, cell);
    config.rowIndex = rowIndex;
    config.colIndex = colIndex;
    config.font = font ?? {};
    config.customFont = customFont;
    config.text = normalizeText(config.text);
    config.rowSpan = config.rowSpan ?? 1;
    config.colSpan = config.colSpan ?? 1;
    config.padding = normalizeSides(config.padding, "0.25em", (x)=>doc.sizeToPoint(x, "0.25em"));
    config.border = normalizeSides(config.border, 1, (x)=>doc.sizeToPoint(x, 1));
    config.borderColor = normalizeSides(config.borderColor, "black", (x)=>x ?? "black");
    config.align = normalizeAlignment(config.align);
    config.align.x = config.align.x ?? "left";
    config.align.y = config.align.y ?? "top";
    config.textStroke = doc.sizeToPoint(config.textStroke, 0);
    config.textStrokeColor = config.textStrokeColor ?? "black";
    config.textColor = config.textColor ?? "black";
    config.textOptions = config.textOptions ?? {};
    config.id = new String(config.id ?? `${this._id}-${rowIndex}-${colIndex}`);
    config.type = config.type?.toUpperCase() === "TH" ? "TH" : "TD";
    if (config.scope) {
        config.scope = config.scope.toLowerCase();
        if (config.scope === "row") config.scope = "Row";
        else if (config.scope === "both") config.scope = "Both";
        else if (config.scope === "column") config.scope = "Column";
    }
    if (typeof this.opts.debug === "boolean") config.debug = this.opts.debug;
    if (customFont) doc.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
    return config;
}
function normalizeRow(row, rowIndex) {
    if (!this._cellClaim) this._cellClaim = new Set();
    let colIndex = 0;
    return row.map((cell)=>{
        if (cell == null || typeof cell !== "object") cell = {
            text: cell
        };
        while(this._cellClaim.has(`${rowIndex},${colIndex}`)){
            colIndex++;
        }
        cell = normalizeCell.call(this, cell, rowIndex, colIndex);
        for(let i = 0; i < cell.rowSpan; i++){
            for(let j = 0; j < cell.colSpan; j++){
                this._cellClaim.add(`${rowIndex + i},${colIndex + j}`);
            }
        }
        colIndex += cell.colSpan;
        return cell;
    });
}
function ensure(row) {
    this._columnWidths = [];
    ensureColumnWidths.call(this, row.reduce((a, cell)=>a + cell.colSpan, 0));
    this._rowHeights = [];
    this._rowYPos = [
        this._position.y
    ];
    this._rowBuffer = new Set();
}
function ensureColumnWidths(numCols) {
    let starColumnIndexes = [];
    let starMinAcc = 0;
    let unclaimedWidth = this._maxWidth;
    for(let i = 0; i < numCols; i++){
        let col = this._colStyle(i);
        if (col.width === "*") {
            starColumnIndexes[i] = col;
            starMinAcc += col.minWidth;
        } else {
            unclaimedWidth -= col.width;
            this._columnWidths[i] = col.width;
        }
    }
    let starColCount = starColumnIndexes.reduce((x)=>x + 1, 0);
    if (starMinAcc >= unclaimedWidth) {
        starColumnIndexes.forEach((cell, i)=>{
            this._columnWidths[i] = cell.minWidth;
        });
    } else if (starColCount > 0) {
        starColumnIndexes.forEach((col, i)=>{
            let starSize = unclaimedWidth / starColCount;
            this._columnWidths[i] = Math.max(starSize, col.minWidth);
            if (col.maxWidth > 0) {
                this._columnWidths[i] = Math.min(this._columnWidths[i], col.maxWidth);
            }
            unclaimedWidth -= this._columnWidths[i];
            starColCount--;
        });
    }
    let tempX = this._position.x;
    this._columnXPos = Array.from(this._columnWidths, (v)=>{
        const t = tempX;
        tempX += v;
        return t;
    });
}
function measure(row, rowIndex) {
    row.forEach((cell)=>this._rowBuffer.add(cell));
    if (rowIndex > 0) {
        this._rowYPos[rowIndex] = this._rowYPos[rowIndex - 1] + this._rowHeights[rowIndex - 1];
    }
    const rowStyle = this._rowStyle(rowIndex);
    let toRender = [];
    this._rowBuffer.forEach((cell)=>{
        if (cell.rowIndex + cell.rowSpan - 1 === rowIndex) {
            toRender.push(measureCell.call(this, cell, rowStyle.height));
            this._rowBuffer.delete(cell);
        }
    });
    let rowHeight = rowStyle.height;
    if (rowHeight === "auto") {
        rowHeight = toRender.reduce((acc, cell)=>{
            let minHeight = cell.textBounds.height + cell.padding.top + cell.padding.bottom;
            for(let i = 0; i < cell.rowSpan - 1; i++){
                minHeight -= this._rowHeights[cell.rowIndex + i];
            }
            return Math.max(acc, minHeight);
        }, 0);
    }
    rowHeight = Math.max(rowHeight, rowStyle.minHeight);
    if (rowStyle.maxHeight > 0) {
        rowHeight = Math.min(rowHeight, rowStyle.maxHeight);
    }
    this._rowHeights[rowIndex] = rowHeight;
    let newPage = false;
    if (rowHeight > this.document.page.contentHeight) {
        console.warn(new Error(`Row ${rowIndex} requested more than the safe page height, row has been clamped`).stack.slice(7));
        this._rowHeights[rowIndex] = this.document.page.maxY() - this._rowYPos[rowIndex];
    } else if (this._rowYPos[rowIndex] + rowHeight >= this.document.page.maxY()) {
        this._rowYPos[rowIndex] = this.document.page.margins.top;
        newPage = true;
    }
    return {
        newPage,
        toRender: toRender.map((cell)=>measureCell.call(this, cell, rowHeight))
    };
}
function measureCell(cell, rowHeight) {
    let cellWidth = 0;
    for(let i = 0; i < cell.colSpan; i++){
        cellWidth += this._columnWidths[cell.colIndex + i];
    }
    let cellHeight = rowHeight;
    if (cellHeight === "auto") {
        cellHeight = this.document.page.contentHeight;
    } else {
        for(let i = 0; i < cell.rowSpan - 1; i++){
            cellHeight += this._rowHeights[cell.rowIndex + i];
        }
    }
    const textAllocatedWidth = cellWidth - cell.padding.left - cell.padding.right;
    const textAllocatedHeight = cellHeight - cell.padding.top - cell.padding.bottom;
    const rotation = cell.textOptions.rotation ?? 0;
    const { width: textMaxWidth, height: textMaxHeight } = computeBounds(rotation, textAllocatedWidth, textAllocatedHeight);
    const textOptions = {
        align: cell.align.x,
        ellipsis: true,
        stroke: cell.textStroke > 0,
        fill: true,
        width: textMaxWidth,
        height: textMaxHeight,
        rotation,
        ...cell.textOptions
    };
    let textBounds = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    };
    if (cell.text) {
        const rollbackFont = this.document._fontSource;
        const rollbackFontSize = this.document._fontSize;
        const rollbackFontFamily = this.document._fontFamily;
        if (cell.font?.src) this.document.font(cell.font.src, cell.font?.family);
        if (cell.font?.size) this.document.fontSize(cell.font.size);
        const unRotatedTextBounds = this.document.boundsOfString(cell.text, 0, 0, {
            ...textOptions,
            rotation: 0
        });
        textOptions.width = unRotatedTextBounds.width;
        textOptions.height = unRotatedTextBounds.height;
        textBounds = this.document.boundsOfString(cell.text, 0, 0, textOptions);
        this.document.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
    }
    return {
        ...cell,
        textOptions,
        x: this._columnXPos[cell.colIndex],
        y: this._rowYPos[cell.rowIndex],
        textX: this._columnXPos[cell.colIndex] + cell.padding.left,
        textY: this._rowYPos[cell.rowIndex] + cell.padding.top,
        width: cellWidth,
        height: cellHeight,
        textAllocatedHeight,
        textAllocatedWidth,
        textBounds
    };
}
function computeBounds(rotation, allocWidth, allocHeight) {
    let textMaxWidth, textMaxHeight;
    const cos = cosine(rotation);
    const sin = sine(rotation);
    if (rotation === 0 || rotation === 180) {
        textMaxWidth = allocWidth;
        textMaxHeight = allocHeight;
    } else if (rotation === 90 || rotation === 270) {
        textMaxWidth = allocHeight;
        textMaxHeight = allocWidth;
    } else if (rotation < 90 || rotation > 180 && rotation < 270) {
        textMaxWidth = allocWidth / (2 * cos);
        textMaxHeight = allocWidth / (2 * sin);
    } else {
        textMaxHeight = allocWidth / (2 * cos);
        textMaxWidth = allocWidth / (2 * sin);
    }
    const EF = sin * textMaxWidth;
    const FG = cos * textMaxHeight;
    if (EF + FG > allocHeight) {
        const denominator = cos * cos - sin * sin;
        if (rotation === 0 || rotation === 180) {
            textMaxWidth = allocWidth;
            textMaxHeight = allocHeight;
        } else if (rotation === 90 || rotation === 270) {
            textMaxWidth = allocHeight;
            textMaxHeight = allocWidth;
        } else if (rotation < 90 || rotation > 180 && rotation < 270) {
            textMaxWidth = (allocWidth * cos - allocHeight * sin) / denominator;
            textMaxHeight = (allocHeight * cos - allocWidth * sin) / denominator;
        } else {
            textMaxHeight = (allocWidth * cos - allocHeight * sin) / denominator;
            textMaxWidth = (allocHeight * cos - allocWidth * sin) / denominator;
        }
    }
    return {
        width: Math.abs(textMaxWidth),
        height: Math.abs(textMaxHeight)
    };
}
function accommodateTable() {
    const structParent = this.opts.structParent;
    if (structParent) {
        this._tableStruct = this.document.struct("Table");
        this._tableStruct.dictionary.data.ID = this._id;
        if (structParent instanceof PDFStructureElement) {
            structParent.add(this._tableStruct);
        } else if (structParent instanceof PDFDocument) {
            structParent.addStructure(this._tableStruct);
        }
        this._headerRowLookup = {};
        this._headerColumnLookup = {};
    }
}
function accommodateCleanup() {
    if (this._tableStruct) this._tableStruct.end();
}
function accessibleRow(row, rowIndex, renderCell) {
    const rowStruct = this.document.struct("TR");
    rowStruct.dictionary.data.ID = new String(`${this._id}-${rowIndex}`);
    this._tableStruct.add(rowStruct);
    row.forEach((cell)=>renderCell(cell, rowStruct));
    rowStruct.end();
}
function accessibleCell(cell, rowStruct, callback) {
    const doc = this.document;
    const cellStruct = doc.struct(cell.type, {
        title: cell.title
    });
    cellStruct.dictionary.data.ID = cell.id;
    rowStruct.add(cellStruct);
    const padding = cell.padding;
    const border = cell.border;
    const attributes = {
        O: "Table",
        Width: cell.width,
        Height: cell.height,
        Padding: [
            padding.top,
            padding.bottom,
            padding.left,
            padding.right
        ],
        RowSpan: cell.rowSpan > 1 ? cell.rowSpan : undefined,
        ColSpan: cell.colSpan > 1 ? cell.colSpan : undefined,
        BorderThickness: [
            border.top,
            border.bottom,
            border.left,
            border.right
        ]
    };
    if (cell.type === "TH") {
        if (cell.scope === "Row" || cell.scope === "Both") {
            for(let i = 0; i < cell.rowSpan; i++){
                if (!this._headerRowLookup[cell.rowIndex + i]) {
                    this._headerRowLookup[cell.rowIndex + i] = [];
                }
                this._headerRowLookup[cell.rowIndex + i].push(cell.id);
            }
            attributes.Scope = cell.scope;
        }
        if (cell.scope === "Column" || cell.scope === "Both") {
            for(let i = 0; i < cell.colSpan; i++){
                if (!this._headerColumnLookup[cell.colIndex + i]) {
                    this._headerColumnLookup[cell.colIndex + i] = [];
                }
                this._headerColumnLookup[cell.colIndex + i].push(cell.id);
            }
            attributes.Scope = cell.scope;
        }
    }
    const Headers = new Set([
        ...Array.from({
            length: cell.colSpan
        }, (_, i)=>this._headerColumnLookup[cell.colIndex + i]).flat(),
        ...Array.from({
            length: cell.rowSpan
        }, (_, i)=>this._headerRowLookup[cell.rowIndex + i]).flat()
    ].filter(Boolean));
    if (Headers.size) attributes.Headers = Array.from(Headers);
    const normalizeColor = doc._normalizeColor;
    if (cell.backgroundColor != null) {
        attributes.BackgroundColor = normalizeColor(cell.backgroundColor);
    }
    const hasBorder = [
        border.top,
        border.bottom,
        border.left,
        border.right
    ];
    if (hasBorder.some((x)=>x)) {
        const borderColor = cell.borderColor;
        attributes.BorderColor = [
            hasBorder[0] ? normalizeColor(borderColor.top) : null,
            hasBorder[1] ? normalizeColor(borderColor.bottom) : null,
            hasBorder[2] ? normalizeColor(borderColor.left) : null,
            hasBorder[3] ? normalizeColor(borderColor.right) : null
        ];
    }
    Object.keys(attributes).forEach((key)=>attributes[key] === undefined && delete attributes[key]);
    cellStruct.dictionary.data.A = doc.ref(attributes);
    cellStruct.add(callback);
    cellStruct.end();
    cellStruct.dictionary.data.A.end();
}
function renderRow(row, rowIndex) {
    if (this._tableStruct) {
        accessibleRow.call(this, row, rowIndex, renderCell.bind(this));
    } else {
        row.forEach((cell)=>renderCell.call(this, cell));
    }
    return this._rowYPos[rowIndex] + this._rowHeights[rowIndex];
}
function renderCell(cell, rowStruct) {
    const cellRenderer = ()=>{
        if (cell.backgroundColor != null) {
            this.document.save().rect(cell.x, cell.y, cell.width, cell.height).fill(cell.backgroundColor).restore();
        }
        renderBorder.call(this, cell.border, cell.borderColor, cell.x, cell.y, cell.width, cell.height);
        if (cell.debug) {
            this.document.save();
            this.document.dash(1, {
                space: 1
            }).lineWidth(1).strokeOpacity(0.3);
            this.document.rect(cell.x, cell.y, cell.width, cell.height).stroke("green");
            this.document.restore();
        }
        if (cell.text) renderCellText.call(this, cell);
    };
    if (rowStruct) accessibleCell.call(this, cell, rowStruct, cellRenderer);
    else cellRenderer();
}
function renderCellText(cell) {
    const doc = this.document;
    const rollbackFont = doc._fontSource;
    const rollbackFontSize = doc._fontSize;
    const rollbackFontFamily = doc._fontFamily;
    if (cell.customFont) {
        if (cell.font.src) doc.font(cell.font.src, cell.font.family);
        if (cell.font.size) doc.fontSize(cell.font.size);
    }
    const x = cell.textX;
    const y = cell.textY;
    const Ah = cell.textAllocatedHeight;
    const Aw = cell.textAllocatedWidth;
    const Cw = cell.textBounds.width;
    const Ch = cell.textBounds.height;
    const Ox = -cell.textBounds.x;
    const Oy = -cell.textBounds.y;
    const PxScale = cell.align.x === "right" ? 1 : cell.align.x === "center" ? 0.5 : 0;
    const Px = (Aw - Cw) * PxScale;
    const PyScale = cell.align.y === "bottom" ? 1 : cell.align.y === "center" ? 0.5 : 0;
    const Py = (Ah - Ch) * PyScale;
    const dx = Px + Ox;
    const dy = Py + Oy;
    if (cell.debug) {
        doc.save();
        doc.dash(1, {
            space: 1
        }).lineWidth(1).strokeOpacity(0.3);
        if (cell.text) {
            doc.moveTo(x + Px, y).lineTo(x + Px, y + Ah).moveTo(x + Px + Cw, y).lineTo(x + Px + Cw, y + Ah).stroke("blue").moveTo(x, y + Py).lineTo(x + Aw, y + Py).moveTo(x, y + Py + Ch).lineTo(x + Aw, y + Py + Ch).stroke("green");
        }
        doc.rect(x, y, Aw, Ah).stroke("orange");
        doc.restore();
    }
    doc.save().rect(x, y, Aw, Ah).clip();
    doc.fillColor(cell.textColor).strokeColor(cell.textStrokeColor);
    if (cell.textStroke > 0) doc.lineWidth(cell.textStroke);
    doc.text(cell.text, x + dx, y + dy, cell.textOptions);
    doc.restore();
    if (cell.font) doc.font(rollbackFont, rollbackFontFamily, rollbackFontSize);
}
function renderBorder(border, borderColor, x, y, width, height, mask) {
    border = Object.fromEntries(Object.entries(border).map(([k, v])=>[
            k,
            mask && !mask[k] ? 0 : v
        ]));
    const doc = this.document;
    if ([
        border.right,
        border.bottom,
        border.left
    ].every((val)=>val === border.top)) {
        if (border.top > 0) {
            doc.save().lineWidth(border.top).rect(x, y, width, height).stroke(borderColor.top).restore();
        }
    } else {
        if (border.top > 0) {
            doc.save().lineWidth(border.top).moveTo(x, y).lineTo(x + width, y).stroke(borderColor.top).restore();
        }
        if (border.right > 0) {
            doc.save().lineWidth(border.right).moveTo(x + width, y).lineTo(x + width, y + height).stroke(borderColor.right).restore();
        }
        if (border.bottom > 0) {
            doc.save().lineWidth(border.bottom).moveTo(x + width, y + height).lineTo(x, y + height).stroke(borderColor.bottom).restore();
        }
        if (border.left > 0) {
            doc.save().lineWidth(border.left).moveTo(x, y + height).lineTo(x, y).stroke(borderColor.left).restore();
        }
    }
}
class PDFTable {
    constructor(document, opts = {}){
        this.document = document;
        this.opts = Object.freeze(opts);
        normalizeTable.call(this);
        accommodateTable.call(this);
        this._currRowIndex = 0;
        this._ended = false;
        if (opts.data) {
            for (const row of opts.data)this.row(row);
            return this.end();
        }
    }
    row(row, lastRow = false) {
        if (this._ended) {
            throw new Error(`Table was marked as ended on row ${this._currRowIndex}`);
        }
        row = Array.from(row);
        row = normalizeRow.call(this, row, this._currRowIndex);
        if (this._currRowIndex === 0) ensure.call(this, row);
        const { newPage, toRender } = measure.call(this, row, this._currRowIndex);
        if (newPage) this.document.continueOnNewPage();
        const yPos = renderRow.call(this, toRender, this._currRowIndex);
        this.document.x = this._position.x;
        this.document.y = yPos;
        if (lastRow) return this.end();
        this._currRowIndex++;
        return this;
    }
    end() {
        while(this._rowBuffer?.size)this.row([]);
        this._ended = true;
        accommodateCleanup.call(this);
        return this.document;
    }
}
var TableMixin = {
    initTables () {
        this._tableIndex = 0;
    },
    table (opts) {
        return new PDFTable(this, opts);
    }
};
class PDFMetadata {
    constructor(){
        this._metadata = `
        <?xpacket begin="\ufeff" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
    }
    _closeTags() {
        this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
    }
    append(xml, newline = true) {
        this._metadata = this._metadata.concat(xml);
        if (newline) this._metadata = this._metadata.concat("\n");
    }
    getXML() {
        return this._metadata;
    }
    getLength() {
        return this._metadata.length;
    }
    end() {
        this._closeTags();
        this._metadata = this._metadata.trim();
    }
}
var MetadataMixin = {
    initMetadata () {
        this.metadata = new PDFMetadata();
    },
    appendXML (xml, newline = true) {
        this.metadata.append(xml, newline);
    },
    _addInfo () {
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `);
        if (this.info.Title || this.info.Author || this.info.Subject) {
            this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `);
            if (this.info.Title) {
                this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `);
            }
            if (this.info.Author) {
                this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `);
            }
            if (this.info.Subject) {
                this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `);
            }
            this.appendXML(`
            </rdf:Description>
            `);
        }
        this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, false);
        if (this.info.Keywords) {
            this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, false);
        }
        this.appendXML(`
        </rdf:Description>
        `);
    },
    endMetadata () {
        this._addInfo();
        this.metadata.end();
        if (this.version != 1.3) {
            this.metadataRef = this.ref({
                length: this.metadata.getLength(),
                Type: "Metadata",
                Subtype: "XML"
            });
            this.metadataRef.compress = false;
            this.metadataRef.write(Buffer.from(this.metadata.getXML(), "utf-8"));
            this.metadataRef.end();
            this._root.data.Metadata = this.metadataRef;
        }
    }
};
class PDFDocument extends stream.Readable {
    constructor(options = {}){
        super(options);
        this.options = options;
        switch(options.pdfVersion){
            case "1.4":
                this.version = 1.4;
                break;
            case "1.5":
                this.version = 1.5;
                break;
            case "1.6":
                this.version = 1.6;
                break;
            case "1.7":
            case "1.7ext3":
                this.version = 1.7;
                break;
            default:
                this.version = 1.3;
                break;
        }
        this.compress = this.options.compress != null ? this.options.compress : true;
        this._pageBuffer = [];
        this._pageBufferStart = 0;
        this._offsets = [];
        this._waiting = 0;
        this._ended = false;
        this._offset = 0;
        const Pages = this.ref({
            Type: "Pages",
            Count: 0,
            Kids: []
        });
        const Names = this.ref({
            Dests: new PDFNameTree()
        });
        this._root = this.ref({
            Type: "Catalog",
            Pages,
            Names
        });
        if (this.options.lang) {
            this._root.data.Lang = new String(this.options.lang);
        }
        this.page = null;
        this.initMetadata();
        this.initColor();
        this.initVector();
        this.initFonts(options.font);
        this.initText();
        this.initImages();
        this.initOutline();
        this.initMarkings(options);
        this.initTables();
        this.initSubset(options);
        this.info = {
            Producer: "PDFKit",
            Creator: "PDFKit",
            CreationDate: new Date()
        };
        if (this.options.info) {
            for(let key in this.options.info){
                const val = this.options.info[key];
                this.info[key] = val;
            }
        }
        if (this.options.displayTitle) {
            this._root.data.ViewerPreferences = this.ref({
                DisplayDocTitle: true
            });
        }
        this._id = PDFSecurity.generateFileID(this.info);
        this._security = PDFSecurity.create(this, options);
        this._write(`%PDF-${this.version}`);
        this._write("%\xff\xff\xff\xff");
        if (this.options.autoFirstPage !== false) {
            this.addPage();
        }
    }
    addPage(options) {
        if (options == null) {
            ({ options } = this);
        }
        if (!this.options.bufferPages) {
            this.flushPages();
        }
        this.page = new PDFPage(this, options);
        this._pageBuffer.push(this.page);
        const pages = this._root.data.Pages.data;
        pages.Kids.push(this.page.dictionary);
        pages.Count++;
        this.x = this.page.margins.left;
        this.y = this.page.margins.top;
        this._ctm = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        this.transform(1, 0, 0, -1, 0, this.page.height);
        this.emit("pageAdded");
        return this;
    }
    continueOnNewPage(options) {
        const pageMarkings = this.endPageMarkings(this.page);
        this.addPage(options ?? this.page._options);
        this.initPageMarkings(pageMarkings);
        return this;
    }
    bufferedPageRange() {
        return {
            start: this._pageBufferStart,
            count: this._pageBuffer.length
        };
    }
    switchToPage(n) {
        let page;
        if (!(page = this._pageBuffer[n - this._pageBufferStart])) {
            throw new Error(`switchToPage(${n}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
        }
        return this.page = page;
    }
    flushPages() {
        const pages = this._pageBuffer;
        this._pageBuffer = [];
        this._pageBufferStart += pages.length;
        for (let page of pages){
            this.endPageMarkings(page);
            page.end();
        }
    }
    addNamedDestination(name, ...args) {
        if (args.length === 0) {
            args = [
                "XYZ",
                null,
                null,
                null
            ];
        }
        if (args[0] === "XYZ" && args[2] !== null) {
            args[2] = this.page.height - args[2];
        }
        args.unshift(this.page.dictionary);
        this._root.data.Names.data.Dests.add(name, args);
    }
    addNamedEmbeddedFile(name, ref) {
        if (!this._root.data.Names.data.EmbeddedFiles) {
            this._root.data.Names.data.EmbeddedFiles = new PDFNameTree({
                limits: false
            });
        }
        this._root.data.Names.data.EmbeddedFiles.add(name, ref);
    }
    addNamedJavaScript(name, js) {
        if (!this._root.data.Names.data.JavaScript) {
            this._root.data.Names.data.JavaScript = new PDFNameTree();
        }
        let data = {
            JS: new String(js),
            S: "JavaScript"
        };
        this._root.data.Names.data.JavaScript.add(name, data);
    }
    ref(data) {
        const ref = new PDFReference(this, this._offsets.length + 1, data);
        this._offsets.push(null);
        this._waiting++;
        return ref;
    }
    _read() {}
    _write(data) {
        if (!Buffer.isBuffer(data)) {
            data = Buffer.from(data + "\n", "binary");
        }
        this.push(data);
        this._offset += data.length;
    }
    addContent(data) {
        this.page.write(data);
        return this;
    }
    _refEnd(ref) {
        this._offsets[ref.id - 1] = ref.offset;
        if (--this._waiting === 0 && this._ended) {
            this._finalize();
            this._ended = false;
        }
    }
    end() {
        this.flushPages();
        this._info = this.ref();
        for(let key in this.info){
            let val = this.info[key];
            if (typeof val === "string") {
                val = new String(val);
            }
            let entry = this.ref(val);
            entry.end();
            this._info.data[key] = entry;
        }
        this._info.end();
        for(let name in this._fontFamilies){
            const font = this._fontFamilies[name];
            font.finalize();
        }
        this.endOutline();
        this.endMarkings();
        if (this.subset) {
            this.endSubset();
        }
        this.endMetadata();
        this._root.end();
        this._root.data.Pages.end();
        this._root.data.Names.end();
        this.endAcroForm();
        if (this._root.data.ViewerPreferences) {
            this._root.data.ViewerPreferences.end();
        }
        if (this._security) {
            this._security.end();
        }
        if (this._waiting === 0) {
            this._finalize();
        } else {
            this._ended = true;
        }
    }
    _finalize() {
        const xRefOffset = this._offset;
        this._write("xref");
        this._write(`0 ${this._offsets.length + 1}`);
        this._write("0000000000 65535 f ");
        for (let offset of this._offsets){
            offset = `0000000000${offset}`.slice(-10);
            this._write(offset + " 00000 n ");
        }
        const trailer = {
            Size: this._offsets.length + 1,
            Root: this._root,
            Info: this._info,
            ID: [
                this._id,
                this._id
            ]
        };
        if (this._security) {
            trailer.Encrypt = this._security.dictionary;
        }
        this._write("trailer");
        this._write(PDFObject.convert(trailer));
        this._write("startxref");
        this._write(`${xRefOffset}`);
        this._write("%%EOF");
        this.push(null);
    }
    toString() {
        return "[object PDFDocument]";
    }
}
const mixin = (methods)=>{
    Object.assign(PDFDocument.prototype, methods);
};
mixin(MetadataMixin);
mixin(ColorMixin);
mixin(VectorMixin);
mixin(FontsMixin);
mixin(TextMixin);
mixin(ImagesMixin);
mixin(AnnotationsMixin);
mixin(OutlineMixin);
mixin(MarkingsMixin);
mixin(AcroFormMixin);
mixin(AttachmentsMixin);
mixin(SubsetMixin);
mixin(TableMixin);
PDFDocument.LineWrapper = LineWrapper;
module.exports = PDFDocument; //# sourceMappingURL=pdfkit.js.map


/***/ }),

/***/ 6292:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*
 * MIT LICENSE
 * Copyright (c) 2011 Devon Govett
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ 
const fs = __webpack_require__(7147);
const zlib = __webpack_require__(9796);
module.exports = class PNG {
    static decode(path, fn) {
        return fs.readFile(path, function(err, file) {
            const png = new PNG(file);
            return png.decode((pixels)=>fn(pixels));
        });
    }
    static load(path) {
        const file = fs.readFileSync(path);
        return new PNG(file);
    }
    constructor(data){
        let i;
        this.data = data;
        this.pos = 8; // Skip the default header
        this.palette = [];
        this.imgData = [];
        this.transparency = {};
        this.text = {};
        while(true){
            const chunkSize = this.readUInt32();
            let section = "";
            for(i = 0; i < 4; i++){
                section += String.fromCharCode(this.data[this.pos++]);
            }
            switch(section){
                case "IHDR":
                    // we can grab  interesting values from here (like width, height, etc)
                    this.width = this.readUInt32();
                    this.height = this.readUInt32();
                    this.bits = this.data[this.pos++];
                    this.colorType = this.data[this.pos++];
                    this.compressionMethod = this.data[this.pos++];
                    this.filterMethod = this.data[this.pos++];
                    this.interlaceMethod = this.data[this.pos++];
                    break;
                case "PLTE":
                    this.palette = this.read(chunkSize);
                    break;
                case "IDAT":
                    for(i = 0; i < chunkSize; i++){
                        this.imgData.push(this.data[this.pos++]);
                    }
                    break;
                case "tRNS":
                    // This chunk can only occur once and it must occur after the
                    // PLTE chunk and before the IDAT chunk.
                    this.transparency = {};
                    switch(this.colorType){
                        case 3:
                            // Indexed color, RGB. Each byte in this chunk is an alpha for
                            // the palette index in the PLTE ("palette") chunk up until the
                            // last non-opaque entry. Set up an array, stretching over all
                            // palette entries which will be 0 (opaque) or 1 (transparent).
                            this.transparency.indexed = this.read(chunkSize);
                            var short = 255 - this.transparency.indexed.length;
                            if (short > 0) {
                                for(i = 0; i < short; i++){
                                    this.transparency.indexed.push(255);
                                }
                            }
                            break;
                        case 0:
                            // Greyscale. Corresponding to entries in the PLTE chunk.
                            // Grey is two bytes, range 0 .. (2 ^ bit-depth) - 1
                            this.transparency.grayscale = this.read(chunkSize)[0];
                            break;
                        case 2:
                            // True color with proper alpha channel.
                            this.transparency.rgb = this.read(chunkSize);
                            break;
                    }
                    break;
                case "tEXt":
                    var text = this.read(chunkSize);
                    var index = text.indexOf(0);
                    var key = String.fromCharCode.apply(String, text.slice(0, index));
                    this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
                    break;
                case "IEND":
                    // we've got everything we need!
                    switch(this.colorType){
                        case 0:
                        case 3:
                        case 4:
                            this.colors = 1;
                            break;
                        case 2:
                        case 6:
                            this.colors = 3;
                            break;
                    }
                    this.hasAlphaChannel = [
                        4,
                        6
                    ].includes(this.colorType);
                    var colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
                    this.pixelBitlength = this.bits * colors;
                    switch(this.colors){
                        case 1:
                            this.colorSpace = "DeviceGray";
                            break;
                        case 3:
                            this.colorSpace = "DeviceRGB";
                            break;
                    }
                    this.imgData = new Buffer(this.imgData);
                    return;
                    break;
                default:
                    // unknown (or unimportant) section, skip it
                    this.pos += chunkSize;
            }
            this.pos += 4; // Skip the CRC
            if (this.pos > this.data.length) {
                throw new Error("Incomplete or corrupt PNG file");
            }
        }
    }
    read(bytes) {
        const result = new Array(bytes);
        for(let i = 0; i < bytes; i++){
            result[i] = this.data[this.pos++];
        }
        return result;
    }
    readUInt32() {
        const b1 = this.data[this.pos++] << 24;
        const b2 = this.data[this.pos++] << 16;
        const b3 = this.data[this.pos++] << 8;
        const b4 = this.data[this.pos++];
        return b1 | b2 | b3 | b4;
    }
    readUInt16() {
        const b1 = this.data[this.pos++] << 8;
        const b2 = this.data[this.pos++];
        return b1 | b2;
    }
    decodePixels(fn) {
        return zlib.inflate(this.imgData, (err, data)=>{
            if (err) {
                throw err;
            }
            const { width, height } = this;
            const pixelBytes = this.pixelBitlength / 8;
            const pixels = new Buffer(width * height * pixelBytes);
            const { length } = data;
            let pos = 0;
            function pass(x0, y0, dx, dy, singlePass = false) {
                const w = Math.ceil((width - x0) / dx);
                const h = Math.ceil((height - y0) / dy);
                const scanlineLength = pixelBytes * w;
                const buffer = singlePass ? pixels : new Buffer(scanlineLength * h);
                let row = 0;
                let c = 0;
                while(row < h && pos < length){
                    var byte, col, i, left, upper;
                    switch(data[pos++]){
                        case 0:
                            for(i = 0; i < scanlineLength; i++){
                                buffer[c++] = data[pos++];
                            }
                            break;
                        case 1:
                            for(i = 0; i < scanlineLength; i++){
                                byte = data[pos++];
                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                                buffer[c++] = (byte + left) % 256;
                            }
                            break;
                        case 2:
                            for(i = 0; i < scanlineLength; i++){
                                byte = data[pos++];
                                col = (i - i % pixelBytes) / pixelBytes;
                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                                buffer[c++] = (upper + byte) % 256;
                            }
                            break;
                        case 3:
                            for(i = 0; i < scanlineLength; i++){
                                byte = data[pos++];
                                col = (i - i % pixelBytes) / pixelBytes;
                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                                upper = row && buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                                buffer[c++] = (byte + Math.floor((left + upper) / 2)) % 256;
                            }
                            break;
                        case 4:
                            for(i = 0; i < scanlineLength; i++){
                                var paeth, upperLeft;
                                byte = data[pos++];
                                col = (i - i % pixelBytes) / pixelBytes;
                                left = i < pixelBytes ? 0 : buffer[c - pixelBytes];
                                if (row === 0) {
                                    upper = upperLeft = 0;
                                } else {
                                    upper = buffer[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                                    upperLeft = col && buffer[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                                }
                                const p = left + upper - upperLeft;
                                const pa = Math.abs(p - left);
                                const pb = Math.abs(p - upper);
                                const pc = Math.abs(p - upperLeft);
                                if (pa <= pb && pa <= pc) {
                                    paeth = left;
                                } else if (pb <= pc) {
                                    paeth = upper;
                                } else {
                                    paeth = upperLeft;
                                }
                                buffer[c++] = (byte + paeth) % 256;
                            }
                            break;
                        default:
                            throw new Error(`Invalid filter algorithm: ${data[pos - 1]}`);
                    }
                    if (!singlePass) {
                        let pixelsPos = ((y0 + row * dy) * width + x0) * pixelBytes;
                        let bufferPos = row * scanlineLength;
                        for(i = 0; i < w; i++){
                            for(let j = 0; j < pixelBytes; j++)pixels[pixelsPos++] = buffer[bufferPos++];
                            pixelsPos += (dx - 1) * pixelBytes;
                        }
                    }
                    row++;
                }
            }
            if (this.interlaceMethod === 1) {
                /*
          1 6 4 6 2 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
          3 6 4 6 3 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
        */ pass(0, 0, 8, 8); // 1
                pass(4, 0, 8, 8); // 2
                pass(0, 4, 4, 8); // 3
                pass(2, 0, 4, 4); // 4
                pass(0, 2, 2, 4); // 5
                pass(1, 0, 2, 2); // 6
                pass(0, 1, 1, 2); // 7
            } else {
                pass(0, 0, 1, 1, true);
            }
            return fn(pixels);
        });
    }
    decodePalette() {
        const { palette } = this;
        const { length } = palette;
        const transparency = this.transparency.indexed || [];
        const ret = new Buffer(transparency.length + length);
        let pos = 0;
        let c = 0;
        for(let i = 0; i < length; i += 3){
            var left;
            ret[pos++] = palette[i];
            ret[pos++] = palette[i + 1];
            ret[pos++] = palette[i + 2];
            ret[pos++] = (left = transparency[c++]) != null ? left : 255;
        }
        return ret;
    }
    copyToImageData(imageData, pixels) {
        let j, k;
        let { colors } = this;
        let palette = null;
        let alpha = this.hasAlphaChannel;
        if (this.palette.length) {
            palette = this._decodedPalette || (this._decodedPalette = this.decodePalette());
            colors = 4;
            alpha = true;
        }
        const data = imageData.data || imageData;
        const { length } = data;
        const input = palette || pixels;
        let i = j = 0;
        if (colors === 1) {
            while(i < length){
                k = palette ? pixels[i / 4] * 4 : j;
                const v = input[k++];
                data[i++] = v;
                data[i++] = v;
                data[i++] = v;
                data[i++] = alpha ? input[k++] : 255;
                j = k;
            }
        } else {
            while(i < length){
                k = palette ? pixels[i / 4] * 4 : j;
                data[i++] = input[k++];
                data[i++] = input[k++];
                data[i++] = input[k++];
                data[i++] = alpha ? input[k++] : 255;
                j = k;
            }
        }
    }
    decode(fn) {
        const ret = new Buffer(this.width * this.height * 4);
        return this.decodePixels((pixels)=>{
            this.copyToImageData(ret, pixels);
            return fn(ret);
        });
    }
};


/***/ }),

/***/ 2871:
/***/ ((module) => {

"use strict";

var TINF_OK = 0;
var TINF_DATA_ERROR = -3;
function Tree() {
    this.table = new Uint16Array(16); /* table of code length counts */ 
    this.trans = new Uint16Array(288); /* code -> symbol translation table */ 
}
function Data(source, dest) {
    this.source = source;
    this.sourceIndex = 0;
    this.tag = 0;
    this.bitcount = 0;
    this.dest = dest;
    this.destLen = 0;
    this.ltree = new Tree(); /* dynamic length/symbol tree */ 
    this.dtree = new Tree(); /* dynamic distance tree */ 
}
/* --------------------------------------------------- *
 * -- uninitialized global data (static structures) -- *
 * --------------------------------------------------- */ var sltree = new Tree();
var sdtree = new Tree();
/* extra bits and base tables for length codes */ var length_bits = new Uint8Array(30);
var length_base = new Uint16Array(30);
/* extra bits and base tables for distance codes */ var dist_bits = new Uint8Array(30);
var dist_base = new Uint16Array(30);
/* special ordering of code length codes */ var clcidx = new Uint8Array([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
/* used by tinf_decode_trees, avoids allocations every call */ var code_tree = new Tree();
var lengths = new Uint8Array(288 + 32);
/* ----------------------- *
 * -- utility functions -- *
 * ----------------------- */ /* build extra bits and base tables */ function tinf_build_bits_base(bits, base, delta, first) {
    var i, sum;
    /* build bits table */ for(i = 0; i < delta; ++i)bits[i] = 0;
    for(i = 0; i < 30 - delta; ++i)bits[i + delta] = i / delta | 0;
    /* build base table */ for(sum = first, i = 0; i < 30; ++i){
        base[i] = sum;
        sum += 1 << bits[i];
    }
}
/* build the fixed huffman trees */ function tinf_build_fixed_trees(lt, dt) {
    var i;
    /* build fixed length tree */ for(i = 0; i < 7; ++i)lt.table[i] = 0;
    lt.table[7] = 24;
    lt.table[8] = 152;
    lt.table[9] = 112;
    for(i = 0; i < 24; ++i)lt.trans[i] = 256 + i;
    for(i = 0; i < 144; ++i)lt.trans[24 + i] = i;
    for(i = 0; i < 8; ++i)lt.trans[24 + 144 + i] = 280 + i;
    for(i = 0; i < 112; ++i)lt.trans[24 + 144 + 8 + i] = 144 + i;
    /* build fixed distance tree */ for(i = 0; i < 5; ++i)dt.table[i] = 0;
    dt.table[5] = 32;
    for(i = 0; i < 32; ++i)dt.trans[i] = i;
}
/* given an array of code lengths, build a tree */ var offs = new Uint16Array(16);
function tinf_build_tree(t, lengths, off, num) {
    var i, sum;
    /* clear code length count table */ for(i = 0; i < 16; ++i)t.table[i] = 0;
    /* scan symbol lengths, and sum code length counts */ for(i = 0; i < num; ++i)t.table[lengths[off + i]]++;
    t.table[0] = 0;
    /* compute offset table for distribution sort */ for(sum = 0, i = 0; i < 16; ++i){
        offs[i] = sum;
        sum += t.table[i];
    }
    /* create code->symbol translation table (symbols sorted by code) */ for(i = 0; i < num; ++i){
        if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;
    }
}
/* ---------------------- *
 * -- decode functions -- *
 * ---------------------- */ /* get one bit from source stream */ function tinf_getbit(d) {
    /* check if tag is empty */ if (!d.bitcount--) {
        /* load next tag */ d.tag = d.source[d.sourceIndex++];
        d.bitcount = 7;
    }
    /* shift bit out of tag */ var bit = d.tag & 1;
    d.tag >>>= 1;
    return bit;
}
/* read a num bit value from a stream and add base */ function tinf_read_bits(d, num, base) {
    if (!num) return base;
    while(d.bitcount < 24){
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
    }
    var val = d.tag & 0xffff >>> 16 - num;
    d.tag >>>= num;
    d.bitcount -= num;
    return val + base;
}
/* given a data stream and a tree, decode a symbol */ function tinf_decode_symbol(d, t) {
    while(d.bitcount < 24){
        d.tag |= d.source[d.sourceIndex++] << d.bitcount;
        d.bitcount += 8;
    }
    var sum = 0, cur = 0, len = 0;
    var tag = d.tag;
    /* get more bits while code value is above sum */ do {
        cur = 2 * cur + (tag & 1);
        tag >>>= 1;
        ++len;
        sum += t.table[len];
        cur -= t.table[len];
    }while (cur >= 0);
    d.tag = tag;
    d.bitcount -= len;
    return t.trans[sum + cur];
}
/* given a data stream, decode dynamic trees from it */ function tinf_decode_trees(d, lt, dt) {
    var hlit, hdist, hclen;
    var i, num, length;
    /* get 5 bits HLIT (257-286) */ hlit = tinf_read_bits(d, 5, 257);
    /* get 5 bits HDIST (1-32) */ hdist = tinf_read_bits(d, 5, 1);
    /* get 4 bits HCLEN (4-19) */ hclen = tinf_read_bits(d, 4, 4);
    for(i = 0; i < 19; ++i)lengths[i] = 0;
    /* read code lengths for code length alphabet */ for(i = 0; i < hclen; ++i){
        /* get 3 bits code length (0-7) */ var clen = tinf_read_bits(d, 3, 0);
        lengths[clcidx[i]] = clen;
    }
    /* build code length tree */ tinf_build_tree(code_tree, lengths, 0, 19);
    /* decode code lengths for the dynamic trees */ for(num = 0; num < hlit + hdist;){
        var sym = tinf_decode_symbol(d, code_tree);
        switch(sym){
            case 16:
                /* copy previous code length 3-6 times (read 2 bits) */ var prev = lengths[num - 1];
                for(length = tinf_read_bits(d, 2, 3); length; --length){
                    lengths[num++] = prev;
                }
                break;
            case 17:
                /* repeat code length 0 for 3-10 times (read 3 bits) */ for(length = tinf_read_bits(d, 3, 3); length; --length){
                    lengths[num++] = 0;
                }
                break;
            case 18:
                /* repeat code length 0 for 11-138 times (read 7 bits) */ for(length = tinf_read_bits(d, 7, 11); length; --length){
                    lengths[num++] = 0;
                }
                break;
            default:
                /* values 0-15 represent the actual code lengths */ lengths[num++] = sym;
                break;
        }
    }
    /* build dynamic trees */ tinf_build_tree(lt, lengths, 0, hlit);
    tinf_build_tree(dt, lengths, hlit, hdist);
}
/* ----------------------------- *
 * -- block inflate functions -- *
 * ----------------------------- */ /* given a stream and two trees, inflate a block of data */ function tinf_inflate_block_data(d, lt, dt) {
    while(1){
        var sym = tinf_decode_symbol(d, lt);
        /* check for end of block */ if (sym === 256) {
            return TINF_OK;
        }
        if (sym < 256) {
            d.dest[d.destLen++] = sym;
        } else {
            var length, dist, offs;
            var i;
            sym -= 257;
            /* possibly get more bits from length code */ length = tinf_read_bits(d, length_bits[sym], length_base[sym]);
            dist = tinf_decode_symbol(d, dt);
            /* possibly get more bits from distance code */ offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);
            /* copy match */ for(i = offs; i < offs + length; ++i){
                d.dest[d.destLen++] = d.dest[i];
            }
        }
    }
}
/* inflate an uncompressed block of data */ function tinf_inflate_uncompressed_block(d) {
    var length, invlength;
    var i;
    /* unread from bitbuffer */ while(d.bitcount > 8){
        d.sourceIndex--;
        d.bitcount -= 8;
    }
    /* get length */ length = d.source[d.sourceIndex + 1];
    length = 256 * length + d.source[d.sourceIndex];
    /* get one's complement of length */ invlength = d.source[d.sourceIndex + 3];
    invlength = 256 * invlength + d.source[d.sourceIndex + 2];
    /* check length */ if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;
    d.sourceIndex += 4;
    /* copy block */ for(i = length; i; --i)d.dest[d.destLen++] = d.source[d.sourceIndex++];
    /* make sure we start next block on a byte boundary */ d.bitcount = 0;
    return TINF_OK;
}
/* inflate stream from source to dest */ function tinf_uncompress(source, dest) {
    var d = new Data(source, dest);
    var bfinal, btype, res;
    do {
        /* read final block flag */ bfinal = tinf_getbit(d);
        /* read block type (2 bits) */ btype = tinf_read_bits(d, 2, 0);
        /* decompress block */ switch(btype){
            case 0:
                /* decompress uncompressed block */ res = tinf_inflate_uncompressed_block(d);
                break;
            case 1:
                /* decompress block with fixed huffman trees */ res = tinf_inflate_block_data(d, sltree, sdtree);
                break;
            case 2:
                /* decompress block with dynamic huffman trees */ tinf_decode_trees(d, d.ltree, d.dtree);
                res = tinf_inflate_block_data(d, d.ltree, d.dtree);
                break;
            default:
                res = TINF_DATA_ERROR;
        }
        if (res !== TINF_OK) throw new Error("Data error");
    }while (!bfinal);
    if (d.destLen < d.dest.length) {
        if (typeof d.dest.slice === "function") return d.dest.slice(0, d.destLen);
        else return d.dest.subarray(0, d.destLen);
    }
    return d.dest;
}
/* -------------------- *
 * -- initialization -- *
 * -------------------- */ /* build fixed huffman trees */ tinf_build_fixed_trees(sltree, sdtree);
/* build extra bits and base tables */ tinf_build_bits_base(length_bits, length_base, 4, 3);
tinf_build_bits_base(dist_bits, dist_base, 2, 1);
/* fix a special case */ length_bits[28] = 0;
length_base[28] = 258;
module.exports = tinf_uncompress;


/***/ }),

/***/ 5331:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const inflate = __webpack_require__(2871);
const { swap32LE } = __webpack_require__(6918);
// Shift size for getting the index-1 table offset.
const SHIFT_1 = 6 + 5;
// Shift size for getting the index-2 table offset.
const SHIFT_2 = 5;
// Difference between the two shift sizes,
// for getting an index-1 offset from an index-2 offset. 6=11-5
const SHIFT_1_2 = SHIFT_1 - SHIFT_2;
// Number of index-1 entries for the BMP. 32=0x20
// This part of the index-1 table is omitted from the serialized form.
const OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> SHIFT_1;
// Number of entries in an index-2 block. 64=0x40
const INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;
// Mask for getting the lower bits for the in-index-2-block offset. */
const INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;
// Shift size for shifting left the index array values.
// Increases possible data size with 16-bit index values at the cost
// of compactability.
// This requires data blocks to be aligned by DATA_GRANULARITY.
const INDEX_SHIFT = 2;
// Number of entries in a data block. 32=0x20
const DATA_BLOCK_LENGTH = 1 << SHIFT_2;
// Mask for getting the lower bits for the in-data-block offset.
const DATA_MASK = DATA_BLOCK_LENGTH - 1;
// The part of the index-2 table for U+D800..U+DBFF stores values for
// lead surrogate code _units_ not code _points_.
// Values for lead surrogate code _points_ are indexed with this portion of the table.
// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)
const LSCP_INDEX_2_OFFSET = 0x10000 >> SHIFT_2;
const LSCP_INDEX_2_LENGTH = 0x400 >> SHIFT_2;
// Count the lengths of both BMP pieces. 2080=0x820
const INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;
// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.
// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.
const UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;
const UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; // U+0800 is the first code point after 2-byte UTF-8
// The index-1 table, only used for supplementary code points, at offset 2112=0x840.
// Variable length, for code points up to highStart, where the last single-value range starts.
// Maximum length 512=0x200=0x100000>>SHIFT_1.
// (For 0x100000 supplementary code points U+10000..U+10ffff.)
//
// The part of the index-2 table for supplementary code points starts
// after this index-1 table.
//
// Both the index-1 table and the following part of the index-2 table
// are omitted completely if there is only BMP data.
const INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;
// The alignment size of a data block. Also the granularity for compaction.
const DATA_GRANULARITY = 1 << INDEX_SHIFT;
class UnicodeTrie {
    constructor(data){
        const isBuffer = typeof data.readUInt32BE === "function" && typeof data.slice === "function";
        if (isBuffer || data instanceof Uint8Array) {
            // read binary format
            let uncompressedLength;
            if (isBuffer) {
                this.highStart = data.readUInt32LE(0);
                this.errorValue = data.readUInt32LE(4);
                uncompressedLength = data.readUInt32LE(8);
                data = data.slice(12);
            } else {
                const view = new DataView(data.buffer);
                this.highStart = view.getUint32(0, true);
                this.errorValue = view.getUint32(4, true);
                uncompressedLength = view.getUint32(8, true);
                data = data.subarray(12);
            }
            // double inflate the actual trie data
            data = inflate(data, new Uint8Array(uncompressedLength));
            data = inflate(data, new Uint8Array(uncompressedLength));
            // swap bytes from little-endian
            swap32LE(data);
            this.data = new Uint32Array(data.buffer);
        } else {
            // pre-parsed data
            ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = data);
        }
    }
    get(codePoint) {
        let index;
        if (codePoint < 0 || codePoint > 0x10ffff) {
            return this.errorValue;
        }
        if (codePoint < 0xd800 || codePoint > 0xdbff && codePoint <= 0xffff) {
            // Ordinary BMP code point, excluding leading surrogates.
            // BMP uses a single level lookup.  BMP index starts at offset 0 in the index.
            // data is stored in the index array itself.
            index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
        }
        if (codePoint <= 0xffff) {
            // Lead Surrogate Code Point.  A Separate index section is stored for
            // lead surrogate code units and code points.
            //   The main index has the code unit data.
            //   For this function, we need the code point data.
            index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
        }
        if (codePoint < this.highStart) {
            // Supplemental code point, use two-level lookup.
            index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];
            index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];
            index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);
            return this.data[index];
        }
        return this.data[this.data.length - DATA_GRANULARITY];
    }
}
module.exports = UnicodeTrie;


/***/ }),

/***/ 6918:
/***/ ((module) => {

"use strict";

const isBigEndian = new Uint8Array(new Uint32Array([
    0x12345678
]).buffer)[0] === 0x12;
const swap = (b, n, m)=>{
    let i = b[n];
    b[n] = b[m];
    b[m] = i;
};
const swap32 = (array)=>{
    const len = array.length;
    for(let i = 0; i < len; i += 4){
        swap(array, i, i + 3);
        swap(array, i + 1, i + 2);
    }
};
const swap32LE = (array)=>{
    if (isBigEndian) {
        swap32(array);
    }
};
module.exports = {
    swap32LE: swap32LE
};


/***/ }),

/***/ 933:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $elh9A$restructure = __webpack_require__(6094);
var $elh9A$fs = __webpack_require__(7147);
var $elh9A$swchelperscjs_define_propertycjs = __webpack_require__(9336);
var $elh9A$swchelperscjs_ts_decoratecjs = __webpack_require__(6382);
var $elh9A$fastdeepequal = __webpack_require__(9591);
var $elh9A$unicodeproperties = __webpack_require__(9031);
var $elh9A$unicodetrie = __webpack_require__(5331);
var $elh9A$dfa = __webpack_require__(9792);
var $elh9A$clone = __webpack_require__(4983);
var $elh9A$tinyinflate = __webpack_require__(2871);
var $elh9A$brotlidecompressjs = __webpack_require__(3393);
function $parcel$exportWildcard(dest, source) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) {
            return;
        }
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function get() {
                return source[key];
            }
        });
    });
    return dest;
}
function $parcel$export(e, n, v, s) {
    Object.defineProperty(e, n, {
        get: v,
        set: s,
        enumerable: true,
        configurable: true
    });
}
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
var $59aa4ed98453e1d4$exports = {};
$parcel$export($59aa4ed98453e1d4$exports, "logErrors", ()=>$59aa4ed98453e1d4$export$bd5c5d8b8dcafd78);
$parcel$export($59aa4ed98453e1d4$exports, "registerFormat", ()=>$59aa4ed98453e1d4$export$36b2f24e97d43be);
$parcel$export($59aa4ed98453e1d4$exports, "create", ()=>$59aa4ed98453e1d4$export$185802fd694ee1f5);
$parcel$export($59aa4ed98453e1d4$exports, "defaultLanguage", ()=>$59aa4ed98453e1d4$export$42940898df819940);
$parcel$export($59aa4ed98453e1d4$exports, "setDefaultLanguage", ()=>$59aa4ed98453e1d4$export$5157e7780d44cc36);
let $59aa4ed98453e1d4$export$bd5c5d8b8dcafd78 = false;
let $59aa4ed98453e1d4$var$formats = [];
function $59aa4ed98453e1d4$export$36b2f24e97d43be(format) {
    $59aa4ed98453e1d4$var$formats.push(format);
}
function $59aa4ed98453e1d4$export$185802fd694ee1f5(buffer, postscriptName) {
    for(let i = 0; i < $59aa4ed98453e1d4$var$formats.length; i++){
        let format = $59aa4ed98453e1d4$var$formats[i];
        if (format.probe(buffer)) {
            let font = new format(new (0, $elh9A$restructure.DecodeStream)(buffer));
            if (postscriptName) return font.getFont(postscriptName);
            return font;
        }
    }
    throw new Error("Unknown font format");
}
let $59aa4ed98453e1d4$export$42940898df819940 = "en";
function $59aa4ed98453e1d4$export$5157e7780d44cc36(lang = "en") {
    $59aa4ed98453e1d4$export$42940898df819940 = lang;
}
var $f39726ff40304956$exports = {};
$parcel$export($f39726ff40304956$exports, "openSync", ()=>$f39726ff40304956$export$fa5499edb1ab414a);
$parcel$export($f39726ff40304956$exports, "open", ()=>$f39726ff40304956$export$3ce6949f20cea765);
function $f39726ff40304956$export$fa5499edb1ab414a(filename, postscriptName) {
    let buffer = (0, $parcel$interopDefault($elh9A$fs)).readFileSync(filename);
    return (0, $59aa4ed98453e1d4$export$185802fd694ee1f5)(buffer, postscriptName);
}
async function $f39726ff40304956$export$3ce6949f20cea765(filename, postscriptName, callback) {
    if (typeof postscriptName === "function") {
        callback = postscriptName;
        postscriptName = null;
    }
    let buffer = await (0, $parcel$interopDefault($elh9A$fs)).promises.readFile(filename);
    return (0, $59aa4ed98453e1d4$export$185802fd694ee1f5)(buffer, postscriptName);
}
/**
 * This decorator caches the results of a getter or method such that
 * the results are lazily computed once, and then cached.
 * @private
 */ function $3bda6911913b43f0$export$69a3209f1a06c04d(target, key, descriptor) {
    if (descriptor.get) {
        let get = descriptor.get;
        descriptor.get = function() {
            let value = get.call(this);
            Object.defineProperty(this, key, {
                value: value
            });
            return value;
        };
    } else if (typeof descriptor.value === "function") {
        let fn = descriptor.value;
        return {
            get () {
                let cache = new Map;
                function memoized(...args) {
                    let key = args.length > 0 ? args[0] : "value";
                    if (cache.has(key)) return cache.get(key);
                    let result = fn.apply(this, args);
                    cache.set(key, result);
                    return result;
                }
                Object.defineProperty(this, key, {
                    value: memoized
                });
                return memoized;
            }
        };
    }
}
let $e4ae0436c91af89f$var$SubHeader = new $elh9A$restructure.Struct({
    firstCode: $elh9A$restructure.uint16,
    entryCount: $elh9A$restructure.uint16,
    idDelta: $elh9A$restructure.int16,
    idRangeOffset: $elh9A$restructure.uint16
});
let $e4ae0436c91af89f$var$CmapGroup = new $elh9A$restructure.Struct({
    startCharCode: $elh9A$restructure.uint32,
    endCharCode: $elh9A$restructure.uint32,
    glyphID: $elh9A$restructure.uint32
});
let $e4ae0436c91af89f$var$UnicodeValueRange = new $elh9A$restructure.Struct({
    startUnicodeValue: $elh9A$restructure.uint24,
    additionalCount: $elh9A$restructure.uint8
});
let $e4ae0436c91af89f$var$UVSMapping = new $elh9A$restructure.Struct({
    unicodeValue: $elh9A$restructure.uint24,
    glyphID: $elh9A$restructure.uint16
});
let $e4ae0436c91af89f$var$DefaultUVS = new $elh9A$restructure.Array($e4ae0436c91af89f$var$UnicodeValueRange, $elh9A$restructure.uint32);
let $e4ae0436c91af89f$var$NonDefaultUVS = new $elh9A$restructure.Array($e4ae0436c91af89f$var$UVSMapping, $elh9A$restructure.uint32);
let $e4ae0436c91af89f$var$VarSelectorRecord = new $elh9A$restructure.Struct({
    varSelector: $elh9A$restructure.uint24,
    defaultUVS: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$DefaultUVS, {
        type: "parent"
    }),
    nonDefaultUVS: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$NonDefaultUVS, {
        type: "parent"
    })
});
let $e4ae0436c91af89f$var$CmapSubtable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    0: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        codeMap: new $elh9A$restructure.LazyArray($elh9A$restructure.uint8, 256)
    },
    2: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        subHeaderKeys: new $elh9A$restructure.Array($elh9A$restructure.uint16, 256),
        subHeaderCount: (t)=>Math.max.apply(Math, t.subHeaderKeys),
        subHeaders: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$SubHeader, "subHeaderCount"),
        glyphIndexArray: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "subHeaderCount")
    },
    4: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        segCountX2: $elh9A$restructure.uint16,
        segCount: (t)=>t.segCountX2 >> 1,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16,
        endCode: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        reservedPad: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        startCode: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        idDelta: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, "segCount"),
        idRangeOffset: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "segCount"),
        glyphIndexArray: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, (t)=>(t.length - t._currentOffset) / 2)
    },
    6: {
        length: $elh9A$restructure.uint16,
        language: $elh9A$restructure.uint16,
        firstCode: $elh9A$restructure.uint16,
        entryCount: $elh9A$restructure.uint16,
        glyphIndices: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "entryCount")
    },
    8: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint16,
        is32: new $elh9A$restructure.LazyArray($elh9A$restructure.uint8, 8192),
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
    },
    10: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        firstCode: $elh9A$restructure.uint32,
        entryCount: $elh9A$restructure.uint32,
        glyphIndices: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "numChars")
    },
    12: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
    },
    13: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        length: $elh9A$restructure.uint32,
        language: $elh9A$restructure.uint32,
        nGroups: $elh9A$restructure.uint32,
        groups: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$CmapGroup, "nGroups")
    },
    14: {
        length: $elh9A$restructure.uint32,
        numRecords: $elh9A$restructure.uint32,
        varSelectors: new $elh9A$restructure.LazyArray($e4ae0436c91af89f$var$VarSelectorRecord, "numRecords")
    }
});
let $e4ae0436c91af89f$var$CmapEntry = new $elh9A$restructure.Struct({
    platformID: $elh9A$restructure.uint16,
    encodingID: $elh9A$restructure.uint16,
    table: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $e4ae0436c91af89f$var$CmapSubtable, {
        type: "parent",
        lazy: true
    })
});
var $e4ae0436c91af89f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numSubtables: $elh9A$restructure.uint16,
    tables: new $elh9A$restructure.Array($e4ae0436c91af89f$var$CmapEntry, "numSubtables")
});
var $55a60976afb7c261$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.int32,
    revision: $elh9A$restructure.int32,
    checkSumAdjustment: $elh9A$restructure.uint32,
    magicNumber: $elh9A$restructure.uint32,
    flags: $elh9A$restructure.uint16,
    unitsPerEm: $elh9A$restructure.uint16,
    created: new $elh9A$restructure.Array($elh9A$restructure.int32, 2),
    modified: new $elh9A$restructure.Array($elh9A$restructure.int32, 2),
    xMin: $elh9A$restructure.int16,
    yMin: $elh9A$restructure.int16,
    xMax: $elh9A$restructure.int16,
    yMax: $elh9A$restructure.int16,
    macStyle: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "bold",
        "italic",
        "underline",
        "outline",
        "shadow",
        "condensed",
        "extended"
    ]),
    lowestRecPPEM: $elh9A$restructure.uint16,
    fontDirectionHint: $elh9A$restructure.int16,
    indexToLocFormat: $elh9A$restructure.int16,
    glyphDataFormat: $elh9A$restructure.int16 // 0 for current format
});
var $dde72b7b5b650596$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.int32,
    ascent: $elh9A$restructure.int16,
    descent: $elh9A$restructure.int16,
    lineGap: $elh9A$restructure.int16,
    advanceWidthMax: $elh9A$restructure.uint16,
    minLeftSideBearing: $elh9A$restructure.int16,
    minRightSideBearing: $elh9A$restructure.int16,
    xMaxExtent: $elh9A$restructure.int16,
    caretSlopeRise: $elh9A$restructure.int16,
    caretSlopeRun: $elh9A$restructure.int16,
    caretOffset: $elh9A$restructure.int16,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.int16, 4),
    metricDataFormat: $elh9A$restructure.int16,
    numberOfMetrics: $elh9A$restructure.uint16 // Number of advance widths in 'hmtx' table
});
let $a7c40184072c9a5b$var$HmtxEntry = new $elh9A$restructure.Struct({
    advance: $elh9A$restructure.uint16,
    bearing: $elh9A$restructure.int16
});
var $a7c40184072c9a5b$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    metrics: new $elh9A$restructure.LazyArray($a7c40184072c9a5b$var$HmtxEntry, (t)=>t.parent.hhea.numberOfMetrics),
    bearings: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)
});
var $521197722369f691$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.int32,
    numGlyphs: $elh9A$restructure.uint16,
    maxPoints: $elh9A$restructure.uint16,
    maxContours: $elh9A$restructure.uint16,
    maxComponentPoints: $elh9A$restructure.uint16,
    maxComponentContours: $elh9A$restructure.uint16,
    maxZones: $elh9A$restructure.uint16,
    maxTwilightPoints: $elh9A$restructure.uint16,
    maxStorage: $elh9A$restructure.uint16,
    maxFunctionDefs: $elh9A$restructure.uint16,
    maxInstructionDefs: $elh9A$restructure.uint16,
    maxStackElements: $elh9A$restructure.uint16,
    maxSizeOfInstructions: $elh9A$restructure.uint16,
    maxComponentElements: $elh9A$restructure.uint16,
    maxComponentDepth: $elh9A$restructure.uint16 // Maximum levels of recursion; 1 for simple components
});
/**
 * Gets an encoding name from platform, encoding, and language ids.
 * Returned encoding names can be used in iconv-lite to decode text.
 */ function $e2613b812f052cbe$export$badc544e0651b6b1(platformID, encodingID, languageID = 0) {
    if (platformID === 1 && $e2613b812f052cbe$export$479e671907f486d1[languageID]) return $e2613b812f052cbe$export$479e671907f486d1[languageID];
    return $e2613b812f052cbe$export$6fef87b7618bdf0b[platformID][encodingID];
}
const $e2613b812f052cbe$var$SINGLE_BYTE_ENCODINGS = new Set([
    "x-mac-roman",
    "x-mac-cyrillic",
    "iso-8859-6",
    "iso-8859-8"
]);
const $e2613b812f052cbe$var$MAC_ENCODINGS = {
    "x-mac-croatian": "\xc4\xc5\xc7\xc9\xd1\xd6\xdc\xe1\xe0\xe2\xe4\xe3\xe5\xe7\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf1\xf3\xf2\xf4\xf6\xf5\xfa\xf9\xfb\xfc†\xb0\xa2\xa3\xa7•\xb6\xdf\xaeŠ™\xb4\xa8≠Ž\xd8∞\xb1≤≥∆\xb5∂∑∏š∫\xaa\xbaΩž\xf8\xbf\xa1\xac√ƒ≈Ć\xabČ… \xc0\xc3\xd5ŒœĐ—“”‘’\xf7◊\xa9⁄€‹›\xc6\xbb–\xb7‚„‰\xc2ć\xc1č\xc8\xcd\xce\xcf\xcc\xd3\xd4đ\xd2\xda\xdb\xd9ıˆ˜\xafπ\xcb˚\xb8\xca\xe6ˇ",
    "x-mac-gaelic": "\xc4\xc5\xc7\xc9\xd1\xd6\xdc\xe1\xe0\xe2\xe4\xe3\xe5\xe7\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf1\xf3\xf2\xf4\xf6\xf5\xfa\xf9\xfb\xfc†\xb0\xa2\xa3\xa7•\xb6\xdf\xae\xa9™\xb4\xa8≠\xc6\xd8Ḃ\xb1≤≥ḃĊċḊḋḞḟĠġṀ\xe6\xf8ṁṖṗɼƒſṠ\xab\xbb… \xc0\xc3\xd5Œœ–—“”‘’ṡẛ\xffŸṪ€‹›Ŷŷṫ\xb7Ỳỳ⁊\xc2\xca\xc1\xcb\xc8\xcd\xce\xcf\xcc\xd3\xd4♣\xd2\xda\xdb\xd9ı\xdd\xfdŴŵẄẅẀẁẂẃ",
    "x-mac-greek": "\xc4\xb9\xb2\xc9\xb3\xd6\xdc΅\xe0\xe2\xe4΄\xa8\xe7\xe9\xe8\xea\xeb\xa3™\xee\xef•\xbd‰\xf4\xf6\xa6€\xf9\xfb\xfc†ΓΔΘΛΞΠ\xdf\xae\xa9ΣΪ\xa7≠\xb0\xb7Α\xb1≤≥\xa5ΒΕΖΗΙΚΜΦΫΨΩάΝ\xacΟΡ≈Τ\xab\xbb… ΥΧΆΈœ–―“”‘’\xf7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\xad",
    "x-mac-icelandic": "\xc4\xc5\xc7\xc9\xd1\xd6\xdc\xe1\xe0\xe2\xe4\xe3\xe5\xe7\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf1\xf3\xf2\xf4\xf6\xf5\xfa\xf9\xfb\xfc\xdd\xb0\xa2\xa3\xa7•\xb6\xdf\xae\xa9™\xb4\xa8≠\xc6\xd8∞\xb1≤≥\xa5\xb5∂∑∏π∫\xaa\xbaΩ\xe6\xf8\xbf\xa1\xac√ƒ≈∆\xab\xbb… \xc0\xc3\xd5Œœ–—“”‘’\xf7◊\xffŸ⁄€\xd0\xf0\xde\xfe\xfd\xb7‚„‰\xc2\xca\xc1\xcb\xc8\xcd\xce\xcf\xcc\xd3\xd4\xd2\xda\xdb\xd9ıˆ˜\xaf˘˙˚\xb8˝˛ˇ",
    "x-mac-inuit": "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ\xb0ᒡᒥᒦ•\xb6ᒧ\xae\xa9™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł",
    "x-mac-ce": "\xc4Āā\xc9Ą\xd6\xdc\xe1ąČ\xe4čĆć\xe9ŹźĎ\xedďĒēĖ\xf3ė\xf4\xf6\xf5\xfaĚě\xfc†\xb0Ę\xa3\xa7•\xb6\xdf\xae\xa9™ę\xa8≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ\xac√ńŇ∆\xab\xbb… ňŐ\xd5őŌ–—“”‘’\xf7◊ōŔŕŘ‹›řŖŗŠ‚„šŚś\xc1Ťť\xcdŽžŪ\xd3\xd4ūŮ\xdaůŰűŲų\xdd\xfdķŻŁżĢˇ",
    "x-mac-romanian": "\xc4\xc5\xc7\xc9\xd1\xd6\xdc\xe1\xe0\xe2\xe4\xe3\xe5\xe7\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf1\xf3\xf2\xf4\xf6\xf5\xfa\xf9\xfb\xfc†\xb0\xa2\xa3\xa7•\xb6\xdf\xae\xa9™\xb4\xa8≠ĂȘ∞\xb1≤≥\xa5\xb5∂∑∏π∫\xaa\xbaΩăș\xbf\xa1\xac√ƒ≈∆\xab\xbb… \xc0\xc3\xd5Œœ–—“”‘’\xf7◊\xffŸ⁄€‹›Țț‡\xb7‚„‰\xc2\xca\xc1\xcb\xc8\xcd\xce\xcf\xcc\xd3\xd4\xd2\xda\xdb\xd9ıˆ˜\xaf˘˙˚\xb8˝˛ˇ",
    "x-mac-turkish": "\xc4\xc5\xc7\xc9\xd1\xd6\xdc\xe1\xe0\xe2\xe4\xe3\xe5\xe7\xe9\xe8\xea\xeb\xed\xec\xee\xef\xf1\xf3\xf2\xf4\xf6\xf5\xfa\xf9\xfb\xfc†\xb0\xa2\xa3\xa7•\xb6\xdf\xae\xa9™\xb4\xa8≠\xc6\xd8∞\xb1≤≥\xa5\xb5∂∑∏π∫\xaa\xbaΩ\xe6\xf8\xbf\xa1\xac√ƒ≈∆\xab\xbb… \xc0\xc3\xd5Œœ–—“”‘’\xf7◊\xffŸĞğİıŞş‡\xb7‚„‰\xc2\xca\xc1\xcb\xc8\xcd\xce\xcf\xcc\xd3\xd4\xd2\xda\xdb\xd9ˆ˜\xaf˘˙˚\xb8˝˛ˇ"
};
const $e2613b812f052cbe$var$encodingCache = new Map();
function $e2613b812f052cbe$export$1dceb3c14ed68bee(encoding) {
    let cached = $e2613b812f052cbe$var$encodingCache.get(encoding);
    if (cached) return cached;
    // These encodings aren't supported by TextDecoder.
    let mapping = $e2613b812f052cbe$var$MAC_ENCODINGS[encoding];
    if (mapping) {
        let res = new Map();
        for(let i = 0; i < mapping.length; i++)res.set(mapping.charCodeAt(i), 0x80 + i);
        $e2613b812f052cbe$var$encodingCache.set(encoding, res);
        return res;
    }
    // Only single byte encodings can be mapped 1:1.
    if ($e2613b812f052cbe$var$SINGLE_BYTE_ENCODINGS.has(encoding)) {
        // TextEncoder only supports utf8, whereas TextDecoder supports legacy encodings.
        // Use this to create a mapping of code points.
        let decoder = new TextDecoder(encoding);
        let mapping = new Uint8Array(0x80);
        for(let i = 0; i < 0x80; i++)mapping[i] = 0x80 + i;
        let res = new Map();
        let s = decoder.decode(mapping);
        for(let i = 0; i < 0x80; i++)res.set(s.charCodeAt(i), 0x80 + i);
        $e2613b812f052cbe$var$encodingCache.set(encoding, res);
        return res;
    }
}
const $e2613b812f052cbe$export$6fef87b7618bdf0b = [
    // unicode
    [
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be",
        "utf-16be"
    ],
    // macintosh
    // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
    // 0	Roman                 17	Malayalam
    // 1	Japanese	            18	Sinhalese
    // 2	Traditional Chinese	  19	Burmese
    // 3	Korean	              20	Khmer
    // 4	Arabic	              21	Thai
    // 5	Hebrew	              22	Laotian
    // 6	Greek	                23	Georgian
    // 7	Russian	              24	Armenian
    // 8	RSymbol	              25	Simplified Chinese
    // 9	Devanagari	          26	Tibetan
    // 10	Gurmukhi	            27	Mongolian
    // 11	Gujarati	            28	Geez
    // 12	Oriya	                29	Slavic
    // 13	Bengali	              30	Vietnamese
    // 14	Tamil	                31	Sindhi
    // 15	Telugu	              32	(Uninterpreted)
    // 16	Kannada
    [
        "x-mac-roman",
        "shift-jis",
        "big5",
        "euc-kr",
        "iso-8859-6",
        "iso-8859-8",
        "x-mac-greek",
        "x-mac-cyrillic",
        "x-mac-symbol",
        "x-mac-devanagari",
        "x-mac-gurmukhi",
        "x-mac-gujarati",
        "Oriya",
        "Bengali",
        "Tamil",
        "Telugu",
        "Kannada",
        "Malayalam",
        "Sinhalese",
        "Burmese",
        "Khmer",
        "iso-8859-11",
        "Laotian",
        "Georgian",
        "Armenian",
        "gbk",
        "Tibetan",
        "Mongolian",
        "Geez",
        "x-mac-ce",
        "Vietnamese",
        "Sindhi"
    ],
    // ISO (deprecated)
    [
        "ascii",
        null,
        "iso-8859-1"
    ],
    // windows
    // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
    [
        "symbol",
        "utf-16be",
        "shift-jis",
        "gb18030",
        "big5",
        "euc-kr",
        "johab",
        null,
        null,
        null,
        "utf-16be"
    ]
];
const $e2613b812f052cbe$export$479e671907f486d1 = {
    15: "x-mac-icelandic",
    17: "x-mac-turkish",
    18: "x-mac-croatian",
    24: "x-mac-ce",
    25: "x-mac-ce",
    26: "x-mac-ce",
    27: "x-mac-ce",
    28: "x-mac-ce",
    30: "x-mac-icelandic",
    37: "x-mac-romanian",
    38: "x-mac-ce",
    39: "x-mac-ce",
    40: "x-mac-ce",
    143: "x-mac-inuit",
    146: "x-mac-gaelic"
};
const $e2613b812f052cbe$export$2092376fd002e13 = [
    // unicode
    [],
    {
        0: "en",
        30: "fo",
        60: "ks",
        90: "rw",
        1: "fr",
        31: "fa",
        61: "ku",
        91: "rn",
        2: "de",
        32: "ru",
        62: "sd",
        92: "ny",
        3: "it",
        33: "zh",
        63: "bo",
        93: "mg",
        4: "nl",
        34: "nl-BE",
        64: "ne",
        94: "eo",
        5: "sv",
        35: "ga",
        65: "sa",
        128: "cy",
        6: "es",
        36: "sq",
        66: "mr",
        129: "eu",
        7: "da",
        37: "ro",
        67: "bn",
        130: "ca",
        8: "pt",
        38: "cz",
        68: "as",
        131: "la",
        9: "no",
        39: "sk",
        69: "gu",
        132: "qu",
        10: "he",
        40: "si",
        70: "pa",
        133: "gn",
        11: "ja",
        41: "yi",
        71: "or",
        134: "ay",
        12: "ar",
        42: "sr",
        72: "ml",
        135: "tt",
        13: "fi",
        43: "mk",
        73: "kn",
        136: "ug",
        14: "el",
        44: "bg",
        74: "ta",
        137: "dz",
        15: "is",
        45: "uk",
        75: "te",
        138: "jv",
        16: "mt",
        46: "be",
        76: "si",
        139: "su",
        17: "tr",
        47: "uz",
        77: "my",
        140: "gl",
        18: "hr",
        48: "kk",
        78: "km",
        141: "af",
        19: "zh-Hant",
        49: "az-Cyrl",
        79: "lo",
        142: "br",
        20: "ur",
        50: "az-Arab",
        80: "vi",
        143: "iu",
        21: "hi",
        51: "hy",
        81: "id",
        144: "gd",
        22: "th",
        52: "ka",
        82: "tl",
        145: "gv",
        23: "ko",
        53: "mo",
        83: "ms",
        146: "ga",
        24: "lt",
        54: "ky",
        84: "ms-Arab",
        147: "to",
        25: "pl",
        55: "tg",
        85: "am",
        148: "el-polyton",
        26: "hu",
        56: "tk",
        86: "ti",
        149: "kl",
        27: "es",
        57: "mn-CN",
        87: "om",
        150: "az",
        28: "lv",
        58: "mn",
        88: "so",
        151: "nn",
        29: "se",
        59: "ps",
        89: "sw"
    },
    // ISO (deprecated)
    [],
    {
        0x0436: "af",
        0x4009: "en-IN",
        0x0487: "rw",
        0x0432: "tn",
        0x041C: "sq",
        0x1809: "en-IE",
        0x0441: "sw",
        0x045B: "si",
        0x0484: "gsw",
        0x2009: "en-JM",
        0x0457: "kok",
        0x041B: "sk",
        0x045E: "am",
        0x4409: "en-MY",
        0x0412: "ko",
        0x0424: "sl",
        0x1401: "ar-DZ",
        0x1409: "en-NZ",
        0x0440: "ky",
        0x2C0A: "es-AR",
        0x3C01: "ar-BH",
        0x3409: "en-PH",
        0x0454: "lo",
        0x400A: "es-BO",
        0x0C01: "ar",
        0x4809: "en-SG",
        0x0426: "lv",
        0x340A: "es-CL",
        0x0801: "ar-IQ",
        0x1C09: "en-ZA",
        0x0427: "lt",
        0x240A: "es-CO",
        0x2C01: "ar-JO",
        0x2C09: "en-TT",
        0x082E: "dsb",
        0x140A: "es-CR",
        0x3401: "ar-KW",
        0x0809: "en-GB",
        0x046E: "lb",
        0x1C0A: "es-DO",
        0x3001: "ar-LB",
        0x0409: "en",
        0x042F: "mk",
        0x300A: "es-EC",
        0x1001: "ar-LY",
        0x3009: "en-ZW",
        0x083E: "ms-BN",
        0x440A: "es-SV",
        0x1801: "ary",
        0x0425: "et",
        0x043E: "ms",
        0x100A: "es-GT",
        0x2001: "ar-OM",
        0x0438: "fo",
        0x044C: "ml",
        0x480A: "es-HN",
        0x4001: "ar-QA",
        0x0464: "fil",
        0x043A: "mt",
        0x080A: "es-MX",
        0x0401: "ar-SA",
        0x040B: "fi",
        0x0481: "mi",
        0x4C0A: "es-NI",
        0x2801: "ar-SY",
        0x080C: "fr-BE",
        0x047A: "arn",
        0x180A: "es-PA",
        0x1C01: "aeb",
        0x0C0C: "fr-CA",
        0x044E: "mr",
        0x3C0A: "es-PY",
        0x3801: "ar-AE",
        0x040C: "fr",
        0x047C: "moh",
        0x280A: "es-PE",
        0x2401: "ar-YE",
        0x140C: "fr-LU",
        0x0450: "mn",
        0x500A: "es-PR",
        0x042B: "hy",
        0x180C: "fr-MC",
        0x0850: "mn-CN",
        0x0C0A: "es",
        0x044D: "as",
        0x100C: "fr-CH",
        0x0461: "ne",
        0x040A: "es",
        0x082C: "az-Cyrl",
        0x0462: "fy",
        0x0414: "nb",
        0x540A: "es-US",
        0x042C: "az",
        0x0456: "gl",
        0x0814: "nn",
        0x380A: "es-UY",
        0x046D: "ba",
        0x0437: "ka",
        0x0482: "oc",
        0x200A: "es-VE",
        0x042D: "eu",
        0x0C07: "de-AT",
        0x0448: "or",
        0x081D: "sv-FI",
        0x0423: "be",
        0x0407: "de",
        0x0463: "ps",
        0x041D: "sv",
        0x0845: "bn",
        0x1407: "de-LI",
        0x0415: "pl",
        0x045A: "syr",
        0x0445: "bn-IN",
        0x1007: "de-LU",
        0x0416: "pt",
        0x0428: "tg",
        0x201A: "bs-Cyrl",
        0x0807: "de-CH",
        0x0816: "pt-PT",
        0x085F: "tzm",
        0x141A: "bs",
        0x0408: "el",
        0x0446: "pa",
        0x0449: "ta",
        0x047E: "br",
        0x046F: "kl",
        0x046B: "qu-BO",
        0x0444: "tt",
        0x0402: "bg",
        0x0447: "gu",
        0x086B: "qu-EC",
        0x044A: "te",
        0x0403: "ca",
        0x0468: "ha",
        0x0C6B: "qu",
        0x041E: "th",
        0x0C04: "zh-HK",
        0x040D: "he",
        0x0418: "ro",
        0x0451: "bo",
        0x1404: "zh-MO",
        0x0439: "hi",
        0x0417: "rm",
        0x041F: "tr",
        0x0804: "zh",
        0x040E: "hu",
        0x0419: "ru",
        0x0442: "tk",
        0x1004: "zh-SG",
        0x040F: "is",
        0x243B: "smn",
        0x0480: "ug",
        0x0404: "zh-TW",
        0x0470: "ig",
        0x103B: "smj-NO",
        0x0422: "uk",
        0x0483: "co",
        0x0421: "id",
        0x143B: "smj",
        0x042E: "hsb",
        0x041A: "hr",
        0x045D: "iu",
        0x0C3B: "se-FI",
        0x0420: "ur",
        0x101A: "hr-BA",
        0x085D: "iu-Latn",
        0x043B: "se",
        0x0843: "uz-Cyrl",
        0x0405: "cs",
        0x083C: "ga",
        0x083B: "se-SE",
        0x0443: "uz",
        0x0406: "da",
        0x0434: "xh",
        0x203B: "sms",
        0x042A: "vi",
        0x048C: "prs",
        0x0435: "zu",
        0x183B: "sma-NO",
        0x0452: "cy",
        0x0465: "dv",
        0x0410: "it",
        0x1C3B: "sms",
        0x0488: "wo",
        0x0813: "nl-BE",
        0x0810: "it-CH",
        0x044F: "sa",
        0x0485: "sah",
        0x0413: "nl",
        0x0411: "ja",
        0x1C1A: "sr-Cyrl-BA",
        0x0478: "ii",
        0x0C09: "en-AU",
        0x044B: "kn",
        0x0C1A: "sr",
        0x046A: "yo",
        0x2809: "en-BZ",
        0x043F: "kk",
        0x181A: "sr-Latn-BA",
        0x1009: "en-CA",
        0x0453: "km",
        0x081A: "sr-Latn",
        0x2409: "en-029",
        0x0486: "quc",
        0x046C: "nso"
    }
];
let $51a9f4feb3a3b2b1$var$NameRecord = new $elh9A$restructure.Struct({
    platformID: $elh9A$restructure.uint16,
    encodingID: $elh9A$restructure.uint16,
    languageID: $elh9A$restructure.uint16,
    nameID: $elh9A$restructure.uint16,
    length: $elh9A$restructure.uint16,
    string: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.String("length", (t)=>(0, $e2613b812f052cbe$export$badc544e0651b6b1)(t.platformID, t.encodingID, t.languageID)), {
        type: "parent",
        relativeTo: (ctx)=>ctx.parent.stringOffset,
        allowNull: false
    })
});
let $51a9f4feb3a3b2b1$var$LangTagRecord = new $elh9A$restructure.Struct({
    length: $elh9A$restructure.uint16,
    tag: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.String("length", "utf16be"), {
        type: "parent",
        relativeTo: (ctx)=>ctx.stringOffset
    })
});
var $51a9f4feb3a3b2b1$var$NameTable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    0: {
        count: $elh9A$restructure.uint16,
        stringOffset: $elh9A$restructure.uint16,
        records: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$NameRecord, "count")
    },
    1: {
        count: $elh9A$restructure.uint16,
        stringOffset: $elh9A$restructure.uint16,
        records: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$NameRecord, "count"),
        langTagCount: $elh9A$restructure.uint16,
        langTags: new $elh9A$restructure.Array($51a9f4feb3a3b2b1$var$LangTagRecord, "langTagCount")
    }
});
var $51a9f4feb3a3b2b1$export$2e2bcd8739ae039 = $51a9f4feb3a3b2b1$var$NameTable;
const $51a9f4feb3a3b2b1$var$NAMES = [
    "copyright",
    "fontFamily",
    "fontSubfamily",
    "uniqueSubfamily",
    "fullName",
    "version",
    "postscriptName",
    "trademark",
    "manufacturer",
    "designer",
    "description",
    "vendorURL",
    "designerURL",
    "license",
    "licenseURL",
    null,
    "preferredFamily",
    "preferredSubfamily",
    "compatibleFull",
    "sampleText",
    "postscriptCIDFontName",
    "wwsFamilyName",
    "wwsSubfamilyName"
];
$51a9f4feb3a3b2b1$var$NameTable.process = function(stream) {
    var records = {};
    for (let record of this.records){
        // find out what language this is for
        let language = (0, $e2613b812f052cbe$export$2092376fd002e13)[record.platformID][record.languageID];
        if (language == null && this.langTags != null && record.languageID >= 0x8000) language = this.langTags[record.languageID - 0x8000].tag;
        if (language == null) language = record.platformID + "-" + record.languageID;
        // if the nameID is >= 256, it is a font feature record (AAT)
        let key = record.nameID >= 256 ? "fontFeatures" : $51a9f4feb3a3b2b1$var$NAMES[record.nameID] || record.nameID;
        if (records[key] == null) records[key] = {};
        let obj = records[key];
        if (record.nameID >= 256) obj = obj[record.nameID] || (obj[record.nameID] = {});
        if (typeof record.string === "string" || typeof obj[language] !== "string") obj[language] = record.string;
    }
    this.records = records;
};
$51a9f4feb3a3b2b1$var$NameTable.preEncode = function() {
    if (Array.isArray(this.records)) return;
    this.version = 0;
    let records = [];
    for(let key in this.records){
        let val = this.records[key];
        if (key === "fontFeatures") continue;
        records.push({
            platformID: 3,
            encodingID: 1,
            languageID: 0x409,
            nameID: $51a9f4feb3a3b2b1$var$NAMES.indexOf(key),
            length: val.en.length * 2,
            string: val.en
        });
        if (key === "postscriptName") records.push({
            platformID: 1,
            encodingID: 0,
            languageID: 0,
            nameID: $51a9f4feb3a3b2b1$var$NAMES.indexOf(key),
            length: val.en.length,
            string: val.en
        });
    }
    this.records = records;
    this.count = records.length;
    this.stringOffset = $51a9f4feb3a3b2b1$var$NameTable.size(this, null, false);
};
var $114ea85db469b435$var$OS2 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    header: {
        xAvgCharWidth: $elh9A$restructure.int16,
        usWeightClass: $elh9A$restructure.uint16,
        usWidthClass: $elh9A$restructure.uint16,
        fsType: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
            null,
            "noEmbedding",
            "viewOnly",
            "editable",
            null,
            null,
            null,
            null,
            "noSubsetting",
            "bitmapOnly"
        ]),
        ySubscriptXSize: $elh9A$restructure.int16,
        ySubscriptYSize: $elh9A$restructure.int16,
        ySubscriptXOffset: $elh9A$restructure.int16,
        ySubscriptYOffset: $elh9A$restructure.int16,
        ySuperscriptXSize: $elh9A$restructure.int16,
        ySuperscriptYSize: $elh9A$restructure.int16,
        ySuperscriptXOffset: $elh9A$restructure.int16,
        ySuperscriptYOffset: $elh9A$restructure.int16,
        yStrikeoutSize: $elh9A$restructure.int16,
        yStrikeoutPosition: $elh9A$restructure.int16,
        sFamilyClass: $elh9A$restructure.int16,
        panose: new $elh9A$restructure.Array($elh9A$restructure.uint8, 10),
        ulCharRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 4),
        vendorID: new $elh9A$restructure.String(4),
        fsSelection: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
            "italic",
            "underscore",
            "negative",
            "outlined",
            "strikeout",
            "bold",
            "regular",
            "useTypoMetrics",
            "wws",
            "oblique"
        ]),
        usFirstCharIndex: $elh9A$restructure.uint16,
        usLastCharIndex: $elh9A$restructure.uint16 // The maximum Unicode index in this font
    },
    // The Apple version of this table ends here, but the Microsoft one continues on...
    0: {},
    1: {
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2)
    },
    2: {
        // these should be common with version 1 somehow
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2),
        xHeight: $elh9A$restructure.int16,
        capHeight: $elh9A$restructure.int16,
        defaultChar: $elh9A$restructure.uint16,
        breakChar: $elh9A$restructure.uint16,
        maxContent: $elh9A$restructure.uint16
    },
    5: {
        typoAscender: $elh9A$restructure.int16,
        typoDescender: $elh9A$restructure.int16,
        typoLineGap: $elh9A$restructure.int16,
        winAscent: $elh9A$restructure.uint16,
        winDescent: $elh9A$restructure.uint16,
        codePageRange: new $elh9A$restructure.Array($elh9A$restructure.uint32, 2),
        xHeight: $elh9A$restructure.int16,
        capHeight: $elh9A$restructure.int16,
        defaultChar: $elh9A$restructure.uint16,
        breakChar: $elh9A$restructure.uint16,
        maxContent: $elh9A$restructure.uint16,
        usLowerOpticalPointSize: $elh9A$restructure.uint16,
        usUpperOpticalPointSize: $elh9A$restructure.uint16
    }
});
let $114ea85db469b435$var$versions = $114ea85db469b435$var$OS2.versions;
$114ea85db469b435$var$versions[3] = $114ea85db469b435$var$versions[4] = $114ea85db469b435$var$versions[2];
var $114ea85db469b435$export$2e2bcd8739ae039 = $114ea85db469b435$var$OS2;
var $f93b30299e1ea0f5$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.fixed32, {
    header: {
        italicAngle: $elh9A$restructure.fixed32,
        underlinePosition: $elh9A$restructure.int16,
        underlineThickness: $elh9A$restructure.int16,
        isFixedPitch: $elh9A$restructure.uint32,
        minMemType42: $elh9A$restructure.uint32,
        maxMemType42: $elh9A$restructure.uint32,
        minMemType1: $elh9A$restructure.uint32,
        maxMemType1: $elh9A$restructure.uint32 // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
    },
    1: {},
    2: {
        numberOfGlyphs: $elh9A$restructure.uint16,
        glyphNameIndex: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numberOfGlyphs"),
        names: new $elh9A$restructure.Array(new $elh9A$restructure.String($elh9A$restructure.uint8))
    },
    2.5: {
        numberOfGlyphs: $elh9A$restructure.uint16,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint8, "numberOfGlyphs")
    },
    3: {},
    4: {
        map: new $elh9A$restructure.Array($elh9A$restructure.uint32, (t)=>t.parent.maxp.numGlyphs)
    }
});
var $8fb09b0f473d61a0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    controlValues: new $elh9A$restructure.Array($elh9A$restructure.int16)
});
var // These instructions are known as the font program. The main use of this table
// is for the definition of functions that are used in many different glyph programs.
$873d79fea57d3161$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    instructions: new $elh9A$restructure.Array($elh9A$restructure.uint8)
});
let $83c4155666d50c37$var$loca = new $elh9A$restructure.VersionedStruct("head.indexToLocFormat", {
    0: {
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16)
    },
    1: {
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32)
    }
});
$83c4155666d50c37$var$loca.process = function() {
    if (this.version === 0 && !this._processed) {
        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] <<= 1;
        this._processed = true;
    }
};
$83c4155666d50c37$var$loca.preEncode = function() {
    if (this.version === 0 && this._processed !== false) {
        for(let i = 0; i < this.offsets.length; i++)this.offsets[i] >>>= 1;
        this._processed = false;
    }
};
var $83c4155666d50c37$export$2e2bcd8739ae039 = $83c4155666d50c37$var$loca;
var $b12598db7cdf7042$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    controlValueProgram: new $elh9A$restructure.Array($elh9A$restructure.uint8)
});
var $7707bdf21a3d89cc$export$2e2bcd8739ae039 = new $elh9A$restructure.Array(new $elh9A$restructure.Buffer);
class $9eaea3754914a290$export$2e2bcd8739ae039 {
    getCFFVersion(ctx) {
        while(ctx && !ctx.hdrSize)ctx = ctx.parent;
        return ctx ? ctx.version : -1;
    }
    decode(stream, parent) {
        let version = this.getCFFVersion(parent);
        let count = version >= 2 ? stream.readUInt32BE() : stream.readUInt16BE();
        if (count === 0) return [];
        let offSize = stream.readUInt8();
        let offsetType;
        if (offSize === 1) offsetType = $elh9A$restructure.uint8;
        else if (offSize === 2) offsetType = $elh9A$restructure.uint16;
        else if (offSize === 3) offsetType = $elh9A$restructure.uint24;
        else if (offSize === 4) offsetType = $elh9A$restructure.uint32;
        else throw new Error(`Bad offset size in CFFIndex: ${offSize} ${stream.pos}`);
        let ret = [];
        let startPos = stream.pos + (count + 1) * offSize - 1;
        let start = offsetType.decode(stream);
        for(let i = 0; i < count; i++){
            let end = offsetType.decode(stream);
            if (this.type != null) {
                let pos = stream.pos;
                stream.pos = startPos + start;
                parent.length = end - start;
                ret.push(this.type.decode(stream, parent));
                stream.pos = pos;
            } else ret.push({
                offset: startPos + start,
                length: end - start
            });
            start = end;
        }
        stream.pos = startPos + start;
        return ret;
    }
    size(arr, parent) {
        let size = 2;
        if (arr.length === 0) return size;
        let type = this.type || new $elh9A$restructure.Buffer;
        // find maximum offset to detminine offset type
        let offset = 1;
        for(let i = 0; i < arr.length; i++){
            let item = arr[i];
            offset += type.size(item, parent);
        }
        let offsetType;
        if (offset <= 0xff) offsetType = $elh9A$restructure.uint8;
        else if (offset <= 0xffff) offsetType = $elh9A$restructure.uint16;
        else if (offset <= 0xffffff) offsetType = $elh9A$restructure.uint24;
        else if (offset <= 0xffffffff) offsetType = $elh9A$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        size += 1 + offsetType.size() * (arr.length + 1);
        size += offset - 1;
        return size;
    }
    encode(stream, arr, parent) {
        stream.writeUInt16BE(arr.length);
        if (arr.length === 0) return;
        let type = this.type || new $elh9A$restructure.Buffer;
        // find maximum offset to detminine offset type
        let sizes = [];
        let offset = 1;
        for (let item of arr){
            let s = type.size(item, parent);
            sizes.push(s);
            offset += s;
        }
        let offsetType;
        if (offset <= 0xff) offsetType = $elh9A$restructure.uint8;
        else if (offset <= 0xffff) offsetType = $elh9A$restructure.uint16;
        else if (offset <= 0xffffff) offsetType = $elh9A$restructure.uint24;
        else if (offset <= 0xffffffff) offsetType = $elh9A$restructure.uint32;
        else throw new Error("Bad offset in CFFIndex");
        // write offset size
        stream.writeUInt8(offsetType.size());
        // write elements
        offset = 1;
        offsetType.encode(stream, offset);
        for (let size of sizes){
            offset += size;
            offsetType.encode(stream, offset);
        }
        for (let item of arr)type.encode(stream, item, parent);
        return;
    }
    constructor(type){
        this.type = type;
    }
}
const $f77b592c17132d70$var$FLOAT_EOF = 0xf;
const $f77b592c17132d70$var$FLOAT_LOOKUP = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    ".",
    "E",
    "E-",
    null,
    "-"
];
const $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP = {
    ".": 10,
    "E": 11,
    "E-": 12,
    "-": 14
};
class $f77b592c17132d70$export$2e2bcd8739ae039 {
    static decode(stream, value) {
        if (32 <= value && value <= 246) return value - 139;
        if (247 <= value && value <= 250) return (value - 247) * 256 + stream.readUInt8() + 108;
        if (251 <= value && value <= 254) return -(value - 251) * 256 - stream.readUInt8() - 108;
        if (value === 28) return stream.readInt16BE();
        if (value === 29) return stream.readInt32BE();
        if (value === 30) {
            let str = "";
            while(true){
                let b = stream.readUInt8();
                let n1 = b >> 4;
                if (n1 === $f77b592c17132d70$var$FLOAT_EOF) break;
                str += $f77b592c17132d70$var$FLOAT_LOOKUP[n1];
                let n2 = b & 15;
                if (n2 === $f77b592c17132d70$var$FLOAT_EOF) break;
                str += $f77b592c17132d70$var$FLOAT_LOOKUP[n2];
            }
            return parseFloat(str);
        }
        return null;
    }
    static size(value) {
        // if the value needs to be forced to the largest size (32 bit)
        // e.g. for unknown pointers, set to 32768
        if (value.forceLarge) value = 32768;
        if ((value | 0) !== value) {
            let str = "" + value;
            return 1 + Math.ceil((str.length + 1) / 2);
        } else if (-107 <= value && value <= 107) return 1;
        else if (108 <= value && value <= 1131 || -1131 <= value && value <= -108) return 2;
        else if (-32768 <= value && value <= 32767) return 3;
        else return 5;
    }
    static encode(stream, value) {
        // if the value needs to be forced to the largest size (32 bit)
        // e.g. for unknown pointers, save the old value and set to 32768
        let val = Number(value);
        if (value.forceLarge) {
            stream.writeUInt8(29);
            return stream.writeInt32BE(val);
        } else if ((val | 0) !== val) {
            stream.writeUInt8(30);
            let str = "" + val;
            for(let i = 0; i < str.length; i += 2){
                let c1 = str[i];
                let n1 = $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP[c1] || +c1;
                if (i === str.length - 1) var n2 = $f77b592c17132d70$var$FLOAT_EOF;
                else {
                    let c2 = str[i + 1];
                    var n2 = $f77b592c17132d70$var$FLOAT_ENCODE_LOOKUP[c2] || +c2;
                }
                stream.writeUInt8(n1 << 4 | n2 & 15);
            }
            if (n2 !== $f77b592c17132d70$var$FLOAT_EOF) return stream.writeUInt8($f77b592c17132d70$var$FLOAT_EOF << 4);
        } else if (-107 <= val && val <= 107) return stream.writeUInt8(val + 139);
        else if (108 <= val && val <= 1131) {
            val -= 108;
            stream.writeUInt8((val >> 8) + 247);
            return stream.writeUInt8(val & 0xff);
        } else if (-1131 <= val && val <= -108) {
            val = -val - 108;
            stream.writeUInt8((val >> 8) + 251);
            return stream.writeUInt8(val & 0xff);
        } else if (-32768 <= val && val <= 32767) {
            stream.writeUInt8(28);
            return stream.writeInt16BE(val);
        } else {
            stream.writeUInt8(29);
            return stream.writeInt32BE(val);
        }
    }
}
class $efe622f40a9c35bd$export$2e2bcd8739ae039 {
    decodeOperands(type, stream, ret, operands) {
        if (Array.isArray(type)) return operands.map((op, i)=>this.decodeOperands(type[i], stream, ret, [
                op
            ]));
        else if (type.decode != null) return type.decode(stream, ret, operands);
        else switch(type){
            case "number":
            case "offset":
            case "sid":
                return operands[0];
            case "boolean":
                return !!operands[0];
            default:
                return operands;
        }
    }
    encodeOperands(type, stream, ctx, operands) {
        if (Array.isArray(type)) return operands.map((op, i)=>this.encodeOperands(type[i], stream, ctx, op)[0]);
        else if (type.encode != null) return type.encode(stream, operands, ctx);
        else if (typeof operands === "number") return [
            operands
        ];
        else if (typeof operands === "boolean") return [
            +operands
        ];
        else if (Array.isArray(operands)) return operands;
        else return [
            operands
        ];
    }
    decode(stream, parent) {
        let end = stream.pos + parent.length;
        let ret = {};
        let operands = [];
        // define hidden properties
        Object.defineProperties(ret, {
            parent: {
                value: parent
            },
            _startOffset: {
                value: stream.pos
            }
        });
        // fill in defaults
        for(let key in this.fields){
            let field = this.fields[key];
            ret[field[1]] = field[3];
        }
        while(stream.pos < end){
            let b = stream.readUInt8();
            if (b < 28) {
                if (b === 12) b = b << 8 | stream.readUInt8();
                let field = this.fields[b];
                if (!field) throw new Error(`Unknown operator ${b}`);
                let val = this.decodeOperands(field[2], stream, ret, operands);
                if (val != null) {
                    if (val instanceof (0, $elh9A$restructure.PropertyDescriptor)) Object.defineProperty(ret, field[1], val);
                    else ret[field[1]] = val;
                }
                operands = [];
            } else operands.push((0, $f77b592c17132d70$export$2e2bcd8739ae039).decode(stream, b));
        }
        return ret;
    }
    size(dict, parent, includePointers = true) {
        let ctx = {
            parent: parent,
            val: dict,
            pointerSize: 0,
            startOffset: parent.startOffset || 0
        };
        let len = 0;
        for(let k in this.fields){
            let field = this.fields[k];
            let val = dict[field[1]];
            if (val == null || (0, $parcel$interopDefault($elh9A$fastdeepequal))(val, field[3])) continue;
            let operands = this.encodeOperands(field[2], null, ctx, val);
            for (let op of operands)len += (0, $f77b592c17132d70$export$2e2bcd8739ae039).size(op);
            let key = Array.isArray(field[0]) ? field[0] : [
                field[0]
            ];
            len += key.length;
        }
        if (includePointers) len += ctx.pointerSize;
        return len;
    }
    encode(stream, dict, parent) {
        let ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent: parent,
            val: dict,
            pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
        for (let field of this.ops){
            let val = dict[field[1]];
            if (val == null || (0, $parcel$interopDefault($elh9A$fastdeepequal))(val, field[3])) continue;
            let operands = this.encodeOperands(field[2], stream, ctx, val);
            for (let op of operands)(0, $f77b592c17132d70$export$2e2bcd8739ae039).encode(stream, op);
            let key = Array.isArray(field[0]) ? field[0] : [
                field[0]
            ];
            for (let op of key)stream.writeUInt8(op);
        }
        let i = 0;
        while(i < ctx.pointers.length){
            let ptr = ctx.pointers[i++];
            ptr.type.encode(stream, ptr.val, ptr.parent);
        }
        return;
    }
    constructor(ops = []){
        this.ops = ops;
        this.fields = {};
        for (let field of ops){
            let key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
            this.fields[key] = field;
        }
    }
}
class $4aa1b0749c2770f8$export$2e2bcd8739ae039 extends $elh9A$restructure.Pointer {
    decode(stream, parent, operands) {
        this.offsetType = {
            decode: ()=>operands[0]
        };
        return super.decode(stream, parent, operands);
    }
    encode(stream, value, ctx) {
        if (!stream) {
            // compute the size (so ctx.pointerSize is correct)
            this.offsetType = {
                size: ()=>0
            };
            this.size(value, ctx);
            return [
                new $4aa1b0749c2770f8$var$Ptr(0)
            ];
        }
        let ptr = null;
        this.offsetType = {
            encode: (stream, val)=>ptr = val
        };
        super.encode(stream, value, ctx);
        return [
            new $4aa1b0749c2770f8$var$Ptr(ptr)
        ];
    }
    constructor(type, options = {}){
        if (options.type == null) options.type = "global";
        super(null, type, options);
    }
}
class $4aa1b0749c2770f8$var$Ptr {
    valueOf() {
        return this.val;
    }
    constructor(val){
        this.val = val;
        this.forceLarge = true;
    }
}
class $15a0cbb3d09cf7ee$var$CFFBlendOp {
    static decode(stream, parent, operands) {
        let numBlends = operands.pop();
        // TODO: actually blend. For now just consume the deltas
        // since we don't use any of the values anyway.
        while(operands.length > numBlends)operands.pop();
    }
}
var $15a0cbb3d09cf7ee$export$2e2bcd8739ae039 = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
    // key       name                    type                                          default
    [
        6,
        "BlueValues",
        "delta",
        null
    ],
    [
        7,
        "OtherBlues",
        "delta",
        null
    ],
    [
        8,
        "FamilyBlues",
        "delta",
        null
    ],
    [
        9,
        "FamilyOtherBlues",
        "delta",
        null
    ],
    [
        [
            12,
            9
        ],
        "BlueScale",
        "number",
        0.039625
    ],
    [
        [
            12,
            10
        ],
        "BlueShift",
        "number",
        7
    ],
    [
        [
            12,
            11
        ],
        "BlueFuzz",
        "number",
        1
    ],
    [
        10,
        "StdHW",
        "number",
        null
    ],
    [
        11,
        "StdVW",
        "number",
        null
    ],
    [
        [
            12,
            12
        ],
        "StemSnapH",
        "delta",
        null
    ],
    [
        [
            12,
            13
        ],
        "StemSnapV",
        "delta",
        null
    ],
    [
        [
            12,
            14
        ],
        "ForceBold",
        "boolean",
        false
    ],
    [
        [
            12,
            17
        ],
        "LanguageGroup",
        "number",
        0
    ],
    [
        [
            12,
            18
        ],
        "ExpansionFactor",
        "number",
        0.06
    ],
    [
        [
            12,
            19
        ],
        "initialRandomSeed",
        "number",
        0
    ],
    [
        20,
        "defaultWidthX",
        "number",
        0
    ],
    [
        21,
        "nominalWidthX",
        "number",
        0
    ],
    [
        22,
        "vsindex",
        "number",
        0
    ],
    [
        23,
        "blend",
        $15a0cbb3d09cf7ee$var$CFFBlendOp,
        null
    ],
    [
        19,
        "Subrs",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039), {
            type: "local"
        }),
        null
    ]
]);
// Automatically generated from Appendix A of the CFF specification; do
// not edit. Length should be 391.
var $860d3574d7fa3a51$export$2e2bcd8739ae039 = [
    ".notdef",
    "space",
    "exclam",
    "quotedbl",
    "numbersign",
    "dollar",
    "percent",
    "ampersand",
    "quoteright",
    "parenleft",
    "parenright",
    "asterisk",
    "plus",
    "comma",
    "hyphen",
    "period",
    "slash",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "colon",
    "semicolon",
    "less",
    "equal",
    "greater",
    "question",
    "at",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "bracketleft",
    "backslash",
    "bracketright",
    "asciicircum",
    "underscore",
    "quoteleft",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "braceleft",
    "bar",
    "braceright",
    "asciitilde",
    "exclamdown",
    "cent",
    "sterling",
    "fraction",
    "yen",
    "florin",
    "section",
    "currency",
    "quotesingle",
    "quotedblleft",
    "guillemotleft",
    "guilsinglleft",
    "guilsinglright",
    "fi",
    "fl",
    "endash",
    "dagger",
    "daggerdbl",
    "periodcentered",
    "paragraph",
    "bullet",
    "quotesinglbase",
    "quotedblbase",
    "quotedblright",
    "guillemotright",
    "ellipsis",
    "perthousand",
    "questiondown",
    "grave",
    "acute",
    "circumflex",
    "tilde",
    "macron",
    "breve",
    "dotaccent",
    "dieresis",
    "ring",
    "cedilla",
    "hungarumlaut",
    "ogonek",
    "caron",
    "emdash",
    "AE",
    "ordfeminine",
    "Lslash",
    "Oslash",
    "OE",
    "ordmasculine",
    "ae",
    "dotlessi",
    "lslash",
    "oslash",
    "oe",
    "germandbls",
    "onesuperior",
    "logicalnot",
    "mu",
    "trademark",
    "Eth",
    "onehalf",
    "plusminus",
    "Thorn",
    "onequarter",
    "divide",
    "brokenbar",
    "degree",
    "thorn",
    "threequarters",
    "twosuperior",
    "registered",
    "minus",
    "eth",
    "multiply",
    "threesuperior",
    "copyright",
    "Aacute",
    "Acircumflex",
    "Adieresis",
    "Agrave",
    "Aring",
    "Atilde",
    "Ccedilla",
    "Eacute",
    "Ecircumflex",
    "Edieresis",
    "Egrave",
    "Iacute",
    "Icircumflex",
    "Idieresis",
    "Igrave",
    "Ntilde",
    "Oacute",
    "Ocircumflex",
    "Odieresis",
    "Ograve",
    "Otilde",
    "Scaron",
    "Uacute",
    "Ucircumflex",
    "Udieresis",
    "Ugrave",
    "Yacute",
    "Ydieresis",
    "Zcaron",
    "aacute",
    "acircumflex",
    "adieresis",
    "agrave",
    "aring",
    "atilde",
    "ccedilla",
    "eacute",
    "ecircumflex",
    "edieresis",
    "egrave",
    "iacute",
    "icircumflex",
    "idieresis",
    "igrave",
    "ntilde",
    "oacute",
    "ocircumflex",
    "odieresis",
    "ograve",
    "otilde",
    "scaron",
    "uacute",
    "ucircumflex",
    "udieresis",
    "ugrave",
    "yacute",
    "ydieresis",
    "zcaron",
    "exclamsmall",
    "Hungarumlautsmall",
    "dollaroldstyle",
    "dollarsuperior",
    "ampersandsmall",
    "Acutesmall",
    "parenleftsuperior",
    "parenrightsuperior",
    "twodotenleader",
    "onedotenleader",
    "zerooldstyle",
    "oneoldstyle",
    "twooldstyle",
    "threeoldstyle",
    "fouroldstyle",
    "fiveoldstyle",
    "sixoldstyle",
    "sevenoldstyle",
    "eightoldstyle",
    "nineoldstyle",
    "commasuperior",
    "threequartersemdash",
    "periodsuperior",
    "questionsmall",
    "asuperior",
    "bsuperior",
    "centsuperior",
    "dsuperior",
    "esuperior",
    "isuperior",
    "lsuperior",
    "msuperior",
    "nsuperior",
    "osuperior",
    "rsuperior",
    "ssuperior",
    "tsuperior",
    "ff",
    "ffi",
    "ffl",
    "parenleftinferior",
    "parenrightinferior",
    "Circumflexsmall",
    "hyphensuperior",
    "Gravesmall",
    "Asmall",
    "Bsmall",
    "Csmall",
    "Dsmall",
    "Esmall",
    "Fsmall",
    "Gsmall",
    "Hsmall",
    "Ismall",
    "Jsmall",
    "Ksmall",
    "Lsmall",
    "Msmall",
    "Nsmall",
    "Osmall",
    "Psmall",
    "Qsmall",
    "Rsmall",
    "Ssmall",
    "Tsmall",
    "Usmall",
    "Vsmall",
    "Wsmall",
    "Xsmall",
    "Ysmall",
    "Zsmall",
    "colonmonetary",
    "onefitted",
    "rupiah",
    "Tildesmall",
    "exclamdownsmall",
    "centoldstyle",
    "Lslashsmall",
    "Scaronsmall",
    "Zcaronsmall",
    "Dieresissmall",
    "Brevesmall",
    "Caronsmall",
    "Dotaccentsmall",
    "Macronsmall",
    "figuredash",
    "hypheninferior",
    "Ogoneksmall",
    "Ringsmall",
    "Cedillasmall",
    "questiondownsmall",
    "oneeighth",
    "threeeighths",
    "fiveeighths",
    "seveneighths",
    "onethird",
    "twothirds",
    "zerosuperior",
    "foursuperior",
    "fivesuperior",
    "sixsuperior",
    "sevensuperior",
    "eightsuperior",
    "ninesuperior",
    "zeroinferior",
    "oneinferior",
    "twoinferior",
    "threeinferior",
    "fourinferior",
    "fiveinferior",
    "sixinferior",
    "seveninferior",
    "eightinferior",
    "nineinferior",
    "centinferior",
    "dollarinferior",
    "periodinferior",
    "commainferior",
    "Agravesmall",
    "Aacutesmall",
    "Acircumflexsmall",
    "Atildesmall",
    "Adieresissmall",
    "Aringsmall",
    "AEsmall",
    "Ccedillasmall",
    "Egravesmall",
    "Eacutesmall",
    "Ecircumflexsmall",
    "Edieresissmall",
    "Igravesmall",
    "Iacutesmall",
    "Icircumflexsmall",
    "Idieresissmall",
    "Ethsmall",
    "Ntildesmall",
    "Ogravesmall",
    "Oacutesmall",
    "Ocircumflexsmall",
    "Otildesmall",
    "Odieresissmall",
    "OEsmall",
    "Oslashsmall",
    "Ugravesmall",
    "Uacutesmall",
    "Ucircumflexsmall",
    "Udieresissmall",
    "Yacutesmall",
    "Thornsmall",
    "Ydieresissmall",
    "001.000",
    "001.001",
    "001.002",
    "001.003",
    "Black",
    "Bold",
    "Book",
    "Light",
    "Medium",
    "Regular",
    "Roman",
    "Semibold"
];
let $c4ffe47cba1d7f36$export$dee0027060fa13bd = [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "space",
    "exclam",
    "quotedbl",
    "numbersign",
    "dollar",
    "percent",
    "ampersand",
    "quoteright",
    "parenleft",
    "parenright",
    "asterisk",
    "plus",
    "comma",
    "hyphen",
    "period",
    "slash",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "colon",
    "semicolon",
    "less",
    "equal",
    "greater",
    "question",
    "at",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "bracketleft",
    "backslash",
    "bracketright",
    "asciicircum",
    "underscore",
    "quoteleft",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "braceleft",
    "bar",
    "braceright",
    "asciitilde",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "exclamdown",
    "cent",
    "sterling",
    "fraction",
    "yen",
    "florin",
    "section",
    "currency",
    "quotesingle",
    "quotedblleft",
    "guillemotleft",
    "guilsinglleft",
    "guilsinglright",
    "fi",
    "fl",
    "",
    "endash",
    "dagger",
    "daggerdbl",
    "periodcentered",
    "",
    "paragraph",
    "bullet",
    "quotesinglbase",
    "quotedblbase",
    "quotedblright",
    "guillemotright",
    "ellipsis",
    "perthousand",
    "",
    "questiondown",
    "",
    "grave",
    "acute",
    "circumflex",
    "tilde",
    "macron",
    "breve",
    "dotaccent",
    "dieresis",
    "",
    "ring",
    "cedilla",
    "",
    "hungarumlaut",
    "ogonek",
    "caron",
    "emdash",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "AE",
    "",
    "ordfeminine",
    "",
    "",
    "",
    "",
    "Lslash",
    "Oslash",
    "OE",
    "ordmasculine",
    "",
    "",
    "",
    "",
    "",
    "ae",
    "",
    "",
    "",
    "dotlessi",
    "",
    "",
    "lslash",
    "oslash",
    "oe",
    "germandbls"
];
let $c4ffe47cba1d7f36$export$4f58f497e14a53c3 = [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "space",
    "exclamsmall",
    "Hungarumlautsmall",
    "",
    "dollaroldstyle",
    "dollarsuperior",
    "ampersandsmall",
    "Acutesmall",
    "parenleftsuperior",
    "parenrightsuperior",
    "twodotenleader",
    "onedotenleader",
    "comma",
    "hyphen",
    "period",
    "fraction",
    "zerooldstyle",
    "oneoldstyle",
    "twooldstyle",
    "threeoldstyle",
    "fouroldstyle",
    "fiveoldstyle",
    "sixoldstyle",
    "sevenoldstyle",
    "eightoldstyle",
    "nineoldstyle",
    "colon",
    "semicolon",
    "commasuperior",
    "threequartersemdash",
    "periodsuperior",
    "questionsmall",
    "",
    "asuperior",
    "bsuperior",
    "centsuperior",
    "dsuperior",
    "esuperior",
    "",
    "",
    "isuperior",
    "",
    "",
    "lsuperior",
    "msuperior",
    "nsuperior",
    "osuperior",
    "",
    "",
    "rsuperior",
    "ssuperior",
    "tsuperior",
    "",
    "ff",
    "fi",
    "fl",
    "ffi",
    "ffl",
    "parenleftinferior",
    "",
    "parenrightinferior",
    "Circumflexsmall",
    "hyphensuperior",
    "Gravesmall",
    "Asmall",
    "Bsmall",
    "Csmall",
    "Dsmall",
    "Esmall",
    "Fsmall",
    "Gsmall",
    "Hsmall",
    "Ismall",
    "Jsmall",
    "Ksmall",
    "Lsmall",
    "Msmall",
    "Nsmall",
    "Osmall",
    "Psmall",
    "Qsmall",
    "Rsmall",
    "Ssmall",
    "Tsmall",
    "Usmall",
    "Vsmall",
    "Wsmall",
    "Xsmall",
    "Ysmall",
    "Zsmall",
    "colonmonetary",
    "onefitted",
    "rupiah",
    "Tildesmall",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "exclamdownsmall",
    "centoldstyle",
    "Lslashsmall",
    "",
    "",
    "Scaronsmall",
    "Zcaronsmall",
    "Dieresissmall",
    "Brevesmall",
    "Caronsmall",
    "",
    "Dotaccentsmall",
    "",
    "",
    "Macronsmall",
    "",
    "",
    "figuredash",
    "hypheninferior",
    "",
    "",
    "Ogoneksmall",
    "Ringsmall",
    "Cedillasmall",
    "",
    "",
    "",
    "onequarter",
    "onehalf",
    "threequarters",
    "questiondownsmall",
    "oneeighth",
    "threeeighths",
    "fiveeighths",
    "seveneighths",
    "onethird",
    "twothirds",
    "",
    "",
    "zerosuperior",
    "onesuperior",
    "twosuperior",
    "threesuperior",
    "foursuperior",
    "fivesuperior",
    "sixsuperior",
    "sevensuperior",
    "eightsuperior",
    "ninesuperior",
    "zeroinferior",
    "oneinferior",
    "twoinferior",
    "threeinferior",
    "fourinferior",
    "fiveinferior",
    "sixinferior",
    "seveninferior",
    "eightinferior",
    "nineinferior",
    "centinferior",
    "dollarinferior",
    "periodinferior",
    "commainferior",
    "Agravesmall",
    "Aacutesmall",
    "Acircumflexsmall",
    "Atildesmall",
    "Adieresissmall",
    "Aringsmall",
    "AEsmall",
    "Ccedillasmall",
    "Egravesmall",
    "Eacutesmall",
    "Ecircumflexsmall",
    "Edieresissmall",
    "Igravesmall",
    "Iacutesmall",
    "Icircumflexsmall",
    "Idieresissmall",
    "Ethsmall",
    "Ntildesmall",
    "Ogravesmall",
    "Oacutesmall",
    "Ocircumflexsmall",
    "Otildesmall",
    "Odieresissmall",
    "OEsmall",
    "Oslashsmall",
    "Ugravesmall",
    "Uacutesmall",
    "Ucircumflexsmall",
    "Udieresissmall",
    "Yacutesmall",
    "Thornsmall",
    "Ydieresissmall"
];
let $1e7c7c16984e4427$export$c33b50336c234f16 = [
    ".notdef",
    "space",
    "exclam",
    "quotedbl",
    "numbersign",
    "dollar",
    "percent",
    "ampersand",
    "quoteright",
    "parenleft",
    "parenright",
    "asterisk",
    "plus",
    "comma",
    "hyphen",
    "period",
    "slash",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "colon",
    "semicolon",
    "less",
    "equal",
    "greater",
    "question",
    "at",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "bracketleft",
    "backslash",
    "bracketright",
    "asciicircum",
    "underscore",
    "quoteleft",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "braceleft",
    "bar",
    "braceright",
    "asciitilde",
    "exclamdown",
    "cent",
    "sterling",
    "fraction",
    "yen",
    "florin",
    "section",
    "currency",
    "quotesingle",
    "quotedblleft",
    "guillemotleft",
    "guilsinglleft",
    "guilsinglright",
    "fi",
    "fl",
    "endash",
    "dagger",
    "daggerdbl",
    "periodcentered",
    "paragraph",
    "bullet",
    "quotesinglbase",
    "quotedblbase",
    "quotedblright",
    "guillemotright",
    "ellipsis",
    "perthousand",
    "questiondown",
    "grave",
    "acute",
    "circumflex",
    "tilde",
    "macron",
    "breve",
    "dotaccent",
    "dieresis",
    "ring",
    "cedilla",
    "hungarumlaut",
    "ogonek",
    "caron",
    "emdash",
    "AE",
    "ordfeminine",
    "Lslash",
    "Oslash",
    "OE",
    "ordmasculine",
    "ae",
    "dotlessi",
    "lslash",
    "oslash",
    "oe",
    "germandbls",
    "onesuperior",
    "logicalnot",
    "mu",
    "trademark",
    "Eth",
    "onehalf",
    "plusminus",
    "Thorn",
    "onequarter",
    "divide",
    "brokenbar",
    "degree",
    "thorn",
    "threequarters",
    "twosuperior",
    "registered",
    "minus",
    "eth",
    "multiply",
    "threesuperior",
    "copyright",
    "Aacute",
    "Acircumflex",
    "Adieresis",
    "Agrave",
    "Aring",
    "Atilde",
    "Ccedilla",
    "Eacute",
    "Ecircumflex",
    "Edieresis",
    "Egrave",
    "Iacute",
    "Icircumflex",
    "Idieresis",
    "Igrave",
    "Ntilde",
    "Oacute",
    "Ocircumflex",
    "Odieresis",
    "Ograve",
    "Otilde",
    "Scaron",
    "Uacute",
    "Ucircumflex",
    "Udieresis",
    "Ugrave",
    "Yacute",
    "Ydieresis",
    "Zcaron",
    "aacute",
    "acircumflex",
    "adieresis",
    "agrave",
    "aring",
    "atilde",
    "ccedilla",
    "eacute",
    "ecircumflex",
    "edieresis",
    "egrave",
    "iacute",
    "icircumflex",
    "idieresis",
    "igrave",
    "ntilde",
    "oacute",
    "ocircumflex",
    "odieresis",
    "ograve",
    "otilde",
    "scaron",
    "uacute",
    "ucircumflex",
    "udieresis",
    "ugrave",
    "yacute",
    "ydieresis",
    "zcaron"
];
let $1e7c7c16984e4427$export$3ed0f9e1fee8d489 = [
    ".notdef",
    "space",
    "exclamsmall",
    "Hungarumlautsmall",
    "dollaroldstyle",
    "dollarsuperior",
    "ampersandsmall",
    "Acutesmall",
    "parenleftsuperior",
    "parenrightsuperior",
    "twodotenleader",
    "onedotenleader",
    "comma",
    "hyphen",
    "period",
    "fraction",
    "zerooldstyle",
    "oneoldstyle",
    "twooldstyle",
    "threeoldstyle",
    "fouroldstyle",
    "fiveoldstyle",
    "sixoldstyle",
    "sevenoldstyle",
    "eightoldstyle",
    "nineoldstyle",
    "colon",
    "semicolon",
    "commasuperior",
    "threequartersemdash",
    "periodsuperior",
    "questionsmall",
    "asuperior",
    "bsuperior",
    "centsuperior",
    "dsuperior",
    "esuperior",
    "isuperior",
    "lsuperior",
    "msuperior",
    "nsuperior",
    "osuperior",
    "rsuperior",
    "ssuperior",
    "tsuperior",
    "ff",
    "fi",
    "fl",
    "ffi",
    "ffl",
    "parenleftinferior",
    "parenrightinferior",
    "Circumflexsmall",
    "hyphensuperior",
    "Gravesmall",
    "Asmall",
    "Bsmall",
    "Csmall",
    "Dsmall",
    "Esmall",
    "Fsmall",
    "Gsmall",
    "Hsmall",
    "Ismall",
    "Jsmall",
    "Ksmall",
    "Lsmall",
    "Msmall",
    "Nsmall",
    "Osmall",
    "Psmall",
    "Qsmall",
    "Rsmall",
    "Ssmall",
    "Tsmall",
    "Usmall",
    "Vsmall",
    "Wsmall",
    "Xsmall",
    "Ysmall",
    "Zsmall",
    "colonmonetary",
    "onefitted",
    "rupiah",
    "Tildesmall",
    "exclamdownsmall",
    "centoldstyle",
    "Lslashsmall",
    "Scaronsmall",
    "Zcaronsmall",
    "Dieresissmall",
    "Brevesmall",
    "Caronsmall",
    "Dotaccentsmall",
    "Macronsmall",
    "figuredash",
    "hypheninferior",
    "Ogoneksmall",
    "Ringsmall",
    "Cedillasmall",
    "onequarter",
    "onehalf",
    "threequarters",
    "questiondownsmall",
    "oneeighth",
    "threeeighths",
    "fiveeighths",
    "seveneighths",
    "onethird",
    "twothirds",
    "zerosuperior",
    "onesuperior",
    "twosuperior",
    "threesuperior",
    "foursuperior",
    "fivesuperior",
    "sixsuperior",
    "sevensuperior",
    "eightsuperior",
    "ninesuperior",
    "zeroinferior",
    "oneinferior",
    "twoinferior",
    "threeinferior",
    "fourinferior",
    "fiveinferior",
    "sixinferior",
    "seveninferior",
    "eightinferior",
    "nineinferior",
    "centinferior",
    "dollarinferior",
    "periodinferior",
    "commainferior",
    "Agravesmall",
    "Aacutesmall",
    "Acircumflexsmall",
    "Atildesmall",
    "Adieresissmall",
    "Aringsmall",
    "AEsmall",
    "Ccedillasmall",
    "Egravesmall",
    "Eacutesmall",
    "Ecircumflexsmall",
    "Edieresissmall",
    "Igravesmall",
    "Iacutesmall",
    "Icircumflexsmall",
    "Idieresissmall",
    "Ethsmall",
    "Ntildesmall",
    "Ogravesmall",
    "Oacutesmall",
    "Ocircumflexsmall",
    "Otildesmall",
    "Odieresissmall",
    "OEsmall",
    "Oslashsmall",
    "Ugravesmall",
    "Uacutesmall",
    "Ucircumflexsmall",
    "Udieresissmall",
    "Yacutesmall",
    "Thornsmall",
    "Ydieresissmall"
];
let $1e7c7c16984e4427$export$dc28be11139d4120 = [
    ".notdef",
    "space",
    "dollaroldstyle",
    "dollarsuperior",
    "parenleftsuperior",
    "parenrightsuperior",
    "twodotenleader",
    "onedotenleader",
    "comma",
    "hyphen",
    "period",
    "fraction",
    "zerooldstyle",
    "oneoldstyle",
    "twooldstyle",
    "threeoldstyle",
    "fouroldstyle",
    "fiveoldstyle",
    "sixoldstyle",
    "sevenoldstyle",
    "eightoldstyle",
    "nineoldstyle",
    "colon",
    "semicolon",
    "commasuperior",
    "threequartersemdash",
    "periodsuperior",
    "asuperior",
    "bsuperior",
    "centsuperior",
    "dsuperior",
    "esuperior",
    "isuperior",
    "lsuperior",
    "msuperior",
    "nsuperior",
    "osuperior",
    "rsuperior",
    "ssuperior",
    "tsuperior",
    "ff",
    "fi",
    "fl",
    "ffi",
    "ffl",
    "parenleftinferior",
    "parenrightinferior",
    "hyphensuperior",
    "colonmonetary",
    "onefitted",
    "rupiah",
    "centoldstyle",
    "figuredash",
    "hypheninferior",
    "onequarter",
    "onehalf",
    "threequarters",
    "oneeighth",
    "threeeighths",
    "fiveeighths",
    "seveneighths",
    "onethird",
    "twothirds",
    "zerosuperior",
    "onesuperior",
    "twosuperior",
    "threesuperior",
    "foursuperior",
    "fivesuperior",
    "sixsuperior",
    "sevensuperior",
    "eightsuperior",
    "ninesuperior",
    "zeroinferior",
    "oneinferior",
    "twoinferior",
    "threeinferior",
    "fourinferior",
    "fiveinferior",
    "sixinferior",
    "seveninferior",
    "eightinferior",
    "nineinferior",
    "centinferior",
    "dollarinferior",
    "periodinferior",
    "commainferior"
];
//########################
// Scripts and Languages #
//########################
let $b6dd765146ad212a$var$LangSysTable = new $elh9A$restructure.Struct({
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    reqFeatureIndex: $elh9A$restructure.uint16,
    featureCount: $elh9A$restructure.uint16,
    featureIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "featureCount")
});
let $b6dd765146ad212a$var$LangSysRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    langSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$LangSysTable, {
        type: "parent"
    })
});
let $b6dd765146ad212a$var$Script = new $elh9A$restructure.Struct({
    defaultLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$LangSysTable),
    count: $elh9A$restructure.uint16,
    langSysRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LangSysRecord, "count")
});
let $b6dd765146ad212a$var$ScriptRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$Script, {
        type: "parent"
    })
});
let $b6dd765146ad212a$export$3e15fc05ce864229 = new $elh9A$restructure.Array($b6dd765146ad212a$var$ScriptRecord, $elh9A$restructure.uint16);
//#######################
// Features and Lookups #
//#######################
let $b6dd765146ad212a$var$FeatureParams = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    nameID: $elh9A$restructure.uint16
});
let $b6dd765146ad212a$export$6e91cf7616333d5 = new $elh9A$restructure.Struct({
    featureParams: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$FeatureParams),
    lookupCount: $elh9A$restructure.uint16,
    lookupListIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "lookupCount")
});
let $b6dd765146ad212a$var$FeatureRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    feature: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$6e91cf7616333d5, {
        type: "parent"
    })
});
let $b6dd765146ad212a$export$aa18130def4b6cb4 = new $elh9A$restructure.Array($b6dd765146ad212a$var$FeatureRecord, $elh9A$restructure.uint16);
let $b6dd765146ad212a$var$LookupFlags = new $elh9A$restructure.Struct({
    markAttachmentType: $elh9A$restructure.uint8,
    flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        "rightToLeft",
        "ignoreBaseGlyphs",
        "ignoreLigatures",
        "ignoreMarks",
        "useMarkFilteringSet"
    ])
});
function $b6dd765146ad212a$export$df0008c6ff2da22a(SubTable) {
    let Lookup = new $elh9A$restructure.Struct({
        lookupType: $elh9A$restructure.uint16,
        flags: $b6dd765146ad212a$var$LookupFlags,
        subTableCount: $elh9A$restructure.uint16,
        subTables: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, SubTable), "subTableCount"),
        markFilteringSet: new $elh9A$restructure.Optional($elh9A$restructure.uint16, (t)=>t.flags.flags.useMarkFilteringSet)
    });
    return new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, Lookup), $elh9A$restructure.uint16);
}
//#################
// Coverage Table #
//#################
let $b6dd765146ad212a$var$RangeRecord = new $elh9A$restructure.Struct({
    start: $elh9A$restructure.uint16,
    end: $elh9A$restructure.uint16,
    startCoverageIndex: $elh9A$restructure.uint16
});
let $b6dd765146ad212a$export$17608c3f81a6111 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        glyphCount: $elh9A$restructure.uint16,
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
    },
    2: {
        rangeCount: $elh9A$restructure.uint16,
        rangeRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$RangeRecord, "rangeCount")
    }
});
//#########################
// Class Definition Table #
//#########################
let $b6dd765146ad212a$var$ClassRangeRecord = new $elh9A$restructure.Struct({
    start: $elh9A$restructure.uint16,
    end: $elh9A$restructure.uint16,
    class: $elh9A$restructure.uint16
});
let $b6dd765146ad212a$export$843d551fbbafef71 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        startGlyph: $elh9A$restructure.uint16,
        glyphCount: $elh9A$restructure.uint16,
        classValueArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
    },
    2: {
        classRangeCount: $elh9A$restructure.uint16,
        classRangeRecord: new $elh9A$restructure.Array($b6dd765146ad212a$var$ClassRangeRecord, "classRangeCount")
    }
});
let $b6dd765146ad212a$export$8215d14a63d9fb10 = new $elh9A$restructure.Struct({
    a: $elh9A$restructure.uint16,
    b: $elh9A$restructure.uint16,
    deltaFormat: $elh9A$restructure.uint16
});
//#############################################
// Contextual Substitution/Positioning Tables #
//#############################################
let $b6dd765146ad212a$var$LookupRecord = new $elh9A$restructure.Struct({
    sequenceIndex: $elh9A$restructure.uint16,
    lookupListIndex: $elh9A$restructure.uint16
});
let $b6dd765146ad212a$var$Rule = new $elh9A$restructure.Struct({
    glyphCount: $elh9A$restructure.uint16,
    lookupCount: $elh9A$restructure.uint16,
    input: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.glyphCount - 1),
    lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
});
let $b6dd765146ad212a$var$RuleSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$Rule), $elh9A$restructure.uint16);
let $b6dd765146ad212a$var$ClassRule = new $elh9A$restructure.Struct({
    glyphCount: $elh9A$restructure.uint16,
    lookupCount: $elh9A$restructure.uint16,
    classes: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.glyphCount - 1),
    lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
});
let $b6dd765146ad212a$var$ClassSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ClassRule), $elh9A$restructure.uint16);
let $b6dd765146ad212a$export$841858b892ce1f4c = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        ruleSetCount: $elh9A$restructure.uint16,
        ruleSets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$RuleSet), "ruleSetCount")
    },
    2: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        classDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        classSetCnt: $elh9A$restructure.uint16,
        classSet: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ClassSet), "classSetCnt")
    },
    3: {
        glyphCount: $elh9A$restructure.uint16,
        lookupCount: $elh9A$restructure.uint16,
        coverages: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "glyphCount"),
        lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
    }
});
//######################################################
// Chaining Contextual Substitution/Positioning Tables #
//######################################################
let $b6dd765146ad212a$var$ChainRule = new $elh9A$restructure.Struct({
    backtrackGlyphCount: $elh9A$restructure.uint16,
    backtrack: new $elh9A$restructure.Array($elh9A$restructure.uint16, "backtrackGlyphCount"),
    inputGlyphCount: $elh9A$restructure.uint16,
    input: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.inputGlyphCount - 1),
    lookaheadGlyphCount: $elh9A$restructure.uint16,
    lookahead: new $elh9A$restructure.Array($elh9A$restructure.uint16, "lookaheadGlyphCount"),
    lookupCount: $elh9A$restructure.uint16,
    lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
});
let $b6dd765146ad212a$var$ChainRuleSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRule), $elh9A$restructure.uint16);
let $b6dd765146ad212a$export$5e6d09e6861162f6 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        chainCount: $elh9A$restructure.uint16,
        chainRuleSets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRuleSet), "chainCount")
    },
    2: {
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111),
        backtrackClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        inputClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        lookaheadClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$843d551fbbafef71),
        chainCount: $elh9A$restructure.uint16,
        chainClassSet: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$var$ChainRuleSet), "chainCount")
    },
    3: {
        backtrackGlyphCount: $elh9A$restructure.uint16,
        backtrackCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "backtrackGlyphCount"),
        inputGlyphCount: $elh9A$restructure.uint16,
        inputCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "inputGlyphCount"),
        lookaheadGlyphCount: $elh9A$restructure.uint16,
        lookaheadCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b6dd765146ad212a$export$17608c3f81a6111), "lookaheadGlyphCount"),
        lookupCount: $elh9A$restructure.uint16,
        lookupRecords: new $elh9A$restructure.Array($b6dd765146ad212a$var$LookupRecord, "lookupCount")
    }
});
/*******************
 * Variation Store *
 *******************/ let $2e4adcda047b3383$var$F2DOT14 = new $elh9A$restructure.Fixed(16, "BE", 14);
let $2e4adcda047b3383$var$RegionAxisCoordinates = new $elh9A$restructure.Struct({
    startCoord: $2e4adcda047b3383$var$F2DOT14,
    peakCoord: $2e4adcda047b3383$var$F2DOT14,
    endCoord: $2e4adcda047b3383$var$F2DOT14
});
let $2e4adcda047b3383$var$VariationRegionList = new $elh9A$restructure.Struct({
    axisCount: $elh9A$restructure.uint16,
    regionCount: $elh9A$restructure.uint16,
    variationRegions: new $elh9A$restructure.Array(new $elh9A$restructure.Array($2e4adcda047b3383$var$RegionAxisCoordinates, "axisCount"), "regionCount")
});
let $2e4adcda047b3383$var$DeltaSet = new $elh9A$restructure.Struct({
    shortDeltas: new $elh9A$restructure.Array($elh9A$restructure.int16, (t)=>t.parent.shortDeltaCount),
    regionDeltas: new $elh9A$restructure.Array($elh9A$restructure.int8, (t)=>t.parent.regionIndexCount - t.parent.shortDeltaCount),
    deltas: (t)=>t.shortDeltas.concat(t.regionDeltas)
});
let $2e4adcda047b3383$var$ItemVariationData = new $elh9A$restructure.Struct({
    itemCount: $elh9A$restructure.uint16,
    shortDeltaCount: $elh9A$restructure.uint16,
    regionIndexCount: $elh9A$restructure.uint16,
    regionIndexes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "regionIndexCount"),
    deltaSets: new $elh9A$restructure.Array($2e4adcda047b3383$var$DeltaSet, "itemCount")
});
let $2e4adcda047b3383$export$fe1b122a2710f241 = new $elh9A$restructure.Struct({
    format: $elh9A$restructure.uint16,
    variationRegionList: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$VariationRegionList),
    variationDataCount: $elh9A$restructure.uint16,
    itemVariationData: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ItemVariationData), "variationDataCount")
});
/**********************
 * Feature Variations *
 **********************/ let $2e4adcda047b3383$var$ConditionTable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        axisIndex: $elh9A$restructure.uint16,
        axisIndex: $elh9A$restructure.uint16,
        filterRangeMinValue: $2e4adcda047b3383$var$F2DOT14,
        filterRangeMaxValue: $2e4adcda047b3383$var$F2DOT14
    }
});
let $2e4adcda047b3383$var$ConditionSet = new $elh9A$restructure.Struct({
    conditionCount: $elh9A$restructure.uint16,
    conditionTable: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ConditionTable), "conditionCount")
});
let $2e4adcda047b3383$var$FeatureTableSubstitutionRecord = new $elh9A$restructure.Struct({
    featureIndex: $elh9A$restructure.uint16,
    alternateFeatureTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $b6dd765146ad212a$export$6e91cf7616333d5), {
        type: "parent"
    })
});
let $2e4adcda047b3383$var$FeatureTableSubstitution = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    substitutionCount: $elh9A$restructure.uint16,
    substitutions: new $elh9A$restructure.Array($2e4adcda047b3383$var$FeatureTableSubstitutionRecord, "substitutionCount")
});
let $2e4adcda047b3383$var$FeatureVariationRecord = new $elh9A$restructure.Struct({
    conditionSet: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$ConditionSet, {
        type: "parent"
    }),
    featureTableSubstitution: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $2e4adcda047b3383$var$FeatureTableSubstitution, {
        type: "parent"
    })
});
let $2e4adcda047b3383$export$441b70b7971dd419 = new $elh9A$restructure.Struct({
    majorVersion: $elh9A$restructure.uint16,
    minorVersion: $elh9A$restructure.uint16,
    featureVariationRecordCount: $elh9A$restructure.uint32,
    featureVariationRecords: new $elh9A$restructure.Array($2e4adcda047b3383$var$FeatureVariationRecord, "featureVariationRecordCount")
});
// Checks if an operand is an index of a predefined value,
// otherwise delegates to the provided type.
class $5b547cf9e5da519b$var$PredefinedOp {
    decode(stream, parent, operands) {
        if (this.predefinedOps[operands[0]]) return this.predefinedOps[operands[0]];
        return this.type.decode(stream, parent, operands);
    }
    size(value, ctx) {
        return this.type.size(value, ctx);
    }
    encode(stream, value, ctx) {
        let index = this.predefinedOps.indexOf(value);
        if (index !== -1) return index;
        return this.type.encode(stream, value, ctx);
    }
    constructor(predefinedOps, type){
        this.predefinedOps = predefinedOps;
        this.type = type;
    }
}
class $5b547cf9e5da519b$var$CFFEncodingVersion extends $elh9A$restructure.Number {
    decode(stream) {
        return $elh9A$restructure.uint8.decode(stream) & 0x7f;
    }
    constructor(){
        super("UInt8");
    }
}
let $5b547cf9e5da519b$var$Range1 = new $elh9A$restructure.Struct({
    first: $elh9A$restructure.uint16,
    nLeft: $elh9A$restructure.uint8
});
let $5b547cf9e5da519b$var$Range2 = new $elh9A$restructure.Struct({
    first: $elh9A$restructure.uint16,
    nLeft: $elh9A$restructure.uint16
});
let $5b547cf9e5da519b$var$CFFCustomEncoding = new $elh9A$restructure.VersionedStruct(new $5b547cf9e5da519b$var$CFFEncodingVersion(), {
    0: {
        nCodes: $elh9A$restructure.uint8,
        codes: new $elh9A$restructure.Array($elh9A$restructure.uint8, "nCodes")
    },
    1: {
        nRanges: $elh9A$restructure.uint8,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$Range1, "nRanges")
    }
});
let $5b547cf9e5da519b$var$CFFEncoding = new $5b547cf9e5da519b$var$PredefinedOp([
    (0, $c4ffe47cba1d7f36$export$dee0027060fa13bd),
    (0, $c4ffe47cba1d7f36$export$4f58f497e14a53c3)
], new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFCustomEncoding, {
    lazy: true
}));
// Decodes an array of ranges until the total
// length is equal to the provided length.
class $5b547cf9e5da519b$var$RangeArray extends $elh9A$restructure.Array {
    decode(stream, parent) {
        let length = (0, $elh9A$restructure.resolveLength)(this.length, stream, parent);
        let count = 0;
        let res = [];
        while(count < length){
            let range = this.type.decode(stream, parent);
            range.offset = count;
            count += range.nLeft + 1;
            res.push(range);
        }
        return res;
    }
}
let $5b547cf9e5da519b$var$CFFCustomCharset = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint8, {
    0: {
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.parent.CharStrings.length - 1)
    },
    1: {
        ranges: new $5b547cf9e5da519b$var$RangeArray($5b547cf9e5da519b$var$Range1, (t)=>t.parent.CharStrings.length - 1)
    },
    2: {
        ranges: new $5b547cf9e5da519b$var$RangeArray($5b547cf9e5da519b$var$Range2, (t)=>t.parent.CharStrings.length - 1)
    }
});
let $5b547cf9e5da519b$var$CFFCharset = new $5b547cf9e5da519b$var$PredefinedOp([
    (0, $1e7c7c16984e4427$export$c33b50336c234f16),
    (0, $1e7c7c16984e4427$export$3ed0f9e1fee8d489),
    (0, $1e7c7c16984e4427$export$dc28be11139d4120)
], new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFCustomCharset, {
    lazy: true
}));
let $5b547cf9e5da519b$var$FDRange3 = new $elh9A$restructure.Struct({
    first: $elh9A$restructure.uint16,
    fd: $elh9A$restructure.uint8
});
let $5b547cf9e5da519b$var$FDRange4 = new $elh9A$restructure.Struct({
    first: $elh9A$restructure.uint32,
    fd: $elh9A$restructure.uint16
});
let $5b547cf9e5da519b$var$FDSelect = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint8, {
    0: {
        fds: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t)=>t.parent.CharStrings.length)
    },
    3: {
        nRanges: $elh9A$restructure.uint16,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$FDRange3, "nRanges"),
        sentinel: $elh9A$restructure.uint16
    },
    4: {
        nRanges: $elh9A$restructure.uint32,
        ranges: new $elh9A$restructure.Array($5b547cf9e5da519b$var$FDRange4, "nRanges"),
        sentinel: $elh9A$restructure.uint32
    }
});
let $5b547cf9e5da519b$var$ptr = new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)((0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039));
class $5b547cf9e5da519b$var$CFFPrivateOp {
    decode(stream, parent, operands) {
        parent.length = operands[0];
        return $5b547cf9e5da519b$var$ptr.decode(stream, parent, [
            operands[1]
        ]);
    }
    size(dict, ctx) {
        return [
            (0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039).size(dict, ctx, false),
            $5b547cf9e5da519b$var$ptr.size(dict, ctx)[0]
        ];
    }
    encode(stream, dict, ctx) {
        return [
            (0, $15a0cbb3d09cf7ee$export$2e2bcd8739ae039).size(dict, ctx, false),
            $5b547cf9e5da519b$var$ptr.encode(stream, dict, ctx)[0]
        ];
    }
}
let $5b547cf9e5da519b$var$FontDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
    // key       name                   type(s)                                 default
    [
        18,
        "Private",
        new $5b547cf9e5da519b$var$CFFPrivateOp,
        null
    ],
    [
        [
            12,
            38
        ],
        "FontName",
        "sid",
        null
    ],
    [
        [
            12,
            7
        ],
        "FontMatrix",
        "array",
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        [
            12,
            5
        ],
        "PaintType",
        "number",
        0
    ]
]);
let $5b547cf9e5da519b$var$CFFTopDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
    // key       name                   type(s)                                 default
    [
        [
            12,
            30
        ],
        "ROS",
        [
            "sid",
            "sid",
            "number"
        ],
        null
    ],
    [
        0,
        "version",
        "sid",
        null
    ],
    [
        1,
        "Notice",
        "sid",
        null
    ],
    [
        [
            12,
            0
        ],
        "Copyright",
        "sid",
        null
    ],
    [
        2,
        "FullName",
        "sid",
        null
    ],
    [
        3,
        "FamilyName",
        "sid",
        null
    ],
    [
        4,
        "Weight",
        "sid",
        null
    ],
    [
        [
            12,
            1
        ],
        "isFixedPitch",
        "boolean",
        false
    ],
    [
        [
            12,
            2
        ],
        "ItalicAngle",
        "number",
        0
    ],
    [
        [
            12,
            3
        ],
        "UnderlinePosition",
        "number",
        -100
    ],
    [
        [
            12,
            4
        ],
        "UnderlineThickness",
        "number",
        50
    ],
    [
        [
            12,
            5
        ],
        "PaintType",
        "number",
        0
    ],
    [
        [
            12,
            6
        ],
        "CharstringType",
        "number",
        2
    ],
    [
        [
            12,
            7
        ],
        "FontMatrix",
        "array",
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        13,
        "UniqueID",
        "number",
        null
    ],
    [
        5,
        "FontBBox",
        "array",
        [
            0,
            0,
            0,
            0
        ]
    ],
    [
        [
            12,
            8
        ],
        "StrokeWidth",
        "number",
        0
    ],
    [
        14,
        "XUID",
        "array",
        null
    ],
    [
        15,
        "charset",
        $5b547cf9e5da519b$var$CFFCharset,
        (0, $1e7c7c16984e4427$export$c33b50336c234f16)
    ],
    [
        16,
        "Encoding",
        $5b547cf9e5da519b$var$CFFEncoding,
        (0, $c4ffe47cba1d7f36$export$dee0027060fa13bd)
    ],
    [
        17,
        "CharStrings",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)),
        null
    ],
    [
        18,
        "Private",
        new $5b547cf9e5da519b$var$CFFPrivateOp,
        null
    ],
    [
        [
            12,
            20
        ],
        "SyntheticBase",
        "number",
        null
    ],
    [
        [
            12,
            21
        ],
        "PostScript",
        "sid",
        null
    ],
    [
        [
            12,
            22
        ],
        "BaseFontName",
        "sid",
        null
    ],
    [
        [
            12,
            23
        ],
        "BaseFontBlend",
        "delta",
        null
    ],
    // CID font specific
    [
        [
            12,
            31
        ],
        "CIDFontVersion",
        "number",
        0
    ],
    [
        [
            12,
            32
        ],
        "CIDFontRevision",
        "number",
        0
    ],
    [
        [
            12,
            33
        ],
        "CIDFontType",
        "number",
        0
    ],
    [
        [
            12,
            34
        ],
        "CIDCount",
        "number",
        8720
    ],
    [
        [
            12,
            35
        ],
        "UIDBase",
        "number",
        null
    ],
    [
        [
            12,
            37
        ],
        "FDSelect",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FDSelect),
        null
    ],
    [
        [
            12,
            36
        ],
        "FDArray",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FontDict)),
        null
    ],
    [
        [
            12,
            38
        ],
        "FontName",
        "sid",
        null
    ]
]);
let $5b547cf9e5da519b$var$VariationStore = new $elh9A$restructure.Struct({
    length: $elh9A$restructure.uint16,
    itemVariationStore: (0, $2e4adcda047b3383$export$fe1b122a2710f241)
});
let $5b547cf9e5da519b$var$CFF2TopDict = new (0, $efe622f40a9c35bd$export$2e2bcd8739ae039)([
    [
        [
            12,
            7
        ],
        "FontMatrix",
        "array",
        [
            0.001,
            0,
            0,
            0.001,
            0,
            0
        ]
    ],
    [
        17,
        "CharStrings",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)),
        null
    ],
    [
        [
            12,
            37
        ],
        "FDSelect",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FDSelect),
        null
    ],
    [
        [
            12,
            36
        ],
        "FDArray",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)(new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$FontDict)),
        null
    ],
    [
        24,
        "vstore",
        new (0, $4aa1b0749c2770f8$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$VariationStore),
        null
    ],
    [
        25,
        "maxstack",
        "number",
        193
    ]
]);
let $5b547cf9e5da519b$var$CFFTop = new $elh9A$restructure.VersionedStruct($elh9A$restructure.fixed16, {
    1: {
        hdrSize: $elh9A$restructure.uint8,
        offSize: $elh9A$restructure.uint8,
        nameIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)(new $elh9A$restructure.String("length")),
        topDictIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)($5b547cf9e5da519b$var$CFFTopDict),
        stringIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)(new $elh9A$restructure.String("length")),
        globalSubrIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)
    },
    2: {
        hdrSize: $elh9A$restructure.uint8,
        length: $elh9A$restructure.uint16,
        topDict: $5b547cf9e5da519b$var$CFF2TopDict,
        globalSubrIndex: new (0, $9eaea3754914a290$export$2e2bcd8739ae039)
    }
});
var $5b547cf9e5da519b$export$2e2bcd8739ae039 = $5b547cf9e5da519b$var$CFFTop;
class $f717432b360040c7$var$CFFFont {
    static decode(stream) {
        return new $f717432b360040c7$var$CFFFont(stream);
    }
    decode() {
        let start = this.stream.pos;
        let top = (0, $5b547cf9e5da519b$export$2e2bcd8739ae039).decode(this.stream);
        for(let key in top){
            let val = top[key];
            this[key] = val;
        }
        if (this.version < 2) {
            if (this.topDictIndex.length !== 1) throw new Error("Only a single font is allowed in CFF");
            this.topDict = this.topDictIndex[0];
        }
        this.isCIDFont = this.topDict.ROS != null;
        return this;
    }
    string(sid) {
        if (this.version >= 2) return null;
        if (sid < (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length) return (0, $860d3574d7fa3a51$export$2e2bcd8739ae039)[sid];
        return this.stringIndex[sid - (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length];
    }
    get postscriptName() {
        if (this.version < 2) return this.nameIndex[0];
        return null;
    }
    get fullName() {
        return this.string(this.topDict.FullName);
    }
    get familyName() {
        return this.string(this.topDict.FamilyName);
    }
    getCharString(glyph) {
        this.stream.pos = this.topDict.CharStrings[glyph].offset;
        return this.stream.readBuffer(this.topDict.CharStrings[glyph].length);
    }
    getGlyphName(gid) {
        // CFF2 glyph names are in the post table.
        if (this.version >= 2) return null;
        // CID-keyed fonts don't have glyph names
        if (this.isCIDFont) return null;
        let { charset: charset } = this.topDict;
        if (Array.isArray(charset)) return charset[gid];
        if (gid === 0) return ".notdef";
        gid -= 1;
        switch(charset.version){
            case 0:
                return this.string(charset.glyphs[gid]);
            case 1:
            case 2:
                for(let i = 0; i < charset.ranges.length; i++){
                    let range = charset.ranges[i];
                    if (range.offset <= gid && gid <= range.offset + range.nLeft) return this.string(range.first + (gid - range.offset));
                }
                break;
        }
        return null;
    }
    fdForGlyph(gid) {
        if (!this.topDict.FDSelect) return null;
        switch(this.topDict.FDSelect.version){
            case 0:
                return this.topDict.FDSelect.fds[gid];
            case 3:
            case 4:
                let { ranges: ranges } = this.topDict.FDSelect;
                let low = 0;
                let high = ranges.length - 1;
                while(low <= high){
                    let mid = low + high >> 1;
                    if (gid < ranges[mid].first) high = mid - 1;
                    else if (mid < high && gid >= ranges[mid + 1].first) low = mid + 1;
                    else return ranges[mid].fd;
                }
            default:
                throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
        }
    }
    privateDictForGlyph(gid) {
        if (this.topDict.FDSelect) {
            let fd = this.fdForGlyph(gid);
            if (this.topDict.FDArray[fd]) return this.topDict.FDArray[fd].Private;
            return null;
        }
        if (this.version < 2) return this.topDict.Private;
        return this.topDict.FDArray[0].Private;
    }
    constructor(stream){
        this.stream = stream;
        this.decode();
    }
}
var $f717432b360040c7$export$2e2bcd8739ae039 = $f717432b360040c7$var$CFFFont;
let $8cb7ae73ed7aa7d8$var$VerticalOrigin = new $elh9A$restructure.Struct({
    glyphIndex: $elh9A$restructure.uint16,
    vertOriginY: $elh9A$restructure.int16
});
var $8cb7ae73ed7aa7d8$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    majorVersion: $elh9A$restructure.uint16,
    minorVersion: $elh9A$restructure.uint16,
    defaultVertOriginY: $elh9A$restructure.int16,
    numVertOriginYMetrics: $elh9A$restructure.uint16,
    metrics: new $elh9A$restructure.Array($8cb7ae73ed7aa7d8$var$VerticalOrigin, "numVertOriginYMetrics")
});
let $20e0c7bbecb76d75$export$16b227cb15d716a0 = new $elh9A$restructure.Struct({
    height: $elh9A$restructure.uint8,
    width: $elh9A$restructure.uint8,
    horiBearingX: $elh9A$restructure.int8,
    horiBearingY: $elh9A$restructure.int8,
    horiAdvance: $elh9A$restructure.uint8,
    vertBearingX: $elh9A$restructure.int8,
    vertBearingY: $elh9A$restructure.int8,
    vertAdvance: $elh9A$restructure.uint8
});
let $20e0c7bbecb76d75$export$62c53e75f69bfe12 = new $elh9A$restructure.Struct({
    height: $elh9A$restructure.uint8,
    width: $elh9A$restructure.uint8,
    bearingX: $elh9A$restructure.int8,
    bearingY: $elh9A$restructure.int8,
    advance: $elh9A$restructure.uint8
});
let $20e0c7bbecb76d75$var$EBDTComponent = new $elh9A$restructure.Struct({
    glyph: $elh9A$restructure.uint16,
    xOffset: $elh9A$restructure.int8,
    yOffset: $elh9A$restructure.int8
});
class $20e0c7bbecb76d75$var$ByteAligned {
}
class $20e0c7bbecb76d75$var$BitAligned {
}
let $20e0c7bbecb76d75$export$f1f5ddeb20d14f = new $elh9A$restructure.VersionedStruct("version", {
    1: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        data: $20e0c7bbecb76d75$var$ByteAligned
    },
    2: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        data: $20e0c7bbecb76d75$var$BitAligned
    },
    // format 3 is deprecated
    // format 4 is not supported by Microsoft
    5: {
        data: $20e0c7bbecb76d75$var$BitAligned
    },
    6: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        data: $20e0c7bbecb76d75$var$ByteAligned
    },
    7: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        data: $20e0c7bbecb76d75$var$BitAligned
    },
    8: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        pad: new $elh9A$restructure.Reserved($elh9A$restructure.uint8),
        numComponents: $elh9A$restructure.uint16,
        components: new $elh9A$restructure.Array($20e0c7bbecb76d75$var$EBDTComponent, "numComponents")
    },
    9: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        pad: new $elh9A$restructure.Reserved($elh9A$restructure.uint8),
        numComponents: $elh9A$restructure.uint16,
        components: new $elh9A$restructure.Array($20e0c7bbecb76d75$var$EBDTComponent, "numComponents")
    },
    17: {
        metrics: $20e0c7bbecb76d75$export$62c53e75f69bfe12,
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
    },
    18: {
        metrics: $20e0c7bbecb76d75$export$16b227cb15d716a0,
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
    },
    19: {
        dataLen: $elh9A$restructure.uint32,
        data: new $elh9A$restructure.Buffer("dataLen")
    }
});
let $035bb95c0cdb1f6d$var$SBitLineMetrics = new $elh9A$restructure.Struct({
    ascender: $elh9A$restructure.int8,
    descender: $elh9A$restructure.int8,
    widthMax: $elh9A$restructure.uint8,
    caretSlopeNumerator: $elh9A$restructure.int8,
    caretSlopeDenominator: $elh9A$restructure.int8,
    caretOffset: $elh9A$restructure.int8,
    minOriginSB: $elh9A$restructure.int8,
    minAdvanceSB: $elh9A$restructure.int8,
    maxBeforeBL: $elh9A$restructure.int8,
    minAfterBL: $elh9A$restructure.int8,
    pad: new $elh9A$restructure.Reserved($elh9A$restructure.int8, 2)
});
let $035bb95c0cdb1f6d$var$CodeOffsetPair = new $elh9A$restructure.Struct({
    glyphCode: $elh9A$restructure.uint16,
    offset: $elh9A$restructure.uint16
});
let $035bb95c0cdb1f6d$var$IndexSubtable = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    header: {
        imageFormat: $elh9A$restructure.uint16,
        imageDataOffset: $elh9A$restructure.uint32
    },
    1: {
        offsetArray: new $elh9A$restructure.Array($elh9A$restructure.uint32, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)
    },
    2: {
        imageSize: $elh9A$restructure.uint32,
        bigMetrics: (0, $20e0c7bbecb76d75$export$16b227cb15d716a0)
    },
    3: {
        offsetArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)
    },
    4: {
        numGlyphs: $elh9A$restructure.uint32,
        glyphArray: new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$CodeOffsetPair, (t)=>t.numGlyphs + 1)
    },
    5: {
        imageSize: $elh9A$restructure.uint32,
        bigMetrics: (0, $20e0c7bbecb76d75$export$16b227cb15d716a0),
        numGlyphs: $elh9A$restructure.uint32,
        glyphCodeArray: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numGlyphs")
    }
});
let $035bb95c0cdb1f6d$var$IndexSubtableArray = new $elh9A$restructure.Struct({
    firstGlyphIndex: $elh9A$restructure.uint16,
    lastGlyphIndex: $elh9A$restructure.uint16,
    subtable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $035bb95c0cdb1f6d$var$IndexSubtable)
});
let $035bb95c0cdb1f6d$var$BitmapSizeTable = new $elh9A$restructure.Struct({
    indexSubTableArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$IndexSubtableArray, 1), {
        type: "parent"
    }),
    indexTablesSize: $elh9A$restructure.uint32,
    numberOfIndexSubTables: $elh9A$restructure.uint32,
    colorRef: $elh9A$restructure.uint32,
    hori: $035bb95c0cdb1f6d$var$SBitLineMetrics,
    vert: $035bb95c0cdb1f6d$var$SBitLineMetrics,
    startGlyphIndex: $elh9A$restructure.uint16,
    endGlyphIndex: $elh9A$restructure.uint16,
    ppemX: $elh9A$restructure.uint8,
    ppemY: $elh9A$restructure.uint8,
    bitDepth: $elh9A$restructure.uint8,
    flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        "horizontal",
        "vertical"
    ])
});
var $035bb95c0cdb1f6d$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint32,
    numSizes: $elh9A$restructure.uint32,
    sizes: new $elh9A$restructure.Array($035bb95c0cdb1f6d$var$BitmapSizeTable, "numSizes")
});
let $73d13900b55a3c0c$var$ImageTable = new $elh9A$restructure.Struct({
    ppem: $elh9A$restructure.uint16,
    resolution: $elh9A$restructure.uint16,
    imageOffsets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void"), (t)=>t.parent.parent.maxp.numGlyphs + 1)
});
var // It includes several image tables with images for each bitmap glyph
// of several different sizes.
$73d13900b55a3c0c$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    flags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "renderOutlines"
    ]),
    numImgTables: $elh9A$restructure.uint32,
    imageTables: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $73d13900b55a3c0c$var$ImageTable), "numImgTables")
});
let $97f6b8be3a347a8f$var$LayerRecord = new $elh9A$restructure.Struct({
    gid: $elh9A$restructure.uint16,
    paletteIndex: $elh9A$restructure.uint16 // Index value to use in the appropriate palette. This value must
}); // be less than numPaletteEntries in the CPAL table, except for
// the special case noted below. Each palette entry is 16 bits.
// A palette index of 0xFFFF is a special case indicating that
// the text foreground color should be used.
let $97f6b8be3a347a8f$var$BaseGlyphRecord = new $elh9A$restructure.Struct({
    gid: $elh9A$restructure.uint16,
    // and is not rendered for color.
    firstLayerIndex: $elh9A$restructure.uint16,
    // There will be numLayers consecutive entries for this base glyph.
    numLayers: $elh9A$restructure.uint16
});
var $97f6b8be3a347a8f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numBaseGlyphRecords: $elh9A$restructure.uint16,
    baseGlyphRecord: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($97f6b8be3a347a8f$var$BaseGlyphRecord, "numBaseGlyphRecords")),
    layerRecords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($97f6b8be3a347a8f$var$LayerRecord, "numLayerRecords"), {
        lazy: true
    }),
    numLayerRecords: $elh9A$restructure.uint16
});
let $16ca60ecbdee30ea$var$ColorRecord = new $elh9A$restructure.Struct({
    blue: $elh9A$restructure.uint8,
    green: $elh9A$restructure.uint8,
    red: $elh9A$restructure.uint8,
    alpha: $elh9A$restructure.uint8
});
var $16ca60ecbdee30ea$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    header: {
        numPaletteEntries: $elh9A$restructure.uint16,
        numPalettes: $elh9A$restructure.uint16,
        numColorRecords: $elh9A$restructure.uint16,
        colorRecords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($16ca60ecbdee30ea$var$ColorRecord, "numColorRecords")),
        colorRecordIndices: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPalettes")
    },
    0: {},
    1: {
        offsetPaletteTypeArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint32, "numPalettes")),
        offsetPaletteLabelArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPalettes")),
        offsetPaletteEntryLabelArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($elh9A$restructure.uint16, "numPaletteEntries"))
    }
});
let $7327e41706f9d5c7$var$BaseCoord = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        coordinate: $elh9A$restructure.int16 // X or Y value, in design units
    },
    2: {
        coordinate: $elh9A$restructure.int16,
        referenceGlyph: $elh9A$restructure.uint16,
        baseCoordPoint: $elh9A$restructure.uint16 // Index of contour point on the referenceGlyph
    },
    3: {
        coordinate: $elh9A$restructure.int16,
        deviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10)) // Device table for X or Y value
    }
});
let $7327e41706f9d5c7$var$BaseValues = new $elh9A$restructure.Struct({
    defaultIndex: $elh9A$restructure.uint16,
    baseCoordCount: $elh9A$restructure.uint16,
    baseCoords: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord), "baseCoordCount")
});
let $7327e41706f9d5c7$var$FeatMinMaxRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    minCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord, {
        type: "parent"
    }),
    maxCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord, {
        type: "parent"
    }) // May be NULL
});
let $7327e41706f9d5c7$var$MinMax = new $elh9A$restructure.Struct({
    minCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord),
    maxCoord: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseCoord),
    featMinMaxCount: $elh9A$restructure.uint16,
    featMinMaxRecords: new $elh9A$restructure.Array($7327e41706f9d5c7$var$FeatMinMaxRecord, "featMinMaxCount") // In alphabetical order
});
let $7327e41706f9d5c7$var$BaseLangSysRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    minMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$MinMax, {
        type: "parent"
    })
});
let $7327e41706f9d5c7$var$BaseScript = new $elh9A$restructure.Struct({
    baseValues: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseValues),
    defaultMinMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$MinMax),
    baseLangSysCount: $elh9A$restructure.uint16,
    baseLangSysRecords: new $elh9A$restructure.Array($7327e41706f9d5c7$var$BaseLangSysRecord, "baseLangSysCount") // in alphabetical order by BaseLangSysTag
});
let $7327e41706f9d5c7$var$BaseScriptRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseScript, {
        type: "parent"
    })
});
let $7327e41706f9d5c7$var$BaseScriptList = new $elh9A$restructure.Array($7327e41706f9d5c7$var$BaseScriptRecord, $elh9A$restructure.uint16);
// Array of 4-byte baseline identification tags-must be in alphabetical order
let $7327e41706f9d5c7$var$BaseTagList = new $elh9A$restructure.Array(new $elh9A$restructure.String(4), $elh9A$restructure.uint16);
let $7327e41706f9d5c7$var$Axis = new $elh9A$restructure.Struct({
    baseTagList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseTagList),
    baseScriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$BaseScriptList)
});
var $7327e41706f9d5c7$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
    header: {
        horizAxis: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$Axis),
        vertAxis: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7327e41706f9d5c7$var$Axis) // May be NULL
    },
    0x00010000: {},
    0x00010001: {
        itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241))
    }
});
let $7e48bbe9e5345664$var$AttachPoint = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
let $7e48bbe9e5345664$var$AttachList = new $elh9A$restructure.Struct({
    coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
    glyphCount: $elh9A$restructure.uint16,
    attachPoints: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$AttachPoint), "glyphCount")
});
let $7e48bbe9e5345664$var$CaretValue = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        coordinate: $elh9A$restructure.int16
    },
    2: {
        caretValuePoint: $elh9A$restructure.uint16
    },
    3: {
        coordinate: $elh9A$restructure.int16,
        deviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10))
    }
});
let $7e48bbe9e5345664$var$LigGlyph = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$CaretValue), $elh9A$restructure.uint16);
let $7e48bbe9e5345664$var$LigCaretList = new $elh9A$restructure.Struct({
    coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
    ligGlyphCount: $elh9A$restructure.uint16,
    ligGlyphs: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$LigGlyph), "ligGlyphCount")
});
let $7e48bbe9e5345664$var$MarkGlyphSetsDef = new $elh9A$restructure.Struct({
    markSetTableFormat: $elh9A$restructure.uint16,
    markSetCount: $elh9A$restructure.uint16,
    coverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "markSetCount")
});
var $7e48bbe9e5345664$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
    header: {
        glyphClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
        attachList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$AttachList),
        ligCaretList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$LigCaretList),
        markAttachClassDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71))
    },
    0x00010000: {},
    0x00010002: {
        markGlyphSetsDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$MarkGlyphSetsDef)
    },
    0x00010003: {
        markGlyphSetsDef: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $7e48bbe9e5345664$var$MarkGlyphSetsDef),
        itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241))
    }
});
let $b687332511a4da75$var$ValueFormat = new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
    "xPlacement",
    "yPlacement",
    "xAdvance",
    "yAdvance",
    "xPlaDevice",
    "yPlaDevice",
    "xAdvDevice",
    "yAdvDevice"
]);
let $b687332511a4da75$var$types = {
    xPlacement: $elh9A$restructure.int16,
    yPlacement: $elh9A$restructure.int16,
    xAdvance: $elh9A$restructure.int16,
    yAdvance: $elh9A$restructure.int16,
    xPlaDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx)=>ctx.rel
    }),
    yPlaDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx)=>ctx.rel
    }),
    xAdvDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx)=>ctx.rel
    }),
    yAdvDevice: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10), {
        type: "global",
        relativeTo: (ctx)=>ctx.rel
    })
};
class $b687332511a4da75$var$ValueRecord {
    buildStruct(parent) {
        let struct = parent;
        while(!struct[this.key] && struct.parent)struct = struct.parent;
        if (!struct[this.key]) return;
        let fields = {};
        fields.rel = ()=>struct._startOffset;
        let format = struct[this.key];
        for(let key in format)if (format[key]) fields[key] = $b687332511a4da75$var$types[key];
        return new $elh9A$restructure.Struct(fields);
    }
    size(val, ctx) {
        return this.buildStruct(ctx).size(val, ctx);
    }
    decode(stream, parent) {
        let res = this.buildStruct(parent).decode(stream, parent);
        delete res.rel;
        return res;
    }
    constructor(key = "valueFormat"){
        this.key = key;
    }
}
let $b687332511a4da75$var$PairValueRecord = new $elh9A$restructure.Struct({
    secondGlyph: $elh9A$restructure.uint16,
    value1: new $b687332511a4da75$var$ValueRecord("valueFormat1"),
    value2: new $b687332511a4da75$var$ValueRecord("valueFormat2")
});
let $b687332511a4da75$var$PairSet = new $elh9A$restructure.Array($b687332511a4da75$var$PairValueRecord, $elh9A$restructure.uint16);
let $b687332511a4da75$var$Class2Record = new $elh9A$restructure.Struct({
    value1: new $b687332511a4da75$var$ValueRecord("valueFormat1"),
    value2: new $b687332511a4da75$var$ValueRecord("valueFormat2")
});
let $b687332511a4da75$var$Anchor = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    1: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16
    },
    2: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16,
        anchorPoint: $elh9A$restructure.uint16
    },
    3: {
        xCoordinate: $elh9A$restructure.int16,
        yCoordinate: $elh9A$restructure.int16,
        xDeviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10)),
        yDeviceTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$8215d14a63d9fb10))
    }
});
let $b687332511a4da75$var$EntryExitRecord = new $elh9A$restructure.Struct({
    entryAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
    }),
    exitAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
    })
});
let $b687332511a4da75$var$MarkRecord = new $elh9A$restructure.Struct({
    class: $elh9A$restructure.uint16,
    markAnchor: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor, {
        type: "parent"
    })
});
let $b687332511a4da75$var$MarkArray = new $elh9A$restructure.Array($b687332511a4da75$var$MarkRecord, $elh9A$restructure.uint16);
let $b687332511a4da75$var$BaseRecord = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor), (t)=>t.parent.classCount);
let $b687332511a4da75$var$BaseArray = new $elh9A$restructure.Array($b687332511a4da75$var$BaseRecord, $elh9A$restructure.uint16);
let $b687332511a4da75$var$ComponentRecord = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$Anchor), (t)=>t.parent.parent.classCount);
let $b687332511a4da75$var$LigatureAttach = new $elh9A$restructure.Array($b687332511a4da75$var$ComponentRecord, $elh9A$restructure.uint16);
let $b687332511a4da75$var$LigatureArray = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$LigatureAttach), $elh9A$restructure.uint16);
let $b687332511a4da75$export$73a8cfb19cd43a0f = new $elh9A$restructure.VersionedStruct("lookupType", {
    1: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            valueFormat: $b687332511a4da75$var$ValueFormat,
            value: new $b687332511a4da75$var$ValueRecord()
        },
        2: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            valueFormat: $b687332511a4da75$var$ValueFormat,
            valueCount: $elh9A$restructure.uint16,
            values: new $elh9A$restructure.LazyArray(new $b687332511a4da75$var$ValueRecord(), "valueCount")
        }
    }),
    2: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            valueFormat1: $b687332511a4da75$var$ValueFormat,
            valueFormat2: $b687332511a4da75$var$ValueFormat,
            pairSetCount: $elh9A$restructure.uint16,
            pairSets: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$PairSet), "pairSetCount")
        },
        2: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            valueFormat1: $b687332511a4da75$var$ValueFormat,
            valueFormat2: $b687332511a4da75$var$ValueFormat,
            classDef1: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
            classDef2: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$843d551fbbafef71)),
            class1Count: $elh9A$restructure.uint16,
            class2Count: $elh9A$restructure.uint16,
            classRecords: new $elh9A$restructure.LazyArray(new $elh9A$restructure.LazyArray($b687332511a4da75$var$Class2Record, "class2Count"), "class1Count")
        }
    }),
    3: {
        format: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        entryExitCount: $elh9A$restructure.uint16,
        entryExitRecords: new $elh9A$restructure.Array($b687332511a4da75$var$EntryExitRecord, "entryExitCount")
    },
    4: {
        format: $elh9A$restructure.uint16,
        markCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        baseCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        markArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        baseArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$BaseArray)
    },
    5: {
        format: $elh9A$restructure.uint16,
        markCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        ligatureCoverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        markArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        ligatureArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$LigatureArray)
    },
    6: {
        format: $elh9A$restructure.uint16,
        mark1Coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        mark2Coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        classCount: $elh9A$restructure.uint16,
        mark1Array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$MarkArray),
        mark2Array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $b687332511a4da75$var$BaseArray)
    },
    7: (0, $b6dd765146ad212a$export$841858b892ce1f4c),
    8: (0, $b6dd765146ad212a$export$5e6d09e6861162f6),
    9: {
        posFormat: $elh9A$restructure.uint16,
        lookupType: $elh9A$restructure.uint16,
        extension: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, null)
    }
});
// Fix circular reference
$b687332511a4da75$export$73a8cfb19cd43a0f.versions[9].extension.type = $b687332511a4da75$export$73a8cfb19cd43a0f;
var $b687332511a4da75$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
    header: {
        scriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$3e15fc05ce864229)),
        featureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$aa18130def4b6cb4)),
        lookupList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)($b687332511a4da75$export$73a8cfb19cd43a0f))
    },
    0x00010000: {},
    0x00010001: {
        featureVariations: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$441b70b7971dd419))
    }
});
let $99ccad60b96f92fb$var$Sequence = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
let $99ccad60b96f92fb$var$AlternateSet = $99ccad60b96f92fb$var$Sequence;
let $99ccad60b96f92fb$var$Ligature = new $elh9A$restructure.Struct({
    glyph: $elh9A$restructure.uint16,
    compCount: $elh9A$restructure.uint16,
    components: new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.compCount - 1)
});
let $99ccad60b96f92fb$var$LigatureSet = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$Ligature), $elh9A$restructure.uint16);
let $99ccad60b96f92fb$var$GSUBLookup = new $elh9A$restructure.VersionedStruct("lookupType", {
    1: new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        1: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            deltaGlyphID: $elh9A$restructure.int16
        },
        2: {
            coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
            glyphCount: $elh9A$restructure.uint16,
            substitute: new $elh9A$restructure.LazyArray($elh9A$restructure.uint16, "glyphCount")
        }
    }),
    2: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        sequences: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$Sequence), "count")
    },
    3: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        alternateSet: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$AlternateSet), "count")
    },
    4: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        count: $elh9A$restructure.uint16,
        ligatureSets: new $elh9A$restructure.LazyArray(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $99ccad60b96f92fb$var$LigatureSet), "count")
    },
    5: (0, $b6dd765146ad212a$export$841858b892ce1f4c),
    6: (0, $b6dd765146ad212a$export$5e6d09e6861162f6),
    7: {
        substFormat: $elh9A$restructure.uint16,
        lookupType: $elh9A$restructure.uint16,
        extension: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, null)
    },
    8: {
        substFormat: $elh9A$restructure.uint16,
        coverage: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)),
        backtrackCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "backtrackGlyphCount"),
        lookaheadGlyphCount: $elh9A$restructure.uint16,
        lookaheadCoverage: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$17608c3f81a6111)), "lookaheadGlyphCount"),
        glyphCount: $elh9A$restructure.uint16,
        substitutes: new $elh9A$restructure.Array($elh9A$restructure.uint16, "glyphCount")
    }
});
// Fix circular reference
$99ccad60b96f92fb$var$GSUBLookup.versions[7].extension.type = $99ccad60b96f92fb$var$GSUBLookup;
var $99ccad60b96f92fb$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
    header: {
        scriptList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$3e15fc05ce864229)),
        featureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, (0, $b6dd765146ad212a$export$aa18130def4b6cb4)),
        lookupList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)($99ccad60b96f92fb$var$GSUBLookup))
    },
    0x00010000: {},
    0x00010001: {
        featureVariations: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$441b70b7971dd419))
    }
});
let $573d5042c76c4940$var$JstfGSUBModList = new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16);
let $573d5042c76c4940$var$JstfPriority = new $elh9A$restructure.Struct({
    shrinkageEnableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    shrinkageDisableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    shrinkageEnableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    shrinkageDisableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    shrinkageJstfMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)((0, $b687332511a4da75$export$73a8cfb19cd43a0f))),
    extensionEnableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    extensionDisableGSUB: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    extensionEnableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    extensionDisableGPOS: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfGSUBModList),
    extensionJstfMax: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new (0, $b6dd765146ad212a$export$df0008c6ff2da22a)((0, $b687332511a4da75$export$73a8cfb19cd43a0f)))
});
let $573d5042c76c4940$var$JstfLangSys = new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfPriority), $elh9A$restructure.uint16);
let $573d5042c76c4940$var$JstfLangSysRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    jstfLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfLangSys)
});
let $573d5042c76c4940$var$JstfScript = new $elh9A$restructure.Struct({
    extenderGlyphs: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16)),
    defaultLangSys: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfLangSys),
    langSysCount: $elh9A$restructure.uint16,
    langSysRecords: new $elh9A$restructure.Array($573d5042c76c4940$var$JstfLangSysRecord, "langSysCount")
});
let $573d5042c76c4940$var$JstfScriptRecord = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    script: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $573d5042c76c4940$var$JstfScript, {
        type: "parent"
    })
});
var $573d5042c76c4940$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint32,
    scriptCount: $elh9A$restructure.uint16,
    scriptList: new $elh9A$restructure.Array($573d5042c76c4940$var$JstfScriptRecord, "scriptCount")
});
// TODO: add this to restructure
class $a5875b80d6087f61$var$VariableSizeNumber {
    decode(stream, parent) {
        switch(this.size(0, parent)){
            case 1:
                return stream.readUInt8();
            case 2:
                return stream.readUInt16BE();
            case 3:
                return stream.readUInt24BE();
            case 4:
                return stream.readUInt32BE();
        }
    }
    size(val, parent) {
        return (0, $elh9A$restructure.resolveLength)(this._size, null, parent);
    }
    constructor(size){
        this._size = size;
    }
}
let $a5875b80d6087f61$var$MapDataEntry = new $elh9A$restructure.Struct({
    entry: new $a5875b80d6087f61$var$VariableSizeNumber((t)=>((t.parent.entryFormat & 0x0030) >> 4) + 1),
    outerIndex: (t)=>t.entry >> (t.parent.entryFormat & 0x000F) + 1,
    innerIndex: (t)=>t.entry & (1 << (t.parent.entryFormat & 0x000F) + 1) - 1
});
let $a5875b80d6087f61$var$DeltaSetIndexMap = new $elh9A$restructure.Struct({
    entryFormat: $elh9A$restructure.uint16,
    mapCount: $elh9A$restructure.uint16,
    mapData: new $elh9A$restructure.Array($a5875b80d6087f61$var$MapDataEntry, "mapCount")
});
var $a5875b80d6087f61$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    majorVersion: $elh9A$restructure.uint16,
    minorVersion: $elh9A$restructure.uint16,
    itemVariationStore: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, (0, $2e4adcda047b3383$export$fe1b122a2710f241)),
    advanceWidthMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap),
    LSBMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap),
    RSBMapping: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $a5875b80d6087f61$var$DeltaSetIndexMap)
});
let $4423bc1ac09bbbd1$var$Signature = new $elh9A$restructure.Struct({
    format: $elh9A$restructure.uint32,
    length: $elh9A$restructure.uint32,
    offset: $elh9A$restructure.uint32
});
let $4423bc1ac09bbbd1$var$SignatureBlock = new $elh9A$restructure.Struct({
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16, 2),
    cbSignature: $elh9A$restructure.uint32,
    signature: new $elh9A$restructure.Buffer("cbSignature")
});
var $4423bc1ac09bbbd1$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    ulVersion: $elh9A$restructure.uint32,
    usNumSigs: $elh9A$restructure.uint16,
    usFlag: $elh9A$restructure.uint16,
    signatures: new $elh9A$restructure.Array($4423bc1ac09bbbd1$var$Signature, "usNumSigs"),
    signatureBlocks: new $elh9A$restructure.Array($4423bc1ac09bbbd1$var$SignatureBlock, "usNumSigs")
});
let $7b50e3f8d83263de$var$GaspRange = new $elh9A$restructure.Struct({
    rangeMaxPPEM: $elh9A$restructure.uint16,
    rangeGaspBehavior: new $elh9A$restructure.Bitfield($elh9A$restructure.uint16, [
        "grayscale",
        "gridfit",
        "symmetricSmoothing",
        "symmetricGridfit" // only in version 1, for ClearType
    ])
});
var $7b50e3f8d83263de$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numRanges: $elh9A$restructure.uint16,
    gaspRanges: new $elh9A$restructure.Array($7b50e3f8d83263de$var$GaspRange, "numRanges") // Sorted by ppem
});
let $7bf92ec372cd2307$var$DeviceRecord = new $elh9A$restructure.Struct({
    pixelSize: $elh9A$restructure.uint8,
    maximumWidth: $elh9A$restructure.uint8,
    widths: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t)=>t.parent.parent.maxp.numGlyphs)
});
var $7bf92ec372cd2307$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numRecords: $elh9A$restructure.int16,
    sizeDeviceRecord: $elh9A$restructure.int32,
    records: new $elh9A$restructure.Array($7bf92ec372cd2307$var$DeviceRecord, "numRecords")
});
let $a3f544bcf76542d1$var$KernPair = new $elh9A$restructure.Struct({
    left: $elh9A$restructure.uint16,
    right: $elh9A$restructure.uint16,
    value: $elh9A$restructure.int16
});
let $a3f544bcf76542d1$var$ClassTable = new $elh9A$restructure.Struct({
    firstGlyph: $elh9A$restructure.uint16,
    nGlyphs: $elh9A$restructure.uint16,
    offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16, "nGlyphs"),
    max: (t)=>t.offsets.length && Math.max.apply(Math, t.offsets)
});
let $a3f544bcf76542d1$var$Kern2Array = new $elh9A$restructure.Struct({
    off: (t)=>t._startOffset - t.parent.parent._startOffset,
    len: (t)=>((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),
    values: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, "len")
});
let $a3f544bcf76542d1$var$KernSubtable = new $elh9A$restructure.VersionedStruct("format", {
    0: {
        nPairs: $elh9A$restructure.uint16,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16,
        pairs: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernPair, "nPairs")
    },
    2: {
        rowWidth: $elh9A$restructure.uint16,
        leftTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$ClassTable, {
            type: "parent"
        }),
        rightTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$ClassTable, {
            type: "parent"
        }),
        array: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $a3f544bcf76542d1$var$Kern2Array, {
            type: "parent"
        })
    },
    3: {
        glyphCount: $elh9A$restructure.uint16,
        kernValueCount: $elh9A$restructure.uint8,
        leftClassCount: $elh9A$restructure.uint8,
        rightClassCount: $elh9A$restructure.uint8,
        flags: $elh9A$restructure.uint8,
        kernValue: new $elh9A$restructure.Array($elh9A$restructure.int16, "kernValueCount"),
        leftClass: new $elh9A$restructure.Array($elh9A$restructure.uint8, "glyphCount"),
        rightClass: new $elh9A$restructure.Array($elh9A$restructure.uint8, "glyphCount"),
        kernIndex: new $elh9A$restructure.Array($elh9A$restructure.uint8, (t)=>t.leftClassCount * t.rightClassCount)
    }
});
let $a3f544bcf76542d1$var$KernTable = new $elh9A$restructure.VersionedStruct("version", {
    0: {
        subVersion: $elh9A$restructure.uint16,
        length: $elh9A$restructure.uint16,
        format: $elh9A$restructure.uint8,
        coverage: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
            "horizontal",
            "minimum",
            "crossStream",
            "override" // If set to 1 the value in this table replaces the accumulated value
        ]),
        subtable: $a3f544bcf76542d1$var$KernSubtable,
        padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t)=>t.length - t._currentOffset)
    },
    1: {
        length: $elh9A$restructure.uint32,
        coverage: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
            null,
            null,
            null,
            null,
            null,
            "variation",
            "crossStream",
            "vertical" // Set if table has vertical kerning values
        ]),
        format: $elh9A$restructure.uint8,
        tupleIndex: $elh9A$restructure.uint16,
        subtable: $a3f544bcf76542d1$var$KernSubtable,
        padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t)=>t.length - t._currentOffset)
    }
});
var $a3f544bcf76542d1$export$2e2bcd8739ae039 = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
    0: {
        nTables: $elh9A$restructure.uint16,
        tables: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernTable, "nTables")
    },
    1: {
        reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
        nTables: $elh9A$restructure.uint32,
        tables: new $elh9A$restructure.Array($a3f544bcf76542d1$var$KernTable, "nTables")
    }
});
var // Records the ppem for each glyph at which the scaling becomes linear again,
// despite instructions effecting the advance width
$86687befb45925d0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numGlyphs: $elh9A$restructure.uint16,
    yPels: new $elh9A$restructure.Array($elh9A$restructure.uint8, "numGlyphs")
});
var // NOTE: The PCLT table is strongly discouraged for OpenType fonts with TrueType outlines
$91429006e51e0fe8$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    fontNumber: $elh9A$restructure.uint32,
    pitch: $elh9A$restructure.uint16,
    xHeight: $elh9A$restructure.uint16,
    style: $elh9A$restructure.uint16,
    typeFamily: $elh9A$restructure.uint16,
    capHeight: $elh9A$restructure.uint16,
    symbolSet: $elh9A$restructure.uint16,
    typeface: new $elh9A$restructure.String(16),
    characterComplement: new $elh9A$restructure.String(8),
    fileName: new $elh9A$restructure.String(6),
    strokeWeight: new $elh9A$restructure.String(1),
    widthType: new $elh9A$restructure.String(1),
    serifStyle: $elh9A$restructure.uint8,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint8)
});
// VDMX tables contain ascender/descender overrides for certain (usually small)
// sizes. This is needed in order to match font metrics on Windows.
let $627850fc9deed59a$var$Ratio = new $elh9A$restructure.Struct({
    bCharSet: $elh9A$restructure.uint8,
    xRatio: $elh9A$restructure.uint8,
    yStartRatio: $elh9A$restructure.uint8,
    yEndRatio: $elh9A$restructure.uint8 // Ending y-Ratio value
});
let $627850fc9deed59a$var$vTable = new $elh9A$restructure.Struct({
    yPelHeight: $elh9A$restructure.uint16,
    yMax: $elh9A$restructure.int16,
    yMin: $elh9A$restructure.int16 // Minimum value (in pels) for this yPelHeight
});
let $627850fc9deed59a$var$VdmxGroup = new $elh9A$restructure.Struct({
    recs: $elh9A$restructure.uint16,
    startsz: $elh9A$restructure.uint8,
    endsz: $elh9A$restructure.uint8,
    entries: new $elh9A$restructure.Array($627850fc9deed59a$var$vTable, "recs") // The VDMX records
});
var $627850fc9deed59a$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    numRecs: $elh9A$restructure.uint16,
    numRatios: $elh9A$restructure.uint16,
    ratioRanges: new $elh9A$restructure.Array($627850fc9deed59a$var$Ratio, "numRatios"),
    offsets: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numRatios"),
    groups: new $elh9A$restructure.Array($627850fc9deed59a$var$VdmxGroup, "numRecs") // The actual VDMX groupings
});
var $65c33f5f068fc77f$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    ascent: $elh9A$restructure.int16,
    descent: $elh9A$restructure.int16,
    lineGap: $elh9A$restructure.int16,
    advanceHeightMax: $elh9A$restructure.int16,
    minTopSideBearing: $elh9A$restructure.int16,
    minBottomSideBearing: $elh9A$restructure.int16,
    yMaxExtent: $elh9A$restructure.int16,
    caretSlopeRise: $elh9A$restructure.int16,
    caretSlopeRun: $elh9A$restructure.int16,
    caretOffset: $elh9A$restructure.int16,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.int16, 4),
    metricDataFormat: $elh9A$restructure.int16,
    numberOfMetrics: $elh9A$restructure.uint16 // Number of advance heights in the Vertical Metrics table
});
let $597d739523b65bb3$var$VmtxEntry = new $elh9A$restructure.Struct({
    advance: $elh9A$restructure.uint16,
    bearing: $elh9A$restructure.int16 // The top sidebearing of the glyph
});
var $597d739523b65bb3$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    metrics: new $elh9A$restructure.LazyArray($597d739523b65bb3$var$VmtxEntry, (t)=>t.parent.vhea.numberOfMetrics),
    bearings: new $elh9A$restructure.LazyArray($elh9A$restructure.int16, (t)=>t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)
});
let $35aa0c87d9c3d3a0$var$shortFrac = new $elh9A$restructure.Fixed(16, "BE", 14);
let $35aa0c87d9c3d3a0$var$Correspondence = new $elh9A$restructure.Struct({
    fromCoord: $35aa0c87d9c3d3a0$var$shortFrac,
    toCoord: $35aa0c87d9c3d3a0$var$shortFrac
});
let $35aa0c87d9c3d3a0$var$Segment = new $elh9A$restructure.Struct({
    pairCount: $elh9A$restructure.uint16,
    correspondence: new $elh9A$restructure.Array($35aa0c87d9c3d3a0$var$Correspondence, "pairCount")
});
var $35aa0c87d9c3d3a0$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    axisCount: $elh9A$restructure.uint32,
    segment: new $elh9A$restructure.Array($35aa0c87d9c3d3a0$var$Segment, "axisCount")
});
class $22801616bd931ca3$var$UnboundedArrayAccessor {
    getItem(index) {
        if (this._items[index] == null) {
            let pos = this.stream.pos;
            this.stream.pos = this.base + this.type.size(null, this.parent) * index;
            this._items[index] = this.type.decode(this.stream, this.parent);
            this.stream.pos = pos;
        }
        return this._items[index];
    }
    inspect() {
        return `[UnboundedArray ${this.type.constructor.name}]`;
    }
    constructor(type, stream, parent){
        this.type = type;
        this.stream = stream;
        this.parent = parent;
        this.base = this.stream.pos;
        this._items = [];
    }
}
class $22801616bd931ca3$export$c5af1eebc882e39a extends $elh9A$restructure.Array {
    decode(stream, parent) {
        return new $22801616bd931ca3$var$UnboundedArrayAccessor(this.type, stream, parent);
    }
    constructor(type){
        super(type, 0);
    }
}
let $22801616bd931ca3$export$8351f8c2ae2f103c = function(ValueType = $elh9A$restructure.uint16) {
    // Helper class that makes internal structures invisible to pointers
    class Shadow {
        decode(stream, ctx) {
            ctx = ctx.parent.parent;
            return this.type.decode(stream, ctx);
        }
        size(val, ctx) {
            ctx = ctx.parent.parent;
            return this.type.size(val, ctx);
        }
        encode(stream, val, ctx) {
            ctx = ctx.parent.parent;
            return this.type.encode(stream, val, ctx);
        }
        constructor(type){
            this.type = type;
        }
    }
    ValueType = new Shadow(ValueType);
    let BinarySearchHeader = new $elh9A$restructure.Struct({
        unitSize: $elh9A$restructure.uint16,
        nUnits: $elh9A$restructure.uint16,
        searchRange: $elh9A$restructure.uint16,
        entrySelector: $elh9A$restructure.uint16,
        rangeShift: $elh9A$restructure.uint16
    });
    let LookupSegmentSingle = new $elh9A$restructure.Struct({
        lastGlyph: $elh9A$restructure.uint16,
        firstGlyph: $elh9A$restructure.uint16,
        value: ValueType
    });
    let LookupSegmentArray = new $elh9A$restructure.Struct({
        lastGlyph: $elh9A$restructure.uint16,
        firstGlyph: $elh9A$restructure.uint16,
        values: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array(ValueType, (t)=>t.lastGlyph - t.firstGlyph + 1), {
            type: "parent"
        })
    });
    let LookupSingle = new $elh9A$restructure.Struct({
        glyph: $elh9A$restructure.uint16,
        value: ValueType
    });
    return new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint16, {
        0: {
            values: new $22801616bd931ca3$export$c5af1eebc882e39a(ValueType) // length == number of glyphs maybe?
        },
        2: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $elh9A$restructure.Array(LookupSegmentSingle, (t)=>t.binarySearchHeader.nUnits)
        },
        4: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $elh9A$restructure.Array(LookupSegmentArray, (t)=>t.binarySearchHeader.nUnits)
        },
        6: {
            binarySearchHeader: BinarySearchHeader,
            segments: new $elh9A$restructure.Array(LookupSingle, (t)=>t.binarySearchHeader.nUnits)
        },
        8: {
            firstGlyph: $elh9A$restructure.uint16,
            count: $elh9A$restructure.uint16,
            values: new $elh9A$restructure.Array(ValueType, "count")
        }
    });
};
function $22801616bd931ca3$export$79f7d93d790934ba(entryData = {}, lookupType = $elh9A$restructure.uint16) {
    let entry = Object.assign({
        newState: $elh9A$restructure.uint16,
        flags: $elh9A$restructure.uint16
    }, entryData);
    let Entry = new $elh9A$restructure.Struct(entry);
    let StateArray = new $22801616bd931ca3$export$c5af1eebc882e39a(new $elh9A$restructure.Array($elh9A$restructure.uint16, (t)=>t.nClasses));
    let StateHeader = new $elh9A$restructure.Struct({
        nClasses: $elh9A$restructure.uint32,
        classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $22801616bd931ca3$export$8351f8c2ae2f103c(lookupType)),
        stateArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, StateArray),
        entryTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $22801616bd931ca3$export$c5af1eebc882e39a(Entry))
    });
    return StateHeader;
}
function $22801616bd931ca3$export$105027425199cc51(entryData = {}, lookupType = $elh9A$restructure.uint16) {
    let ClassLookupTable = new $elh9A$restructure.Struct({
        version () {
            return 8;
        },
        firstGlyph: $elh9A$restructure.uint16,
        values: new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16)
    });
    let entry = Object.assign({
        newStateOffset: $elh9A$restructure.uint16,
        // convert offset to stateArray index
        newState: (t)=>(t.newStateOffset - (t.parent.stateArray.base - t.parent._startOffset)) / t.parent.nClasses,
        flags: $elh9A$restructure.uint16
    }, entryData);
    let Entry = new $elh9A$restructure.Struct(entry);
    let StateArray = new $22801616bd931ca3$export$c5af1eebc882e39a(new $elh9A$restructure.Array($elh9A$restructure.uint8, (t)=>t.nClasses));
    let StateHeader1 = new $elh9A$restructure.Struct({
        nClasses: $elh9A$restructure.uint16,
        classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, ClassLookupTable),
        stateArray: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, StateArray),
        entryTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $22801616bd931ca3$export$c5af1eebc882e39a(Entry))
    });
    return StateHeader1;
}
let $3a5ca96d3e3aaf20$var$BslnSubtable = new $elh9A$restructure.VersionedStruct("format", {
    0: {
        deltas: new $elh9A$restructure.Array($elh9A$restructure.int16, 32)
    },
    1: {
        deltas: new $elh9A$restructure.Array($elh9A$restructure.int16, 32),
        mappingData: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($elh9A$restructure.uint16)
    },
    2: {
        standardGlyph: $elh9A$restructure.uint16,
        controlPoints: new $elh9A$restructure.Array($elh9A$restructure.uint16, 32)
    },
    3: {
        standardGlyph: $elh9A$restructure.uint16,
        controlPoints: new $elh9A$restructure.Array($elh9A$restructure.uint16, 32),
        mappingData: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($elh9A$restructure.uint16)
    }
});
var $3a5ca96d3e3aaf20$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    format: $elh9A$restructure.uint16,
    defaultBaseline: $elh9A$restructure.uint16,
    subtable: $3a5ca96d3e3aaf20$var$BslnSubtable
});
let $8d4241d96b2b0589$var$Setting = new $elh9A$restructure.Struct({
    setting: $elh9A$restructure.uint16,
    nameIndex: $elh9A$restructure.int16,
    name: (t)=>t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]
});
let $8d4241d96b2b0589$var$FeatureName = new $elh9A$restructure.Struct({
    feature: $elh9A$restructure.uint16,
    nSettings: $elh9A$restructure.uint16,
    settingTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array($8d4241d96b2b0589$var$Setting, "nSettings"), {
        type: "parent"
    }),
    featureFlags: new $elh9A$restructure.Bitfield($elh9A$restructure.uint8, [
        null,
        null,
        null,
        null,
        null,
        null,
        "hasDefault",
        "exclusive"
    ]),
    defaultSetting: $elh9A$restructure.uint8,
    nameIndex: $elh9A$restructure.int16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameIndex]
});
var $8d4241d96b2b0589$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    featureNameCount: $elh9A$restructure.uint16,
    reserved1: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    reserved2: new $elh9A$restructure.Reserved($elh9A$restructure.uint32),
    featureNames: new $elh9A$restructure.Array($8d4241d96b2b0589$var$FeatureName, "featureNameCount")
});
let $a79cd5132b1cf476$var$Axis = new $elh9A$restructure.Struct({
    axisTag: new $elh9A$restructure.String(4),
    minValue: $elh9A$restructure.fixed32,
    defaultValue: $elh9A$restructure.fixed32,
    maxValue: $elh9A$restructure.fixed32,
    flags: $elh9A$restructure.uint16,
    nameID: $elh9A$restructure.uint16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID]
});
let $a79cd5132b1cf476$var$Instance = new $elh9A$restructure.Struct({
    nameID: $elh9A$restructure.uint16,
    name: (t)=>t.parent.parent.name.records.fontFeatures[t.nameID],
    flags: $elh9A$restructure.uint16,
    coord: new $elh9A$restructure.Array($elh9A$restructure.fixed32, (t)=>t.parent.axisCount),
    postscriptNameID: new $elh9A$restructure.Optional($elh9A$restructure.uint16, (t)=>t.parent.instanceSize - t._currentOffset > 0)
});
var $a79cd5132b1cf476$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    offsetToData: $elh9A$restructure.uint16,
    countSizePairs: $elh9A$restructure.uint16,
    axisCount: $elh9A$restructure.uint16,
    axisSize: $elh9A$restructure.uint16,
    instanceCount: $elh9A$restructure.uint16,
    instanceSize: $elh9A$restructure.uint16,
    axis: new $elh9A$restructure.Array($a79cd5132b1cf476$var$Axis, "axisCount"),
    instance: new $elh9A$restructure.Array($a79cd5132b1cf476$var$Instance, "instanceCount")
});
let $3f36f1a5e6989457$var$shortFrac = new $elh9A$restructure.Fixed(16, "BE", 14);
class $3f36f1a5e6989457$var$Offset {
    static decode(stream, parent) {
        // In short format, offsets are multiplied by 2.
        // This doesn't seem to be documented by Apple, but it
        // is implemented this way in Freetype.
        return parent.flags ? stream.readUInt32BE() : stream.readUInt16BE() * 2;
    }
}
let $3f36f1a5e6989457$var$gvar = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    axisCount: $elh9A$restructure.uint16,
    globalCoordCount: $elh9A$restructure.uint16,
    globalCoords: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new $elh9A$restructure.Array(new $elh9A$restructure.Array($3f36f1a5e6989457$var$shortFrac, "axisCount"), "globalCoordCount")),
    glyphCount: $elh9A$restructure.uint16,
    flags: $elh9A$restructure.uint16,
    offsetToData: $elh9A$restructure.uint32,
    offsets: new $elh9A$restructure.Array(new $elh9A$restructure.Pointer($3f36f1a5e6989457$var$Offset, "void", {
        relativeTo: (ctx)=>ctx.offsetToData,
        allowNull: false
    }), (t)=>t.glyphCount + 1)
});
var $3f36f1a5e6989457$export$2e2bcd8739ae039 = $3f36f1a5e6989457$var$gvar;
let $0bd8fe7a6d1d9fb4$var$ClassTable = new $elh9A$restructure.Struct({
    length: $elh9A$restructure.uint16,
    coverage: $elh9A$restructure.uint16,
    subFeatureFlags: $elh9A$restructure.uint32,
    stateTable: new (0, $22801616bd931ca3$export$105027425199cc51)
});
let $0bd8fe7a6d1d9fb4$var$WidthDeltaRecord = new $elh9A$restructure.Struct({
    justClass: $elh9A$restructure.uint32,
    beforeGrowLimit: $elh9A$restructure.fixed32,
    beforeShrinkLimit: $elh9A$restructure.fixed32,
    afterGrowLimit: $elh9A$restructure.fixed32,
    afterShrinkLimit: $elh9A$restructure.fixed32,
    growFlags: $elh9A$restructure.uint16,
    shrinkFlags: $elh9A$restructure.uint16
});
let $0bd8fe7a6d1d9fb4$var$WidthDeltaCluster = new $elh9A$restructure.Array($0bd8fe7a6d1d9fb4$var$WidthDeltaRecord, $elh9A$restructure.uint32);
let $0bd8fe7a6d1d9fb4$var$ActionData = new $elh9A$restructure.VersionedStruct("actionType", {
    0: {
        lowerLimit: $elh9A$restructure.fixed32,
        upperLimit: $elh9A$restructure.fixed32,
        order: $elh9A$restructure.uint16,
        glyphs: new $elh9A$restructure.Array($elh9A$restructure.uint16, $elh9A$restructure.uint16)
    },
    1: {
        addGlyph: $elh9A$restructure.uint16
    },
    2: {
        substThreshold: $elh9A$restructure.fixed32,
        addGlyph: $elh9A$restructure.uint16,
        substGlyph: $elh9A$restructure.uint16
    },
    3: {},
    4: {
        variationAxis: $elh9A$restructure.uint32,
        minimumLimit: $elh9A$restructure.fixed32,
        noStretchValue: $elh9A$restructure.fixed32,
        maximumLimit: $elh9A$restructure.fixed32
    },
    5: {
        flags: $elh9A$restructure.uint16,
        glyph: $elh9A$restructure.uint16
    }
});
let $0bd8fe7a6d1d9fb4$var$Action = new $elh9A$restructure.Struct({
    actionClass: $elh9A$restructure.uint16,
    actionType: $elh9A$restructure.uint16,
    actionLength: $elh9A$restructure.uint32,
    actionData: $0bd8fe7a6d1d9fb4$var$ActionData,
    padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t)=>t.actionLength - t._currentOffset)
});
let $0bd8fe7a6d1d9fb4$var$PostcompensationAction = new $elh9A$restructure.Array($0bd8fe7a6d1d9fb4$var$Action, $elh9A$restructure.uint32);
let $0bd8fe7a6d1d9fb4$var$PostCompensationTable = new $elh9A$restructure.Struct({
    lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$PostcompensationAction))
});
let $0bd8fe7a6d1d9fb4$var$JustificationTable = new $elh9A$restructure.Struct({
    classTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$ClassTable, {
        type: "parent"
    }),
    wdcOffset: $elh9A$restructure.uint16,
    postCompensationTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$PostCompensationTable, {
        type: "parent"
    }),
    widthDeltaClusters: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)(new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$WidthDeltaCluster, {
        type: "parent",
        relativeTo: (ctx)=>ctx.wdcOffset
    }))
});
var $0bd8fe7a6d1d9fb4$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint32,
    format: $elh9A$restructure.uint16,
    horizontal: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$JustificationTable),
    vertical: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $0bd8fe7a6d1d9fb4$var$JustificationTable)
});
let $ef40c6dc80fd50a2$var$LigatureData = {
    action: $elh9A$restructure.uint16
};
let $ef40c6dc80fd50a2$var$ContextualData = {
    markIndex: $elh9A$restructure.uint16,
    currentIndex: $elh9A$restructure.uint16
};
let $ef40c6dc80fd50a2$var$InsertionData = {
    currentInsertIndex: $elh9A$restructure.uint16,
    markedInsertIndex: $elh9A$restructure.uint16
};
let $ef40c6dc80fd50a2$var$SubstitutionTable = new $elh9A$restructure.Struct({
    items: new (0, $22801616bd931ca3$export$c5af1eebc882e39a)(new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)))
});
let $ef40c6dc80fd50a2$var$SubtableData = new $elh9A$restructure.VersionedStruct("type", {
    0: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)
    },
    1: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$ContextualData),
        substitutionTable: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $ef40c6dc80fd50a2$var$SubstitutionTable)
    },
    2: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$LigatureData),
        ligatureActions: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint32)),
        components: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16)),
        ligatureList: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16))
    },
    4: {
        lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)
    },
    5: {
        stateTable: new (0, $22801616bd931ca3$export$79f7d93d790934ba)($ef40c6dc80fd50a2$var$InsertionData),
        insertionActions: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, new (0, $22801616bd931ca3$export$c5af1eebc882e39a)($elh9A$restructure.uint16))
    }
});
let $ef40c6dc80fd50a2$var$Subtable = new $elh9A$restructure.Struct({
    length: $elh9A$restructure.uint32,
    coverage: $elh9A$restructure.uint24,
    type: $elh9A$restructure.uint8,
    subFeatureFlags: $elh9A$restructure.uint32,
    table: $ef40c6dc80fd50a2$var$SubtableData,
    padding: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, (t)=>t.length - t._currentOffset)
});
let $ef40c6dc80fd50a2$var$FeatureEntry = new $elh9A$restructure.Struct({
    featureType: $elh9A$restructure.uint16,
    featureSetting: $elh9A$restructure.uint16,
    enableFlags: $elh9A$restructure.uint32,
    disableFlags: $elh9A$restructure.uint32
});
let $ef40c6dc80fd50a2$var$MorxChain = new $elh9A$restructure.Struct({
    defaultFlags: $elh9A$restructure.uint32,
    chainLength: $elh9A$restructure.uint32,
    nFeatureEntries: $elh9A$restructure.uint32,
    nSubtables: $elh9A$restructure.uint32,
    features: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$FeatureEntry, "nFeatureEntries"),
    subtables: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$Subtable, "nSubtables")
});
var $ef40c6dc80fd50a2$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint16,
    unused: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    nChains: $elh9A$restructure.uint32,
    chains: new $elh9A$restructure.Array($ef40c6dc80fd50a2$var$MorxChain, "nChains")
});
let $ab24dea08b58a7cc$var$OpticalBounds = new $elh9A$restructure.Struct({
    left: $elh9A$restructure.int16,
    top: $elh9A$restructure.int16,
    right: $elh9A$restructure.int16,
    bottom: $elh9A$restructure.int16
});
var $ab24dea08b58a7cc$export$2e2bcd8739ae039 = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.fixed32,
    format: $elh9A$restructure.uint16,
    lookupTable: new (0, $22801616bd931ca3$export$8351f8c2ae2f103c)($ab24dea08b58a7cc$var$OpticalBounds)
});
let $5825c04ce8f7102d$var$tables = {};
var $5825c04ce8f7102d$export$2e2bcd8739ae039 = $5825c04ce8f7102d$var$tables;
$5825c04ce8f7102d$var$tables.cmap = (0, $e4ae0436c91af89f$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.head = (0, $55a60976afb7c261$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.hhea = (0, $dde72b7b5b650596$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.hmtx = (0, $a7c40184072c9a5b$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.maxp = (0, $521197722369f691$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.name = (0, $51a9f4feb3a3b2b1$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables["OS/2"] = (0, $114ea85db469b435$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.post = (0, $f93b30299e1ea0f5$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.fpgm = (0, $873d79fea57d3161$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.loca = (0, $83c4155666d50c37$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.prep = (0, $b12598db7cdf7042$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables["cvt "] = (0, $8fb09b0f473d61a0$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.glyf = (0, $7707bdf21a3d89cc$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables["CFF "] = (0, $f717432b360040c7$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables["CFF2"] = (0, $f717432b360040c7$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.VORG = (0, $8cb7ae73ed7aa7d8$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.EBLC = (0, $035bb95c0cdb1f6d$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.CBLC = $5825c04ce8f7102d$var$tables.EBLC;
$5825c04ce8f7102d$var$tables.sbix = (0, $73d13900b55a3c0c$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.COLR = (0, $97f6b8be3a347a8f$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.CPAL = (0, $16ca60ecbdee30ea$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.BASE = (0, $7327e41706f9d5c7$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.GDEF = (0, $7e48bbe9e5345664$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.GPOS = (0, $b687332511a4da75$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.GSUB = (0, $99ccad60b96f92fb$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.JSTF = (0, $573d5042c76c4940$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.HVAR = (0, $a5875b80d6087f61$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.DSIG = (0, $4423bc1ac09bbbd1$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.gasp = (0, $7b50e3f8d83263de$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.hdmx = (0, $7bf92ec372cd2307$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.kern = (0, $a3f544bcf76542d1$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.LTSH = (0, $86687befb45925d0$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.PCLT = (0, $91429006e51e0fe8$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.VDMX = (0, $627850fc9deed59a$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.vhea = (0, $65c33f5f068fc77f$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.vmtx = (0, $597d739523b65bb3$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.avar = (0, $35aa0c87d9c3d3a0$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.bsln = (0, $3a5ca96d3e3aaf20$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.feat = (0, $8d4241d96b2b0589$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.fvar = (0, $a79cd5132b1cf476$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.gvar = (0, $3f36f1a5e6989457$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.just = (0, $0bd8fe7a6d1d9fb4$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.morx = (0, $ef40c6dc80fd50a2$export$2e2bcd8739ae039);
$5825c04ce8f7102d$var$tables.opbd = (0, $ab24dea08b58a7cc$export$2e2bcd8739ae039);
let $df50e1efe10a1247$var$TableEntry = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    checkSum: $elh9A$restructure.uint32,
    offset: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void", {
        type: "global"
    }),
    length: $elh9A$restructure.uint32
});
let $df50e1efe10a1247$var$Directory = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    numTables: $elh9A$restructure.uint16,
    searchRange: $elh9A$restructure.uint16,
    entrySelector: $elh9A$restructure.uint16,
    rangeShift: $elh9A$restructure.uint16,
    tables: new $elh9A$restructure.Array($df50e1efe10a1247$var$TableEntry, "numTables")
});
$df50e1efe10a1247$var$Directory.process = function() {
    let tables = {};
    for (let table of this.tables)tables[table.tag] = table;
    this.tables = tables;
};
$df50e1efe10a1247$var$Directory.preEncode = function() {
    if (!Array.isArray(this.tables)) {
        let tables = [];
        for(let tag in this.tables){
            let table = this.tables[tag];
            if (table) tables.push({
                tag: tag,
                checkSum: 0,
                offset: new $elh9A$restructure.VoidPointer((0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag], table),
                length: (0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag].size(table)
            });
        }
        this.tables = tables;
    }
    this.tag = "true";
    this.numTables = this.tables.length;
    let maxExponentFor2 = Math.floor(Math.log(this.numTables) / Math.LN2);
    let maxPowerOf2 = Math.pow(2, maxExponentFor2);
    this.searchRange = maxPowerOf2 * 16;
    this.entrySelector = Math.log(maxPowerOf2) / Math.LN2;
    this.rangeShift = this.numTables * 16 - this.searchRange;
};
var $df50e1efe10a1247$export$2e2bcd8739ae039 = $df50e1efe10a1247$var$Directory;
function $66a5b9fb5318558a$export$2e0ae67339d5f1ac(arr, cmp) {
    let min = 0;
    let max = arr.length - 1;
    while(min <= max){
        let mid = min + max >> 1;
        let res = cmp(arr[mid]);
        if (res < 0) max = mid - 1;
        else if (res > 0) min = mid + 1;
        else return mid;
    }
    return -1;
}
function $66a5b9fb5318558a$export$d02631cccf789723(index, end) {
    let range = [];
    while(index < end)range.push(index++);
    return range;
}
const $66a5b9fb5318558a$export$3d28c1996ced1f14 = new TextDecoder("ascii");
// Based on https://github.com/niklasvh/base64-arraybuffer. MIT license.
const $66a5b9fb5318558a$var$CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
const $66a5b9fb5318558a$var$LOOKUP = new Uint8Array(256);
for(let i = 0; i < $66a5b9fb5318558a$var$CHARS.length; i++)$66a5b9fb5318558a$var$LOOKUP[$66a5b9fb5318558a$var$CHARS.charCodeAt(i)] = i;
function $66a5b9fb5318558a$export$94fdf11bafc8de6b(base64) {
    let bufferLength = base64.length * 0.75;
    if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") bufferLength--;
    }
    let bytes = new Uint8Array(bufferLength);
    let p = 0;
    for(let i = 0, len = base64.length; i < len; i += 4){
        let encoded1 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i)];
        let encoded2 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i + 1)];
        let encoded3 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i + 2)];
        let encoded4 = $66a5b9fb5318558a$var$LOOKUP[base64.charCodeAt(i + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return bytes;
}
class $0d6e160064c86e50$export$2e2bcd8739ae039 {
    findSubtable(cmapTable, pairs) {
        for (let [platformID, encodingID] of pairs)for (let cmap of cmapTable.tables){
            if (cmap.platformID === platformID && cmap.encodingID === encodingID) return cmap.table;
        }
        return null;
    }
    lookup(codepoint, variationSelector) {
        // If there is no Unicode cmap in this font, we need to re-encode
        // the codepoint in the encoding that the cmap supports.
        if (this.encoding) codepoint = this.encoding.get(codepoint) || codepoint;
        else if (variationSelector) {
            let gid = this.getVariationSelector(codepoint, variationSelector);
            if (gid) return gid;
        }
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                return cmap.codeMap.get(codepoint) || 0;
            case 4:
                {
                    let min = 0;
                    let max = cmap.segCount - 1;
                    while(min <= max){
                        let mid = min + max >> 1;
                        if (codepoint < cmap.startCode.get(mid)) max = mid - 1;
                        else if (codepoint > cmap.endCode.get(mid)) min = mid + 1;
                        else {
                            let rangeOffset = cmap.idRangeOffset.get(mid);
                            let gid;
                            if (rangeOffset === 0) gid = codepoint + cmap.idDelta.get(mid);
                            else {
                                let index = rangeOffset / 2 + (codepoint - cmap.startCode.get(mid)) - (cmap.segCount - mid);
                                gid = cmap.glyphIndexArray.get(index) || 0;
                                if (gid !== 0) gid += cmap.idDelta.get(mid);
                            }
                            return gid & 0xffff;
                        }
                    }
                    return 0;
                }
            case 8:
                throw new Error("TODO: cmap format 8");
            case 6:
            case 10:
                return cmap.glyphIndices.get(codepoint - cmap.firstCode) || 0;
            case 12:
            case 13:
                {
                    let min = 0;
                    let max = cmap.nGroups - 1;
                    while(min <= max){
                        let mid = min + max >> 1;
                        let group = cmap.groups.get(mid);
                        if (codepoint < group.startCharCode) max = mid - 1;
                        else if (codepoint > group.endCharCode) min = mid + 1;
                        else {
                            if (cmap.version === 12) return group.glyphID + (codepoint - group.startCharCode);
                            else return group.glyphID;
                        }
                    }
                    return 0;
                }
            case 14:
                throw new Error("TODO: cmap format 14");
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
    getVariationSelector(codepoint, variationSelector) {
        if (!this.uvs) return 0;
        let selectors = this.uvs.varSelectors.toArray();
        let i = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(selectors, (x)=>variationSelector - x.varSelector);
        let sel = selectors[i];
        if (i !== -1 && sel.defaultUVS) i = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(sel.defaultUVS, (x)=>codepoint < x.startUnicodeValue ? -1 : codepoint > x.startUnicodeValue + x.additionalCount ? 1 : 0);
        if (i !== -1 && sel.nonDefaultUVS) {
            i = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(sel.nonDefaultUVS, (x)=>codepoint - x.unicodeValue);
            if (i !== -1) return sel.nonDefaultUVS[i].glyphID;
        }
        return 0;
    }
    getCharacterSet() {
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                return (0, $66a5b9fb5318558a$export$d02631cccf789723)(0, cmap.codeMap.length);
            case 4:
                {
                    let res = [];
                    let endCodes = cmap.endCode.toArray();
                    for(let i = 0; i < endCodes.length; i++){
                        let tail = endCodes[i] + 1;
                        let start = cmap.startCode.get(i);
                        res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(start, tail));
                    }
                    return res;
                }
            case 8:
                throw new Error("TODO: cmap format 8");
            case 6:
            case 10:
                return (0, $66a5b9fb5318558a$export$d02631cccf789723)(cmap.firstCode, cmap.firstCode + cmap.glyphIndices.length);
            case 12:
            case 13:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));
                    return res;
                }
            case 14:
                throw new Error("TODO: cmap format 14");
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
    codePointsForGlyph(gid) {
        let cmap = this.cmap;
        switch(cmap.version){
            case 0:
                {
                    let res = [];
                    for(let i = 0; i < 256; i++)if (cmap.codeMap.get(i) === gid) res.push(i);
                    return res;
                }
            case 4:
                {
                    let res = [];
                    for(let i = 0; i < cmap.segCount; i++){
                        let end = cmap.endCode.get(i);
                        let start = cmap.startCode.get(i);
                        let rangeOffset = cmap.idRangeOffset.get(i);
                        let delta = cmap.idDelta.get(i);
                        for(var c = start; c <= end; c++){
                            let g = 0;
                            if (rangeOffset === 0) g = c + delta;
                            else {
                                let index = rangeOffset / 2 + (c - start) - (cmap.segCount - i);
                                g = cmap.glyphIndexArray.get(index) || 0;
                                if (g !== 0) g += delta;
                            }
                            if (g === gid) res.push(c);
                        }
                    }
                    return res;
                }
            case 12:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())if (gid >= group.glyphID && gid <= group.glyphID + (group.endCharCode - group.startCharCode)) res.push(group.startCharCode + (gid - group.glyphID));
                    return res;
                }
            case 13:
                {
                    let res = [];
                    for (let group of cmap.groups.toArray())if (gid === group.glyphID) res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(group.startCharCode, group.endCharCode + 1));
                    return res;
                }
            default:
                throw new Error(`Unknown cmap format ${cmap.version}`);
        }
    }
    constructor(cmapTable){
        // Attempt to find a Unicode cmap first
        this.encoding = null;
        this.cmap = this.findSubtable(cmapTable, [
            // 32-bit subtables
            [
                3,
                10
            ],
            [
                0,
                6
            ],
            [
                0,
                4
            ],
            // 16-bit subtables
            [
                3,
                1
            ],
            [
                0,
                3
            ],
            [
                0,
                2
            ],
            [
                0,
                1
            ],
            [
                0,
                0
            ]
        ]);
        // If not unicode cmap was found, take the first table with a supported encoding.
        if (!this.cmap) for (let cmap of cmapTable.tables){
            let encoding = (0, $e2613b812f052cbe$export$badc544e0651b6b1)(cmap.platformID, cmap.encodingID, cmap.table.language - 1);
            let mapping = (0, $e2613b812f052cbe$export$1dceb3c14ed68bee)(encoding);
            if (mapping) {
                this.cmap = cmap.table;
                this.encoding = mapping;
            }
        }
        if (!this.cmap) throw new Error("Could not find a supported cmap table");
        this.uvs = this.findSubtable(cmapTable, [
            [
                0,
                5
            ]
        ]);
        if (this.uvs && this.uvs.version !== 14) this.uvs = null;
    }
}
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0d6e160064c86e50$export$2e2bcd8739ae039.prototype, "getCharacterSet", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0d6e160064c86e50$export$2e2bcd8739ae039.prototype, "codePointsForGlyph", null);
class $4646d52c2a559cdb$export$2e2bcd8739ae039 {
    process(glyphs, positions) {
        for(let glyphIndex = 0; glyphIndex < glyphs.length - 1; glyphIndex++){
            let left = glyphs[glyphIndex].id;
            let right = glyphs[glyphIndex + 1].id;
            positions[glyphIndex].xAdvance += this.getKerning(left, right);
        }
    }
    getKerning(left, right) {
        let res = 0;
        for (let table of this.kern.tables){
            if (table.coverage.crossStream) continue;
            switch(table.version){
                case 0:
                    if (!table.coverage.horizontal) continue;
                    break;
                case 1:
                    if (table.coverage.vertical || table.coverage.variation) continue;
                    break;
                default:
                    throw new Error(`Unsupported kerning table version ${table.version}`);
            }
            let val = 0;
            let s = table.subtable;
            switch(table.format){
                case 0:
                    let pairIdx = (0, $66a5b9fb5318558a$export$2e0ae67339d5f1ac)(s.pairs, function(pair) {
                        return left - pair.left || right - pair.right;
                    });
                    if (pairIdx >= 0) val = s.pairs[pairIdx].value;
                    break;
                case 2:
                    let leftOffset = 0, rightOffset = 0;
                    if (left >= s.leftTable.firstGlyph && left < s.leftTable.firstGlyph + s.leftTable.nGlyphs) leftOffset = s.leftTable.offsets[left - s.leftTable.firstGlyph];
                    else leftOffset = s.array.off;
                    if (right >= s.rightTable.firstGlyph && right < s.rightTable.firstGlyph + s.rightTable.nGlyphs) rightOffset = s.rightTable.offsets[right - s.rightTable.firstGlyph];
                    let index = (leftOffset + rightOffset - s.array.off) / 2;
                    val = s.array.values.get(index);
                    break;
                case 3:
                    if (left >= s.glyphCount || right >= s.glyphCount) return 0;
                    val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
                    break;
                default:
                    throw new Error(`Unsupported kerning sub-table format ${table.format}`);
            }
            // Microsoft supports the override flag, which resets the result
            // Otherwise, the sum of the results from all subtables is returned
            if (table.coverage.override) res = val;
            else res += val;
        }
        return res;
    }
    constructor(font){
        this.kern = font.kern;
    }
}
class $a57a26817cd35108$export$2e2bcd8739ae039 {
    positionGlyphs(glyphs, positions) {
        // find each base + mark cluster, and position the marks relative to the base
        let clusterStart = 0;
        let clusterEnd = 0;
        for(let index = 0; index < glyphs.length; index++){
            let glyph = glyphs[index];
            if (glyph.isMark) clusterEnd = index;
            else {
                if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
                clusterStart = clusterEnd = index;
            }
        }
        if (clusterStart !== clusterEnd) this.positionCluster(glyphs, positions, clusterStart, clusterEnd);
        return positions;
    }
    positionCluster(glyphs, positions, clusterStart, clusterEnd) {
        let base = glyphs[clusterStart];
        let baseBox = base.cbox.copy();
        // adjust bounding box for ligature glyphs
        if (base.codePoints.length > 1) baseBox.minX += (base.codePoints.length - 1) * baseBox.width / base.codePoints.length;
        let xOffset = -positions[clusterStart].xAdvance;
        let yOffset = 0;
        let yGap = this.font.unitsPerEm / 16;
        // position each of the mark glyphs relative to the base glyph
        for(let index = clusterStart + 1; index <= clusterEnd; index++){
            let mark = glyphs[index];
            let markBox = mark.cbox;
            let position = positions[index];
            let combiningClass = this.getCombiningClass(mark.codePoints[0]);
            if (combiningClass !== "Not_Reordered") {
                position.xOffset = position.yOffset = 0;
                // x positioning
                switch(combiningClass){
                    case "Double_Above":
                    case "Double_Below":
                        // LTR. TODO: RTL support.
                        position.xOffset += baseBox.minX - markBox.width / 2 - markBox.minX;
                        break;
                    case "Attached_Below_Left":
                    case "Below_Left":
                    case "Above_Left":
                        // left align
                        position.xOffset += baseBox.minX - markBox.minX;
                        break;
                    case "Attached_Above_Right":
                    case "Below_Right":
                    case "Above_Right":
                        // right align
                        position.xOffset += baseBox.maxX - markBox.width - markBox.minX;
                        break;
                    default:
                        // center align
                        position.xOffset += baseBox.minX + (baseBox.width - markBox.width) / 2 - markBox.minX;
                }
                // y positioning
                switch(combiningClass){
                    case "Double_Below":
                    case "Below_Left":
                    case "Below":
                    case "Below_Right":
                    case "Attached_Below_Left":
                    case "Attached_Below":
                        // add a small gap between the glyphs if they are not attached
                        if (combiningClass === "Attached_Below_Left" || combiningClass === "Attached_Below") baseBox.minY += yGap;
                        position.yOffset = -baseBox.minY - markBox.maxY;
                        baseBox.minY += markBox.height;
                        break;
                    case "Double_Above":
                    case "Above_Left":
                    case "Above":
                    case "Above_Right":
                    case "Attached_Above":
                    case "Attached_Above_Right":
                        // add a small gap between the glyphs if they are not attached
                        if (combiningClass === "Attached_Above" || combiningClass === "Attached_Above_Right") baseBox.maxY += yGap;
                        position.yOffset = baseBox.maxY - markBox.minY;
                        baseBox.maxY += markBox.height;
                        break;
                }
                position.xAdvance = position.yAdvance = 0;
                position.xOffset += xOffset;
                position.yOffset += yOffset;
            } else {
                xOffset -= position.xAdvance;
                yOffset -= position.yAdvance;
            }
        }
        return;
    }
    getCombiningClass(codePoint) {
        let combiningClass = (0, $elh9A$unicodeproperties.getCombiningClass)(codePoint);
        // Thai / Lao need some per-character work
        if ((codePoint & -256) === 0x0e00) {
            if (combiningClass === "Not_Reordered") switch(codePoint){
                case 0x0e31:
                case 0x0e34:
                case 0x0e35:
                case 0x0e36:
                case 0x0e37:
                case 0x0e47:
                case 0x0e4c:
                case 0x0e3d:
                case 0x0e4e:
                    return "Above_Right";
                case 0x0eb1:
                case 0x0eb4:
                case 0x0eb5:
                case 0x0eb6:
                case 0x0eb7:
                case 0x0ebb:
                case 0x0ecc:
                case 0x0ecd:
                    return "Above";
                case 0x0ebc:
                    return "Below";
            }
            else if (codePoint === 0x0e3a) return "Below_Right";
        }
        switch(combiningClass){
            // Hebrew
            case "CCC10":
            case "CCC11":
            case "CCC12":
            case "CCC13":
            case "CCC14":
            case "CCC15":
            case "CCC16":
            case "CCC17":
            case "CCC18":
            case "CCC20":
            case "CCC22":
                return "Below";
            case "CCC23":
                return "Attached_Above";
            case "CCC24":
                return "Above_Right";
            case "CCC25":
            case "CCC19":
                return "Above_Left";
            case "CCC26":
                return "Above";
            case "CCC21":
                break;
            // Arabic and Syriac
            case "CCC27":
            case "CCC28":
            case "CCC30":
            case "CCC31":
            case "CCC33":
            case "CCC34":
            case "CCC35":
            case "CCC36":
                return "Above";
            case "CCC29":
            case "CCC32":
                return "Below";
            // Thai
            case "CCC103":
                return "Below_Right";
            case "CCC107":
                return "Above_Right";
            // Lao
            case "CCC118":
                return "Below";
            case "CCC122":
                return "Above";
            // Tibetan
            case "CCC129":
            case "CCC132":
                return "Below";
            case "CCC130":
                return "Above";
        }
        return combiningClass;
    }
    constructor(font){
        this.font = font;
    }
}
/**
 * Represents a glyph bounding box
 */ class $0e2da1c4ce69e8ad$export$2e2bcd8739ae039 {
    /**
   * The width of the bounding box
   * @type {number}
   */ get width() {
        return this.maxX - this.minX;
    }
    /**
   * The height of the bounding box
   * @type {number}
   */ get height() {
        return this.maxY - this.minY;
    }
    addPoint(x, y) {
        if (Math.abs(x) !== Infinity) {
            if (x < this.minX) this.minX = x;
            if (x > this.maxX) this.maxX = x;
        }
        if (Math.abs(y) !== Infinity) {
            if (y < this.minY) this.minY = y;
            if (y > this.maxY) this.maxY = y;
        }
    }
    copy() {
        return new $0e2da1c4ce69e8ad$export$2e2bcd8739ae039(this.minX, this.minY, this.maxX, this.maxY);
    }
    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity){
        /**
     * The minimum X position in the bounding box
     * @type {number}
     */ this.minX = minX;
        /**
     * The minimum Y position in the bounding box
     * @type {number}
     */ this.minY = minY;
        /**
     * The maxmimum X position in the bounding box
     * @type {number}
     */ this.maxX = maxX;
        /**
     * The maxmimum Y position in the bounding box
     * @type {number}
     */ this.maxY = maxY;
    }
}
// This maps the Unicode Script property to an OpenType script tag
// Data from http://www.microsoft.com/typography/otspec/scripttags.htm
// and http://www.unicode.org/Public/UNIDATA/PropertyValueAliases.txt.
const $e38a1a895f6aeb54$var$UNICODE_SCRIPTS = {
    Caucasian_Albanian: "aghb",
    Arabic: "arab",
    Imperial_Aramaic: "armi",
    Armenian: "armn",
    Avestan: "avst",
    Balinese: "bali",
    Bamum: "bamu",
    Bassa_Vah: "bass",
    Batak: "batk",
    Bengali: [
        "bng2",
        "beng"
    ],
    Bopomofo: "bopo",
    Brahmi: "brah",
    Braille: "brai",
    Buginese: "bugi",
    Buhid: "buhd",
    Chakma: "cakm",
    Canadian_Aboriginal: "cans",
    Carian: "cari",
    Cham: "cham",
    Cherokee: "cher",
    Coptic: "copt",
    Cypriot: "cprt",
    Cyrillic: "cyrl",
    Devanagari: [
        "dev2",
        "deva"
    ],
    Deseret: "dsrt",
    Duployan: "dupl",
    Egyptian_Hieroglyphs: "egyp",
    Elbasan: "elba",
    Ethiopic: "ethi",
    Georgian: "geor",
    Glagolitic: "glag",
    Gothic: "goth",
    Grantha: "gran",
    Greek: "grek",
    Gujarati: [
        "gjr2",
        "gujr"
    ],
    Gurmukhi: [
        "gur2",
        "guru"
    ],
    Hangul: "hang",
    Han: "hani",
    Hanunoo: "hano",
    Hebrew: "hebr",
    Hiragana: "hira",
    Pahawh_Hmong: "hmng",
    Katakana_Or_Hiragana: "hrkt",
    Old_Italic: "ital",
    Javanese: "java",
    Kayah_Li: "kali",
    Katakana: "kana",
    Kharoshthi: "khar",
    Khmer: "khmr",
    Khojki: "khoj",
    Kannada: [
        "knd2",
        "knda"
    ],
    Kaithi: "kthi",
    Tai_Tham: "lana",
    Lao: "lao ",
    Latin: "latn",
    Lepcha: "lepc",
    Limbu: "limb",
    Linear_A: "lina",
    Linear_B: "linb",
    Lisu: "lisu",
    Lycian: "lyci",
    Lydian: "lydi",
    Mahajani: "mahj",
    Mandaic: "mand",
    Manichaean: "mani",
    Mende_Kikakui: "mend",
    Meroitic_Cursive: "merc",
    Meroitic_Hieroglyphs: "mero",
    Malayalam: [
        "mlm2",
        "mlym"
    ],
    Modi: "modi",
    Mongolian: "mong",
    Mro: "mroo",
    Meetei_Mayek: "mtei",
    Myanmar: [
        "mym2",
        "mymr"
    ],
    Old_North_Arabian: "narb",
    Nabataean: "nbat",
    Nko: "nko ",
    Ogham: "ogam",
    Ol_Chiki: "olck",
    Old_Turkic: "orkh",
    Oriya: [
        "ory2",
        "orya"
    ],
    Osmanya: "osma",
    Palmyrene: "palm",
    Pau_Cin_Hau: "pauc",
    Old_Permic: "perm",
    Phags_Pa: "phag",
    Inscriptional_Pahlavi: "phli",
    Psalter_Pahlavi: "phlp",
    Phoenician: "phnx",
    Miao: "plrd",
    Inscriptional_Parthian: "prti",
    Rejang: "rjng",
    Runic: "runr",
    Samaritan: "samr",
    Old_South_Arabian: "sarb",
    Saurashtra: "saur",
    Shavian: "shaw",
    Sharada: "shrd",
    Siddham: "sidd",
    Khudawadi: "sind",
    Sinhala: "sinh",
    Sora_Sompeng: "sora",
    Sundanese: "sund",
    Syloti_Nagri: "sylo",
    Syriac: "syrc",
    Tagbanwa: "tagb",
    Takri: "takr",
    Tai_Le: "tale",
    New_Tai_Lue: "talu",
    Tamil: [
        "tml2",
        "taml"
    ],
    Tai_Viet: "tavt",
    Telugu: [
        "tel2",
        "telu"
    ],
    Tifinagh: "tfng",
    Tagalog: "tglg",
    Thaana: "thaa",
    Thai: "thai",
    Tibetan: "tibt",
    Tirhuta: "tirh",
    Ugaritic: "ugar",
    Vai: "vai ",
    Warang_Citi: "wara",
    Old_Persian: "xpeo",
    Cuneiform: "xsux",
    Yi: "yi  ",
    Inherited: "zinh",
    Common: "zyyy",
    Unknown: "zzzz"
};
const $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS = {};
for(let script in $e38a1a895f6aeb54$var$UNICODE_SCRIPTS){
    let tag = $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
    if (Array.isArray(tag)) for (let t of tag)$e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[t] = script;
    else $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[tag] = script;
}
function $e38a1a895f6aeb54$export$b32f0b5f69d65e51(script) {
    return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
}
function $e38a1a895f6aeb54$export$ce50e82f12a827a4(tag) {
    return $e38a1a895f6aeb54$var$OPENTYPE_SCRIPTS[tag];
}
function $e38a1a895f6aeb54$export$e5cb25e204fb8450(string) {
    let len = string.length;
    let idx = 0;
    while(idx < len){
        let code = string.charCodeAt(idx++);
        // Check if this is a high surrogate
        if (0xd800 <= code && code <= 0xdbff && idx < len) {
            let next = string.charCodeAt(idx);
            // Check if this is a low surrogate
            if (0xdc00 <= next && next <= 0xdfff) {
                idx++;
                code = ((code & 0x3FF) << 10) + (next & 0x3FF) + 0x10000;
            }
        }
        let script = (0, $elh9A$unicodeproperties.getScript)(code);
        if (script !== "Common" && script !== "Inherited" && script !== "Unknown") return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
    }
    return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS.Unknown;
}
function $e38a1a895f6aeb54$export$16fab0757cfc223d(codePoints) {
    for(let i = 0; i < codePoints.length; i++){
        let codePoint = codePoints[i];
        let script = (0, $elh9A$unicodeproperties.getScript)(codePoint);
        if (script !== "Common" && script !== "Inherited" && script !== "Unknown") return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS[script];
    }
    return $e38a1a895f6aeb54$var$UNICODE_SCRIPTS.Unknown;
}
// The scripts in this map are written from right to left
const $e38a1a895f6aeb54$var$RTL = {
    arab: true,
    hebr: true,
    syrc: true,
    thaa: true,
    cprt: true,
    khar: true,
    phnx: true,
    "nko ": true,
    lydi: true,
    avst: true,
    armi: true,
    phli: true,
    prti: true,
    sarb: true,
    orkh: true,
    samr: true,
    mand: true,
    merc: true,
    mero: true,
    // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
    mani: true,
    mend: true,
    nbat: true,
    narb: true,
    palm: true,
    phlp: true // Psalter Pahlavi
};
function $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script) {
    if ($e38a1a895f6aeb54$var$RTL[script]) return "rtl";
    return "ltr";
}
class $b19c79ec7a94fa39$export$2e2bcd8739ae039 {
    /**
   * The total advance width of the run.
   * @type {number}
   */ get advanceWidth() {
        let width = 0;
        for (let position of this.positions)width += position.xAdvance;
        return width;
    }
    /**
  * The total advance height of the run.
  * @type {number}
  */ get advanceHeight() {
        let height = 0;
        for (let position of this.positions)height += position.yAdvance;
        return height;
    }
    /**
  * The bounding box containing all glyphs in the run.
  * @type {BBox}
  */ get bbox() {
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039);
        let x = 0;
        let y = 0;
        for(let index = 0; index < this.glyphs.length; index++){
            let glyph = this.glyphs[index];
            let p = this.positions[index];
            let b = glyph.bbox;
            bbox.addPoint(b.minX + x + p.xOffset, b.minY + y + p.yOffset);
            bbox.addPoint(b.maxX + x + p.xOffset, b.maxY + y + p.yOffset);
            x += p.xAdvance;
            y += p.yAdvance;
        }
        return bbox;
    }
    constructor(glyphs, features, script, language, direction){
        /**
     * An array of Glyph objects in the run
     * @type {Glyph[]}
     */ this.glyphs = glyphs;
        /**
     * An array of GlyphPosition objects for each glyph in the run
     * @type {GlyphPosition[]}
     */ this.positions = null;
        /**
     * The script that was requested for shaping. This was either passed in or detected automatically.
     * @type {string}
     */ this.script = script;
        /**
     * The language requested for shaping, as passed in. If `null`, the default language for the
     * script was used.
     * @type {string}
     */ this.language = language || null;
        /**
     * The direction requested for shaping, as passed in (either ltr or rtl).
     * If `null`, the default direction of the script is used.
     * @type {string}
     */ this.direction = direction || $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script);
        /**
     * The features requested during shaping. This is a combination of user
     * specified features and features chosen by the shaper.
     * @type {object}
     */ this.features = {};
        // Convert features to an object
        if (Array.isArray(features)) for (let tag of features)this.features[tag] = true;
        else if (typeof features === "object") this.features = features;
    }
}
/**
 * Represents positioning information for a glyph in a GlyphRun.
 */ class $9195cf1266c12ea5$export$2e2bcd8739ae039 {
    constructor(xAdvance = 0, yAdvance = 0, xOffset = 0, yOffset = 0){
        /**
     * The amount to move the virtual pen in the X direction after rendering this glyph.
     * @type {number}
     */ this.xAdvance = xAdvance;
        /**
     * The amount to move the virtual pen in the Y direction after rendering this glyph.
     * @type {number}
     */ this.yAdvance = yAdvance;
        /**
     * The offset from the pen position in the X direction at which to render this glyph.
     * @type {number}
     */ this.xOffset = xOffset;
        /**
     * The offset from the pen position in the Y direction at which to render this glyph.
     * @type {number}
     */ this.yOffset = yOffset;
    }
}
// see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM09/AppendixF.html
// and /System/Library/Frameworks/CoreText.framework/Versions/A/Headers/SFNTLayoutTypes.h on a Mac
const $2b7f887ebcb5888a$var$features = {
    allTypographicFeatures: {
        code: 0,
        exclusive: false,
        allTypeFeatures: 0
    },
    ligatures: {
        code: 1,
        exclusive: false,
        requiredLigatures: 0,
        commonLigatures: 2,
        rareLigatures: 4,
        // logos: 6
        rebusPictures: 8,
        diphthongLigatures: 10,
        squaredLigatures: 12,
        abbrevSquaredLigatures: 14,
        symbolLigatures: 16,
        contextualLigatures: 18,
        historicalLigatures: 20
    },
    cursiveConnection: {
        code: 2,
        exclusive: true,
        unconnected: 0,
        partiallyConnected: 1,
        cursive: 2
    },
    letterCase: {
        code: 3,
        exclusive: true
    },
    // upperAndLowerCase: 0          # deprecated
    // allCaps: 1                    # deprecated
    // allLowerCase: 2               # deprecated
    // smallCaps: 3                  # deprecated
    // initialCaps: 4                # deprecated
    // initialCapsAndSmallCaps: 5    # deprecated
    verticalSubstitution: {
        code: 4,
        exclusive: false,
        substituteVerticalForms: 0
    },
    linguisticRearrangement: {
        code: 5,
        exclusive: false,
        linguisticRearrangement: 0
    },
    numberSpacing: {
        code: 6,
        exclusive: true,
        monospacedNumbers: 0,
        proportionalNumbers: 1,
        thirdWidthNumbers: 2,
        quarterWidthNumbers: 3
    },
    smartSwash: {
        code: 8,
        exclusive: false,
        wordInitialSwashes: 0,
        wordFinalSwashes: 2,
        // lineInitialSwashes: 4
        // lineFinalSwashes: 6
        nonFinalSwashes: 8
    },
    diacritics: {
        code: 9,
        exclusive: true,
        showDiacritics: 0,
        hideDiacritics: 1,
        decomposeDiacritics: 2
    },
    verticalPosition: {
        code: 10,
        exclusive: true,
        normalPosition: 0,
        superiors: 1,
        inferiors: 2,
        ordinals: 3,
        scientificInferiors: 4
    },
    fractions: {
        code: 11,
        exclusive: true,
        noFractions: 0,
        verticalFractions: 1,
        diagonalFractions: 2
    },
    overlappingCharacters: {
        code: 13,
        exclusive: false,
        preventOverlap: 0
    },
    typographicExtras: {
        code: 14,
        exclusive: false,
        // hyphensToEmDash: 0
        // hyphenToEnDash: 2
        slashedZero: 4
    },
    // formInterrobang: 6
    // smartQuotes: 8
    // periodsToEllipsis: 10
    mathematicalExtras: {
        code: 15,
        exclusive: false,
        // hyphenToMinus: 0
        // asteristoMultiply: 2
        // slashToDivide: 4
        // inequalityLigatures: 6
        // exponents: 8
        mathematicalGreek: 10
    },
    ornamentSets: {
        code: 16,
        exclusive: true,
        noOrnaments: 0,
        dingbats: 1,
        piCharacters: 2,
        fleurons: 3,
        decorativeBorders: 4,
        internationalSymbols: 5,
        mathSymbols: 6
    },
    characterAlternatives: {
        code: 17,
        exclusive: true,
        noAlternates: 0
    },
    // user defined options
    designComplexity: {
        code: 18,
        exclusive: true,
        designLevel1: 0,
        designLevel2: 1,
        designLevel3: 2,
        designLevel4: 3,
        designLevel5: 4
    },
    styleOptions: {
        code: 19,
        exclusive: true,
        noStyleOptions: 0,
        displayText: 1,
        engravedText: 2,
        illuminatedCaps: 3,
        titlingCaps: 4,
        tallCaps: 5
    },
    characterShape: {
        code: 20,
        exclusive: true,
        traditionalCharacters: 0,
        simplifiedCharacters: 1,
        JIS1978Characters: 2,
        JIS1983Characters: 3,
        JIS1990Characters: 4,
        traditionalAltOne: 5,
        traditionalAltTwo: 6,
        traditionalAltThree: 7,
        traditionalAltFour: 8,
        traditionalAltFive: 9,
        expertCharacters: 10,
        JIS2004Characters: 11,
        hojoCharacters: 12,
        NLCCharacters: 13,
        traditionalNamesCharacters: 14
    },
    numberCase: {
        code: 21,
        exclusive: true,
        lowerCaseNumbers: 0,
        upperCaseNumbers: 1
    },
    textSpacing: {
        code: 22,
        exclusive: true,
        proportionalText: 0,
        monospacedText: 1,
        halfWidthText: 2,
        thirdWidthText: 3,
        quarterWidthText: 4,
        altProportionalText: 5,
        altHalfWidthText: 6
    },
    transliteration: {
        code: 23,
        exclusive: true,
        noTransliteration: 0
    },
    // hanjaToHangul: 1
    // hiraganaToKatakana: 2
    // katakanaToHiragana: 3
    // kanaToRomanization: 4
    // romanizationToHiragana: 5
    // romanizationToKatakana: 6
    // hanjaToHangulAltOne: 7
    // hanjaToHangulAltTwo: 8
    // hanjaToHangulAltThree: 9
    annotation: {
        code: 24,
        exclusive: true,
        noAnnotation: 0,
        boxAnnotation: 1,
        roundedBoxAnnotation: 2,
        circleAnnotation: 3,
        invertedCircleAnnotation: 4,
        parenthesisAnnotation: 5,
        periodAnnotation: 6,
        romanNumeralAnnotation: 7,
        diamondAnnotation: 8,
        invertedBoxAnnotation: 9,
        invertedRoundedBoxAnnotation: 10
    },
    kanaSpacing: {
        code: 25,
        exclusive: true,
        fullWidthKana: 0,
        proportionalKana: 1
    },
    ideographicSpacing: {
        code: 26,
        exclusive: true,
        fullWidthIdeographs: 0,
        proportionalIdeographs: 1,
        halfWidthIdeographs: 2
    },
    unicodeDecomposition: {
        code: 27,
        exclusive: false,
        canonicalComposition: 0,
        compatibilityComposition: 2,
        transcodingComposition: 4
    },
    rubyKana: {
        code: 28,
        exclusive: false,
        // noRubyKana: 0     # deprecated - use rubyKanaOff instead
        // rubyKana: 1     # deprecated - use rubyKanaOn instead
        rubyKana: 2
    },
    CJKSymbolAlternatives: {
        code: 29,
        exclusive: true,
        noCJKSymbolAlternatives: 0,
        CJKSymbolAltOne: 1,
        CJKSymbolAltTwo: 2,
        CJKSymbolAltThree: 3,
        CJKSymbolAltFour: 4,
        CJKSymbolAltFive: 5
    },
    ideographicAlternatives: {
        code: 30,
        exclusive: true,
        noIdeographicAlternatives: 0,
        ideographicAltOne: 1,
        ideographicAltTwo: 2,
        ideographicAltThree: 3,
        ideographicAltFour: 4,
        ideographicAltFive: 5
    },
    CJKVerticalRomanPlacement: {
        code: 31,
        exclusive: true,
        CJKVerticalRomanCentered: 0,
        CJKVerticalRomanHBaseline: 1
    },
    italicCJKRoman: {
        code: 32,
        exclusive: false,
        // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
        // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
        CJKItalicRoman: 2
    },
    caseSensitiveLayout: {
        code: 33,
        exclusive: false,
        caseSensitiveLayout: 0,
        caseSensitiveSpacing: 2
    },
    alternateKana: {
        code: 34,
        exclusive: false,
        alternateHorizKana: 0,
        alternateVertKana: 2
    },
    stylisticAlternatives: {
        code: 35,
        exclusive: false,
        noStylisticAlternates: 0,
        stylisticAltOne: 2,
        stylisticAltTwo: 4,
        stylisticAltThree: 6,
        stylisticAltFour: 8,
        stylisticAltFive: 10,
        stylisticAltSix: 12,
        stylisticAltSeven: 14,
        stylisticAltEight: 16,
        stylisticAltNine: 18,
        stylisticAltTen: 20,
        stylisticAltEleven: 22,
        stylisticAltTwelve: 24,
        stylisticAltThirteen: 26,
        stylisticAltFourteen: 28,
        stylisticAltFifteen: 30,
        stylisticAltSixteen: 32,
        stylisticAltSeventeen: 34,
        stylisticAltEighteen: 36,
        stylisticAltNineteen: 38,
        stylisticAltTwenty: 40
    },
    contextualAlternates: {
        code: 36,
        exclusive: false,
        contextualAlternates: 0,
        swashAlternates: 2,
        contextualSwashAlternates: 4
    },
    lowerCase: {
        code: 37,
        exclusive: true,
        defaultLowerCase: 0,
        lowerCaseSmallCaps: 1,
        lowerCasePetiteCaps: 2
    },
    upperCase: {
        code: 38,
        exclusive: true,
        defaultUpperCase: 0,
        upperCaseSmallCaps: 1,
        upperCasePetiteCaps: 2
    },
    languageTag: {
        code: 39,
        exclusive: true
    },
    CJKRomanSpacing: {
        code: 103,
        exclusive: true,
        halfWidthCJKRoman: 0,
        proportionalCJKRoman: 1,
        defaultCJKRoman: 2,
        fullWidthCJKRoman: 3
    }
};
const $2b7f887ebcb5888a$var$feature = (name, selector)=>[
        $2b7f887ebcb5888a$var$features[name].code,
        $2b7f887ebcb5888a$var$features[name][selector]
    ];
const $2b7f887ebcb5888a$var$OTMapping = {
    rlig: $2b7f887ebcb5888a$var$feature("ligatures", "requiredLigatures"),
    clig: $2b7f887ebcb5888a$var$feature("ligatures", "contextualLigatures"),
    dlig: $2b7f887ebcb5888a$var$feature("ligatures", "rareLigatures"),
    hlig: $2b7f887ebcb5888a$var$feature("ligatures", "historicalLigatures"),
    liga: $2b7f887ebcb5888a$var$feature("ligatures", "commonLigatures"),
    hist: $2b7f887ebcb5888a$var$feature("ligatures", "historicalLigatures"),
    smcp: $2b7f887ebcb5888a$var$feature("lowerCase", "lowerCaseSmallCaps"),
    pcap: $2b7f887ebcb5888a$var$feature("lowerCase", "lowerCasePetiteCaps"),
    frac: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
    dnom: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
    numr: $2b7f887ebcb5888a$var$feature("fractions", "diagonalFractions"),
    afrc: $2b7f887ebcb5888a$var$feature("fractions", "verticalFractions"),
    // aalt
    // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
    // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
    // unic, vatu, vhal, vjmo, vpal, vrt2
    // dist -> trak table?
    // kern, vkrn -> kern table
    // lfbd + opbd + rtbd -> opbd table?
    // mark, mkmk -> acnt table?
    // locl -> languageTag + ltag table
    case: $2b7f887ebcb5888a$var$feature("caseSensitiveLayout", "caseSensitiveLayout"),
    ccmp: $2b7f887ebcb5888a$var$feature("unicodeDecomposition", "canonicalComposition"),
    cpct: $2b7f887ebcb5888a$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
    valt: $2b7f887ebcb5888a$var$feature("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
    swsh: $2b7f887ebcb5888a$var$feature("contextualAlternates", "swashAlternates"),
    cswh: $2b7f887ebcb5888a$var$feature("contextualAlternates", "contextualSwashAlternates"),
    curs: $2b7f887ebcb5888a$var$feature("cursiveConnection", "cursive"),
    c2pc: $2b7f887ebcb5888a$var$feature("upperCase", "upperCasePetiteCaps"),
    c2sc: $2b7f887ebcb5888a$var$feature("upperCase", "upperCaseSmallCaps"),
    init: $2b7f887ebcb5888a$var$feature("smartSwash", "wordInitialSwashes"),
    fin2: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
    medi: $2b7f887ebcb5888a$var$feature("smartSwash", "nonFinalSwashes"),
    med2: $2b7f887ebcb5888a$var$feature("smartSwash", "nonFinalSwashes"),
    fin3: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
    fina: $2b7f887ebcb5888a$var$feature("smartSwash", "wordFinalSwashes"),
    pkna: $2b7f887ebcb5888a$var$feature("kanaSpacing", "proportionalKana"),
    half: $2b7f887ebcb5888a$var$feature("textSpacing", "halfWidthText"),
    halt: $2b7f887ebcb5888a$var$feature("textSpacing", "altHalfWidthText"),
    hkna: $2b7f887ebcb5888a$var$feature("alternateKana", "alternateHorizKana"),
    vkna: $2b7f887ebcb5888a$var$feature("alternateKana", "alternateVertKana"),
    // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
    ital: $2b7f887ebcb5888a$var$feature("italicCJKRoman", "CJKItalicRoman"),
    lnum: $2b7f887ebcb5888a$var$feature("numberCase", "upperCaseNumbers"),
    onum: $2b7f887ebcb5888a$var$feature("numberCase", "lowerCaseNumbers"),
    mgrk: $2b7f887ebcb5888a$var$feature("mathematicalExtras", "mathematicalGreek"),
    // nalt: not enough info. what type of annotation?
    // ornm: ditto, which ornament style?
    calt: $2b7f887ebcb5888a$var$feature("contextualAlternates", "contextualAlternates"),
    vrt2: $2b7f887ebcb5888a$var$feature("verticalSubstitution", "substituteVerticalForms"),
    vert: $2b7f887ebcb5888a$var$feature("verticalSubstitution", "substituteVerticalForms"),
    tnum: $2b7f887ebcb5888a$var$feature("numberSpacing", "monospacedNumbers"),
    pnum: $2b7f887ebcb5888a$var$feature("numberSpacing", "proportionalNumbers"),
    sups: $2b7f887ebcb5888a$var$feature("verticalPosition", "superiors"),
    subs: $2b7f887ebcb5888a$var$feature("verticalPosition", "inferiors"),
    ordn: $2b7f887ebcb5888a$var$feature("verticalPosition", "ordinals"),
    pwid: $2b7f887ebcb5888a$var$feature("textSpacing", "proportionalText"),
    hwid: $2b7f887ebcb5888a$var$feature("textSpacing", "halfWidthText"),
    qwid: $2b7f887ebcb5888a$var$feature("textSpacing", "quarterWidthText"),
    twid: $2b7f887ebcb5888a$var$feature("textSpacing", "thirdWidthText"),
    fwid: $2b7f887ebcb5888a$var$feature("textSpacing", "proportionalText"),
    palt: $2b7f887ebcb5888a$var$feature("textSpacing", "altProportionalText"),
    trad: $2b7f887ebcb5888a$var$feature("characterShape", "traditionalCharacters"),
    smpl: $2b7f887ebcb5888a$var$feature("characterShape", "simplifiedCharacters"),
    jp78: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1978Characters"),
    jp83: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1983Characters"),
    jp90: $2b7f887ebcb5888a$var$feature("characterShape", "JIS1990Characters"),
    jp04: $2b7f887ebcb5888a$var$feature("characterShape", "JIS2004Characters"),
    expt: $2b7f887ebcb5888a$var$feature("characterShape", "expertCharacters"),
    hojo: $2b7f887ebcb5888a$var$feature("characterShape", "hojoCharacters"),
    nlck: $2b7f887ebcb5888a$var$feature("characterShape", "NLCCharacters"),
    tnam: $2b7f887ebcb5888a$var$feature("characterShape", "traditionalNamesCharacters"),
    ruby: $2b7f887ebcb5888a$var$feature("rubyKana", "rubyKana"),
    titl: $2b7f887ebcb5888a$var$feature("styleOptions", "titlingCaps"),
    zero: $2b7f887ebcb5888a$var$feature("typographicExtras", "slashedZero"),
    ss01: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltOne"),
    ss02: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwo"),
    ss03: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltThree"),
    ss04: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFour"),
    ss05: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFive"),
    ss06: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSix"),
    ss07: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSeven"),
    ss08: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEight"),
    ss09: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltNine"),
    ss10: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTen"),
    ss11: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEleven"),
    ss12: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwelve"),
    ss13: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltThirteen"),
    ss14: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFourteen"),
    ss15: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltFifteen"),
    ss16: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSixteen"),
    ss17: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltSeventeen"),
    ss18: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltEighteen"),
    ss19: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltNineteen"),
    ss20: $2b7f887ebcb5888a$var$feature("stylisticAlternatives", "stylisticAltTwenty")
};
// salt: feature 'stylisticAlternatives', 'stylisticAltOne' # hmm, which one to choose
// Add cv01-cv99 features
for(let i = 1; i <= 99; i++)$2b7f887ebcb5888a$var$OTMapping[`cv${`00${i}`.slice(-2)}`] = [
    $2b7f887ebcb5888a$var$features.characterAlternatives.code,
    i
];
// create inverse mapping
let $2b7f887ebcb5888a$var$AATMapping = {};
for(let ot in $2b7f887ebcb5888a$var$OTMapping){
    let aat = $2b7f887ebcb5888a$var$OTMapping[ot];
    if ($2b7f887ebcb5888a$var$AATMapping[aat[0]] == null) $2b7f887ebcb5888a$var$AATMapping[aat[0]] = {};
    $2b7f887ebcb5888a$var$AATMapping[aat[0]][aat[1]] = ot;
}
function $2b7f887ebcb5888a$export$b813f7d2a1677c16(features) {
    let res = {};
    for(let k in features){
        let r;
        if (r = $2b7f887ebcb5888a$var$OTMapping[k]) {
            if (res[r[0]] == null) res[r[0]] = {};
            res[r[0]][r[1]] = features[k];
        }
    }
    return res;
}
// Maps strings in a [featureType, featureSetting]
// to their equivalent number codes
function $2b7f887ebcb5888a$var$mapFeatureStrings(f) {
    let [type, setting] = f;
    if (isNaN(type)) var typeCode = $2b7f887ebcb5888a$var$features[type] && $2b7f887ebcb5888a$var$features[type].code;
    else var typeCode = type;
    if (isNaN(setting)) var settingCode = $2b7f887ebcb5888a$var$features[type] && $2b7f887ebcb5888a$var$features[type][setting];
    else var settingCode = setting;
    return [
        typeCode,
        settingCode
    ];
}
function $2b7f887ebcb5888a$export$bd6df347a4f391c4(features) {
    let res = {};
    if (Array.isArray(features)) for(let k = 0; k < features.length; k++){
        let r;
        let f = $2b7f887ebcb5888a$var$mapFeatureStrings(features[k]);
        if (r = $2b7f887ebcb5888a$var$AATMapping[f[0]] && $2b7f887ebcb5888a$var$AATMapping[f[0]][f[1]]) res[r] = true;
    }
    else if (typeof features === "object") for(let type in features){
        let feature = features[type];
        for(let setting in feature){
            let r;
            let f = $2b7f887ebcb5888a$var$mapFeatureStrings([
                type,
                setting
            ]);
            if (feature[setting] && (r = $2b7f887ebcb5888a$var$AATMapping[f[0]] && $2b7f887ebcb5888a$var$AATMapping[f[0]][f[1]])) res[r] = true;
        }
    }
    return Object.keys(res);
}
class $f3d63ae925545400$export$2e2bcd8739ae039 {
    lookup(glyph) {
        switch(this.table.version){
            case 0:
                return this.table.values.getItem(glyph);
            case 2:
            case 4:
                {
                    let min = 0;
                    let max = this.table.binarySearchHeader.nUnits - 1;
                    while(min <= max){
                        var mid = min + max >> 1;
                        var seg = this.table.segments[mid];
                        // special end of search value
                        if (seg.firstGlyph === 0xffff) return null;
                        if (glyph < seg.firstGlyph) max = mid - 1;
                        else if (glyph > seg.lastGlyph) min = mid + 1;
                        else {
                            if (this.table.version === 2) return seg.value;
                            else return seg.values[glyph - seg.firstGlyph];
                        }
                    }
                    return null;
                }
            case 6:
                {
                    let min = 0;
                    let max = this.table.binarySearchHeader.nUnits - 1;
                    while(min <= max){
                        var mid = min + max >> 1;
                        var seg = this.table.segments[mid];
                        // special end of search value
                        if (seg.glyph === 0xffff) return null;
                        if (glyph < seg.glyph) max = mid - 1;
                        else if (glyph > seg.glyph) min = mid + 1;
                        else return seg.value;
                    }
                    return null;
                }
            case 8:
                return this.table.values[glyph - this.table.firstGlyph];
            default:
                throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
    }
    glyphsForValue(classValue) {
        let res = [];
        switch(this.table.version){
            case 2:
            case 4:
                for (let segment of this.table.segments)if (this.table.version === 2 && segment.value === classValue) res.push(...(0, $66a5b9fb5318558a$export$d02631cccf789723)(segment.firstGlyph, segment.lastGlyph + 1));
                else {
                    for(let index = 0; index < segment.values.length; index++)if (segment.values[index] === classValue) res.push(segment.firstGlyph + index);
                }
                break;
            case 6:
                for (let segment of this.table.segments)if (segment.value === classValue) res.push(segment.glyph);
                break;
            case 8:
                for(let i = 0; i < this.table.values.length; i++)if (this.table.values[i] === classValue) res.push(this.table.firstGlyph + i);
                break;
            default:
                throw new Error(`Unknown lookup table format: ${this.table.version}`);
        }
        return res;
    }
    constructor(table){
        this.table = table;
    }
}
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $f3d63ae925545400$export$2e2bcd8739ae039.prototype, "glyphsForValue", null);
const $860c6347bb941b91$var$START_OF_TEXT_STATE = 0;
const $860c6347bb941b91$var$START_OF_LINE_STATE = 1;
const $860c6347bb941b91$var$END_OF_TEXT_CLASS = 0;
const $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS = 1;
const $860c6347bb941b91$var$DELETED_GLYPH_CLASS = 2;
const $860c6347bb941b91$var$END_OF_LINE_CLASS = 3;
const $860c6347bb941b91$var$DONT_ADVANCE = 0x4000;
class $860c6347bb941b91$export$2e2bcd8739ae039 {
    process(glyphs, reverse, processEntry) {
        let currentState = $860c6347bb941b91$var$START_OF_TEXT_STATE; // START_OF_LINE_STATE is used for kashida glyph insertions sometimes I think?
        let index = reverse ? glyphs.length - 1 : 0;
        let dir = reverse ? -1 : 1;
        while(dir === 1 && index <= glyphs.length || dir === -1 && index >= -1){
            let glyph = null;
            let classCode = $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS;
            let shouldAdvance = true;
            if (index === glyphs.length || index === -1) classCode = $860c6347bb941b91$var$END_OF_TEXT_CLASS;
            else {
                glyph = glyphs[index];
                if (glyph.id === 0xffff) classCode = $860c6347bb941b91$var$DELETED_GLYPH_CLASS;
                else {
                    classCode = this.lookupTable.lookup(glyph.id);
                    if (classCode == null) classCode = $860c6347bb941b91$var$OUT_OF_BOUNDS_CLASS;
                }
            }
            let row = this.stateTable.stateArray.getItem(currentState);
            let entryIndex = row[classCode];
            let entry = this.stateTable.entryTable.getItem(entryIndex);
            if (classCode !== $860c6347bb941b91$var$END_OF_TEXT_CLASS && classCode !== $860c6347bb941b91$var$DELETED_GLYPH_CLASS) {
                processEntry(glyph, entry, index);
                shouldAdvance = !(entry.flags & $860c6347bb941b91$var$DONT_ADVANCE);
            }
            currentState = entry.newState;
            if (shouldAdvance) index += dir;
        }
        return glyphs;
    }
    /**
   * Performs a depth-first traversal of the glyph strings
   * represented by the state machine.
   */ traverse(opts, state = 0, visited = new Set) {
        if (visited.has(state)) return;
        visited.add(state);
        let { nClasses: nClasses, stateArray: stateArray, entryTable: entryTable } = this.stateTable;
        let row = stateArray.getItem(state);
        // Skip predefined classes
        for(let classCode = 4; classCode < nClasses; classCode++){
            let entryIndex = row[classCode];
            let entry = entryTable.getItem(entryIndex);
            // Try all glyphs in the class
            for (let glyph of this.lookupTable.glyphsForValue(classCode)){
                if (opts.enter) opts.enter(glyph, entry);
                if (entry.newState !== 0) this.traverse(opts, entry.newState, visited);
                if (opts.exit) opts.exit(glyph, entry);
            }
        }
    }
    constructor(stateTable){
        this.stateTable = stateTable;
        this.lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(stateTable.classTable);
    }
}
// indic replacement flags
const $99be642f82069918$var$MARK_FIRST = 0x8000;
const $99be642f82069918$var$MARK_LAST = 0x2000;
const $99be642f82069918$var$VERB = 0x000F;
// contextual substitution and glyph insertion flag
const $99be642f82069918$var$SET_MARK = 0x8000;
// ligature entry flags
const $99be642f82069918$var$SET_COMPONENT = 0x8000;
const $99be642f82069918$var$PERFORM_ACTION = 0x2000;
// ligature action masks
const $99be642f82069918$var$LAST_MASK = 0x80000000;
const $99be642f82069918$var$STORE_MASK = 0x40000000;
const $99be642f82069918$var$OFFSET_MASK = 0x3FFFFFFF;
const $99be642f82069918$var$VERTICAL_ONLY = 0x800000;
const $99be642f82069918$var$REVERSE_DIRECTION = 0x400000;
const $99be642f82069918$var$HORIZONTAL_AND_VERTICAL = 0x200000;
// glyph insertion flags
const $99be642f82069918$var$CURRENT_IS_KASHIDA_LIKE = 0x2000;
const $99be642f82069918$var$MARKED_IS_KASHIDA_LIKE = 0x1000;
const $99be642f82069918$var$CURRENT_INSERT_BEFORE = 0x0800;
const $99be642f82069918$var$MARKED_INSERT_BEFORE = 0x0400;
const $99be642f82069918$var$CURRENT_INSERT_COUNT = 0x03E0;
const $99be642f82069918$var$MARKED_INSERT_COUNT = 0x001F;
class $99be642f82069918$export$2e2bcd8739ae039 {
    // Processes an array of glyphs and applies the specified features
    // Features should be in the form of {featureType:{featureSetting:boolean}}
    process(glyphs, features = {}) {
        for (let chain of this.morx.chains){
            let flags = chain.defaultFlags;
            // enable/disable the requested features
            for (let feature of chain.features){
                let f;
                if (f = features[feature.featureType]) {
                    if (f[feature.featureSetting]) {
                        flags &= feature.disableFlags;
                        flags |= feature.enableFlags;
                    } else if (f[feature.featureSetting] === false) {
                        flags |= ~feature.disableFlags;
                        flags &= ~feature.enableFlags;
                    }
                }
            }
            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.processSubtable(subtable, glyphs);
        }
        // remove deleted glyphs
        let index = glyphs.length - 1;
        while(index >= 0){
            if (glyphs[index].id === 0xffff) glyphs.splice(index, 1);
            index--;
        }
        return glyphs;
    }
    processSubtable(subtable, glyphs) {
        this.subtable = subtable;
        this.glyphs = glyphs;
        if (this.subtable.type === 4) {
            this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
            return;
        }
        this.ligatureStack = [];
        this.markedGlyph = null;
        this.firstGlyph = null;
        this.lastGlyph = null;
        this.markedIndex = null;
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let reverse = !!(this.subtable.coverage & $99be642f82069918$var$REVERSE_DIRECTION);
        return stateMachine.process(this.glyphs, reverse, process);
    }
    getStateMachine(subtable) {
        return new (0, $860c6347bb941b91$export$2e2bcd8739ae039)(subtable.table.stateTable);
    }
    getProcessor() {
        switch(this.subtable.type){
            case 0:
                return this.processIndicRearragement;
            case 1:
                return this.processContextualSubstitution;
            case 2:
                return this.processLigature;
            case 4:
                return this.processNoncontextualSubstitutions;
            case 5:
                return this.processGlyphInsertion;
            default:
                throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
        }
    }
    processIndicRearragement(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$MARK_FIRST) this.firstGlyph = index;
        if (entry.flags & $99be642f82069918$var$MARK_LAST) this.lastGlyph = index;
        $99be642f82069918$var$reorderGlyphs(this.glyphs, entry.flags & $99be642f82069918$var$VERB, this.firstGlyph, this.lastGlyph);
    }
    processContextualSubstitution(glyph, entry, index) {
        let subsitutions = this.subtable.table.substitutionTable.items;
        if (entry.markIndex !== 0xffff) {
            let lookup = subsitutions.getItem(entry.markIndex);
            let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(lookup);
            glyph = this.glyphs[this.markedGlyph];
            var gid = lookupTable.lookup(glyph.id);
            if (gid) this.glyphs[this.markedGlyph] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.currentIndex !== 0xffff) {
            let lookup = subsitutions.getItem(entry.currentIndex);
            let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(lookup);
            glyph = this.glyphs[index];
            var gid = lookupTable.lookup(glyph.id);
            if (gid) this.glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
        }
        if (entry.flags & $99be642f82069918$var$SET_MARK) this.markedGlyph = index;
    }
    processLigature(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$SET_COMPONENT) this.ligatureStack.push(index);
        if (entry.flags & $99be642f82069918$var$PERFORM_ACTION) {
            let actions = this.subtable.table.ligatureActions;
            let components = this.subtable.table.components;
            let ligatureList = this.subtable.table.ligatureList;
            let actionIndex = entry.action;
            let last = false;
            let ligatureIndex = 0;
            let codePoints = [];
            let ligatureGlyphs = [];
            while(!last){
                let componentGlyph = this.ligatureStack.pop();
                codePoints.unshift(...this.glyphs[componentGlyph].codePoints);
                let action = actions.getItem(actionIndex++);
                last = !!(action & $99be642f82069918$var$LAST_MASK);
                let store = !!(action & $99be642f82069918$var$STORE_MASK);
                let offset = (action & $99be642f82069918$var$OFFSET_MASK) << 2 >> 2; // sign extend 30 to 32 bits
                offset += this.glyphs[componentGlyph].id;
                let component = components.getItem(offset);
                ligatureIndex += component;
                if (last || store) {
                    let ligatureEntry = ligatureList.getItem(ligatureIndex);
                    this.glyphs[componentGlyph] = this.font.getGlyph(ligatureEntry, codePoints);
                    ligatureGlyphs.push(componentGlyph);
                    ligatureIndex = 0;
                    codePoints = [];
                } else this.glyphs[componentGlyph] = this.font.getGlyph(0xffff);
            }
            // Put ligature glyph indexes back on the stack
            this.ligatureStack.push(...ligatureGlyphs);
        }
    }
    processNoncontextualSubstitutions(subtable, glyphs, index) {
        let lookupTable = new (0, $f3d63ae925545400$export$2e2bcd8739ae039)(subtable.table.lookupTable);
        for(index = 0; index < glyphs.length; index++){
            let glyph = glyphs[index];
            if (glyph.id !== 0xffff) {
                let gid = lookupTable.lookup(glyph.id);
                if (gid) glyphs[index] = this.font.getGlyph(gid, glyph.codePoints);
            }
        }
    }
    _insertGlyphs(glyphIndex, insertionActionIndex, count, isBefore) {
        let insertions = [];
        while(count--){
            let gid = this.subtable.table.insertionActions.getItem(insertionActionIndex++);
            insertions.push(this.font.getGlyph(gid));
        }
        if (!isBefore) glyphIndex++;
        this.glyphs.splice(glyphIndex, 0, ...insertions);
    }
    processGlyphInsertion(glyph, entry, index) {
        if (entry.flags & $99be642f82069918$var$SET_MARK) this.markedIndex = index;
        if (entry.markedInsertIndex !== 0xffff) {
            let count = (entry.flags & $99be642f82069918$var$MARKED_INSERT_COUNT) >>> 5;
            let isBefore = !!(entry.flags & $99be642f82069918$var$MARKED_INSERT_BEFORE);
            this._insertGlyphs(this.markedIndex, entry.markedInsertIndex, count, isBefore);
        }
        if (entry.currentInsertIndex !== 0xffff) {
            let count = (entry.flags & $99be642f82069918$var$CURRENT_INSERT_COUNT) >>> 5;
            let isBefore = !!(entry.flags & $99be642f82069918$var$CURRENT_INSERT_BEFORE);
            this._insertGlyphs(index, entry.currentInsertIndex, count, isBefore);
        }
    }
    getSupportedFeatures() {
        let features = [];
        for (let chain of this.morx.chains)for (let feature of chain.features)features.push([
            feature.featureType,
            feature.featureSetting
        ]);
        return features;
    }
    generateInputs(gid) {
        if (!this.inputCache) this.generateInputCache();
        return this.inputCache[gid] || [];
    }
    generateInputCache() {
        this.inputCache = {};
        for (let chain of this.morx.chains){
            let flags = chain.defaultFlags;
            for (let subtable of chain.subtables)if (subtable.subFeatureFlags & flags) this.generateInputsForSubtable(subtable);
        }
    }
    generateInputsForSubtable(subtable) {
        // Currently, only supporting ligature subtables.
        if (subtable.type !== 2) return;
        let reverse = !!(subtable.coverage & $99be642f82069918$var$REVERSE_DIRECTION);
        if (reverse) throw new Error("Reverse subtable, not supported.");
        this.subtable = subtable;
        this.ligatureStack = [];
        let stateMachine = this.getStateMachine(subtable);
        let process = this.getProcessor();
        let input = [];
        let stack = [];
        this.glyphs = [];
        stateMachine.traverse({
            enter: (glyph, entry)=>{
                let glyphs = this.glyphs;
                stack.push({
                    glyphs: glyphs.slice(),
                    ligatureStack: this.ligatureStack.slice()
                });
                // Add glyph to input and glyphs to process.
                let g = this.font.getGlyph(glyph);
                input.push(g);
                glyphs.push(input[input.length - 1]);
                // Process ligature substitution
                process(glyphs[glyphs.length - 1], entry, glyphs.length - 1);
                // Add input to result if only one matching (non-deleted) glyph remains.
                let count = 0;
                let found = 0;
                for(let i = 0; i < glyphs.length && count <= 1; i++)if (glyphs[i].id !== 0xffff) {
                    count++;
                    found = glyphs[i].id;
                }
                if (count === 1) {
                    let result = input.map((g)=>g.id);
                    let cache = this.inputCache[found];
                    if (cache) cache.push(result);
                    else this.inputCache[found] = [
                        result
                    ];
                }
            },
            exit: ()=>{
                ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = stack.pop());
                input.pop();
            }
        });
    }
    constructor(font){
        this.processIndicRearragement = this.processIndicRearragement.bind(this);
        this.processContextualSubstitution = this.processContextualSubstitution.bind(this);
        this.processLigature = this.processLigature.bind(this);
        this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this);
        this.processGlyphInsertion = this.processGlyphInsertion.bind(this);
        this.font = font;
        this.morx = font.morx;
        this.inputCache = null;
    }
}
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $99be642f82069918$export$2e2bcd8739ae039.prototype, "getStateMachine", null);
// swaps the glyphs in rangeA with those in rangeB
// reverse the glyphs inside those ranges if specified
// ranges are in [offset, length] format
function $99be642f82069918$var$swap(glyphs, rangeA, rangeB, reverseA = false, reverseB = false) {
    let end = glyphs.splice(rangeB[0] - (rangeB[1] - 1), rangeB[1]);
    if (reverseB) end.reverse();
    let start = glyphs.splice(rangeA[0], rangeA[1], ...end);
    if (reverseA) start.reverse();
    glyphs.splice(rangeB[0] - (rangeA[1] - 1), 0, ...start);
    return glyphs;
}
function $99be642f82069918$var$reorderGlyphs(glyphs, verb, firstGlyph, lastGlyph) {
    let length = lastGlyph - firstGlyph + 1;
    switch(verb){
        case 0:
            return glyphs;
        case 1:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                0
            ]);
        case 2:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                1
            ]);
        case 3:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                1
            ]);
        case 4:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                0
            ]);
        case 5:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                0
            ], true, false);
        case 6:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                2
            ]);
        case 7:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                0
            ], [
                lastGlyph,
                2
            ], false, true);
        case 8:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                2
            ]);
        case 9:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                1
            ], [
                lastGlyph,
                2
            ], false, true);
        case 10:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                1
            ]);
        case 11:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                1
            ], true, false);
        case 12:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ]);
        case 13:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], true, false);
        case 14:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], false, true);
        case 15:
            return $99be642f82069918$var$swap(glyphs, [
                firstGlyph,
                2
            ], [
                lastGlyph,
                2
            ], true, true);
        default:
            throw new Error(`Unknown verb: ${verb}`);
    }
}
class $860fcbd64bc12fbc$export$2e2bcd8739ae039 {
    substitute(glyphRun) {
        // AAT expects the glyphs to be in visual order prior to morx processing,
        // so reverse the glyphs if the script is right-to-left.
        if (glyphRun.direction === "rtl") glyphRun.glyphs.reverse();
        this.morxProcessor.process(glyphRun.glyphs, $2b7f887ebcb5888a$export$b813f7d2a1677c16(glyphRun.features));
    }
    getAvailableFeatures(script, language) {
        return $2b7f887ebcb5888a$export$bd6df347a4f391c4(this.morxProcessor.getSupportedFeatures());
    }
    stringsForGlyph(gid) {
        let glyphStrings = this.morxProcessor.generateInputs(gid);
        let result = new Set;
        for (let glyphs of glyphStrings)this._addStrings(glyphs, 0, result, "");
        return result;
    }
    _addStrings(glyphs, index, strings, string) {
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(glyphs[index]);
        for (let codePoint of codePoints){
            let s = string + String.fromCodePoint(codePoint);
            if (index < glyphs.length - 1) this._addStrings(glyphs, index + 1, strings, s);
            else strings.add(s);
        }
    }
    constructor(font){
        this.font = font;
        this.morxProcessor = new (0, $99be642f82069918$export$2e2bcd8739ae039)(font);
        this.fallbackPosition = false;
    }
}
class $d7e93cca3cf8ce8a$export$2e2bcd8739ae039 {
    /**
   * Adds the given features to the last stage.
   * Ignores features that have already been applied.
   */ _addFeatures(features, global) {
        let stageIndex = this.stages.length - 1;
        let stage = this.stages[stageIndex];
        for (let feature of features)if (this.allFeatures[feature] == null) {
            stage.push(feature);
            this.allFeatures[feature] = stageIndex;
            if (global) this.globalFeatures[feature] = true;
        }
    }
    /**
   * Add features to the last stage
   */ add(arg, global = true) {
        if (this.stages.length === 0) this.stages.push([]);
        if (typeof arg === "string") arg = [
            arg
        ];
        if (Array.isArray(arg)) this._addFeatures(arg, global);
        else if (typeof arg === "object") {
            this._addFeatures(arg.global || [], true);
            this._addFeatures(arg.local || [], false);
        } else throw new Error("Unsupported argument to ShapingPlan#add");
    }
    /**
   * Add a new stage
   */ addStage(arg, global) {
        if (typeof arg === "function") this.stages.push(arg, []);
        else {
            this.stages.push([]);
            this.add(arg, global);
        }
    }
    setFeatureOverrides(features) {
        if (Array.isArray(features)) this.add(features);
        else if (typeof features === "object") for(let tag in features){
            if (features[tag]) this.add(tag);
            else if (this.allFeatures[tag] != null) {
                let stage = this.stages[this.allFeatures[tag]];
                stage.splice(stage.indexOf(tag), 1);
                delete this.allFeatures[tag];
                delete this.globalFeatures[tag];
            }
        }
    }
    /**
   * Assigns the global features to the given glyphs
   */ assignGlobalFeatures(glyphs) {
        for (let glyph of glyphs)for(let feature in this.globalFeatures)glyph.features[feature] = true;
    }
    /**
   * Executes the planned stages using the given OTProcessor
   */ process(processor, glyphs, positions) {
        for (let stage of this.stages){
            if (typeof stage === "function") {
                if (!positions) stage(this.font, glyphs, this);
            } else if (stage.length > 0) processor.applyFeatures(stage, glyphs, positions);
        }
    }
    constructor(font, script, direction){
        this.font = font;
        this.script = script;
        this.direction = direction;
        this.stages = [];
        this.globalFeatures = {};
        this.allFeatures = {};
    }
}
const $d28fb665ee343afc$var$VARIATION_FEATURES = [
    "rvrn"
];
const $d28fb665ee343afc$var$COMMON_FEATURES = [
    "ccmp",
    "locl",
    "rlig",
    "mark",
    "mkmk"
];
const $d28fb665ee343afc$var$FRACTIONAL_FEATURES = [
    "frac",
    "numr",
    "dnom"
];
const $d28fb665ee343afc$var$HORIZONTAL_FEATURES = [
    "calt",
    "clig",
    "liga",
    "rclt",
    "curs",
    "kern"
];
const $d28fb665ee343afc$var$VERTICAL_FEATURES = [
    "vert"
];
const $d28fb665ee343afc$var$DIRECTIONAL_FEATURES = {
    ltr: [
        "ltra",
        "ltrm"
    ],
    rtl: [
        "rtla",
        "rtlm"
    ]
};
class $d28fb665ee343afc$export$2e2bcd8739ae039 {
    static plan(plan, glyphs, features) {
        // Plan the features we want to apply
        this.planPreprocessing(plan);
        this.planFeatures(plan);
        this.planPostprocessing(plan, features);
        // Assign the global features to all the glyphs
        plan.assignGlobalFeatures(glyphs);
        // Assign local features to glyphs
        this.assignFeatures(plan, glyphs);
    }
    static planPreprocessing(plan) {
        plan.add({
            global: [
                ...$d28fb665ee343afc$var$VARIATION_FEATURES,
                ...$d28fb665ee343afc$var$DIRECTIONAL_FEATURES[plan.direction]
            ],
            local: $d28fb665ee343afc$var$FRACTIONAL_FEATURES
        });
    }
    static planFeatures(plan) {
    // Do nothing by default. Let subclasses override this.
    }
    static planPostprocessing(plan, userFeatures) {
        plan.add([
            ...$d28fb665ee343afc$var$COMMON_FEATURES,
            ...$d28fb665ee343afc$var$HORIZONTAL_FEATURES
        ]);
        plan.setFeatureOverrides(userFeatures);
    }
    static assignFeatures(plan, glyphs) {
        // Enable contextual fractions
        for(let i = 0; i < glyphs.length; i++){
            let glyph = glyphs[i];
            if (glyph.codePoints[0] === 0x2044) {
                let start = i;
                let end = i + 1;
                // Apply numerator
                while(start > 0 && (0, $elh9A$unicodeproperties.isDigit)(glyphs[start - 1].codePoints[0])){
                    glyphs[start - 1].features.numr = true;
                    glyphs[start - 1].features.frac = true;
                    start--;
                }
                // Apply denominator
                while(end < glyphs.length && (0, $elh9A$unicodeproperties.isDigit)(glyphs[end].codePoints[0])){
                    glyphs[end].features.dnom = true;
                    glyphs[end].features.frac = true;
                    end++;
                }
                // Apply fraction slash
                glyph.features.frac = true;
                i = end - 1;
            }
        }
    }
}
(0, $elh9A$swchelperscjs_define_propertycjs._)($d28fb665ee343afc$export$2e2bcd8739ae039, "zeroMarkWidths", "AFTER_GPOS");
const $17ba6019f27bfcf9$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("APABAAAAAAAAOAAAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ=="));
const $17ba6019f27bfcf9$var$FEATURES = [
    "isol",
    "fina",
    "fin2",
    "fin3",
    "medi",
    "med2",
    "init"
];
const $17ba6019f27bfcf9$var$ShapingClasses = {
    Non_Joining: 0,
    Left_Joining: 1,
    Right_Joining: 2,
    Dual_Joining: 3,
    Join_Causing: 3,
    ALAPH: 4,
    "DALATH RISH": 5,
    Transparent: 6
};
const $17ba6019f27bfcf9$var$ISOL = "isol";
const $17ba6019f27bfcf9$var$FINA = "fina";
const $17ba6019f27bfcf9$var$FIN2 = "fin2";
const $17ba6019f27bfcf9$var$FIN3 = "fin3";
const $17ba6019f27bfcf9$var$MEDI = "medi";
const $17ba6019f27bfcf9$var$MED2 = "med2";
const $17ba6019f27bfcf9$var$INIT = "init";
const $17ba6019f27bfcf9$var$NONE = null;
// Each entry is [prevAction, curAction, nextState]
const $17ba6019f27bfcf9$var$STATE_TABLE = [
    //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
    // State 0: prev was U,  not willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            6
        ]
    ],
    // State 1: prev was R or ISOL/ALAPH,  not willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$FIN2,
            5
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            6
        ]
    ],
    // State 2: prev was D/L in ISOL form,  willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$INIT,
            $17ba6019f27bfcf9$var$FINA,
            1
        ],
        [
            $17ba6019f27bfcf9$var$INIT,
            $17ba6019f27bfcf9$var$FINA,
            3
        ],
        [
            $17ba6019f27bfcf9$var$INIT,
            $17ba6019f27bfcf9$var$FINA,
            4
        ],
        [
            $17ba6019f27bfcf9$var$INIT,
            $17ba6019f27bfcf9$var$FINA,
            6
        ]
    ],
    // State 3: prev was D in FINA form,  willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$MEDI,
            $17ba6019f27bfcf9$var$FINA,
            1
        ],
        [
            $17ba6019f27bfcf9$var$MEDI,
            $17ba6019f27bfcf9$var$FINA,
            3
        ],
        [
            $17ba6019f27bfcf9$var$MEDI,
            $17ba6019f27bfcf9$var$FINA,
            4
        ],
        [
            $17ba6019f27bfcf9$var$MEDI,
            $17ba6019f27bfcf9$var$FINA,
            6
        ]
    ],
    // State 4: prev was FINA ALAPH,  not willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$MED2,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$MED2,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$MED2,
            $17ba6019f27bfcf9$var$FIN2,
            5
        ],
        [
            $17ba6019f27bfcf9$var$MED2,
            $17ba6019f27bfcf9$var$ISOL,
            6
        ]
    ],
    // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$ISOL,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$ISOL,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$ISOL,
            $17ba6019f27bfcf9$var$FIN2,
            5
        ],
        [
            $17ba6019f27bfcf9$var$ISOL,
            $17ba6019f27bfcf9$var$ISOL,
            6
        ]
    ],
    // State 6: prev was DALATH/RISH,  not willing to join.
    [
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$NONE,
            0
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            1
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            2
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$FIN3,
            5
        ],
        [
            $17ba6019f27bfcf9$var$NONE,
            $17ba6019f27bfcf9$var$ISOL,
            6
        ]
    ]
];
class $17ba6019f27bfcf9$export$2e2bcd8739ae039 extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
    static planFeatures(plan) {
        plan.add([
            "ccmp",
            "locl"
        ]);
        for(let i = 0; i < $17ba6019f27bfcf9$var$FEATURES.length; i++){
            let feature = $17ba6019f27bfcf9$var$FEATURES[i];
            plan.addStage(feature, false);
        }
        plan.addStage("mset");
    }
    static assignFeatures(plan, glyphs) {
        super.assignFeatures(plan, glyphs);
        let prev = -1;
        let state = 0;
        let actions = [];
        // Apply the state machine to map glyphs to features
        for(let i = 0; i < glyphs.length; i++){
            let curAction, prevAction;
            var glyph = glyphs[i];
            let type = $17ba6019f27bfcf9$var$getShapingClass(glyph.codePoints[0]);
            if (type === $17ba6019f27bfcf9$var$ShapingClasses.Transparent) {
                actions[i] = $17ba6019f27bfcf9$var$NONE;
                continue;
            }
            [prevAction, curAction, state] = $17ba6019f27bfcf9$var$STATE_TABLE[state][type];
            if (prevAction !== $17ba6019f27bfcf9$var$NONE && prev !== -1) actions[prev] = prevAction;
            actions[i] = curAction;
            prev = i;
        }
        // Apply the chosen features to their respective glyphs
        for(let index = 0; index < glyphs.length; index++){
            let feature;
            var glyph = glyphs[index];
            if (feature = actions[index]) glyph.features[feature] = true;
        }
    }
}
function $17ba6019f27bfcf9$var$getShapingClass(codePoint) {
    let res = $17ba6019f27bfcf9$var$trie.get(codePoint);
    if (res) return res - 1;
    let category = (0, $elh9A$unicodeproperties.getCategory)(codePoint);
    if (category === "Mn" || category === "Me" || category === "Cf") return $17ba6019f27bfcf9$var$ShapingClasses.Transparent;
    return $17ba6019f27bfcf9$var$ShapingClasses.Non_Joining;
}
class $d6368085223f631e$export$2e2bcd8739ae039 {
    reset(options = {}, index = 0) {
        this.options = options;
        this.flags = options.flags || {};
        this.markAttachmentType = options.markAttachmentType || 0;
        this.index = index;
    }
    get cur() {
        return this.glyphs[this.index] || null;
    }
    shouldIgnore(glyph) {
        return this.flags.ignoreMarks && glyph.isMark || this.flags.ignoreBaseGlyphs && glyph.isBase || this.flags.ignoreLigatures && glyph.isLigature || this.markAttachmentType && glyph.isMark && glyph.markAttachmentType !== this.markAttachmentType;
    }
    move(dir) {
        this.index += dir;
        while(0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]))this.index += dir;
        if (0 > this.index || this.index >= this.glyphs.length) return null;
        return this.glyphs[this.index];
    }
    next() {
        return this.move(1);
    }
    prev() {
        return this.move(-1);
    }
    peek(count = 1) {
        let idx = this.index;
        let res = this.increment(count);
        this.index = idx;
        return res;
    }
    peekIndex(count = 1) {
        let idx = this.index;
        this.increment(count);
        let res = this.index;
        this.index = idx;
        return res;
    }
    increment(count = 1) {
        let dir = count < 0 ? -1 : 1;
        count = Math.abs(count);
        while(count--)this.move(dir);
        return this.glyphs[this.index];
    }
    constructor(glyphs, options){
        this.glyphs = glyphs;
        this.reset(options);
    }
}
const $7b226e6bbeadedeb$var$DEFAULT_SCRIPTS = [
    "DFLT",
    "dflt",
    "latn"
];
class $7b226e6bbeadedeb$export$2e2bcd8739ae039 {
    findScript(script) {
        if (this.table.scriptList == null) return null;
        if (!Array.isArray(script)) script = [
            script
        ];
        for (let s of script)for (let entry of this.table.scriptList){
            if (entry.tag === s) return entry;
        }
        return null;
    }
    selectScript(script, language, direction) {
        let changed = false;
        let entry;
        if (!this.script || script !== this.scriptTag) {
            entry = this.findScript(script);
            if (!entry) entry = this.findScript($7b226e6bbeadedeb$var$DEFAULT_SCRIPTS);
            if (!entry) return this.scriptTag;
            this.scriptTag = entry.tag;
            this.script = entry.script;
            this.language = null;
            this.languageTag = null;
            changed = true;
        }
        if (!direction || direction !== this.direction) this.direction = direction || $e38a1a895f6aeb54$export$9fddb9d0dd7d8a54(script);
        if (language && language.length < 4) language += " ".repeat(4 - language.length);
        if (!language || language !== this.languageTag) {
            this.language = null;
            for (let lang of this.script.langSysRecords)if (lang.tag === language) {
                this.language = lang.langSys;
                this.languageTag = lang.tag;
                break;
            }
            if (!this.language) {
                this.language = this.script.defaultLangSys;
                this.languageTag = null;
            }
            changed = true;
        }
        // Build a feature lookup table
        if (changed) {
            this.features = {};
            if (this.language) for (let featureIndex of this.language.featureIndexes){
                let record = this.table.featureList[featureIndex];
                let substituteFeature = this.substituteFeatureForVariations(featureIndex);
                this.features[record.tag] = substituteFeature || record.feature;
            }
        }
        return this.scriptTag;
    }
    lookupsForFeatures(userFeatures = [], exclude) {
        let lookups = [];
        for (let tag of userFeatures){
            let feature = this.features[tag];
            if (!feature) continue;
            for (let lookupIndex of feature.lookupListIndexes){
                if (exclude && exclude.indexOf(lookupIndex) !== -1) continue;
                lookups.push({
                    feature: tag,
                    index: lookupIndex,
                    lookup: this.table.lookupList.get(lookupIndex)
                });
            }
        }
        lookups.sort((a, b)=>a.index - b.index);
        return lookups;
    }
    substituteFeatureForVariations(featureIndex) {
        if (this.variationsIndex === -1) return null;
        let record = this.table.featureVariations.featureVariationRecords[this.variationsIndex];
        let substitutions = record.featureTableSubstitution.substitutions;
        for (let substitution of substitutions){
            if (substitution.featureIndex === featureIndex) return substitution.alternateFeatureTable;
        }
        return null;
    }
    findVariationsIndex(coords) {
        let variations = this.table.featureVariations;
        if (!variations) return -1;
        let records = variations.featureVariationRecords;
        for(let i = 0; i < records.length; i++){
            let conditions = records[i].conditionSet.conditionTable;
            if (this.variationConditionsMatch(conditions, coords)) return i;
        }
        return -1;
    }
    variationConditionsMatch(conditions, coords) {
        return conditions.every((condition)=>{
            let coord = condition.axisIndex < coords.length ? coords[condition.axisIndex] : 0;
            return condition.filterRangeMinValue <= coord && coord <= condition.filterRangeMaxValue;
        });
    }
    applyFeatures(userFeatures, glyphs, advances) {
        let lookups = this.lookupsForFeatures(userFeatures);
        this.applyLookups(lookups, glyphs, advances);
    }
    applyLookups(lookups, glyphs, positions) {
        this.glyphs = glyphs;
        this.positions = positions;
        this.glyphIterator = new (0, $d6368085223f631e$export$2e2bcd8739ae039)(glyphs);
        for (let { feature: feature, lookup: lookup } of lookups){
            this.currentFeature = feature;
            this.glyphIterator.reset(lookup.flags);
            while(this.glyphIterator.index < glyphs.length){
                if (!(feature in this.glyphIterator.cur.features)) {
                    this.glyphIterator.next();
                    continue;
                }
                for (let table of lookup.subTables){
                    let res = this.applyLookup(lookup.lookupType, table);
                    if (res) break;
                }
                this.glyphIterator.next();
            }
        }
    }
    applyLookup(lookup, table) {
        throw new Error("applyLookup must be implemented by subclasses");
    }
    applyLookupList(lookupRecords) {
        let options = this.glyphIterator.options;
        let glyphIndex = this.glyphIterator.index;
        for (let lookupRecord of lookupRecords){
            // Reset flags and find glyph index for this lookup record
            this.glyphIterator.reset(options, glyphIndex);
            this.glyphIterator.increment(lookupRecord.sequenceIndex);
            // Get the lookup and setup flags for subtables
            let lookup = this.table.lookupList.get(lookupRecord.lookupListIndex);
            this.glyphIterator.reset(lookup.flags, this.glyphIterator.index);
            // Apply lookup subtables until one matches
            for (let table of lookup.subTables){
                if (this.applyLookup(lookup.lookupType, table)) break;
            }
        }
        this.glyphIterator.reset(options, glyphIndex);
        return true;
    }
    coverageIndex(coverage, glyph) {
        if (glyph == null) glyph = this.glyphIterator.cur.id;
        switch(coverage.version){
            case 1:
                return coverage.glyphs.indexOf(glyph);
            case 2:
                for (let range of coverage.rangeRecords){
                    if (range.start <= glyph && glyph <= range.end) return range.startCoverageIndex + glyph - range.start;
                }
                break;
        }
        return -1;
    }
    match(sequenceIndex, sequence, fn, matched) {
        let pos = this.glyphIterator.index;
        let glyph = this.glyphIterator.increment(sequenceIndex);
        let idx = 0;
        while(idx < sequence.length && glyph && fn(sequence[idx], glyph)){
            if (matched) matched.push(this.glyphIterator.index);
            idx++;
            glyph = this.glyphIterator.next();
        }
        this.glyphIterator.index = pos;
        if (idx < sequence.length) return false;
        return matched || true;
    }
    sequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph)=>component === glyph.id);
    }
    sequenceMatchIndices(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (component, glyph)=>{
            // If the current feature doesn't apply to this glyph,
            if (!(this.currentFeature in glyph.features)) return false;
            return component === glyph.id;
        }, []);
    }
    coverageSequenceMatches(sequenceIndex, sequence) {
        return this.match(sequenceIndex, sequence, (coverage, glyph)=>this.coverageIndex(coverage, glyph.id) >= 0);
    }
    getClassID(glyph, classDef) {
        switch(classDef.version){
            case 1:
                let i = glyph - classDef.startGlyph;
                if (i >= 0 && i < classDef.classValueArray.length) return classDef.classValueArray[i];
                break;
            case 2:
                for (let range of classDef.classRangeRecord){
                    if (range.start <= glyph && glyph <= range.end) return range.class;
                }
                break;
        }
        return 0;
    }
    classSequenceMatches(sequenceIndex, sequence, classDef) {
        return this.match(sequenceIndex, sequence, (classID, glyph)=>classID === this.getClassID(glyph.id, classDef));
    }
    applyContext(table) {
        let index, set;
        switch(table.version){
            case 1:
                index = this.coverageIndex(table.coverage);
                if (index === -1) return false;
                set = table.ruleSets[index];
                for (let rule of set){
                    if (this.sequenceMatches(1, rule.input)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 2:
                if (this.coverageIndex(table.coverage) === -1) return false;
                index = this.getClassID(this.glyphIterator.cur.id, table.classDef);
                if (index === -1) return false;
                set = table.classSet[index];
                for (let rule of set){
                    if (this.classSequenceMatches(1, rule.classes, table.classDef)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 3:
                if (this.coverageSequenceMatches(0, table.coverages)) return this.applyLookupList(table.lookupRecords);
                break;
        }
        return false;
    }
    applyChainingContext(table) {
        let index;
        switch(table.version){
            case 1:
                index = this.coverageIndex(table.coverage);
                if (index === -1) return false;
                let set = table.chainRuleSets[index];
                for (let rule of set){
                    if (this.sequenceMatches(-rule.backtrack.length, rule.backtrack) && this.sequenceMatches(1, rule.input) && this.sequenceMatches(1 + rule.input.length, rule.lookahead)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 2:
                if (this.coverageIndex(table.coverage) === -1) return false;
                index = this.getClassID(this.glyphIterator.cur.id, table.inputClassDef);
                let rules = table.chainClassSet[index];
                if (!rules) return false;
                for (let rule of rules){
                    if (this.classSequenceMatches(-rule.backtrack.length, rule.backtrack, table.backtrackClassDef) && this.classSequenceMatches(1, rule.input, table.inputClassDef) && this.classSequenceMatches(1 + rule.input.length, rule.lookahead, table.lookaheadClassDef)) return this.applyLookupList(rule.lookupRecords);
                }
                break;
            case 3:
                if (this.coverageSequenceMatches(-table.backtrackGlyphCount, table.backtrackCoverage) && this.coverageSequenceMatches(0, table.inputCoverage) && this.coverageSequenceMatches(table.inputGlyphCount, table.lookaheadCoverage)) return this.applyLookupList(table.lookupRecords);
                break;
        }
        return false;
    }
    constructor(font, table){
        this.font = font;
        this.table = table;
        this.script = null;
        this.scriptTag = null;
        this.language = null;
        this.languageTag = null;
        this.features = {};
        this.lookups = {};
        // Setup variation substitutions
        this.variationsIndex = font._variationProcessor ? this.findVariationsIndex(font._variationProcessor.normalizedCoords) : -1;
        // initialize to default script + language
        this.selectScript();
        // current context (set by applyFeatures)
        this.glyphs = [];
        this.positions = []; // only used by GPOS
        this.ligatureID = 1;
        this.currentFeature = null;
    }
}
class $f22bb23c9fd478d8$export$2e2bcd8739ae039 {
    get id() {
        return this._id;
    }
    set id(id) {
        this._id = id;
        this.substituted = true;
        let GDEF = this._font.GDEF;
        if (GDEF && GDEF.glyphClassDef) {
            // TODO: clean this up
            let classID = (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.glyphClassDef);
            this.isBase = classID === 1;
            this.isLigature = classID === 2;
            this.isMark = classID === 3;
            this.markAttachmentType = GDEF.markAttachClassDef ? (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039).prototype.getClassID(id, GDEF.markAttachClassDef) : 0;
        } else {
            this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $elh9A$unicodeproperties.isMark));
            this.isBase = !this.isMark;
            this.isLigature = this.codePoints.length > 1;
            this.markAttachmentType = 0;
        }
    }
    copy() {
        return new $f22bb23c9fd478d8$export$2e2bcd8739ae039(this._font, this.id, this.codePoints, this.features);
    }
    constructor(font, id, codePoints = [], features){
        this._font = font;
        this.codePoints = codePoints;
        this.id = id;
        this.features = {};
        if (Array.isArray(features)) for(let i = 0; i < features.length; i++){
            let feature = features[i];
            this.features[feature] = true;
        }
        else if (typeof features === "object") Object.assign(this.features, features);
        this.ligatureID = null;
        this.ligatureComponent = null;
        this.isLigated = false;
        this.cursiveAttachment = null;
        this.markAttachment = null;
        this.shaperInfo = null;
        this.substituted = false;
        this.isMultiplied = false;
    }
}
class $fa1d9fd80dd7279e$export$2e2bcd8739ae039 extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
    static planFeatures(plan) {
        plan.add([
            "ljmo",
            "vjmo",
            "tjmo"
        ], false);
    }
    static assignFeatures(plan, glyphs) {
        let state = 0;
        let i = 0;
        while(i < glyphs.length){
            let action;
            let glyph = glyphs[i];
            let code = glyph.codePoints[0];
            let type = $fa1d9fd80dd7279e$var$getType(code);
            [action, state] = $fa1d9fd80dd7279e$var$STATE_TABLE[state][type];
            switch(action){
                case $fa1d9fd80dd7279e$var$DECOMPOSE:
                    // Decompose the composed syllable if it is not supported by the font.
                    if (!plan.font.hasGlyphForCodePoint(code)) i = $fa1d9fd80dd7279e$var$decompose(glyphs, i, plan.font);
                    break;
                case $fa1d9fd80dd7279e$var$COMPOSE:
                    // Found a decomposed syllable. Try to compose if supported by the font.
                    i = $fa1d9fd80dd7279e$var$compose(glyphs, i, plan.font);
                    break;
                case $fa1d9fd80dd7279e$var$TONE_MARK:
                    // Got a valid syllable, followed by a tone mark. Move the tone mark to the beginning of the syllable.
                    $fa1d9fd80dd7279e$var$reorderToneMark(glyphs, i, plan.font);
                    break;
                case $fa1d9fd80dd7279e$var$INVALID:
                    // Tone mark has no valid syllable to attach to, so insert a dotted circle
                    i = $fa1d9fd80dd7279e$var$insertDottedCircle(glyphs, i, plan.font);
                    break;
            }
            i++;
        }
    }
}
(0, $elh9A$swchelperscjs_define_propertycjs._)($fa1d9fd80dd7279e$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
const $fa1d9fd80dd7279e$var$HANGUL_BASE = 0xac00;
const $fa1d9fd80dd7279e$var$HANGUL_END = 0xd7a4;
const $fa1d9fd80dd7279e$var$HANGUL_COUNT = $fa1d9fd80dd7279e$var$HANGUL_END - $fa1d9fd80dd7279e$var$HANGUL_BASE + 1;
const $fa1d9fd80dd7279e$var$L_BASE = 0x1100; // lead
const $fa1d9fd80dd7279e$var$V_BASE = 0x1161; // vowel
const $fa1d9fd80dd7279e$var$T_BASE = 0x11a7; // trail
const $fa1d9fd80dd7279e$var$L_COUNT = 19;
const $fa1d9fd80dd7279e$var$V_COUNT = 21;
const $fa1d9fd80dd7279e$var$T_COUNT = 28;
const $fa1d9fd80dd7279e$var$L_END = $fa1d9fd80dd7279e$var$L_BASE + $fa1d9fd80dd7279e$var$L_COUNT - 1;
const $fa1d9fd80dd7279e$var$V_END = $fa1d9fd80dd7279e$var$V_BASE + $fa1d9fd80dd7279e$var$V_COUNT - 1;
const $fa1d9fd80dd7279e$var$T_END = $fa1d9fd80dd7279e$var$T_BASE + $fa1d9fd80dd7279e$var$T_COUNT - 1;
const $fa1d9fd80dd7279e$var$DOTTED_CIRCLE = 0x25cc;
const $fa1d9fd80dd7279e$var$isL = (code)=>0x1100 <= code && code <= 0x115f || 0xa960 <= code && code <= 0xa97c;
const $fa1d9fd80dd7279e$var$isV = (code)=>0x1160 <= code && code <= 0x11a7 || 0xd7b0 <= code && code <= 0xd7c6;
const $fa1d9fd80dd7279e$var$isT = (code)=>0x11a8 <= code && code <= 0x11ff || 0xd7cb <= code && code <= 0xd7fb;
const $fa1d9fd80dd7279e$var$isTone = (code)=>0x302e <= code && code <= 0x302f;
const $fa1d9fd80dd7279e$var$isLVT = (code)=>$fa1d9fd80dd7279e$var$HANGUL_BASE <= code && code <= $fa1d9fd80dd7279e$var$HANGUL_END;
const $fa1d9fd80dd7279e$var$isLV = (code)=>code - $fa1d9fd80dd7279e$var$HANGUL_BASE < $fa1d9fd80dd7279e$var$HANGUL_COUNT && (code - $fa1d9fd80dd7279e$var$HANGUL_BASE) % $fa1d9fd80dd7279e$var$T_COUNT === 0;
const $fa1d9fd80dd7279e$var$isCombiningL = (code)=>$fa1d9fd80dd7279e$var$L_BASE <= code && code <= $fa1d9fd80dd7279e$var$L_END;
const $fa1d9fd80dd7279e$var$isCombiningV = (code)=>$fa1d9fd80dd7279e$var$V_BASE <= code && code <= $fa1d9fd80dd7279e$var$V_END;
const $fa1d9fd80dd7279e$var$isCombiningT = (code)=>$fa1d9fd80dd7279e$var$T_BASE + 1 && 1 <= code && code <= $fa1d9fd80dd7279e$var$T_END;
// Character categories
const $fa1d9fd80dd7279e$var$X = 0; // Other character
const $fa1d9fd80dd7279e$var$L = 1; // Leading consonant
const $fa1d9fd80dd7279e$var$V = 2; // Medial vowel
const $fa1d9fd80dd7279e$var$T = 3; // Trailing consonant
const $fa1d9fd80dd7279e$var$LV = 4; // Composed <LV> syllable
const $fa1d9fd80dd7279e$var$LVT = 5; // Composed <LVT> syllable
const $fa1d9fd80dd7279e$var$M = 6; // Tone mark
// This function classifies a character using the above categories.
function $fa1d9fd80dd7279e$var$getType(code) {
    if ($fa1d9fd80dd7279e$var$isL(code)) return $fa1d9fd80dd7279e$var$L;
    if ($fa1d9fd80dd7279e$var$isV(code)) return $fa1d9fd80dd7279e$var$V;
    if ($fa1d9fd80dd7279e$var$isT(code)) return $fa1d9fd80dd7279e$var$T;
    if ($fa1d9fd80dd7279e$var$isLV(code)) return $fa1d9fd80dd7279e$var$LV;
    if ($fa1d9fd80dd7279e$var$isLVT(code)) return $fa1d9fd80dd7279e$var$LVT;
    if ($fa1d9fd80dd7279e$var$isTone(code)) return $fa1d9fd80dd7279e$var$M;
    return $fa1d9fd80dd7279e$var$X;
}
// State machine actions
const $fa1d9fd80dd7279e$var$NO_ACTION = 0;
const $fa1d9fd80dd7279e$var$DECOMPOSE = 1;
const $fa1d9fd80dd7279e$var$COMPOSE = 2;
const $fa1d9fd80dd7279e$var$TONE_MARK = 4;
const $fa1d9fd80dd7279e$var$INVALID = 5;
// Build a state machine that accepts valid syllables, and applies actions along the way.
// The logic this is implementing is documented at the top of the file.
const $fa1d9fd80dd7279e$var$STATE_TABLE = [
    //       X                 L                 V                T                  LV                LVT               M
    // State 0: start state
    [
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            1
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            2
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            3
        ],
        [
            $fa1d9fd80dd7279e$var$INVALID,
            0
        ]
    ],
    // State 1: <L>
    [
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            1
        ],
        [
            $fa1d9fd80dd7279e$var$COMPOSE,
            2
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            2
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            3
        ],
        [
            $fa1d9fd80dd7279e$var$INVALID,
            0
        ]
    ],
    // State 2: <L,V> or <LV>
    [
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            1
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$COMPOSE,
            3
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            2
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            3
        ],
        [
            $fa1d9fd80dd7279e$var$TONE_MARK,
            0
        ]
    ],
    // State 3: <L,V,T> or <LVT>
    [
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            1
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$NO_ACTION,
            0
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            2
        ],
        [
            $fa1d9fd80dd7279e$var$DECOMPOSE,
            3
        ],
        [
            $fa1d9fd80dd7279e$var$TONE_MARK,
            0
        ]
    ]
];
function $fa1d9fd80dd7279e$var$getGlyph(font, code, features) {
    return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, font.glyphForCodePoint(code).id, [
        code
    ], features);
}
function $fa1d9fd80dd7279e$var$decompose(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyph.codePoints[0];
    let s = code - $fa1d9fd80dd7279e$var$HANGUL_BASE;
    let t = $fa1d9fd80dd7279e$var$T_BASE + s % $fa1d9fd80dd7279e$var$T_COUNT;
    s = s / $fa1d9fd80dd7279e$var$T_COUNT | 0;
    let l = $fa1d9fd80dd7279e$var$L_BASE + s / $fa1d9fd80dd7279e$var$V_COUNT | 0;
    let v = $fa1d9fd80dd7279e$var$V_BASE + s % $fa1d9fd80dd7279e$var$V_COUNT;
    // Don't decompose if all of the components are not available
    if (!font.hasGlyphForCodePoint(l) || !font.hasGlyphForCodePoint(v) || t !== $fa1d9fd80dd7279e$var$T_BASE && !font.hasGlyphForCodePoint(t)) return i;
    // Replace the current glyph with decomposed L, V, and T glyphs,
    // and apply the proper OpenType features to each component.
    let ljmo = $fa1d9fd80dd7279e$var$getGlyph(font, l, glyph.features);
    ljmo.features.ljmo = true;
    let vjmo = $fa1d9fd80dd7279e$var$getGlyph(font, v, glyph.features);
    vjmo.features.vjmo = true;
    let insert = [
        ljmo,
        vjmo
    ];
    if (t > $fa1d9fd80dd7279e$var$T_BASE) {
        let tjmo = $fa1d9fd80dd7279e$var$getGlyph(font, t, glyph.features);
        tjmo.features.tjmo = true;
        insert.push(tjmo);
    }
    glyphs.splice(i, 1, ...insert);
    return i + insert.length - 1;
}
function $fa1d9fd80dd7279e$var$compose(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    let type = $fa1d9fd80dd7279e$var$getType(code);
    let prev = glyphs[i - 1].codePoints[0];
    let prevType = $fa1d9fd80dd7279e$var$getType(prev);
    // Figure out what type of syllable we're dealing with
    let lv, ljmo, vjmo, tjmo;
    if (prevType === $fa1d9fd80dd7279e$var$LV && type === $fa1d9fd80dd7279e$var$T) {
        // <LV,T>
        lv = prev;
        tjmo = glyph;
    } else {
        if (type === $fa1d9fd80dd7279e$var$V) {
            // <L,V>
            ljmo = glyphs[i - 1];
            vjmo = glyph;
        } else {
            // <L,V,T>
            ljmo = glyphs[i - 2];
            vjmo = glyphs[i - 1];
            tjmo = glyph;
        }
        let l = ljmo.codePoints[0];
        let v = vjmo.codePoints[0];
        // Make sure L and V are combining characters
        if ($fa1d9fd80dd7279e$var$isCombiningL(l) && $fa1d9fd80dd7279e$var$isCombiningV(v)) lv = $fa1d9fd80dd7279e$var$HANGUL_BASE + ((l - $fa1d9fd80dd7279e$var$L_BASE) * $fa1d9fd80dd7279e$var$V_COUNT + (v - $fa1d9fd80dd7279e$var$V_BASE)) * $fa1d9fd80dd7279e$var$T_COUNT;
    }
    let t = tjmo && tjmo.codePoints[0] || $fa1d9fd80dd7279e$var$T_BASE;
    if (lv != null && (t === $fa1d9fd80dd7279e$var$T_BASE || $fa1d9fd80dd7279e$var$isCombiningT(t))) {
        let s = lv + (t - $fa1d9fd80dd7279e$var$T_BASE);
        // Replace with a composed glyph if supported by the font,
        // otherwise apply the proper OpenType features to each component.
        if (font.hasGlyphForCodePoint(s)) {
            let del = prevType === $fa1d9fd80dd7279e$var$V ? 3 : 2;
            glyphs.splice(i - del + 1, del, $fa1d9fd80dd7279e$var$getGlyph(font, s, glyph.features));
            return i - del + 1;
        }
    }
    // Didn't compose (either a non-combining component or unsupported by font).
    if (ljmo) ljmo.features.ljmo = true;
    if (vjmo) vjmo.features.vjmo = true;
    if (tjmo) tjmo.features.tjmo = true;
    if (prevType === $fa1d9fd80dd7279e$var$LV) {
        // Sequence was originally <L,V>, which got combined earlier.
        // Either the T was non-combining, or the LVT glyph wasn't supported.
        // Decompose the glyph again and apply OT features.
        $fa1d9fd80dd7279e$var$decompose(glyphs, i - 1, font);
        return i + 1;
    }
    return i;
}
function $fa1d9fd80dd7279e$var$getLength(code) {
    switch($fa1d9fd80dd7279e$var$getType(code)){
        case $fa1d9fd80dd7279e$var$LV:
        case $fa1d9fd80dd7279e$var$LVT:
            return 1;
        case $fa1d9fd80dd7279e$var$V:
            return 2;
        case $fa1d9fd80dd7279e$var$T:
            return 3;
    }
}
function $fa1d9fd80dd7279e$var$reorderToneMark(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    // Move tone mark to the beginning of the previous syllable, unless it is zero width
    if (font.glyphForCodePoint(code).advanceWidth === 0) return;
    let prev = glyphs[i - 1].codePoints[0];
    let len = $fa1d9fd80dd7279e$var$getLength(prev);
    glyphs.splice(i, 1);
    return glyphs.splice(i - len, 0, glyph);
}
function $fa1d9fd80dd7279e$var$insertDottedCircle(glyphs, i, font) {
    let glyph = glyphs[i];
    let code = glyphs[i].codePoints[0];
    if (font.hasGlyphForCodePoint($fa1d9fd80dd7279e$var$DOTTED_CIRCLE)) {
        let dottedCircle = $fa1d9fd80dd7279e$var$getGlyph(font, $fa1d9fd80dd7279e$var$DOTTED_CIRCLE, glyph.features);
        // If the tone mark is zero width, insert the dotted circle before, otherwise after
        let idx = font.glyphForCodePoint(code).advanceWidth === 0 ? i : i + 1;
        glyphs.splice(idx, 0, dottedCircle);
        i++;
    }
    return i;
}
var $d22b56f2cf15e5ba$exports = {};
$d22b56f2cf15e5ba$exports = JSON.parse('{"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],"accepting":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],"tags":[[],["broken_cluster"],["consonant_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],[],["broken_cluster"],["symbol_cluster"],[],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["symbol_cluster"],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],[],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],[],[],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],["consonant_syllable"],["vowel_syllable"],["standalone_cluster"]]}');
var $79781f8c452881c2$exports = {};
$79781f8c452881c2$exports = JSON.parse('{"categories":["O","IND","S","GB","B","FM","CGJ","VMAbv","VMPst","VAbv","VPst","CMBlw","VPre","VBlw","H","VMBlw","CMAbv","MBlw","CS","R","SUB","MPst","MPre","FAbv","FPst","FBlw","null","SMAbv","SMBlw","VMPre","ZWNJ","ZWJ","WJ","M","VS","N","HN","MAbv"],"decompositions":{"2507":[2503,2494],"2508":[2503,2519],"2888":[2887,2902],"2891":[2887,2878],"2892":[2887,2903],"3018":[3014,3006],"3019":[3015,3006],"3020":[3014,3031],"3144":[3142,3158],"3264":[3263,3285],"3271":[3270,3285],"3272":[3270,3286],"3274":[3270,3266],"3275":[3270,3266,3285],"3402":[3398,3390],"3403":[3399,3390],"3404":[3398,3415],"3546":[3545,3530],"3548":[3545,3535],"3549":[3545,3535,3530],"3550":[3545,3551],"3635":[3661,3634],"3763":[3789,3762],"3955":[3953,3954],"3957":[3953,3956],"3958":[4018,3968],"3959":[4018,3953,3968],"3960":[4019,3968],"3961":[4019,3953,3968],"3969":[3953,3968],"6971":[6970,6965],"6973":[6972,6965],"6976":[6974,6965],"6977":[6975,6965],"6979":[6978,6965],"69934":[69937,69927],"69935":[69938,69927],"70475":[70471,70462],"70476":[70471,70487],"70843":[70841,70842],"70844":[70841,70832],"70846":[70841,70845],"71098":[71096,71087],"71099":[71097,71087]},"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],"accepting":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"tags":[[],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["symbol_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["virama_terminated_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["number_joiner_terminated_cluster"],["standard_cluster"],["standard_cluster"],["numeral_cluster"]]}');
// Cateories used in the OpenType spec:
// https://www.microsoft.com/typography/otfntdev/devanot/shaping.aspx
const $79e3b6f2c331d0bf$export$a513ea61a7bee91c = {
    X: 1,
    C: 2,
    V: 4,
    N: 8,
    H: 16,
    ZWNJ: 32,
    ZWJ: 64,
    M: 128,
    SM: 256,
    VD: 512,
    A: 1024,
    Placeholder: 2048,
    Dotted_Circle: 4096,
    RS: 8192,
    Coeng: 16384,
    Repha: 32768,
    Ra: 65536,
    CM: 131072,
    Symbol: 262144 // Avagraha, etc that take marks (SM,A,VD).
};
const $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0 = {
    Start: 1,
    Ra_To_Become_Reph: 2,
    Pre_M: 4,
    Pre_C: 8,
    Base_C: 16,
    After_Main: 32,
    Above_C: 64,
    Before_Sub: 128,
    Below_C: 256,
    After_Sub: 512,
    Before_Post: 1024,
    Post_C: 2048,
    After_Post: 4096,
    Final_C: 8192,
    SMVD: 16384,
    End: 32768
};
const $79e3b6f2c331d0bf$export$8519deaa7de2b07 = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.C | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Ra | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.CM | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.V | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Placeholder | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Dotted_Circle;
const $79e3b6f2c331d0bf$export$bbcd928767338e0d = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.ZWJ | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.ZWNJ;
const $79e3b6f2c331d0bf$export$ca9599b2a300afc = $79e3b6f2c331d0bf$export$a513ea61a7bee91c.H | $79e3b6f2c331d0bf$export$a513ea61a7bee91c.Coeng;
const $79e3b6f2c331d0bf$export$e99d119da76a0fc5 = {
    Default: {
        hasOldSpec: false,
        virama: 0,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Devanagari: {
        hasOldSpec: true,
        virama: 0x094D,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Bengali: {
        hasOldSpec: true,
        virama: 0x09CD,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Gurmukhi: {
        hasOldSpec: true,
        virama: 0x0A4D,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Sub,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Gujarati: {
        hasOldSpec: true,
        virama: 0x0ACD,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Before_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Oriya: {
        hasOldSpec: true,
        virama: 0x0B4D,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Tamil: {
        hasOldSpec: true,
        virama: 0x0BCD,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Pre_And_Post"
    },
    Telugu: {
        hasOldSpec: true,
        virama: 0x0C4D,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Explicit",
        blwfMode: "Post_Only"
    },
    Kannada: {
        hasOldSpec: true,
        virama: 0x0CCD,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Post,
        rephMode: "Implicit",
        blwfMode: "Post_Only"
    },
    Malayalam: {
        hasOldSpec: true,
        virama: 0x0D4D,
        basePos: "Last",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.After_Main,
        rephMode: "Log_Repha",
        blwfMode: "Pre_And_Post"
    },
    // Handled by UniversalShaper
    // Sinhala: {
    //   hasOldSpec: false,
    //   virama: 0x0DCA,
    //   basePos: 'Last_Sinhala',
    //   rephPos: POSITIONS.After_Main,
    //   rephMode: 'Explicit',
    //   blwfMode: 'Pre_And_Post'
    // },
    Khmer: {
        hasOldSpec: false,
        virama: 0x17D2,
        basePos: "First",
        rephPos: $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0.Ra_To_Become_Reph,
        rephMode: "Vis_Repha",
        blwfMode: "Pre_And_Post"
    }
};
const $79e3b6f2c331d0bf$export$f647c9cfdd77d95a = {
    // Khmer
    0x17BE: [
        0x17C1,
        0x17BE
    ],
    0x17BF: [
        0x17C1,
        0x17BF
    ],
    0x17C0: [
        0x17C1,
        0x17C0
    ],
    0x17C4: [
        0x17C1,
        0x17C4
    ],
    0x17C5: [
        0x17C1,
        0x17C5
    ]
};
const { decompositions: $d203e6b9523d0071$var$decompositions } = (0, /*@__PURE__*/ $parcel$interopDefault($79781f8c452881c2$exports));
const $d203e6b9523d0071$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("AAARAAAAAABg2AAAAWYPmfDtnXuMXFUdx+/uzs7M7szudAtECGJRIMRQbUAithQWkGAKiVhNpFVRRAmIQVCDkDYICGotIA9BTCz8IeUviv7BQ2PBtBIRLBBQIWAUsKg1BKxRAqIgfs/cc+aeOXPej3tnZX7JJ/dxzj3nd36/8753Z5fUsuxgsAwcAU4Gp4BPgM+Cd4P3RjieDs4GXwLrHJ5bDy4DG8A14LvgZrAZbAF3gns0z18ALgY/B78C94NHwBPgabAE/AX8DbwM5sF/QX0yD5vFcU/wVnAgWAoOAyvAceBE8CGwBpwGzgJfAF8BXwXfAFeC68EmsBlsAXeCreA+8CB4DDwF/gh2gd3gFfAGmKxn2QzYC+wHDgRLweFgJTgWrKrnuq/GcQ04jV6fheN54EJwEbgcXAG+Q8O/j+Mt4DZwB9haz8t9Hz3a8iCN/xiOvwRP0evH6fE68AzOH+Ke2eWYhw3PcGnuxvkr4A3QaGRZB7wFLAEHg2XgiEZ/fHKcp/ceBh/A+cngFPCpRm6vM3E8l8a5gN67GMdvgqsbeX2ap9yI601gM7gN3AG20mfuo8cdOP6GpvdUg9oKxz839GV90RDO2/glxN1B790NXsN1rZll7WYRdw+c70uvTwIHNAfTO0RyL5TDmnnbc3lmRQI9UnM0dD5eovfz4FpJ/BNpXNYWV+N6Lfg0hY97JK1vn+Pur9DoQur2F7m436bHDUK8C5t5/8vruo4+97WmXG+GLmzEiBF+PDwEOowYMWLEiBEjRoxYeBw5BDqIPEfXut9yWN+vVNxfrnnmWqR/PdgENoMt4E5wD9gOHgCPgifBs2BXM99b2o3jP8F/wMRUlrXAHNgHvH0q3895J46HguXgWHAGLctmLv9VuL96qnp7jxgxYsSbCbJvuRZ97/tqxT59VVRtixEjRsThBG7OSt5zzoPT0M+cBc4T5noXOs79TqLHeZrHUeCSqeJ96gacXy2kecNU8V6Hh7yXuQlhtw7B/PO1RTkr52Aj8JNFZjYg3gOKuC/g/v6Ls2wNuAY8urg//PcIb+6RZXuDNeCS6SzbBrJWlh0DLiFHco8ed9IjzzvaWfa9sZzTcf6D9mCcnbg3PlNcH4fzS8F2MDaLdQG4dLZIJxbbaZqv4ri8k58f3+mPs66T6/TTzqDeI0aMGDGiHP5dcR8ce/xxYcWi6vOfr725uRzcjnngXVOD61Hync+9uL+Nmyfej/NHpvL56A5Jeuz7uyfo+pqcPz2Vf1NH0ttJ03pekt8SmuY/EPYy9zzbN319ym/9TL6ZIt9MHCXRdxJtoAkWTRdz472n87D9cTwYLJvuz++I6WIePo/zE8AHp4v8WLyP0nufnM6/+zoDx8+DL08P6r9+urheRtO+jD6/cdrsx3mqu8w+xH4PScKIXa5D2jeCm8Et4DbwI/BjcC/4BXgI/Bb8DuwEu8Bu8Ap4A9RaRZptnO8J9gUHgEPAoWA5OLY1qMO90GEV7q+mYWtxPBWcIYnL4p+DsPNbxfVFOP86uAr8DNc34HgTDb8Vx9sVaRFI/LtagzYjnCqpb908EX87eBA8Bh4Hf2jle/9/wvGFVv787rrZZy8h7qtgDOuFOmiBuXYRvg/O9wMHgXeB97SLspk4sq0OI/q9v13+ek+sh3zYSRp9jrYorw9ll1/GRzR+KotYZSHf8laVP2lvpA/8OGdPMk59hqtXZ+L8nHbxvWwqO65ryu+fT3VZz+l4dET7L0R072ljsMyzTpaJqQxsbL8M9WajY789DO85XMp/Dcp3Qztdn+9qf/a97ZWK8PXc3G+TpC/nv8Mncy7ZvICF302P5O+aNiOtLdTXd+D4Q7DVwfcvWvx9zTEJ/o5iG3R8YAjGNFseha5PGuZKz7b7xxXbOrXMcu5eJSo//rXdH/73Enz6L1q/X+fyIu8wZGtNBmkjkzNZNgP2AvuBg2bysKUzduXn/66JtNeN4PCZvO0/x7Ujdn4VnYOvRJzjZ/I+9sQZeftX2Tc1RPcPz/Tf4/si0g+t5Mq+kfZjZL34Mc5ul3PPnE7TOxvHK2qDaZ+L++db2HyYqMo/qVnb/P8uH8/rmnFxR0k6DCu/rjj/RxT7KGUSWgbd+LMQuEgYB1zsk2qtvJD8v5AhdfdttbEunSxbcJD9Zf7chqp1Hlbe7FK1/aPVTfp7FgtC1yGGiSncFK/DhZvi+epZta0WWjlsfDZMyPRdSPrryqSSKnXx1bkq/Ye9TlRpk7Lrjq1UrfdC9X+MtKqwP6+3a/4pJFUZF0pZZpv91MYjMBaRRXbxpho5zQmUY3F+Pt4o7rvQrBXPdm00TaE24uMadaM2meLSI7iu071t3er3b6ZLi8JEde3qw+6zGv+ycF5kaRBh/m1T/7Yl/mMyTuMwadP4xL9ifjJpNwbvDZRJ8G8vnqV/Wf12aa/kyOdl69+BspTsXzGueE6E+JfZnvmXIfNPW+FfXkjb1YmqPNpnLP3b61fHCj/X5tzGANf2y3yqvC7Jv7btV4TVbdammI9l/g0dS5lNxLrk2j9r8xjjxhBQnygg0lgg/bOrfyct+udJi/Yrk0lFnxC7f+5kRbsNmcexfrubt0X/rGvLqrGSnYv3ZPHEe8r7lvMvUfi2LOu/2dg8LrRtQt2yfcv8r5IU70VkIs6nbebUXf0M/o7Znl39Sdoz+X1oEb5N8ffF67qhPfPP6eoUbxf+GRf/6sRnvaSdmw+Bf1VxmbD+2sa//DU7t/Gv2PfKpKdrBP92Ojk+IvqX16ks/2qxbL8EZnc2HqsgYuqPuzZV+I3RbujbDm+T0PmWCVO/5jqftp1zy+wSA6s0JWtp2z5e1oZV+yMsjB3ZXolsv0Ulrv01v3/iKrF94Qtbt9siCnmeb6fjjf59KnLk1xaEbvtvFnFirGvEOqmycQrbm/IMsXd3P28uh4nM3swXRER717OiX8kc7K2qqyn2p3maFGU/aruP5VCv+PraoTYU8yUmmbDwcYo6pusnM486xdoga4dkPCb1pK7Sfc6ebvkd4qeAtQcd/N63bB3lU3dlUnUf38VyvqCqK7JxlNSd7lydrDlm+/uqHiRvl30Nrp/n9zpkZRjoJ3V1diyP05rIYXHYs+w+D5+WMS8b5gZtKcuX0KT5d/WwtB97VnyvY6rjMukI56HI0rFJPwt8PjT/1OXzSbcMeEmdh294qvKK4rNu7j4n3LNZg8TKXwafv025U+XvKjHsT8Q7/7LGaJt9lAh7Asz3uv0XEX6t0duDoWN/93wmh92XpUHmCKb9GALbG+rZP3AfNbQPKKv/jpF/bP0JXfuW1QYk7dhljcyvk5mw+933Hpo1g26PQ2ZP6zVmTJt47P25jncD9vPwGS+q9QS/V6RaY8j8K8LmvUr9HfYCpH5OWL9lZY+Sv6pesHCJHbtrf9k6etZvf0G1L0ja4cAe1UT/s3zdCe3/Q5/n372wMc97/E1Qh0Tbmfwh3m/V9On72tNnrCF1sJkVe1EyXMdBa7+lHMsk44zMF6St9e2djNnbm8ybpHkq+gbbemMaH0UZmD8obKGrk7r+nt+3bE7o83YZp/vqOKdv6PzJNN6mTJsI/51XR7i2ZrGA5B6zFwnjzxmqPjaGfW3tZNrz1eljq29mOOqeCfF/irRt87PNw0uXSVAvrmOMNT569MptsYaV0sic/wbY13e8hPrb9K2ySUJ0j6G/Lu0U4qpTrR23jMp6m5hU+YTaWCeh9aIsm/rqUHV4bFv42kgnZdfH1PUj1D7DVH9d8khRN1zFRl/+/TW//qxL1uH83+mk3H+SvRtS2TDU90nX2TpM6/1xzZpZtoYdK763dqlz0f6uNeFehcs+H/nbGP77MpX06n/ofpzP+tVmTUvRtVuX/cjS67OE5kRBrxyJ+w/dPo7r+9cO1160e3gqu0S2uW7PjN/L6ns/UfMf10Lai87frJ+3KndAfc8yTf1M3T4s6qm4/yh7/2GSkG8UMw//DvRLgbYZSEOxr0LCWvRdjfh9XGzfqN4NivfZd7rsmFp08zmbssrKJEuTfVMZopdpbuwSrhNv3/N2s+0PDG3KNB6RMrFvJHv6B85HXObAoWsd3zm3i+6uZYytv+5+pohbpo6+tpZJFfmGlrcMf4c8b1Pe2OUIsaXJrinCTfaxtZOt+NYnU3hIfQlN20Z/1+dt7JaqLsbIzycNWZmrlNg2Dc2/LJ1T+T6WrrYSml4Ku7ik7yIx2opJD51vU9UfVRmrqL8u/olZj0PyCLV5irxcdKoi/6rKb8qTrHsnhW9jyZH/nSpeWDzxd9769uQ016lgUuf2pAfKPhu2FpfZL2Yb9snLNl/fNIepXaUsj4vNXCXUZ75px8ojNP8UPvAta2g6fb+F1ckZuneshv1vGXXDeyRRrN/bBPS1Jul+l+7zW86R7Wv63WXyDpt/RxraRjvC+TC3O61/Sqj/prag8x372yQivn+XwudrI2X2E2KdtJEov52e0L+uv4FO3p/rvssgsL8F4d/z9PzlWS94m8fqS3361Fi+6qaVYHwi9Yz4iH2fobIj+45cpz/TUaarr/4+z+vaWtVtyAX2d1LG8W9C3f+F1mnf36/k4w3YPrLv+XBVXCJs3cr+n4MKJuLv/fN9GhNdXVP5pJMN9vFi3rpv3/r8Ywg3SYp66zNOsO8QGcxPpnmRS/1mvmJjju3v7absI2xspQrvs1dNbjOj/wP7h1RlZyKGy8occ408UL8En4v6xfC/K3z52XzJd62T8vuZGGsxo/6O46ntmNqqFb/jps2/hHV4rPKH0svT4pstU7t2tZ9u/ZdqbJL1MwP6O86Fyt4jYaIrGz9mjEt8lFL4PtVE6votG2P6fpdf/GZRse7s3bf4BtSl/DIbKMctx++Z+8o6K6z9FPOwKsRmXiaNl7C+6NYRpjlbqG1j72f49qsuY4brd/amb4ZVc8TQ+sSH985LrEe8iPWJnfPrJRbWbb+dwn4x6o+r/aS2S7w3qWt//LnYz2ntE0vH1uDcyKatx1rH+EiMPEN1SZG/iz6+9o01Rob6O7Q+xLZ1jHobK61U+pWVvo2EpuWqzzD6Poa+pvhli0wn8Zq/72Mzm2d90o5VN1x9ZKuzbTgvqWwUIin8FSpl1CXXvFRxU0iozVPYJDRtF3uFphn6XAyJUUdD7SjTJ8v6n9fVbVObkKWp001lc9VRlqdOf5v0ZM+bymdbfp1NfG0bq27Y5JMyfxeJkU6o/inKH8O2Zfgidb6h/g3VJ7QcVbWL0Pxt6rlrPqa4KfQ25a2zl4/E8GdM/4fK/wA="));
const $d203e6b9523d0071$var$stateMachine = new (0, $parcel$interopDefault($elh9A$dfa))((0, /*@__PURE__*/ $parcel$interopDefault($d22b56f2cf15e5ba$exports)));
class $d203e6b9523d0071$export$2e2bcd8739ae039 extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
    static planFeatures(plan) {
        plan.addStage($d203e6b9523d0071$var$setupSyllables);
        plan.addStage([
            "locl",
            "ccmp"
        ]);
        plan.addStage($d203e6b9523d0071$var$initialReordering);
        plan.addStage("nukt");
        plan.addStage("akhn");
        plan.addStage("rphf", false);
        plan.addStage("rkrf");
        plan.addStage("pref", false);
        plan.addStage("blwf", false);
        plan.addStage("abvf", false);
        plan.addStage("half", false);
        plan.addStage("pstf", false);
        plan.addStage("vatu");
        plan.addStage("cjct");
        plan.addStage("cfar", false);
        plan.addStage($d203e6b9523d0071$var$finalReordering);
        plan.addStage({
            local: [
                "init"
            ],
            global: [
                "pres",
                "abvs",
                "blws",
                "psts",
                "haln",
                "dist",
                "abvm",
                "blwm",
                "calt",
                "clig"
            ]
        });
        // Setup the indic config for the selected script
        plan.unicodeScript = $e38a1a895f6aeb54$export$ce50e82f12a827a4(plan.script);
        plan.indicConfig = (0, $79e3b6f2c331d0bf$export$e99d119da76a0fc5)[plan.unicodeScript] || (0, $79e3b6f2c331d0bf$export$e99d119da76a0fc5).Default;
        plan.isOldSpec = plan.indicConfig.hasOldSpec && plan.script[plan.script.length - 1] !== "2";
    // TODO: turn off kern (Khmer) and liga features.
    }
    static assignFeatures(plan, glyphs) {
        // Decompose split matras
        // TODO: do this in a more general unicode normalizer
        for(let i = glyphs.length - 1; i >= 0; i--){
            let codepoint = glyphs[i].codePoints[0];
            let d = (0, $79e3b6f2c331d0bf$export$f647c9cfdd77d95a)[codepoint] || $d203e6b9523d0071$var$decompositions[codepoint];
            if (d) {
                let decomposed = d.map((c)=>{
                    let g = plan.font.glyphForCodePoint(c);
                    return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(plan.font, g.id, [
                        c
                    ], glyphs[i].features);
                });
                glyphs.splice(i, 1, ...decomposed);
            }
        }
    }
}
(0, $elh9A$swchelperscjs_define_propertycjs._)($d203e6b9523d0071$export$2e2bcd8739ae039, "zeroMarkWidths", "NONE");
function $d203e6b9523d0071$var$indicCategory(glyph) {
    return $d203e6b9523d0071$var$trie.get(glyph.codePoints[0]) >> 8;
}
function $d203e6b9523d0071$var$indicPosition(glyph) {
    return 1 << ($d203e6b9523d0071$var$trie.get(glyph.codePoints[0]) & 0xff);
}
class $d203e6b9523d0071$var$IndicInfo {
    constructor(category, position, syllableType, syllable){
        this.category = category;
        this.position = position;
        this.syllableType = syllableType;
        this.syllable = syllable;
    }
}
function $d203e6b9523d0071$var$setupSyllables(font, glyphs) {
    let syllable = 0;
    let last = 0;
    for (let [start, end, tags] of $d203e6b9523d0071$var$stateMachine.match(glyphs.map($d203e6b9523d0071$var$indicCategory))){
        if (start > last) {
            ++syllable;
            for(let i = last; i < start; i++)glyphs[i].shaperInfo = new $d203e6b9523d0071$var$IndicInfo((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).X, (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).End, "non_indic_cluster", syllable);
        }
        ++syllable;
        // Create shaper info
        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $d203e6b9523d0071$var$IndicInfo(1 << $d203e6b9523d0071$var$indicCategory(glyphs[i]), $d203e6b9523d0071$var$indicPosition(glyphs[i]), tags[0], syllable);
        last = end + 1;
    }
    if (last < glyphs.length) {
        ++syllable;
        for(let i = last; i < glyphs.length; i++)glyphs[i].shaperInfo = new $d203e6b9523d0071$var$IndicInfo((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).X, (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).End, "non_indic_cluster", syllable);
    }
}
function $d203e6b9523d0071$var$isConsonant(glyph) {
    return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$8519deaa7de2b07);
}
function $d203e6b9523d0071$var$isJoiner(glyph) {
    return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$bbcd928767338e0d);
}
function $d203e6b9523d0071$var$isHalantOrCoeng(glyph) {
    return glyph.shaperInfo.category & (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc);
}
function $d203e6b9523d0071$var$wouldSubstitute(glyphs, feature) {
    for (let glyph of glyphs)glyph.features = {
        [feature]: true
    };
    let GSUB = glyphs[0]._font._layoutEngine.engine.GSUBProcessor;
    GSUB.applyFeatures([
        feature
    ], glyphs);
    return glyphs.length === 1;
}
function $d203e6b9523d0071$var$consonantPosition(font, consonant, virama) {
    let glyphs = [
        virama,
        consonant,
        virama
    ];
    if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "blwf") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "blwf")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C;
    else if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "pstf") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "pstf")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C;
    else if ($d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(0, 2), "pref") || $d203e6b9523d0071$var$wouldSubstitute(glyphs.slice(1, 3), "pref")) return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C;
    return (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
}
function $d203e6b9523d0071$var$initialReordering(font, glyphs, plan) {
    let indicConfig = plan.indicConfig;
    let features = font._layoutEngine.engine.GSUBProcessor.features;
    let dottedCircle = font.glyphForCodePoint(0x25cc).id;
    let virama = font.glyphForCodePoint(indicConfig.virama).id;
    if (virama) {
        let info = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, virama, [
            indicConfig.virama
        ]);
        for(let i = 0; i < glyphs.length; i++)if (glyphs[i].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) glyphs[i].shaperInfo.position = $d203e6b9523d0071$var$consonantPosition(font, glyphs[i].copy(), info);
    }
    for(let start = 0, end = $d203e6b9523d0071$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $d203e6b9523d0071$var$nextSyllable(glyphs, start)){
        let { category: category, syllableType: syllableType } = glyphs[start].shaperInfo;
        if (syllableType === "symbol_cluster" || syllableType === "non_indic_cluster") continue;
        if (syllableType === "broken_cluster" && dottedCircle) {
            let g = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, dottedCircle, [
                0x25cc
            ]);
            g.shaperInfo = new $d203e6b9523d0071$var$IndicInfo(1 << $d203e6b9523d0071$var$indicCategory(g), $d203e6b9523d0071$var$indicPosition(g), glyphs[start].shaperInfo.syllableType, glyphs[start].shaperInfo.syllable);
            // Insert after possible Repha.
            let i = start;
            while(i < end && glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha)i++;
            glyphs.splice(i++, 0, g);
            end++;
        }
        // 1. Find base consonant:
        //
        // The shaping engine finds the base consonant of the syllable, using the
        // following algorithm: starting from the end of the syllable, move backwards
        // until a consonant is found that does not have a below-base or post-base
        // form (post-base forms have to follow below-base forms), or that is not a
        // pre-base reordering Ra, or arrive at the first consonant. The consonant
        // stopped at will be the base.
        let base = end;
        let limit = start;
        let hasReph = false;
        // If the syllable starts with Ra + Halant (in a script that has Reph)
        // and has more than one consonant, Ra is excluded from candidates for
        // base consonants.
        if (indicConfig.rephPos !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && features.rphf && start + 3 <= end && (indicConfig.rephMode === "Implicit" && !$d203e6b9523d0071$var$isJoiner(glyphs[start + 2]) || indicConfig.rephMode === "Explicit" && glyphs[start + 2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ)) {
            // See if it matches the 'rphf' feature.
            let g = [
                glyphs[start].copy(),
                glyphs[start + 1].copy(),
                glyphs[start + 2].copy()
            ];
            if ($d203e6b9523d0071$var$wouldSubstitute(g.slice(0, 2), "rphf") || indicConfig.rephMode === "Explicit" && $d203e6b9523d0071$var$wouldSubstitute(g, "rphf")) {
                limit += 2;
                while(limit < end && $d203e6b9523d0071$var$isJoiner(glyphs[limit]))limit++;
                base = start;
                hasReph = true;
            }
        } else if (indicConfig.rephMode === "Log_Repha" && glyphs[start].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha) {
            limit++;
            while(limit < end && $d203e6b9523d0071$var$isJoiner(glyphs[limit]))limit++;
            base = start;
            hasReph = true;
        }
        switch(indicConfig.basePos){
            case "Last":
                {
                    // starting from the end of the syllable, move backwards
                    let i = end;
                    let seenBelow = false;
                    do {
                        let info = glyphs[--i].shaperInfo;
                        // until a consonant is found
                        if ($d203e6b9523d0071$var$isConsonant(glyphs[i])) {
                            // that does not have a below-base or post-base form
                            // (post-base forms have to follow below-base forms),
                            if (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C && (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C || seenBelow)) {
                                base = i;
                                break;
                            }
                            // or that is not a pre-base reordering Ra,
                            //
                            // IMPLEMENTATION NOTES:
                            //
                            // Our pre-base reordering Ra's are marked POS_POST_C, so will be skipped
                            // by the logic above already.
                            //
                            // or arrive at the first consonant. The consonant stopped at will
                            // be the base.
                            if (info.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C) seenBelow = true;
                            base = i;
                        } else if (start < i && info.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ && glyphs[i - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) break;
                    }while (i > limit);
                    break;
                }
            case "First":
                // The first consonant is always the base.
                base = start;
                // Mark all subsequent consonants as below.
                for(let i = base + 1; i < end; i++)if ($d203e6b9523d0071$var$isConsonant(glyphs[i])) glyphs[i].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C;
        }
        // If the syllable starts with Ra + Halant (in a script that has Reph)
        // and has more than one consonant, Ra is excluded from candidates for
        // base consonants.
        //
        //  Only do this for unforced Reph. (ie. not for Ra,H,ZWJ)
        if (hasReph && base === start && limit - base <= 2) hasReph = false;
        // 2. Decompose and reorder Matras:
        //
        // Each matra and any syllable modifier sign in the cluster are moved to the
        // appropriate position relative to the consonant(s) in the cluster. The
        // shaping engine decomposes two- or three-part matras into their constituent
        // parts before any repositioning. Matra characters are classified by which
        // consonant in a conjunct they have affinity for and are reordered to the
        // following positions:
        //
        //   o Before first half form in the syllable
        //   o After subjoined consonants
        //   o After post-form consonant
        //   o After main consonant (for above marks)
        //
        // IMPLEMENTATION NOTES:
        //
        // The normalize() routine has already decomposed matras for us, so we don't
        // need to worry about that.
        // 3.  Reorder marks to canonical order:
        //
        // Adjacent nukta and halant or nukta and vedic sign are always repositioned
        // if necessary, so that the nukta is first.
        //
        // IMPLEMENTATION NOTES:
        //
        // We don't need to do this: the normalize() routine already did this for us.
        // Reorder characters
        for(let i = start; i < base; i++){
            let info = glyphs[i].shaperInfo;
            info.position = Math.min((0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_C, info.position);
        }
        if (base < end) glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
        // Mark final consonants.  A final consonant is one appearing after a matra,
        // like in Khmer.
        for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
            for(let j = i + 1; j < end; j++)if ($d203e6b9523d0071$var$isConsonant(glyphs[j])) {
                glyphs[j].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Final_C;
                break;
            }
            break;
        }
        // Handle beginning Ra
        if (hasReph) glyphs[start].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph;
        // For old-style Indic script tags, move the first post-base Halant after
        // last consonant.
        //
        // Reports suggest that in some scripts Uniscribe does this only if there
        // is *not* a Halant after last consonant already (eg. Kannada), while it
        // does it unconditionally in other scripts (eg. Malayalam).  We don't
        // currently know about other scripts, so we single out Malayalam for now.
        //
        // Kannada test case:
        // U+0C9A,U+0CCD,U+0C9A,U+0CCD
        // With some versions of Lohit Kannada.
        // https://bugs.freedesktop.org/show_bug.cgi?id=59118
        //
        // Malayalam test case:
        // U+0D38,U+0D4D,U+0D31,U+0D4D,U+0D31,U+0D4D
        // With lohit-ttf-20121122/Lohit-Malayalam.ttf
        if (plan.isOldSpec) {
            let disallowDoubleHalants = plan.unicodeScript !== "Malayalam";
            for(let i = base + 1; i < end; i++)if (glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) {
                let j;
                for(j = end - 1; j > i; j--){
                    if ($d203e6b9523d0071$var$isConsonant(glyphs[j]) || disallowDoubleHalants && glyphs[j].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H) break;
                }
                if (glyphs[j].shaperInfo.category !== (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && j > i) {
                    // Move Halant to after last consonant.
                    let t = glyphs[i];
                    glyphs.splice(i, 0, ...glyphs.splice(i + 1, j - i));
                    glyphs[j] = t;
                }
                break;
            }
        }
        // Attach misc marks to previous char to move with them.
        let lastPos = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Start;
        for(let i = start; i < end; i++){
            let info = glyphs[i].shaperInfo;
            if (info.category & ((0, $79e3b6f2c331d0bf$export$bbcd928767338e0d) | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).N | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).RS | (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).CM | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc) & info.category)) {
                info.position = lastPos;
                if (info.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && info.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                    // Uniscribe doesn't move the Halant with Left Matra.
                    // TEST: U+092B,U+093F,U+094DE
                    // We follow.  This is important for the Sinhala
                    // U+0DDA split matra since it decomposes to U+0DD9,U+0DCA
                    // where U+0DD9 is a left matra and U+0DCA is the virama.
                    // We don't want to move the virama with the left matra.
                    // TEST: U+0D9A,U+0DDA
                    for(let j = i; j > start; j--)if (glyphs[j - 1].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                        info.position = glyphs[j - 1].shaperInfo.position;
                        break;
                    }
                }
            } else if (info.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD) lastPos = info.position;
        }
        // For post-base consonants let them own anything before them
        // since the last consonant or matra.
        let last = base;
        for(let i = base + 1; i < end; i++){
            if ($d203e6b9523d0071$var$isConsonant(glyphs[i])) {
                for(let j = last + 1; j < i; j++)if (glyphs[j].shaperInfo.position < (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD) glyphs[j].shaperInfo.position = glyphs[i].shaperInfo.position;
                last = i;
            } else if (glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) last = i;
        }
        let arr = glyphs.slice(start, end);
        arr.sort((a, b)=>a.shaperInfo.position - b.shaperInfo.position);
        glyphs.splice(start, arr.length, ...arr);
        // Find base again
        for(let i = start; i < end; i++)if (glyphs[i].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) {
            base = i;
            break;
        }
        // Setup features now
        // Reph
        for(let i = start; i < end && glyphs[i].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph; i++)glyphs[i].features.rphf = true;
        // Pre-base
        let blwf = !plan.isOldSpec && indicConfig.blwfMode === "Pre_And_Post";
        for(let i = start; i < base; i++){
            glyphs[i].features.half = true;
            if (blwf) glyphs[i].features.blwf = true;
        }
        // Post-base
        for(let i = base + 1; i < end; i++){
            glyphs[i].features.abvf = true;
            glyphs[i].features.pstf = true;
            glyphs[i].features.blwf = true;
        }
        if (plan.isOldSpec && plan.unicodeScript === "Devanagari") {
            // Old-spec eye-lash Ra needs special handling.  From the
            // spec:
            //
            // "The feature 'below-base form' is applied to consonants
            // having below-base forms and following the base consonant.
            // The exception is vattu, which may appear below half forms
            // as well as below the base glyph. The feature 'below-base
            // form' will be applied to all such occurrences of Ra as well."
            //
            // Test case: U+0924,U+094D,U+0930,U+094d,U+0915
            // with Sanskrit 2003 font.
            //
            // However, note that Ra,Halant,ZWJ is the correct way to
            // request eyelash form of Ra, so we wouldbn't inhibit it
            // in that sequence.
            //
            // Test case: U+0924,U+094D,U+0930,U+094d,U+200D,U+0915
            for(let i = start; i + 1 < base; i++)if (glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Ra && glyphs[i + 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).H && (i + 1 === base || glyphs[i + 2].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ)) {
                glyphs[i].features.blwf = true;
                glyphs[i + 1].features.blwf = true;
            }
        }
        let prefLen = 2;
        if (features.pref && base + prefLen < end) for(let i = base + 1; i + prefLen - 1 < end; i++){
            let g = [
                glyphs[i].copy(),
                glyphs[i + 1].copy()
            ];
            if ($d203e6b9523d0071$var$wouldSubstitute(g, "pref")) {
                for(let j = 0; j < prefLen; j++)glyphs[i++].features.pref = true;
                // Mark the subsequent stuff with 'cfar'.  Used in Khmer.
                // Read the feature spec.
                // This allows distinguishing the following cases with MS Khmer fonts:
                // U+1784,U+17D2,U+179A,U+17D2,U+1782
                // U+1784,U+17D2,U+1782,U+17D2,U+179A
                if (features.cfar) for(; i < end; i++)glyphs[i].features.cfar = true;
                break;
            }
        }
        // Apply ZWJ/ZWNJ effects
        for(let i = start + 1; i < end; i++)if ($d203e6b9523d0071$var$isJoiner(glyphs[i])) {
            let nonJoiner = glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWNJ;
            let j = i;
            do {
                j--;
                // ZWJ/ZWNJ should disable CJCT.  They do that by simply
                // being there, since we don't skip them for the CJCT
                // feature (ie. F_MANUAL_ZWJ)
                // A ZWNJ disables HALF.
                if (nonJoiner) delete glyphs[j].features.half;
            }while (j > start && !$d203e6b9523d0071$var$isConsonant(glyphs[j]));
        }
    }
}
function $d203e6b9523d0071$var$finalReordering(font, glyphs, plan) {
    let indicConfig = plan.indicConfig;
    let features = font._layoutEngine.engine.GSUBProcessor.features;
    for(let start = 0, end = $d203e6b9523d0071$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $d203e6b9523d0071$var$nextSyllable(glyphs, start)){
        // 4. Final reordering:
        //
        // After the localized forms and basic shaping forms GSUB features have been
        // applied (see below), the shaping engine performs some final glyph
        // reordering before applying all the remaining font features to the entire
        // cluster.
        let tryPref = !!features.pref;
        // Find base again
        let base = start;
        for(; base < end; base++)if (glyphs[base].shaperInfo.position >= (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) {
            if (tryPref && base + 1 < end) {
                for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {
                    if (!(glyphs[i].substituted && glyphs[i].isLigated && !glyphs[i].isMultiplied)) {
                        // Ok, this was a 'pref' candidate but didn't form any.
                        // Base is around here...
                        base = i;
                        while(base < end && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[base]))base++;
                        glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).BASE_C;
                        tryPref = false;
                    }
                    break;
                }
            }
            // For Malayalam, skip over unformed below- (but NOT post-) forms.
            if (plan.unicodeScript === "Malayalam") for(let i = base + 1; i < end; i++){
                while(i < end && $d203e6b9523d0071$var$isJoiner(glyphs[i]))i++;
                if (i === end || !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[i])) break;
                i++; // Skip halant.
                while(i < end && $d203e6b9523d0071$var$isJoiner(glyphs[i]))i++;
                if (i < end && $d203e6b9523d0071$var$isConsonant(glyphs[i]) && glyphs[i].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Below_C) {
                    base = i;
                    glyphs[base].shaperInfo.position = (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C;
                }
            }
            if (start < base && glyphs[base].shaperInfo.position > (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Base_C) base--;
            break;
        }
        if (base === end && start < base && glyphs[base - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).ZWJ) base--;
        if (base < end) while(start < base && glyphs[base].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).N | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc)))base--;
        // o Reorder matras:
        //
        // If a pre-base matra character had been reordered before applying basic
        // features, the glyph can be moved closer to the main consonant based on
        // whether half-forms had been formed. Actual position for the matra is
        // defined as “after last standalone halant glyph, after initial matra
        // position and before the main consonant”. If ZWJ or ZWNJ follow this
        // halant, position is moved after it.
        //
        if (start + 1 < end && start < base) {
            // If we lost track of base, alas, position before last thingy.
            let newPos = base === end ? base - 2 : base - 1;
            // Malayalam / Tamil do not have "half" forms or explicit virama forms.
            // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
            // We want to position matra after them.
            if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
                while(newPos > start && !(glyphs[newPos].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc))))newPos--;
                // If we found no Halant we are done.
                // Otherwise only proceed if the Halant does
                // not belong to the Matra itself!
                if ($d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newPos]) && glyphs[newPos].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                    if (newPos + 1 < end && $d203e6b9523d0071$var$isJoiner(glyphs[newPos + 1])) newPos++;
                } else newPos = start; // No move.
            }
            if (start < newPos && glyphs[newPos].shaperInfo.position !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                // Now go see if there's actually any matras...
                for(let i = newPos; i > start; i--)if (glyphs[i - 1].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M) {
                    let oldPos = i - 1;
                    if (oldPos < base && base <= newPos) base--;
                    let tmp = glyphs[oldPos];
                    glyphs.splice(oldPos, 0, ...glyphs.splice(oldPos + 1, newPos - oldPos));
                    glyphs[newPos] = tmp;
                    newPos--;
                }
            }
        }
        // o Reorder reph:
        //
        // Reph’s original position is always at the beginning of the syllable,
        // (i.e. it is not reordered at the character reordering stage). However,
        // it will be reordered according to the basic-forms shaping results.
        // Possible positions for reph, depending on the script, are; after main,
        // before post-base consonant forms, and after post-base consonant forms.
        // Two cases:
        //
        // - If repha is encoded as a sequence of characters (Ra,H or Ra,H,ZWJ), then
        //   we should only move it if the sequence ligated to the repha form.
        //
        // - If repha is encoded separately and in the logical position, we should only
        //   move it if it did NOT ligate.  If it ligated, it's probably the font trying
        //   to make it work without the reordering.
        if (start + 1 < end && glyphs[start].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Ra_To_Become_Reph && glyphs[start].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).Repha !== (glyphs[start].isLigated && !glyphs[start].isMultiplied)) {
            let newRephPos;
            let rephPos = indicConfig.rephPos;
            let found = false;
            // 1. If reph should be positioned after post-base consonant forms,
            //    proceed to step 5.
            if (rephPos !== (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Post) {
                //  2. If the reph repositioning class is not after post-base: target
                //     position is after the first explicit halant glyph between the
                //     first post-reph consonant and last main consonant. If ZWJ or ZWNJ
                //     are following this halant, position is moved after it. If such
                //     position is found, this is the target position. Otherwise,
                //     proceed to the next step.
                //
                //     Note: in old-implementation fonts, where classifications were
                //     fixed in shaping engine, there was no case where reph position
                //     will be found on this step.
                newRephPos = start + 1;
                while(newRephPos < base && !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;
                if (newRephPos < base && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                    if (newRephPos + 1 < base && $d203e6b9523d0071$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
                    found = true;
                }
                // 3. If reph should be repositioned after the main consonant: find the
                //    first consonant not ligated with main, or find the first
                //    consonant that is not a potential pre-base reordering Ra.
                if (!found && rephPos === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Main) {
                    newRephPos = base;
                    while(newRephPos + 1 < end && glyphs[newRephPos + 1].shaperInfo.position <= (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Main)newRephPos++;
                    found = newRephPos < end;
                }
                // 4. If reph should be positioned before post-base consonant, find
                //    first post-base classified consonant not ligated with main. If no
                //    consonant is found, the target position should be before the
                //    first matra, syllable modifier sign or vedic sign.
                //
                // This is our take on what step 4 is trying to say (and failing, BADLY).
                if (!found && rephPos === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Sub) {
                    newRephPos = base;
                    while(newRephPos + 1 < end && !(glyphs[newRephPos + 1].shaperInfo.position & ((0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Post_C | (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).After_Post | (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD)))newRephPos++;
                    found = newRephPos < end;
                }
            }
            //  5. If no consonant is found in steps 3 or 4, move reph to a position
            //     immediately before the first post-base matra, syllable modifier
            //     sign or vedic sign that has a reordering class after the intended
            //     reph position. For example, if the reordering position for reph
            //     is post-main, it will skip above-base matras that also have a
            //     post-main position.
            if (!found) {
                // Copied from step 2.
                newRephPos = start + 1;
                while(newRephPos < base && !$d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos]))newRephPos++;
                if (newRephPos < base && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    // ->If ZWJ or ZWNJ are following this halant, position is moved after it.
                    if (newRephPos + 1 < base && $d203e6b9523d0071$var$isJoiner(glyphs[newRephPos + 1])) newRephPos++;
                    found = true;
                }
            }
            // 6. Otherwise, reorder reph to the end of the syllable.
            if (!found) {
                newRephPos = end - 1;
                while(newRephPos > start && glyphs[newRephPos].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).SMVD)newRephPos--;
                // If the Reph is to be ending up after a Matra,Halant sequence,
                // position it before that Halant so it can interact with the Matra.
                // However, if it's a plain Consonant,Halant we shouldn't do that.
                // Uniscribe doesn't do this.
                // TEST: U+0930,U+094D,U+0915,U+094B,U+094D
                if ($d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newRephPos])) {
                    for(let i = base + 1; i < newRephPos; i++)if (glyphs[i].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) newRephPos--;
                }
            }
            let reph = glyphs[start];
            glyphs.splice(start, 0, ...glyphs.splice(start + 1, newRephPos - start));
            glyphs[newRephPos] = reph;
            if (start < base && base <= newRephPos) base--;
        }
        // o Reorder pre-base reordering consonants:
        //
        // If a pre-base reordering consonant is found, reorder it according to
        // the following rules:
        if (tryPref && base + 1 < end) {
            for(let i = base + 1; i < end; i++)if (glyphs[i].features.pref) {
                // 1. Only reorder a glyph produced by substitution during application
                //    of the <pref> feature. (Note that a font may shape a Ra consonant with
                //    the feature generally but block it in certain contexts.)
                // Note: We just check that something got substituted.  We don't check that
                // the <pref> feature actually did it...
                //
                // Reorder pref only if it ligated.
                if (glyphs[i].isLigated && !glyphs[i].isMultiplied) {
                    // 2. Try to find a target position the same way as for pre-base matra.
                    //    If it is found, reorder pre-base consonant glyph.
                    //
                    // 3. If position is not found, reorder immediately before main
                    //    consonant.
                    let newPos = base;
                    // Malayalam / Tamil do not have "half" forms or explicit virama forms.
                    // The glyphs formed by 'half' are Chillus or ligated explicit viramas.
                    // We want to position matra after them.
                    if (plan.unicodeScript !== "Malayalam" && plan.unicodeScript !== "Tamil") {
                        while(newPos > start && !(glyphs[newPos - 1].shaperInfo.category & ((0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M | (0, $79e3b6f2c331d0bf$export$ca9599b2a300afc))))newPos--;
                        // In Khmer coeng model, a H,Ra can go *after* matras.  If it goes after a
                        // split matra, it should be reordered to *before* the left part of such matra.
                        if (newPos > start && glyphs[newPos - 1].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
                            let oldPos = i;
                            for(let j = base + 1; j < oldPos; j++)if (glyphs[j].shaperInfo.category === (0, $79e3b6f2c331d0bf$export$a513ea61a7bee91c).M) {
                                newPos--;
                                break;
                            }
                        }
                    }
                    if (newPos > start && $d203e6b9523d0071$var$isHalantOrCoeng(glyphs[newPos - 1])) {
                        if (newPos < end && $d203e6b9523d0071$var$isJoiner(glyphs[newPos])) newPos++;
                    }
                    let oldPos = i;
                    let tmp = glyphs[oldPos];
                    glyphs.splice(newPos + 1, 0, ...glyphs.splice(newPos, oldPos - newPos));
                    glyphs[newPos] = tmp;
                    if (newPos <= base && base < oldPos) base++;
                }
                break;
            }
        }
        // Apply 'init' to the Left Matra if it's a word start.
        if (glyphs[start].shaperInfo.position === (0, $79e3b6f2c331d0bf$export$1a1f61c9c4dd9df0).Pre_M && (!start || !/Cf|Mn/.test((0, $elh9A$unicodeproperties.getCategory)(glyphs[start - 1].codePoints[0])))) glyphs[start].features.init = true;
    }
}
function $d203e6b9523d0071$var$nextSyllable(glyphs, start) {
    if (start >= glyphs.length) return start;
    let syllable = glyphs[start].shaperInfo.syllable;
    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);
    return start;
}
const { categories: $9b772791ccede8a5$var$categories, decompositions: $9b772791ccede8a5$var$decompositions } = (0, /*@__PURE__*/ $parcel$interopDefault($79781f8c452881c2$exports));
const $9b772791ccede8a5$var$trie = new (0, $parcel$interopDefault($elh9A$unicodetrie))((0, $66a5b9fb5318558a$export$94fdf11bafc8de6b)("AAACAAAAAAAQugAAAQUO+vHtnHuMX0UVx2d3u/t7bXe7FlqgvB+mpQhFmhikMRAg0ZQmakMU+cPWBzZisEGNjUpoiIYCEgmGUGOEGqOVNPUZUGNA+QNIBU2KREEFFSMBUYRISMXE+B3vnPzOzp553tcWfif5ZO5jnufMzJ2ZO/eumlDqFLAWnAMuBBvBZnC5uXZeBe4WsA1sBzs8/naCXcL1G8GtYDfYA74NvgfuAfcZHmT+fwEeBb8DTwvxPQWeAavACyZvq8z9VYxXwCGglijVBcvACnA8eCM4E6wHG8BF4BLwbvA+8AHwUbAd7AA7wS5wC9gN7gR7wX5wN7gXPAAeBr8Gvwd/Ac+CF8EhoCaV6oBZsBKcAE4FZ0wWeV8P9zxwoTnfCHczuBxsAdvAx8Gnzf1r4X4B3AxuA1+bHJb9m5PzdVGW/Yjv+xXHyfmxFfd9OH8Q/Ar8Bjw1WZT3GfACeAX8N5CfqSmlZsAKsGqqCH8K3DXgbHCuuXYB3HeAd4HLpgrdarbi+EPgY+CT4HPg8ybMTcb9MtyvghtYut/A+b4pf95+ELgfw08Qx/3gADgInjDl0veehPtX8A/wsrn2KtzxDuogWNoJx38k/BzXKeI8Ee5qcBZYD9aZtDbg+AwT19uMX83F7JizCdcvBZdZ97c6/BMfMWmfzfTm88/95aLj+DDSvApcDXZ04uPfaen3TMHPLvi5BezuFPVtD4t/qUcfe3FvP7gb3Ouwo9T+H+gMy/UIjh8DfwBPm7T08d/M8WMBe1Sh3xEjXo+M2s+IESNGjBgxYsSI1wLrOsM1gRsi/P+TzV3/Zc1jvxgR/j8IM9Et1mEGcJeDFeA4cJq5/ia467uF/w1wzwdvB+80998LdwvYZs63w90Bdnbd6Wp/uzz3R4wYMWJEvZzTMm2Xf8SIEfVQd/v+EsaPt3eL90J3wP2WMJ78Trd4t6+P77Hu37cIxp9/ny6YXqrUJeCR6TA74e/nll81MzxejeMtYA94HBwy91bPYow+O/S3A8d7oIM/gRN7CAP29Iqx/B1ThfuwOecM+vA3NmRjf6Gfm3BtH7v+PI7XDpS6EuwDz4O10+0/f9om1F4ehO4OmHp6EO7jxl56nvhsN/15ut+4Z0b657yYkZ7UJ0jhX0bcr3bn+6P87vekN4762QNzvWHZtL+jcH5srzg/uTf0f3pvfj5i+6tYW7rK9+aefO+tuL4BXAQ2gs3gPeBJc//9OL4CXAWuNvc/A64DN4Jbwe0s7jtxvBfsAz8EPwX3gwPgoJAHPQ9/Atf/bO7p/TTP4fglwS/5/zfujfWH5z0cz4Gj+8X5Sf1ib4m+vwbHZ/fdOtP+z+3LOnPp/QL4vxhsApeCy8BWk/a2ftFmYu22Hf4/Ba4B14Hrwc0sP7fh+Cvg6+Au8F1WthA/8pT7UeTxZ/12njkuXT8UyM9i6iur1EEb6f+yPz/eg0b3v4X7x365fMaW42lPu7PTv6vi8i/G+lWF/cvUk7bLl1r+5/rN5tu3j2qvWTd/qV+4h+AqjDGnBsX59GDo94iBXDa6v6Yjl6vu+h8itJcsZq/ZykHhHg/3tMHhUe9s/Yfuny7YNxTvQ8LYdrER2+/c0GBezhrMv3ZNRv7PmYirh7oOv4W1Y72/cwPOzx8U7X8d2295sfE3MPnbBPfSQbHv9nK4HxTqiK/trI7Yy5mLzvuVg/nX+N7V51A3r+gMy/4J434W7l2dYf5PZWGuNX6uh3uzEPetuLY7sZ20zTETY2oxyBhj3DrnfsidYPeXRGLHpxzX6pbFofGRkFBdGhcgW40L4cYtd9JAElO36q4LEzXHX7VMtZ2BEhJjy9dT25fazOtJxhwsBrHzwfu8w12kMYN9fLhIbp2RxlI59rX1dzjpsKl2Fxt3iu6rbofc9q5+KcRrXVzzDn6/Crvk6p/y1GFgGhs9/6maHjBLgv8/18fTxl1q0bPoW8ywsFTGWaazHosrNn/kP2eeqEroZYLZphsZl7L82eephMIqNT8dyT9JjH1Jpg32ubZvTB/SF665ymSnnaqjUHum+1Qn+NyOtz9f2r6y5OQ51b6hYy0D40r2tYXar30+Y/mbVX6JqY+hMC60XZapoh3S/HdOpT3DYu3rs0lKnquyb277JZvyPlqp+f1zVVK2/dJYNpQGf04uYyh1+PTPqfalZ2tO/xwSu+3bOrDzmWvfcTW/fLmibRx6lkvlcOlc8qsE/y5/rnSk67F1iAu1VT6+4jKt5tufn8e2b+n57JKcckhrsKG1Cd6Wu+Y8tf2l5DenPafqQZ/7xstKLeyr+XnInjSelvRgS9n27JPQM5n6Am7jmLG8VK6m7OvyS2L313XYV2r/tth5LWPfNxhyhI+1Up7HVbe/HMgeZE8brtNQ/7tcyX0cn//H2LTO9kpir5VI6yYp9szJW9W2jI1Tqfl5ic2v1GZ5XaG6RDZbyvxMO/DVh1SdUj5y1vraaHs+2/TYNXvtSRoXk4wrf9w6fEctnFt0zL2y+xFsfSrLza2zOTqMiZv8xOpbn8+xsL5ykdj6VsxNKb/Lvxb7nX8u48y1x6yuMW3V9tNxTlouzXslibVxndjC14xda8g2NIbg5x01XAP2lfeIBFSi/zrQEporTXru8fCueiy1CUnqrhspSM9SzbSS64tep9R1ZsZcOxKsUEUfNZeYtr0vjY5DeXW915hT8/PRV8MxlR1HV4DHZZc9R7dzajgWoXikdLtGr0uEfPigsGS/NvYjSHW87XejoXZehZ74XrcqpQ4d5T5f7Gu8f6g7fQmefoqOqk4/VarQv2o4/VDetPDnhjR2dc3BCBp/9NVw7KGfwStVMf6aZNAajj6224j9HCZbpZa/LvH1gU30i/q5WnUdSNEprxv2eIOwx2pcjjLMsmObo008k0J4u69P3d9QdbspW/dy080Nb8PXqcrmj0vsc7tu6qwD1A5oLYr3U3XWSxqj6/a10nCMkudJMyxvrvbK55jUrqU+Xlr/Iai98jY7mVAml5QNHxq31j2m5TrSdmp6z5p+9kpzQntdQbI1Pafr6I9C60gxrALHGtdF6tyhLTtxeBuW+hhqyzPMX931xl6rJ5f6n5h3blpsW7vKbvdBfL1gpYfjDLrvob1drrRT+mcuMf1OrJSdW/P+RfufdUB+pOtdTzhpL5t0jfKr46P3obQfQdPGt1jS+DEkx4MT2PmEg1j72OthqfZNWX+JuZ4at/2sTAmn5cSIMqZIjk0pnD0+aUI6YS9ekdaspWsp8cWEC62dS66UTkq+ypajyvXSlPz4xhQhm/ns6wpXBVI560jHN9aKkdT46spvWT916rONdHNsGSNtl6Hp8oakTVukpF9n3U3Jx0TNefbp3R4jltVfFfpvQkJpNaH/puyco++qbZPz7sE1L3DFGVovc4XPLUPO3ELyrzLiSpmPhaTJfqeJ+t60PiTh9snNW2656upDQ+Wtyg6ueJquB7HSVPspW9a28lDWJouhb6iyv7XjTfVL67j2vjDpvUfMt1Vl4GvctMaeq/vYcFWXIfV5Ku3XaxK951H6dsWFrhcxa3pU/pz3C1xc71tTcaXjGjtJbYIj7UHm7wxSyx+D/d7SfpfJ3wPpfSQp32tS2dt8V2tD7+Bce3rpPa3eC6Dr8Ulq+K+J3HFvbn312Zv2RdStr9g0pP0P/B04XbP3Q8cIT2dlRF6orkrhY/Rv27FqHfL1DP480ffo/V6V7aTHXLKDbTdXOOrnyG1ScvSv6xqve30lPzdpj36M8Pilb+L5vr0xE3dd30nWIfZ45uSSxK4x+CRmTUK6F/LrSsfnj+aOdYyvpXyMK7/OpHWjlDTsa0rJum5K7Ppnj7F9c+0q0qtr7pQji2X9oMwcVrJfmblwU2V2SV3rEk3YuO46XXf8MfrQz077G2zftyDkj/ZqhcZr9nldkOg5ykAt3GunJbR3NGYsUfWafd3ts853C4dLHppOM6WcfM5C+xSbaC/2HMa1H9v1vXdoXm/LKSVpYh5wqmr/X67SfwHtPc9a97p/k8bt0hpbW0j1Svr2m+7Rd98qIQ1pvSF273dKOjHYNmk6fd8/JX3tWIddblBqoU5p7zrZKnd9TppjVq0DSitWqkwz12b2exb7vwjaRvS/TFd/S+8AYvIo+Suri5TwvvZRdV1IQevQ1/8SA+UeH5eto7n/X1Oe86ptaafl8kPjcF7P7W93eD9d5n+oSvn7fFe7I/G9q1IBfylSR71N6fft94ZU18hOXKR+JqUO8f4+5dvLsmWlMQb/Vov+CUDlpTGUndeQlG3fdZWdRPoPgl3mmDlsLnaey/4X3tVuU+o6L3/Pym+qlLV/jk6rlBRd8394hZ6JdnuqIv2ykOh3pfq96Wkq/E8qu2xl88/tOJ4R3tfmpbGi3c5T859bzqr7MbsN03iI5itUNj5eaEKWqIX/KJCQ/iFWNZMmHXs8ovWk53JzFq5vPul6zDjLV36pX7bzvNzB0YlQOZephWtRS5T7eeSq8030R77/HvC1d7tN83Zt9yltrDdwSR0XxsZd5l+MvvvU1/M9jSnj+Nh6FPJbBld/w6XHXH5MZeXrOfS/65g9RTl1JCa8chzX2RZ9/3lXSh4/VqWfEBNq4b82Ytp6m+9Qqxir1jX+rfPdT1vvsWhM6bPbmON6E1LnPCZW7L0qqXswmtqf0MQelZj4myrzYtzvIYmURlvtqapyx+gzRfd0XPfahVSOquMoG+dibBdl46iyfdbV1qvUW9m8+KTudMvkzZe/pqTJ+pWTflX5zw1fVfox6ZTVc8hvHflOSb+OuG1JsZ0kufXAJf8D"));
const $9b772791ccede8a5$var$stateMachine = new (0, $parcel$interopDefault($elh9A$dfa))((0, /*@__PURE__*/ $parcel$interopDefault($79781f8c452881c2$exports)));
class $9b772791ccede8a5$export$2e2bcd8739ae039 extends (0, $d28fb665ee343afc$export$2e2bcd8739ae039) {
    static planFeatures(plan) {
        plan.addStage($9b772791ccede8a5$var$setupSyllables);
        // Default glyph pre-processing group
        plan.addStage([
            "locl",
            "ccmp",
            "nukt",
            "akhn"
        ]);
        // Reordering group
        plan.addStage($9b772791ccede8a5$var$clearSubstitutionFlags);
        plan.addStage([
            "rphf"
        ], false);
        plan.addStage($9b772791ccede8a5$var$recordRphf);
        plan.addStage($9b772791ccede8a5$var$clearSubstitutionFlags);
        plan.addStage([
            "pref"
        ]);
        plan.addStage($9b772791ccede8a5$var$recordPref);
        // Orthographic unit shaping group
        plan.addStage([
            "rkrf",
            "abvf",
            "blwf",
            "half",
            "pstf",
            "vatu",
            "cjct"
        ]);
        plan.addStage($9b772791ccede8a5$var$reorder);
        // Topographical features
        // Scripts that need this are handled by the Arabic shaper, not implemented here for now.
        // plan.addStage(['isol', 'init', 'medi', 'fina', 'med2', 'fin2', 'fin3'], false);
        // Standard topographic presentation and positional feature application
        plan.addStage([
            "abvs",
            "blws",
            "pres",
            "psts",
            "dist",
            "abvm",
            "blwm"
        ]);
    }
    static assignFeatures(plan, glyphs) {
        // Decompose split vowels
        // TODO: do this in a more general unicode normalizer
        for(let i = glyphs.length - 1; i >= 0; i--){
            let codepoint = glyphs[i].codePoints[0];
            if ($9b772791ccede8a5$var$decompositions[codepoint]) {
                let decomposed = $9b772791ccede8a5$var$decompositions[codepoint].map((c)=>{
                    let g = plan.font.glyphForCodePoint(c);
                    return new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(plan.font, g.id, [
                        c
                    ], glyphs[i].features);
                });
                glyphs.splice(i, 1, ...decomposed);
            }
        }
    }
}
(0, $elh9A$swchelperscjs_define_propertycjs._)($9b772791ccede8a5$export$2e2bcd8739ae039, "zeroMarkWidths", "BEFORE_GPOS");
function $9b772791ccede8a5$var$useCategory(glyph) {
    return $9b772791ccede8a5$var$trie.get(glyph.codePoints[0]);
}
class $9b772791ccede8a5$var$USEInfo {
    constructor(category, syllableType, syllable){
        this.category = category;
        this.syllableType = syllableType;
        this.syllable = syllable;
    }
}
function $9b772791ccede8a5$var$setupSyllables(font, glyphs) {
    let syllable = 0;
    for (let [start, end, tags] of $9b772791ccede8a5$var$stateMachine.match(glyphs.map($9b772791ccede8a5$var$useCategory))){
        ++syllable;
        // Create shaper info
        for(let i = start; i <= end; i++)glyphs[i].shaperInfo = new $9b772791ccede8a5$var$USEInfo($9b772791ccede8a5$var$categories[$9b772791ccede8a5$var$useCategory(glyphs[i])], tags[0], syllable);
        // Assign rphf feature
        let limit = glyphs[start].shaperInfo.category === "R" ? 1 : Math.min(3, end - start);
        for(let i = start; i < start + limit; i++)glyphs[i].features.rphf = true;
    }
}
function $9b772791ccede8a5$var$clearSubstitutionFlags(font, glyphs) {
    for (let glyph of glyphs)glyph.substituted = false;
}
function $9b772791ccede8a5$var$recordRphf(font, glyphs) {
    for (let glyph of glyphs)if (glyph.substituted && glyph.features.rphf) glyph.shaperInfo.category = "R";
}
function $9b772791ccede8a5$var$recordPref(font, glyphs) {
    for (let glyph of glyphs)if (glyph.substituted) glyph.shaperInfo.category = "VPre";
}
function $9b772791ccede8a5$var$reorder(font, glyphs) {
    let dottedCircle = font.glyphForCodePoint(0x25cc).id;
    for(let start = 0, end = $9b772791ccede8a5$var$nextSyllable(glyphs, 0); start < glyphs.length; start = end, end = $9b772791ccede8a5$var$nextSyllable(glyphs, start)){
        let i, j;
        let info = glyphs[start].shaperInfo;
        let type = info.syllableType;
        // Only a few syllable types need reordering.
        if (type !== "virama_terminated_cluster" && type !== "standard_cluster" && type !== "broken_cluster") continue;
        // Insert a dotted circle glyph in broken clusters.
        if (type === "broken_cluster" && dottedCircle) {
            let g = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(font, dottedCircle, [
                0x25cc
            ]);
            g.shaperInfo = info;
            // Insert after possible Repha.
            for(i = start; i < end && glyphs[i].shaperInfo.category === "R"; i++);
            glyphs.splice(++i, 0, g);
            end++;
        }
        // Move things forward.
        if (info.category === "R" && end - start > 1) for(i = start + 1; i < end; i++){
            info = glyphs[i].shaperInfo;
            if ($9b772791ccede8a5$var$isBase(info) || $9b772791ccede8a5$var$isHalant(glyphs[i])) {
                // If we hit a halant, move before it; otherwise it's a base: move to it's
                // place, and shift things in between backward.
                if ($9b772791ccede8a5$var$isHalant(glyphs[i])) i--;
                glyphs.splice(start, 0, ...glyphs.splice(start + 1, i - start), glyphs[i]);
                break;
            }
        }
        // Move things back.
        for(i = start, j = end; i < end; i++){
            info = glyphs[i].shaperInfo;
            if ($9b772791ccede8a5$var$isBase(info) || $9b772791ccede8a5$var$isHalant(glyphs[i])) // place, and shift things in between backward.
            j = $9b772791ccede8a5$var$isHalant(glyphs[i]) ? i + 1 : i;
            else if ((info.category === "VPre" || info.category === "VMPre") && j < i) glyphs.splice(j, 1, glyphs[i], ...glyphs.splice(j, i - j));
        }
    }
}
function $9b772791ccede8a5$var$nextSyllable(glyphs, start) {
    if (start >= glyphs.length) return start;
    let syllable = glyphs[start].shaperInfo.syllable;
    while(++start < glyphs.length && glyphs[start].shaperInfo.syllable === syllable);
    return start;
}
function $9b772791ccede8a5$var$isHalant(glyph) {
    return glyph.shaperInfo.category === "H" && !glyph.isLigated;
}
function $9b772791ccede8a5$var$isBase(info) {
    return info.category === "B" || info.category === "GB";
}
const $fdb4471fc82bc2c2$var$SHAPERS = {
    arab: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    mong: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    syrc: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    "nko ": (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    phag: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    mand: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    mani: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    phlp: (0, $17ba6019f27bfcf9$export$2e2bcd8739ae039),
    hang: (0, $fa1d9fd80dd7279e$export$2e2bcd8739ae039),
    bng2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    beng: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    dev2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    deva: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    gjr2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    gujr: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    guru: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    gur2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    knda: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    knd2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    mlm2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    mlym: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    ory2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    orya: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    taml: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    tml2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    telu: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    tel2: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    khmr: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    bali: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    batk: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    brah: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    bugi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    buhd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    cakm: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    cham: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    dupl: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    egyp: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    gran: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    hano: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    java: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    kthi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    kali: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    khar: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    khoj: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    sind: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    lepc: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    limb: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    mahj: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    // mand: UniversalShaper, // Mandaic
    // mani: UniversalShaper, // Manichaean
    mtei: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    modi: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    // mong: UniversalShaper, // Mongolian
    // 'nko ': UniversalShaper, // N’Ko
    hmng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    // phag: UniversalShaper, // Phags-pa
    // phlp: UniversalShaper, // Psalter Pahlavi
    rjng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    saur: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    shrd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    sidd: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    sinh: (0, $d203e6b9523d0071$export$2e2bcd8739ae039),
    sund: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    sylo: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tglg: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tagb: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tale: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    lana: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tavt: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    takr: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tibt: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tfng: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    tirh: (0, $9b772791ccede8a5$export$2e2bcd8739ae039),
    latn: (0, $d28fb665ee343afc$export$2e2bcd8739ae039),
    DFLT: (0, $d28fb665ee343afc$export$2e2bcd8739ae039 // Default
    )
};
function $fdb4471fc82bc2c2$export$7877a478dd30fd3d(script) {
    if (!Array.isArray(script)) script = [
        script
    ];
    for (let s of script){
        let shaper = $fdb4471fc82bc2c2$var$SHAPERS[s];
        if (shaper) return shaper;
    }
    return 0, $d28fb665ee343afc$export$2e2bcd8739ae039;
}
class $86bc1883359e094a$export$2e2bcd8739ae039 extends (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039) {
    applyLookup(lookupType, table) {
        switch(lookupType){
            case 1:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    let glyph = this.glyphIterator.cur;
                    switch(table.version){
                        case 1:
                            glyph.id = glyph.id + table.deltaGlyphID & 0xffff;
                            break;
                        case 2:
                            glyph.id = table.substitute.get(index);
                            break;
                    }
                    return true;
                }
            case 2:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index !== -1) {
                        let sequence = table.sequences.get(index);
                        if (sequence.length === 0) {
                            // If the sequence length is zero, delete the glyph.
                            // The OpenType spec disallows this, but seems like Harfbuzz and Uniscribe allow it.
                            this.glyphs.splice(this.glyphIterator.index, 1);
                            return true;
                        }
                        this.glyphIterator.cur.id = sequence[0];
                        this.glyphIterator.cur.ligatureComponent = 0;
                        let features = this.glyphIterator.cur.features;
                        let curGlyph = this.glyphIterator.cur;
                        let replacement = sequence.slice(1).map((gid, i)=>{
                            let glyph = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, gid, undefined, features);
                            glyph.shaperInfo = curGlyph.shaperInfo;
                            glyph.isLigated = curGlyph.isLigated;
                            glyph.ligatureComponent = i + 1;
                            glyph.substituted = true;
                            glyph.isMultiplied = true;
                            return glyph;
                        });
                        this.glyphs.splice(this.glyphIterator.index + 1, 0, ...replacement);
                        return true;
                    }
                    return false;
                }
            case 3:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index !== -1) {
                        let USER_INDEX = 0; // TODO
                        this.glyphIterator.cur.id = table.alternateSet.get(index)[USER_INDEX];
                        return true;
                    }
                    return false;
                }
            case 4:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    for (let ligature of table.ligatureSets.get(index)){
                        let matched = this.sequenceMatchIndices(1, ligature.components);
                        if (!matched) continue;
                        let curGlyph = this.glyphIterator.cur;
                        // Concatenate all of the characters the new ligature will represent
                        let characters = curGlyph.codePoints.slice();
                        for (let index of matched)characters.push(...this.glyphs[index].codePoints);
                        // Create the replacement ligature glyph
                        let ligatureGlyph = new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, ligature.glyph, characters, curGlyph.features);
                        ligatureGlyph.shaperInfo = curGlyph.shaperInfo;
                        ligatureGlyph.isLigated = true;
                        ligatureGlyph.substituted = true;
                        // From Harfbuzz:
                        // - If it *is* a mark ligature, we don't allocate a new ligature id, and leave
                        //   the ligature to keep its old ligature id.  This will allow it to attach to
                        //   a base ligature in GPOS.  Eg. if the sequence is: LAM,LAM,SHADDA,FATHA,HEH,
                        //   and LAM,LAM,HEH for a ligature, they will leave SHADDA and FATHA with a
                        //   ligature id and component value of 2.  Then if SHADDA,FATHA form a ligature
                        //   later, we don't want them to lose their ligature id/component, otherwise
                        //   GPOS will fail to correctly position the mark ligature on top of the
                        //   LAM,LAM,HEH ligature. See https://bugzilla.gnome.org/show_bug.cgi?id=676343
                        //
                        // - If a ligature is formed of components that some of which are also ligatures
                        //   themselves, and those ligature components had marks attached to *their*
                        //   components, we have to attach the marks to the new ligature component
                        //   positions!  Now *that*'s tricky!  And these marks may be following the
                        //   last component of the whole sequence, so we should loop forward looking
                        //   for them and update them.
                        //
                        //   Eg. the sequence is LAM,LAM,SHADDA,FATHA,HEH, and the font first forms a
                        //   'calt' ligature of LAM,HEH, leaving the SHADDA and FATHA with a ligature
                        //   id and component == 1.  Now, during 'liga', the LAM and the LAM-HEH ligature
                        //   form a LAM-LAM-HEH ligature.  We need to reassign the SHADDA and FATHA to
                        //   the new ligature with a component value of 2.
                        //
                        //   This in fact happened to a font...  See https://bugzilla.gnome.org/show_bug.cgi?id=437633
                        let isMarkLigature = curGlyph.isMark;
                        for(let i = 0; i < matched.length && isMarkLigature; i++)isMarkLigature = this.glyphs[matched[i]].isMark;
                        ligatureGlyph.ligatureID = isMarkLigature ? null : this.ligatureID++;
                        let lastLigID = curGlyph.ligatureID;
                        let lastNumComps = curGlyph.codePoints.length;
                        let curComps = lastNumComps;
                        let idx = this.glyphIterator.index + 1;
                        // Set ligatureID and ligatureComponent on glyphs that were skipped in the matched sequence.
                        // This allows GPOS to attach marks to the correct ligature components.
                        for (let matchIndex of matched){
                            // Don't assign new ligature components for mark ligatures (see above)
                            if (isMarkLigature) idx = matchIndex;
                            else while(idx < matchIndex){
                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[idx].ligatureComponent || 1, lastNumComps);
                                this.glyphs[idx].ligatureID = ligatureGlyph.ligatureID;
                                this.glyphs[idx].ligatureComponent = ligatureComponent;
                                idx++;
                            }
                            lastLigID = this.glyphs[idx].ligatureID;
                            lastNumComps = this.glyphs[idx].codePoints.length;
                            curComps += lastNumComps;
                            idx++; // skip base glyph
                        }
                        // Adjust ligature components for any marks following
                        if (lastLigID && !isMarkLigature) for(let i = idx; i < this.glyphs.length; i++){
                            if (this.glyphs[i].ligatureID === lastLigID) {
                                var ligatureComponent = curComps - lastNumComps + Math.min(this.glyphs[i].ligatureComponent || 1, lastNumComps);
                                this.glyphs[i].ligatureComponent = ligatureComponent;
                            } else break;
                        }
                        // Delete the matched glyphs, and replace the current glyph with the ligature glyph
                        for(let i = matched.length - 1; i >= 0; i--)this.glyphs.splice(matched[i], 1);
                        this.glyphs[this.glyphIterator.index] = ligatureGlyph;
                        return true;
                    }
                    return false;
                }
            case 5:
                return this.applyContext(table);
            case 6:
                return this.applyChainingContext(table);
            case 7:
                return this.applyLookup(table.lookupType, table.extension);
            default:
                throw new Error(`GSUB lookupType ${lookupType} is not supported`);
        }
    }
}
class $79ea6270f0a90256$export$2e2bcd8739ae039 extends (0, $7b226e6bbeadedeb$export$2e2bcd8739ae039) {
    applyPositionValue(sequenceIndex, value) {
        let position = this.positions[this.glyphIterator.peekIndex(sequenceIndex)];
        if (value.xAdvance != null) position.xAdvance += value.xAdvance;
        if (value.yAdvance != null) position.yAdvance += value.yAdvance;
        if (value.xPlacement != null) position.xOffset += value.xPlacement;
        if (value.yPlacement != null) position.yOffset += value.yPlacement;
        // Adjustments for font variations
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
            if (value.xPlaDevice) position.xOffset += variationProcessor.getDelta(variationStore, value.xPlaDevice.a, value.xPlaDevice.b);
            if (value.yPlaDevice) position.yOffset += variationProcessor.getDelta(variationStore, value.yPlaDevice.a, value.yPlaDevice.b);
            if (value.xAdvDevice) position.xAdvance += variationProcessor.getDelta(variationStore, value.xAdvDevice.a, value.xAdvDevice.b);
            if (value.yAdvDevice) position.yAdvance += variationProcessor.getDelta(variationStore, value.yAdvDevice.a, value.yAdvDevice.b);
        }
    // TODO: device tables
    }
    applyLookup(lookupType, table) {
        switch(lookupType){
            case 1:
                {
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    switch(table.version){
                        case 1:
                            this.applyPositionValue(0, table.value);
                            break;
                        case 2:
                            this.applyPositionValue(0, table.values.get(index));
                            break;
                    }
                    return true;
                }
            case 2:
                {
                    let nextGlyph = this.glyphIterator.peek();
                    if (!nextGlyph) return false;
                    let index = this.coverageIndex(table.coverage);
                    if (index === -1) return false;
                    switch(table.version){
                        case 1:
                            let set = table.pairSets.get(index);
                            for (let pair of set)if (pair.secondGlyph === nextGlyph.id) {
                                this.applyPositionValue(0, pair.value1);
                                this.applyPositionValue(1, pair.value2);
                                return true;
                            }
                            return false;
                        case 2:
                            let class1 = this.getClassID(this.glyphIterator.cur.id, table.classDef1);
                            let class2 = this.getClassID(nextGlyph.id, table.classDef2);
                            if (class1 === -1 || class2 === -1) return false;
                            var pair = table.classRecords.get(class1).get(class2);
                            this.applyPositionValue(0, pair.value1);
                            this.applyPositionValue(1, pair.value2);
                            return true;
                    }
                }
            case 3:
                {
                    let nextIndex = this.glyphIterator.peekIndex();
                    let nextGlyph = this.glyphs[nextIndex];
                    if (!nextGlyph) return false;
                    let curRecord = table.entryExitRecords[this.coverageIndex(table.coverage)];
                    if (!curRecord || !curRecord.exitAnchor) return false;
                    let nextRecord = table.entryExitRecords[this.coverageIndex(table.coverage, nextGlyph.id)];
                    if (!nextRecord || !nextRecord.entryAnchor) return false;
                    let entry = this.getAnchor(nextRecord.entryAnchor);
                    let exit = this.getAnchor(curRecord.exitAnchor);
                    let cur = this.positions[this.glyphIterator.index];
                    let next = this.positions[nextIndex];
                    let d;
                    switch(this.direction){
                        case "ltr":
                            cur.xAdvance = exit.x + cur.xOffset;
                            d = entry.x + next.xOffset;
                            next.xAdvance -= d;
                            next.xOffset -= d;
                            break;
                        case "rtl":
                            d = exit.x + cur.xOffset;
                            cur.xAdvance -= d;
                            cur.xOffset -= d;
                            next.xAdvance = entry.x + next.xOffset;
                            break;
                    }
                    if (this.glyphIterator.flags.rightToLeft) {
                        this.glyphIterator.cur.cursiveAttachment = nextIndex;
                        cur.yOffset = entry.y - exit.y;
                    } else {
                        nextGlyph.cursiveAttachment = this.glyphIterator.index;
                        cur.yOffset = exit.y - entry.y;
                    }
                    return true;
                }
            case 4:
                {
                    let markIndex = this.coverageIndex(table.markCoverage);
                    if (markIndex === -1) return false;
                    // search backward for a base glyph
                    let baseGlyphIndex = this.glyphIterator.index;
                    while(--baseGlyphIndex >= 0 && (this.glyphs[baseGlyphIndex].isMark || this.glyphs[baseGlyphIndex].ligatureComponent > 0));
                    if (baseGlyphIndex < 0) return false;
                    let baseIndex = this.coverageIndex(table.baseCoverage, this.glyphs[baseGlyphIndex].id);
                    if (baseIndex === -1) return false;
                    let markRecord = table.markArray[markIndex];
                    let baseAnchor = table.baseArray[baseIndex][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                    return true;
                }
            case 5:
                {
                    let markIndex = this.coverageIndex(table.markCoverage);
                    if (markIndex === -1) return false;
                    // search backward for a base glyph
                    let baseGlyphIndex = this.glyphIterator.index;
                    while(--baseGlyphIndex >= 0 && this.glyphs[baseGlyphIndex].isMark);
                    if (baseGlyphIndex < 0) return false;
                    let ligIndex = this.coverageIndex(table.ligatureCoverage, this.glyphs[baseGlyphIndex].id);
                    if (ligIndex === -1) return false;
                    let ligAttach = table.ligatureArray[ligIndex];
                    let markGlyph = this.glyphIterator.cur;
                    let ligGlyph = this.glyphs[baseGlyphIndex];
                    let compIndex = ligGlyph.ligatureID && ligGlyph.ligatureID === markGlyph.ligatureID && markGlyph.ligatureComponent > 0 ? Math.min(markGlyph.ligatureComponent, ligGlyph.codePoints.length) - 1 : ligGlyph.codePoints.length - 1;
                    let markRecord = table.markArray[markIndex];
                    let baseAnchor = ligAttach[compIndex][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, baseGlyphIndex);
                    return true;
                }
            case 6:
                {
                    let mark1Index = this.coverageIndex(table.mark1Coverage);
                    if (mark1Index === -1) return false;
                    // get the previous mark to attach to
                    let prevIndex = this.glyphIterator.peekIndex(-1);
                    let prev = this.glyphs[prevIndex];
                    if (!prev || !prev.isMark) return false;
                    let cur = this.glyphIterator.cur;
                    // The following logic was borrowed from Harfbuzz
                    let good = false;
                    if (cur.ligatureID === prev.ligatureID) {
                        if (!cur.ligatureID) good = true;
                        else if (cur.ligatureComponent === prev.ligatureComponent) good = true;
                    } else // itself is a ligature, in which case match.
                    if (cur.ligatureID && !cur.ligatureComponent || prev.ligatureID && !prev.ligatureComponent) good = true;
                    if (!good) return false;
                    let mark2Index = this.coverageIndex(table.mark2Coverage, prev.id);
                    if (mark2Index === -1) return false;
                    let markRecord = table.mark1Array[mark1Index];
                    let baseAnchor = table.mark2Array[mark2Index][markRecord.class];
                    this.applyAnchor(markRecord, baseAnchor, prevIndex);
                    return true;
                }
            case 7:
                return this.applyContext(table);
            case 8:
                return this.applyChainingContext(table);
            case 9:
                return this.applyLookup(table.lookupType, table.extension);
            default:
                throw new Error(`Unsupported GPOS table: ${lookupType}`);
        }
    }
    applyAnchor(markRecord, baseAnchor, baseGlyphIndex) {
        let baseCoords = this.getAnchor(baseAnchor);
        let markCoords = this.getAnchor(markRecord.markAnchor);
        let basePos = this.positions[baseGlyphIndex];
        let markPos = this.positions[this.glyphIterator.index];
        markPos.xOffset = baseCoords.x - markCoords.x;
        markPos.yOffset = baseCoords.y - markCoords.y;
        this.glyphIterator.cur.markAttachment = baseGlyphIndex;
    }
    getAnchor(anchor) {
        // TODO: contour point, device tables
        let x = anchor.xCoordinate;
        let y = anchor.yCoordinate;
        // Adjustments for font variations
        let variationProcessor = this.font._variationProcessor;
        let variationStore = this.font.GDEF && this.font.GDEF.itemVariationStore;
        if (variationProcessor && variationStore) {
            if (anchor.xDeviceTable) x += variationProcessor.getDelta(variationStore, anchor.xDeviceTable.a, anchor.xDeviceTable.b);
            if (anchor.yDeviceTable) y += variationProcessor.getDelta(variationStore, anchor.yDeviceTable.a, anchor.yDeviceTable.b);
        }
        return {
            x: x,
            y: y
        };
    }
    applyFeatures(userFeatures, glyphs, advances) {
        super.applyFeatures(userFeatures, glyphs, advances);
        for(var i = 0; i < this.glyphs.length; i++)this.fixCursiveAttachment(i);
        this.fixMarkAttachment();
    }
    fixCursiveAttachment(i) {
        let glyph = this.glyphs[i];
        if (glyph.cursiveAttachment != null) {
            let j = glyph.cursiveAttachment;
            glyph.cursiveAttachment = null;
            this.fixCursiveAttachment(j);
            this.positions[i].yOffset += this.positions[j].yOffset;
        }
    }
    fixMarkAttachment() {
        for(let i = 0; i < this.glyphs.length; i++){
            let glyph = this.glyphs[i];
            if (glyph.markAttachment != null) {
                let j = glyph.markAttachment;
                this.positions[i].xOffset += this.positions[j].xOffset;
                this.positions[i].yOffset += this.positions[j].yOffset;
                if (this.direction === "ltr") for(let k = j; k < i; k++){
                    this.positions[i].xOffset -= this.positions[k].xAdvance;
                    this.positions[i].yOffset -= this.positions[k].yAdvance;
                }
                else for(let k = j + 1; k < i + 1; k++){
                    this.positions[i].xOffset += this.positions[k].xAdvance;
                    this.positions[i].yOffset += this.positions[k].yAdvance;
                }
            }
        }
    }
}
class $b2f26a32cb9ab2fa$export$2e2bcd8739ae039 {
    setup(glyphRun) {
        // Map glyphs to GlyphInfo objects so data can be passed between
        // GSUB and GPOS without mutating the real (shared) Glyph objects.
        this.glyphInfos = glyphRun.glyphs.map((glyph)=>new (0, $f22bb23c9fd478d8$export$2e2bcd8739ae039)(this.font, glyph.id, [
                ...glyph.codePoints
            ]));
        // Select a script based on what is available in GSUB/GPOS.
        let script = null;
        if (this.GPOSProcessor) script = this.GPOSProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        if (this.GSUBProcessor) script = this.GSUBProcessor.selectScript(glyphRun.script, glyphRun.language, glyphRun.direction);
        // Choose a shaper based on the script, and setup a shaping plan.
        // This determines which features to apply to which glyphs.
        this.shaper = $fdb4471fc82bc2c2$export$7877a478dd30fd3d(script);
        this.plan = new (0, $d7e93cca3cf8ce8a$export$2e2bcd8739ae039)(this.font, script, glyphRun.direction);
        this.shaper.plan(this.plan, this.glyphInfos, glyphRun.features);
        // Assign chosen features to output glyph run
        for(let key in this.plan.allFeatures)glyphRun.features[key] = true;
    }
    substitute(glyphRun) {
        if (this.GSUBProcessor) {
            this.plan.process(this.GSUBProcessor, this.glyphInfos);
            // Map glyph infos back to normal Glyph objects
            glyphRun.glyphs = this.glyphInfos.map((glyphInfo)=>this.font.getGlyph(glyphInfo.id, glyphInfo.codePoints));
        }
    }
    position(glyphRun) {
        if (this.shaper.zeroMarkWidths === "BEFORE_GPOS") this.zeroMarkAdvances(glyphRun.positions);
        if (this.GPOSProcessor) this.plan.process(this.GPOSProcessor, this.glyphInfos, glyphRun.positions);
        if (this.shaper.zeroMarkWidths === "AFTER_GPOS") this.zeroMarkAdvances(glyphRun.positions);
        // Reverse the glyphs and positions if the script is right-to-left
        if (glyphRun.direction === "rtl") {
            glyphRun.glyphs.reverse();
            glyphRun.positions.reverse();
        }
        return this.GPOSProcessor && this.GPOSProcessor.features;
    }
    zeroMarkAdvances(positions) {
        for(let i = 0; i < this.glyphInfos.length; i++)if (this.glyphInfos[i].isMark) {
            positions[i].xAdvance = 0;
            positions[i].yAdvance = 0;
        }
    }
    cleanup() {
        this.glyphInfos = null;
        this.plan = null;
        this.shaper = null;
    }
    getAvailableFeatures(script, language) {
        let features = [];
        if (this.GSUBProcessor) {
            this.GSUBProcessor.selectScript(script, language);
            features.push(...Object.keys(this.GSUBProcessor.features));
        }
        if (this.GPOSProcessor) {
            this.GPOSProcessor.selectScript(script, language);
            features.push(...Object.keys(this.GPOSProcessor.features));
        }
        return features;
    }
    constructor(font){
        this.font = font;
        this.glyphInfos = null;
        this.plan = null;
        this.GSUBProcessor = null;
        this.GPOSProcessor = null;
        this.fallbackPosition = true;
        if (font.GSUB) this.GSUBProcessor = new (0, $86bc1883359e094a$export$2e2bcd8739ae039)(font, font.GSUB);
        if (font.GPOS) this.GPOSProcessor = new (0, $79ea6270f0a90256$export$2e2bcd8739ae039)(font, font.GPOS);
    }
}
class $9d641258c9d7180d$export$2e2bcd8739ae039 {
    layout(string, features, script, language, direction) {
        // Make the features parameter optional
        if (typeof features === "string") {
            direction = language;
            language = script;
            script = features;
            features = [];
        }
        // Map string to glyphs if needed
        if (typeof string === "string") {
            // Attempt to detect the script from the string if not provided.
            if (script == null) script = $e38a1a895f6aeb54$export$e5cb25e204fb8450(string);
            var glyphs = this.font.glyphsForString(string);
        } else {
            // Attempt to detect the script from the glyph code points if not provided.
            if (script == null) {
                let codePoints = [];
                for (let glyph of string)codePoints.push(...glyph.codePoints);
                script = $e38a1a895f6aeb54$export$16fab0757cfc223d(codePoints);
            }
            var glyphs = string;
        }
        let glyphRun = new (0, $b19c79ec7a94fa39$export$2e2bcd8739ae039)(glyphs, features, script, language, direction);
        // Return early if there are no glyphs
        if (glyphs.length === 0) {
            glyphRun.positions = [];
            return glyphRun;
        }
        // Setup the advanced layout engine
        if (this.engine && this.engine.setup) this.engine.setup(glyphRun);
        // Substitute and position the glyphs
        this.substitute(glyphRun);
        this.position(glyphRun);
        this.hideDefaultIgnorables(glyphRun.glyphs, glyphRun.positions);
        // Let the layout engine clean up any state it might have
        if (this.engine && this.engine.cleanup) this.engine.cleanup();
        return glyphRun;
    }
    substitute(glyphRun) {
        // Call the advanced layout engine to make substitutions
        if (this.engine && this.engine.substitute) this.engine.substitute(glyphRun);
    }
    position(glyphRun) {
        // Get initial glyph positions
        glyphRun.positions = glyphRun.glyphs.map((glyph)=>new (0, $9195cf1266c12ea5$export$2e2bcd8739ae039)(glyph.advanceWidth));
        let positioned = null;
        // Call the advanced layout engine. Returns the features applied.
        if (this.engine && this.engine.position) positioned = this.engine.position(glyphRun);
        // if there is no GPOS table, use unicode properties to position marks.
        if (!positioned && (!this.engine || this.engine.fallbackPosition)) {
            if (!this.unicodeLayoutEngine) this.unicodeLayoutEngine = new (0, $a57a26817cd35108$export$2e2bcd8739ae039)(this.font);
            this.unicodeLayoutEngine.positionGlyphs(glyphRun.glyphs, glyphRun.positions);
        }
        // if kerning is not supported by GPOS, do kerning with the TrueType/AAT kern table
        if ((!positioned || !positioned.kern) && glyphRun.features.kern !== false && this.font.kern) {
            if (!this.kernProcessor) this.kernProcessor = new (0, $4646d52c2a559cdb$export$2e2bcd8739ae039)(this.font);
            this.kernProcessor.process(glyphRun.glyphs, glyphRun.positions);
            glyphRun.features.kern = true;
        }
    }
    hideDefaultIgnorables(glyphs, positions) {
        let space = this.font.glyphForCodePoint(0x20);
        for(let i = 0; i < glyphs.length; i++)if (this.isDefaultIgnorable(glyphs[i].codePoints[0])) {
            glyphs[i] = space;
            positions[i].xAdvance = 0;
            positions[i].yAdvance = 0;
        }
    }
    isDefaultIgnorable(ch) {
        // From DerivedCoreProperties.txt in the Unicode database,
        // minus U+115F, U+1160, U+3164 and U+FFA0, which is what
        // Harfbuzz and Uniscribe do.
        let plane = ch >> 16;
        if (plane === 0) switch(ch >> 8){
            case 0x00:
                return ch === 0x00AD;
            case 0x03:
                return ch === 0x034F;
            case 0x06:
                return ch === 0x061C;
            case 0x17:
                return 0x17B4 <= ch && ch <= 0x17B5;
            case 0x18:
                return 0x180B <= ch && ch <= 0x180E;
            case 0x20:
                return 0x200B <= ch && ch <= 0x200F || 0x202A <= ch && ch <= 0x202E || 0x2060 <= ch && ch <= 0x206F;
            case 0xFE:
                return 0xFE00 <= ch && ch <= 0xFE0F || ch === 0xFEFF;
            case 0xFF:
                return 0xFFF0 <= ch && ch <= 0xFFF8;
            default:
                return false;
        }
        else switch(plane){
            case 0x01:
                return 0x1BCA0 <= ch && ch <= 0x1BCA3 || 0x1D173 <= ch && ch <= 0x1D17A;
            case 0x0E:
                return 0xE0000 <= ch && ch <= 0xE0FFF;
            default:
                return false;
        }
    }
    getAvailableFeatures(script, language) {
        let features = [];
        if (this.engine) features.push(...this.engine.getAvailableFeatures(script, language));
        if (this.font.kern && features.indexOf("kern") === -1) features.push("kern");
        return features;
    }
    stringsForGlyph(gid) {
        let result = new Set;
        let codePoints = this.font._cmapProcessor.codePointsForGlyph(gid);
        for (let codePoint of codePoints)result.add(String.fromCodePoint(codePoint));
        if (this.engine && this.engine.stringsForGlyph) for (let string of this.engine.stringsForGlyph(gid))result.add(string);
        return Array.from(result);
    }
    constructor(font){
        this.font = font;
        this.unicodeLayoutEngine = null;
        this.kernProcessor = null;
        // Choose an advanced layout engine. We try the AAT morx table first since more
        // scripts are currently supported because the shaping logic is built into the font.
        if (this.font.morx) this.engine = new (0, $860fcbd64bc12fbc$export$2e2bcd8739ae039)(this.font);
        else if (this.font.GSUB || this.font.GPOS) this.engine = new (0, $b2f26a32cb9ab2fa$export$2e2bcd8739ae039)(this.font);
    }
}
const $67ee4828d81adb28$var$SVG_COMMANDS = {
    moveTo: "M",
    lineTo: "L",
    quadraticCurveTo: "Q",
    bezierCurveTo: "C",
    closePath: "Z"
};
class $67ee4828d81adb28$export$2e2bcd8739ae039 {
    /**
   * Compiles the path to a JavaScript function that can be applied with
   * a graphics context in order to render the path.
   * @return {string}
   */ toFunction() {
        return (ctx)=>{
            this.commands.forEach((c)=>{
                return ctx[c.command].apply(ctx, c.args);
            });
        };
    }
    /**
   * Converts the path to an SVG path data string
   * @return {string}
   */ toSVG() {
        let cmds = this.commands.map((c)=>{
            let args = c.args.map((arg)=>Math.round(arg * 100) / 100);
            return `${$67ee4828d81adb28$var$SVG_COMMANDS[c.command]}${args.join(" ")}`;
        });
        return cmds.join("");
    }
    /**
   * Gets the "control box" of a path.
   * This is like the bounding box, but it includes all points including
   * control points of bezier segments and is much faster to compute than
   * the real bounding box.
   * @type {BBox}
   */ get cbox() {
        if (!this._cbox) {
            let cbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039);
            for (let command of this.commands)for(let i = 0; i < command.args.length; i += 2)cbox.addPoint(command.args[i], command.args[i + 1]);
            this._cbox = Object.freeze(cbox);
        }
        return this._cbox;
    }
    /**
   * Gets the exact bounding box of the path by evaluating curve segments.
   * Slower to compute than the control box, but more accurate.
   * @type {BBox}
   */ get bbox() {
        if (this._bbox) return this._bbox;
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039);
        let cx = 0, cy = 0;
        let f = (t)=>Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
        for (let c of this.commands)switch(c.command){
            case "moveTo":
            case "lineTo":
                let [x, y] = c.args;
                bbox.addPoint(x, y);
                cx = x;
                cy = y;
                break;
            case "quadraticCurveTo":
            case "bezierCurveTo":
                if (c.command === "quadraticCurveTo") {
                    // http://fontforge.org/bezier.html
                    var [qp1x, qp1y, p3x, p3y] = c.args;
                    var cp1x = cx + 2 / 3 * (qp1x - cx); // CP1 = QP0 + 2/3 * (QP1-QP0)
                    var cp1y = cy + 2 / 3 * (qp1y - cy);
                    var cp2x = p3x + 2 / 3 * (qp1x - p3x); // CP2 = QP2 + 2/3 * (QP1-QP2)
                    var cp2y = p3y + 2 / 3 * (qp1y - p3y);
                } else var [cp1x, cp1y, cp2x, cp2y, p3x, p3y] = c.args;
                // http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
                bbox.addPoint(p3x, p3y);
                var p0 = [
                    cx,
                    cy
                ];
                var p1 = [
                    cp1x,
                    cp1y
                ];
                var p2 = [
                    cp2x,
                    cp2y
                ];
                var p3 = [
                    p3x,
                    p3y
                ];
                for(var i = 0; i <= 1; i++){
                    let b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                    let a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                    c = 3 * p1[i] - 3 * p0[i];
                    if (a === 0) {
                        if (b === 0) continue;
                        let t = -c / b;
                        if (0 < t && t < 1) {
                            if (i === 0) bbox.addPoint(f(t), bbox.maxY);
                            else if (i === 1) bbox.addPoint(bbox.maxX, f(t));
                        }
                        continue;
                    }
                    let b2ac = Math.pow(b, 2) - 4 * c * a;
                    if (b2ac < 0) continue;
                    let t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t1 && t1 < 1) {
                        if (i === 0) bbox.addPoint(f(t1), bbox.maxY);
                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t1));
                    }
                    let t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                    if (0 < t2 && t2 < 1) {
                        if (i === 0) bbox.addPoint(f(t2), bbox.maxY);
                        else if (i === 1) bbox.addPoint(bbox.maxX, f(t2));
                    }
                }
                cx = p3x;
                cy = p3y;
                break;
        }
        return this._bbox = Object.freeze(bbox);
    }
    /**
   * Applies a mapping function to each point in the path.
   * @param {function} fn
   * @return {Path}
   */ mapPoints(fn) {
        let path = new $67ee4828d81adb28$export$2e2bcd8739ae039;
        for (let c of this.commands){
            let args = [];
            for(let i = 0; i < c.args.length; i += 2){
                let [x, y] = fn(c.args[i], c.args[i + 1]);
                args.push(x, y);
            }
            path[c.command](...args);
        }
        return path;
    }
    /**
   * Transforms the path by the given matrix.
   */ transform(m0, m1, m2, m3, m4, m5) {
        return this.mapPoints((x, y)=>{
            const tx = m0 * x + m2 * y + m4;
            const ty = m1 * x + m3 * y + m5;
            return [
                tx,
                ty
            ];
        });
    }
    /**
   * Translates the path by the given offset.
   */ translate(x, y) {
        return this.transform(1, 0, 0, 1, x, y);
    }
    /**
   * Rotates the path by the given angle (in radians).
   */ rotate(angle) {
        let cos = Math.cos(angle);
        let sin = Math.sin(angle);
        return this.transform(cos, sin, -sin, cos, 0, 0);
    }
    /**
   * Scales the path.
   */ scale(scaleX, scaleY = scaleX) {
        return this.transform(scaleX, 0, 0, scaleY, 0, 0);
    }
    constructor(){
        this.commands = [];
        this._bbox = null;
        this._cbox = null;
    }
}
for (let command of [
    "moveTo",
    "lineTo",
    "quadraticCurveTo",
    "bezierCurveTo",
    "closePath"
])$67ee4828d81adb28$export$2e2bcd8739ae039.prototype[command] = function(...args) {
    this._bbox = this._cbox = null;
    this.commands.push({
        command: command,
        args: args
    });
    return this;
};
var $85e16e40023cfb0f$export$2e2bcd8739ae039 = [
    ".notdef",
    ".null",
    "nonmarkingreturn",
    "space",
    "exclam",
    "quotedbl",
    "numbersign",
    "dollar",
    "percent",
    "ampersand",
    "quotesingle",
    "parenleft",
    "parenright",
    "asterisk",
    "plus",
    "comma",
    "hyphen",
    "period",
    "slash",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "colon",
    "semicolon",
    "less",
    "equal",
    "greater",
    "question",
    "at",
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "bracketleft",
    "backslash",
    "bracketright",
    "asciicircum",
    "underscore",
    "grave",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "braceleft",
    "bar",
    "braceright",
    "asciitilde",
    "Adieresis",
    "Aring",
    "Ccedilla",
    "Eacute",
    "Ntilde",
    "Odieresis",
    "Udieresis",
    "aacute",
    "agrave",
    "acircumflex",
    "adieresis",
    "atilde",
    "aring",
    "ccedilla",
    "eacute",
    "egrave",
    "ecircumflex",
    "edieresis",
    "iacute",
    "igrave",
    "icircumflex",
    "idieresis",
    "ntilde",
    "oacute",
    "ograve",
    "ocircumflex",
    "odieresis",
    "otilde",
    "uacute",
    "ugrave",
    "ucircumflex",
    "udieresis",
    "dagger",
    "degree",
    "cent",
    "sterling",
    "section",
    "bullet",
    "paragraph",
    "germandbls",
    "registered",
    "copyright",
    "trademark",
    "acute",
    "dieresis",
    "notequal",
    "AE",
    "Oslash",
    "infinity",
    "plusminus",
    "lessequal",
    "greaterequal",
    "yen",
    "mu",
    "partialdiff",
    "summation",
    "product",
    "pi",
    "integral",
    "ordfeminine",
    "ordmasculine",
    "Omega",
    "ae",
    "oslash",
    "questiondown",
    "exclamdown",
    "logicalnot",
    "radical",
    "florin",
    "approxequal",
    "Delta",
    "guillemotleft",
    "guillemotright",
    "ellipsis",
    "nonbreakingspace",
    "Agrave",
    "Atilde",
    "Otilde",
    "OE",
    "oe",
    "endash",
    "emdash",
    "quotedblleft",
    "quotedblright",
    "quoteleft",
    "quoteright",
    "divide",
    "lozenge",
    "ydieresis",
    "Ydieresis",
    "fraction",
    "currency",
    "guilsinglleft",
    "guilsinglright",
    "fi",
    "fl",
    "daggerdbl",
    "periodcentered",
    "quotesinglbase",
    "quotedblbase",
    "perthousand",
    "Acircumflex",
    "Ecircumflex",
    "Aacute",
    "Edieresis",
    "Egrave",
    "Iacute",
    "Icircumflex",
    "Idieresis",
    "Igrave",
    "Oacute",
    "Ocircumflex",
    "apple",
    "Ograve",
    "Uacute",
    "Ucircumflex",
    "Ugrave",
    "dotlessi",
    "circumflex",
    "tilde",
    "macron",
    "breve",
    "dotaccent",
    "ring",
    "cedilla",
    "hungarumlaut",
    "ogonek",
    "caron",
    "Lslash",
    "lslash",
    "Scaron",
    "scaron",
    "Zcaron",
    "zcaron",
    "brokenbar",
    "Eth",
    "eth",
    "Yacute",
    "yacute",
    "Thorn",
    "thorn",
    "minus",
    "multiply",
    "onesuperior",
    "twosuperior",
    "threesuperior",
    "onehalf",
    "onequarter",
    "threequarters",
    "franc",
    "Gbreve",
    "gbreve",
    "Idotaccent",
    "Scedilla",
    "scedilla",
    "Cacute",
    "cacute",
    "Ccaron",
    "ccaron",
    "dcroat"
];
class $0e4f52d7996e478b$export$2e2bcd8739ae039 {
    _getPath() {
        return new (0, $67ee4828d81adb28$export$2e2bcd8739ae039)();
    }
    _getCBox() {
        return this.path.cbox;
    }
    _getBBox() {
        return this.path.bbox;
    }
    _getTableMetrics(table) {
        if (this.id < table.metrics.length) return table.metrics.get(this.id);
        let metric = table.metrics.get(table.metrics.length - 1);
        let res = {
            advance: metric ? metric.advance : 0,
            bearing: table.bearings.get(this.id - table.metrics.length) || 0
        };
        return res;
    }
    _getMetrics(cbox) {
        if (this._metrics) return this._metrics;
        let { advance: advanceWidth, bearing: leftBearing } = this._getTableMetrics(this._font.hmtx);
        // For vertical metrics, use vmtx if available, or fall back to global data from OS/2 or hhea
        if (this._font.vmtx) var { advance: advanceHeight, bearing: topBearing } = this._getTableMetrics(this._font.vmtx);
        else {
            let os2;
            if (typeof cbox === "undefined" || cbox === null) ({ cbox: cbox } = this);
            if ((os2 = this._font["OS/2"]) && os2.version > 0) {
                var advanceHeight = Math.abs(os2.typoAscender - os2.typoDescender);
                var topBearing = os2.typoAscender - cbox.maxY;
            } else {
                let { hhea: hhea } = this._font;
                var advanceHeight = Math.abs(hhea.ascent - hhea.descent);
                var topBearing = hhea.ascent - cbox.maxY;
            }
        }
        if (this._font._variationProcessor && this._font.HVAR) advanceWidth += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR);
        return this._metrics = {
            advanceWidth: advanceWidth,
            advanceHeight: advanceHeight,
            leftBearing: leftBearing,
            topBearing: topBearing
        };
    }
    /**
   * The glyph’s control box.
   * This is often the same as the bounding box, but is faster to compute.
   * Because of the way bezier curves are defined, some of the control points
   * can be outside of the bounding box. Where `bbox` takes this into account,
   * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
   * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
   * for a more detailed description.
   *
   * @type {BBox}
   */ get cbox() {
        return this._getCBox();
    }
    /**
   * The glyph’s bounding box, i.e. the rectangle that encloses the
   * glyph outline as tightly as possible.
   * @type {BBox}
   */ get bbox() {
        return this._getBBox();
    }
    /**
   * A vector Path object representing the glyph outline.
   * @type {Path}
   */ get path() {
        // Cache the path so we only decode it once
        // Decoding is actually performed by subclasses
        return this._getPath();
    }
    /**
   * Returns a path scaled to the given font size.
   * @param {number} size
   * @return {Path}
   */ getScaledPath(size) {
        let scale = 1 / this._font.unitsPerEm * size;
        return this.path.scale(scale);
    }
    /**
   * The glyph's advance width.
   * @type {number}
   */ get advanceWidth() {
        return this._getMetrics().advanceWidth;
    }
    /**
   * The glyph's advance height.
   * @type {number}
   */ get advanceHeight() {
        return this._getMetrics().advanceHeight;
    }
    get ligatureCaretPositions() {}
    _getName() {
        let { post: post } = this._font;
        if (!post) return null;
        switch(post.version){
            case 1:
                return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[this.id];
            case 2:
                let id = post.glyphNameIndex[this.id];
                if (id < (0, $85e16e40023cfb0f$export$2e2bcd8739ae039).length) return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[id];
                return post.names[id - (0, $85e16e40023cfb0f$export$2e2bcd8739ae039).length];
            case 2.5:
                return (0, $85e16e40023cfb0f$export$2e2bcd8739ae039)[this.id + post.offsets[this.id]];
            case 4:
                return String.fromCharCode(post.map[this.id]);
        }
    }
    /**
   * The glyph's name
   * @type {string}
   */ get name() {
        return this._getName();
    }
    /**
   * Renders the glyph to the given graphics context, at the specified font size.
   * @param {CanvasRenderingContext2d} ctx
   * @param {number} size
   */ render(ctx, size) {
        ctx.save();
        let scale = 1 / this._font.head.unitsPerEm * size;
        ctx.scale(scale, scale);
        let fn = this.path.toFunction();
        fn(ctx);
        ctx.fill();
        ctx.restore();
    }
    constructor(id, codePoints, font){
        /**
     * The glyph id in the font
     * @type {number}
     */ this.id = id;
        /**
     * An array of unicode code points that are represented by this glyph.
     * There can be multiple code points in the case of ligatures and other glyphs
     * that represent multiple visual characters.
     * @type {number[]}
     */ this.codePoints = codePoints;
        this._font = font;
        // TODO: get this info from GDEF if available
        this.isMark = this.codePoints.length > 0 && this.codePoints.every((0, $elh9A$unicodeproperties.isMark));
        this.isLigature = this.codePoints.length > 1;
    }
}
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "cbox", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "bbox", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "path", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "advanceWidth", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "advanceHeight", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0e4f52d7996e478b$export$2e2bcd8739ae039.prototype, "name", null);
// The header for both simple and composite glyphs
let $f680320fa07ef53d$var$GlyfHeader = new $elh9A$restructure.Struct({
    numberOfContours: $elh9A$restructure.int16,
    xMin: $elh9A$restructure.int16,
    yMin: $elh9A$restructure.int16,
    xMax: $elh9A$restructure.int16,
    yMax: $elh9A$restructure.int16
});
// Flags for simple glyphs
const $f680320fa07ef53d$var$ON_CURVE = 1;
const $f680320fa07ef53d$var$X_SHORT_VECTOR = 2;
const $f680320fa07ef53d$var$Y_SHORT_VECTOR = 4;
const $f680320fa07ef53d$var$REPEAT = 8;
const $f680320fa07ef53d$var$SAME_X = 16;
const $f680320fa07ef53d$var$SAME_Y = 32;
// Flags for composite glyphs
const $f680320fa07ef53d$var$ARG_1_AND_2_ARE_WORDS = 1;
const $f680320fa07ef53d$var$ARGS_ARE_XY_VALUES = 2;
const $f680320fa07ef53d$var$ROUND_XY_TO_GRID = 4;
const $f680320fa07ef53d$var$WE_HAVE_A_SCALE = 8;
const $f680320fa07ef53d$var$MORE_COMPONENTS = 32;
const $f680320fa07ef53d$var$WE_HAVE_AN_X_AND_Y_SCALE = 64;
const $f680320fa07ef53d$var$WE_HAVE_A_TWO_BY_TWO = 128;
const $f680320fa07ef53d$var$WE_HAVE_INSTRUCTIONS = 256;
const $f680320fa07ef53d$var$USE_MY_METRICS = 512;
const $f680320fa07ef53d$var$OVERLAP_COMPOUND = 1024;
const $f680320fa07ef53d$var$SCALED_COMPONENT_OFFSET = 2048;
const $f680320fa07ef53d$var$UNSCALED_COMPONENT_OFFSET = 4096;
class $f680320fa07ef53d$export$baf26146a414f24a {
    copy() {
        return new $f680320fa07ef53d$export$baf26146a414f24a(this.onCurve, this.endContour, this.x, this.y);
    }
    constructor(onCurve, endContour, x = 0, y = 0){
        this.onCurve = onCurve;
        this.endContour = endContour;
        this.x = x;
        this.y = y;
    }
}
// Represents a component in a composite glyph
class $f680320fa07ef53d$var$Component {
    constructor(glyphID, dx, dy){
        this.glyphID = glyphID;
        this.dx = dx;
        this.dy = dy;
        this.pos = 0;
        this.scaleX = this.scaleY = 1;
        this.scale01 = this.scale10 = 0;
    }
}
class $f680320fa07ef53d$export$2e2bcd8739ae039 extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
    // Parses just the glyph header and returns the bounding box
    _getCBox(internal) {
        // We need to decode the glyph if variation processing is requested,
        // so it's easier just to recompute the path's cbox after decoding.
        if (this._font._variationProcessor && !internal) return this.path.cbox;
        let stream = this._font._getTableStream("glyf");
        stream.pos += this._font.loca.offsets[this.id];
        let glyph = $f680320fa07ef53d$var$GlyfHeader.decode(stream);
        let cbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)(glyph.xMin, glyph.yMin, glyph.xMax, glyph.yMax);
        return Object.freeze(cbox);
    }
    // Parses a single glyph coordinate
    _parseGlyphCoord(stream, prev, short, same) {
        if (short) {
            var val = stream.readUInt8();
            if (!same) val = -val;
            val += prev;
        } else if (same) var val = prev;
        else var val = prev + stream.readInt16BE();
        return val;
    }
    // Decodes the glyph data into points for simple glyphs,
    // or components for composite glyphs
    _decode() {
        let glyfPos = this._font.loca.offsets[this.id];
        let nextPos = this._font.loca.offsets[this.id + 1];
        // Nothing to do if there is no data for this glyph
        if (glyfPos === nextPos) return null;
        let stream = this._font._getTableStream("glyf");
        stream.pos += glyfPos;
        let startPos = stream.pos;
        let glyph = $f680320fa07ef53d$var$GlyfHeader.decode(stream);
        if (glyph.numberOfContours > 0) this._decodeSimple(glyph, stream);
        else if (glyph.numberOfContours < 0) this._decodeComposite(glyph, stream, startPos);
        return glyph;
    }
    _decodeSimple(glyph, stream) {
        // this is a simple glyph
        glyph.points = [];
        let endPtsOfContours = new $elh9A$restructure.Array($elh9A$restructure.uint16, glyph.numberOfContours).decode(stream);
        glyph.instructions = new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16).decode(stream);
        let flags = [];
        let numCoords = endPtsOfContours[endPtsOfContours.length - 1] + 1;
        while(flags.length < numCoords){
            var flag = stream.readUInt8();
            flags.push(flag);
            // check for repeat flag
            if (flag & $f680320fa07ef53d$var$REPEAT) {
                let count = stream.readUInt8();
                for(let j = 0; j < count; j++)flags.push(flag);
            }
        }
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            let point = new $f680320fa07ef53d$export$baf26146a414f24a(!!(flag & $f680320fa07ef53d$var$ON_CURVE), endPtsOfContours.indexOf(i) >= 0, 0, 0);
            glyph.points.push(point);
        }
        let px = 0;
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            glyph.points[i].x = px = this._parseGlyphCoord(stream, px, flag & $f680320fa07ef53d$var$X_SHORT_VECTOR, flag & $f680320fa07ef53d$var$SAME_X);
        }
        let py = 0;
        for(var i = 0; i < flags.length; i++){
            var flag = flags[i];
            glyph.points[i].y = py = this._parseGlyphCoord(stream, py, flag & $f680320fa07ef53d$var$Y_SHORT_VECTOR, flag & $f680320fa07ef53d$var$SAME_Y);
        }
        if (this._font._variationProcessor) {
            let points = glyph.points.slice();
            points.push(...this._getPhantomPoints(glyph));
            this._font._variationProcessor.transformPoints(this.id, points);
            glyph.phantomPoints = points.slice(-4);
        }
        return;
    }
    _decodeComposite(glyph, stream, offset = 0) {
        // this is a composite glyph
        glyph.components = [];
        let haveInstructions = false;
        let flags = $f680320fa07ef53d$var$MORE_COMPONENTS;
        while(flags & $f680320fa07ef53d$var$MORE_COMPONENTS){
            flags = stream.readUInt16BE();
            let gPos = stream.pos - offset;
            let glyphID = stream.readUInt16BE();
            if (!haveInstructions) haveInstructions = (flags & $f680320fa07ef53d$var$WE_HAVE_INSTRUCTIONS) !== 0;
            if (flags & $f680320fa07ef53d$var$ARG_1_AND_2_ARE_WORDS) {
                var dx = stream.readInt16BE();
                var dy = stream.readInt16BE();
            } else {
                var dx = stream.readInt8();
                var dy = stream.readInt8();
            }
            var component = new $f680320fa07ef53d$var$Component(glyphID, dx, dy);
            component.pos = gPos;
            if (flags & $f680320fa07ef53d$var$WE_HAVE_A_SCALE) component.scaleX = component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            else if (flags & $f680320fa07ef53d$var$WE_HAVE_AN_X_AND_Y_SCALE) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            } else if (flags & $f680320fa07ef53d$var$WE_HAVE_A_TWO_BY_TWO) {
                component.scaleX = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale01 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scale10 = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
                component.scaleY = (stream.readUInt8() << 24 | stream.readUInt8() << 16) / 1073741824;
            }
            glyph.components.push(component);
        }
        if (this._font._variationProcessor) {
            let points = [];
            for(let j = 0; j < glyph.components.length; j++){
                var component = glyph.components[j];
                points.push(new $f680320fa07ef53d$export$baf26146a414f24a(true, true, component.dx, component.dy));
            }
            points.push(...this._getPhantomPoints(glyph));
            this._font._variationProcessor.transformPoints(this.id, points);
            glyph.phantomPoints = points.splice(-4, 4);
            for(let i = 0; i < points.length; i++){
                let point = points[i];
                glyph.components[i].dx = point.x;
                glyph.components[i].dy = point.y;
            }
        }
        return haveInstructions;
    }
    _getPhantomPoints(glyph) {
        let cbox = this._getCBox(true);
        if (this._metrics == null) this._metrics = (0, $0e4f52d7996e478b$export$2e2bcd8739ae039).prototype._getMetrics.call(this, cbox);
        let { advanceWidth: advanceWidth, advanceHeight: advanceHeight, leftBearing: leftBearing, topBearing: topBearing } = this._metrics;
        return [
            new $f680320fa07ef53d$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing, 0),
            new $f680320fa07ef53d$export$baf26146a414f24a(false, true, glyph.xMin - leftBearing + advanceWidth, 0),
            new $f680320fa07ef53d$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing),
            new $f680320fa07ef53d$export$baf26146a414f24a(false, true, 0, glyph.yMax + topBearing + advanceHeight)
        ];
    }
    // Decodes font data, resolves composite glyphs, and returns an array of contours
    _getContours() {
        let glyph = this._decode();
        if (!glyph) return [];
        let points = [];
        if (glyph.numberOfContours < 0) for (let component of glyph.components){
            let contours = this._font.getGlyph(component.glyphID)._getContours();
            for(let i = 0; i < contours.length; i++){
                let contour = contours[i];
                for(let j = 0; j < contour.length; j++){
                    let point = contour[j];
                    let x = point.x * component.scaleX + point.y * component.scale01 + component.dx;
                    let y = point.y * component.scaleY + point.x * component.scale10 + component.dy;
                    points.push(new $f680320fa07ef53d$export$baf26146a414f24a(point.onCurve, point.endContour, x, y));
                }
            }
        }
        else points = glyph.points || [];
        // Recompute and cache metrics if we performed variation processing, and don't have an HVAR table
        if (glyph.phantomPoints && !this._font.directory.tables.HVAR) {
            this._metrics.advanceWidth = glyph.phantomPoints[1].x - glyph.phantomPoints[0].x;
            this._metrics.advanceHeight = glyph.phantomPoints[3].y - glyph.phantomPoints[2].y;
            this._metrics.leftBearing = glyph.xMin - glyph.phantomPoints[0].x;
            this._metrics.topBearing = glyph.phantomPoints[2].y - glyph.yMax;
        }
        let contours = [];
        let cur = [];
        for(let k = 0; k < points.length; k++){
            var point = points[k];
            cur.push(point);
            if (point.endContour) {
                contours.push(cur);
                cur = [];
            }
        }
        return contours;
    }
    _getMetrics() {
        if (this._metrics) return this._metrics;
        let cbox = this._getCBox(true);
        super._getMetrics(cbox);
        if (this._font._variationProcessor && !this._font.HVAR) this.path;
        return this._metrics;
    }
    // Converts contours to a Path object that can be rendered
    _getPath() {
        let contours = this._getContours();
        let path = new (0, $67ee4828d81adb28$export$2e2bcd8739ae039);
        for(let i = 0; i < contours.length; i++){
            let contour = contours[i];
            let firstPt = contour[0];
            let lastPt = contour[contour.length - 1];
            let start = 0;
            if (firstPt.onCurve) {
                // The first point will be consumed by the moveTo command, so skip in the loop
                var curvePt = null;
                start = 1;
            } else {
                if (lastPt.onCurve) firstPt = lastPt;
                else firstPt = new $f680320fa07ef53d$export$baf26146a414f24a(false, false, (firstPt.x + lastPt.x) / 2, (firstPt.y + lastPt.y) / 2);
                var curvePt = firstPt;
            }
            path.moveTo(firstPt.x, firstPt.y);
            for(let j = start; j < contour.length; j++){
                let pt = contour[j];
                let prevPt = j === 0 ? firstPt : contour[j - 1];
                if (prevPt.onCurve && pt.onCurve) path.lineTo(pt.x, pt.y);
                else if (prevPt.onCurve && !pt.onCurve) var curvePt = pt;
                else if (!prevPt.onCurve && !pt.onCurve) {
                    let midX = (prevPt.x + pt.x) / 2;
                    let midY = (prevPt.y + pt.y) / 2;
                    path.quadraticCurveTo(prevPt.x, prevPt.y, midX, midY);
                    var curvePt = pt;
                } else if (!prevPt.onCurve && pt.onCurve) {
                    path.quadraticCurveTo(curvePt.x, curvePt.y, pt.x, pt.y);
                    var curvePt = null;
                } else throw new Error("Unknown TTF path state");
            }
            // Connect the first and last points
            if (curvePt) path.quadraticCurveTo(curvePt.x, curvePt.y, firstPt.x, firstPt.y);
            path.closePath();
        }
        return path;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTF");
    }
}
class $7ee0705195f3b047$export$2e2bcd8739ae039 extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
    _getName() {
        if (this._font.CFF2) return super._getName();
        return this._font["CFF "].getGlyphName(this.id);
    }
    bias(s) {
        if (s.length < 1240) return 107;
        else if (s.length < 33900) return 1131;
        else return 32768;
    }
    _getPath() {
        let cff = this._font.CFF2 || this._font["CFF "];
        let { stream: stream } = cff;
        let str = cff.topDict.CharStrings[this.id];
        let end = str.offset + str.length;
        stream.pos = str.offset;
        let path = new (0, $67ee4828d81adb28$export$2e2bcd8739ae039);
        let stack = [];
        let trans = [];
        let width = null;
        let nStems = 0;
        let x = 0, y = 0;
        let usedGsubrs;
        let usedSubrs;
        let open = false;
        this._usedGsubrs = usedGsubrs = {};
        this._usedSubrs = usedSubrs = {};
        let gsubrs = cff.globalSubrIndex || [];
        let gsubrsBias = this.bias(gsubrs);
        let privateDict = cff.privateDictForGlyph(this.id) || {};
        let subrs = privateDict.Subrs || [];
        let subrsBias = this.bias(subrs);
        let vstore = cff.topDict.vstore && cff.topDict.vstore.itemVariationStore;
        let vsindex = privateDict.vsindex;
        let variationProcessor = this._font._variationProcessor;
        function checkWidth() {
            if (width == null) width = stack.shift() + privateDict.nominalWidthX;
        }
        function parseStems() {
            if (stack.length % 2 !== 0) checkWidth();
            nStems += stack.length >> 1;
            return stack.length = 0;
        }
        function moveTo(x, y) {
            if (open) path.closePath();
            path.moveTo(x, y);
            open = true;
        }
        let parse = function() {
            while(stream.pos < end){
                let op = stream.readUInt8();
                if (op < 32) {
                    let index, subr, phase;
                    let c1x, c1y, c2x, c2y, c3x, c3y;
                    let c4x, c4y, c5x, c5y, c6x, c6y;
                    let pts;
                    switch(op){
                        case 1:
                        case 3:
                        case 18:
                        case 23:
                            parseStems();
                            break;
                        case 4:
                            if (stack.length > 1) checkWidth();
                            y += stack.shift();
                            moveTo(x, y);
                            break;
                        case 5:
                            while(stack.length >= 2){
                                x += stack.shift();
                                y += stack.shift();
                                path.lineTo(x, y);
                            }
                            break;
                        case 6:
                        case 7:
                            phase = op === 6;
                            while(stack.length >= 1){
                                if (phase) x += stack.shift();
                                else y += stack.shift();
                                path.lineTo(x, y);
                                phase = !phase;
                            }
                            break;
                        case 8:
                            while(stack.length > 0){
                                c1x = x + stack.shift();
                                c1y = y + stack.shift();
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x = c2x + stack.shift();
                                y = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                            }
                            break;
                        case 10:
                            index = stack.pop() + subrsBias;
                            subr = subrs[index];
                            if (subr) {
                                usedSubrs[index] = true;
                                let p = stream.pos;
                                let e = end;
                                stream.pos = subr.offset;
                                end = subr.offset + subr.length;
                                parse();
                                stream.pos = p;
                                end = e;
                            }
                            break;
                        case 11:
                            if (cff.version >= 2) break;
                            return;
                        case 14:
                            if (cff.version >= 2) break;
                            if (stack.length > 0) checkWidth();
                            if (open) {
                                path.closePath();
                                open = false;
                            }
                            break;
                        case 15:
                            if (cff.version < 2) throw new Error("vsindex operator not supported in CFF v1");
                            vsindex = stack.pop();
                            break;
                        case 16:
                            {
                                if (cff.version < 2) throw new Error("blend operator not supported in CFF v1");
                                if (!variationProcessor) throw new Error("blend operator in non-variation font");
                                let blendVector = variationProcessor.getBlendVector(vstore, vsindex);
                                let numBlends = stack.pop();
                                let numOperands = numBlends * blendVector.length;
                                let delta = stack.length - numOperands;
                                let base = delta - numBlends;
                                for(let i = 0; i < numBlends; i++){
                                    let sum = stack[base + i];
                                    for(let j = 0; j < blendVector.length; j++)sum += blendVector[j] * stack[delta++];
                                    stack[base + i] = sum;
                                }
                                while(numOperands--)stack.pop();
                                break;
                            }
                        case 19:
                        case 20:
                            parseStems();
                            stream.pos += nStems + 7 >> 3;
                            break;
                        case 21:
                            if (stack.length > 2) checkWidth();
                            x += stack.shift();
                            y += stack.shift();
                            moveTo(x, y);
                            break;
                        case 22:
                            if (stack.length > 1) checkWidth();
                            x += stack.shift();
                            moveTo(x, y);
                            break;
                        case 24:
                            while(stack.length >= 8){
                                c1x = x + stack.shift();
                                c1y = y + stack.shift();
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x = c2x + stack.shift();
                                y = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                            }
                            x += stack.shift();
                            y += stack.shift();
                            path.lineTo(x, y);
                            break;
                        case 25:
                            while(stack.length >= 8){
                                x += stack.shift();
                                y += stack.shift();
                                path.lineTo(x, y);
                            }
                            c1x = x + stack.shift();
                            c1y = y + stack.shift();
                            c2x = c1x + stack.shift();
                            c2y = c1y + stack.shift();
                            x = c2x + stack.shift();
                            y = c2y + stack.shift();
                            path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                            break;
                        case 26:
                            if (stack.length % 2) x += stack.shift();
                            while(stack.length >= 4){
                                c1x = x;
                                c1y = y + stack.shift();
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x = c2x;
                                y = c2y + stack.shift();
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                            }
                            break;
                        case 27:
                            if (stack.length % 2) y += stack.shift();
                            while(stack.length >= 4){
                                c1x = x + stack.shift();
                                c1y = y;
                                c2x = c1x + stack.shift();
                                c2y = c1y + stack.shift();
                                x = c2x + stack.shift();
                                y = c2y;
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                            }
                            break;
                        case 28:
                            stack.push(stream.readInt16BE());
                            break;
                        case 29:
                            index = stack.pop() + gsubrsBias;
                            subr = gsubrs[index];
                            if (subr) {
                                usedGsubrs[index] = true;
                                let p = stream.pos;
                                let e = end;
                                stream.pos = subr.offset;
                                end = subr.offset + subr.length;
                                parse();
                                stream.pos = p;
                                end = e;
                            }
                            break;
                        case 30:
                        case 31:
                            phase = op === 31;
                            while(stack.length >= 4){
                                if (phase) {
                                    c1x = x + stack.shift();
                                    c1y = y;
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    y = c2y + stack.shift();
                                    x = c2x + (stack.length === 1 ? stack.shift() : 0);
                                } else {
                                    c1x = x;
                                    c1y = y + stack.shift();
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    x = c2x + stack.shift();
                                    y = c2y + (stack.length === 1 ? stack.shift() : 0);
                                }
                                path.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
                                phase = !phase;
                            }
                            break;
                        case 12:
                            op = stream.readUInt8();
                            switch(op){
                                case 3:
                                    let a = stack.pop();
                                    let b = stack.pop();
                                    stack.push(a && b ? 1 : 0);
                                    break;
                                case 4:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a || b ? 1 : 0);
                                    break;
                                case 5:
                                    a = stack.pop();
                                    stack.push(a ? 0 : 1);
                                    break;
                                case 9:
                                    a = stack.pop();
                                    stack.push(Math.abs(a));
                                    break;
                                case 10:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a + b);
                                    break;
                                case 11:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a - b);
                                    break;
                                case 12:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a / b);
                                    break;
                                case 14:
                                    a = stack.pop();
                                    stack.push(-a);
                                    break;
                                case 15:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a === b ? 1 : 0);
                                    break;
                                case 18:
                                    stack.pop();
                                    break;
                                case 20:
                                    let val = stack.pop();
                                    let idx = stack.pop();
                                    trans[idx] = val;
                                    break;
                                case 21:
                                    idx = stack.pop();
                                    stack.push(trans[idx] || 0);
                                    break;
                                case 22:
                                    let s1 = stack.pop();
                                    let s2 = stack.pop();
                                    let v1 = stack.pop();
                                    let v2 = stack.pop();
                                    stack.push(v1 <= v2 ? s1 : s2);
                                    break;
                                case 23:
                                    stack.push(Math.random());
                                    break;
                                case 24:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(a * b);
                                    break;
                                case 26:
                                    a = stack.pop();
                                    stack.push(Math.sqrt(a));
                                    break;
                                case 27:
                                    a = stack.pop();
                                    stack.push(a, a);
                                    break;
                                case 28:
                                    a = stack.pop();
                                    b = stack.pop();
                                    stack.push(b, a);
                                    break;
                                case 29:
                                    idx = stack.pop();
                                    if (idx < 0) idx = 0;
                                    else if (idx > stack.length - 1) idx = stack.length - 1;
                                    stack.push(stack[idx]);
                                    break;
                                case 30:
                                    let n = stack.pop();
                                    let j = stack.pop();
                                    if (j >= 0) while(j > 0){
                                        var t = stack[n - 1];
                                        for(let i = n - 2; i >= 0; i--)stack[i + 1] = stack[i];
                                        stack[0] = t;
                                        j--;
                                    }
                                    else while(j < 0){
                                        var t = stack[0];
                                        for(let i = 0; i <= n; i++)stack[i] = stack[i + 1];
                                        stack[n - 1] = t;
                                        j++;
                                    }
                                    break;
                                case 34:
                                    c1x = x + stack.shift();
                                    c1y = y;
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    c3x = c2x + stack.shift();
                                    c3y = c2y;
                                    c4x = c3x + stack.shift();
                                    c4y = c3y;
                                    c5x = c4x + stack.shift();
                                    c5y = c4y;
                                    c6x = c5x + stack.shift();
                                    c6y = c5y;
                                    x = c6x;
                                    y = c6y;
                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                    break;
                                case 35:
                                    pts = [];
                                    for(let i = 0; i <= 5; i++){
                                        x += stack.shift();
                                        y += stack.shift();
                                        pts.push(x, y);
                                    }
                                    path.bezierCurveTo(...pts.slice(0, 6));
                                    path.bezierCurveTo(...pts.slice(6));
                                    stack.shift(); // fd
                                    break;
                                case 36:
                                    c1x = x + stack.shift();
                                    c1y = y + stack.shift();
                                    c2x = c1x + stack.shift();
                                    c2y = c1y + stack.shift();
                                    c3x = c2x + stack.shift();
                                    c3y = c2y;
                                    c4x = c3x + stack.shift();
                                    c4y = c3y;
                                    c5x = c4x + stack.shift();
                                    c5y = c4y + stack.shift();
                                    c6x = c5x + stack.shift();
                                    c6y = c5y;
                                    x = c6x;
                                    y = c6y;
                                    path.bezierCurveTo(c1x, c1y, c2x, c2y, c3x, c3y);
                                    path.bezierCurveTo(c4x, c4y, c5x, c5y, c6x, c6y);
                                    break;
                                case 37:
                                    let startx = x;
                                    let starty = y;
                                    pts = [];
                                    for(let i = 0; i <= 4; i++){
                                        x += stack.shift();
                                        y += stack.shift();
                                        pts.push(x, y);
                                    }
                                    if (Math.abs(x - startx) > Math.abs(y - starty)) {
                                        x += stack.shift();
                                        y = starty;
                                    } else {
                                        x = startx;
                                        y += stack.shift();
                                    }
                                    pts.push(x, y);
                                    path.bezierCurveTo(...pts.slice(0, 6));
                                    path.bezierCurveTo(...pts.slice(6));
                                    break;
                                default:
                                    throw new Error(`Unknown op: 12 ${op}`);
                            }
                            break;
                        default:
                            throw new Error(`Unknown op: ${op}`);
                    }
                } else if (op < 247) stack.push(op - 139);
                else if (op < 251) {
                    var b1 = stream.readUInt8();
                    stack.push((op - 247) * 256 + b1 + 108);
                } else if (op < 255) {
                    var b1 = stream.readUInt8();
                    stack.push(-(op - 251) * 256 - b1 - 108);
                } else stack.push(stream.readInt32BE() / 65536);
            }
        };
        parse();
        if (open) path.closePath();
        return path;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "CFF");
    }
}
let $55855d6d316b015e$var$SBIXImage = new $elh9A$restructure.Struct({
    originX: $elh9A$restructure.uint16,
    originY: $elh9A$restructure.uint16,
    type: new $elh9A$restructure.String(4),
    data: new $elh9A$restructure.Buffer((t)=>t.parent.buflen - t._currentOffset)
});
class $55855d6d316b015e$export$2e2bcd8739ae039 extends (0, $f680320fa07ef53d$export$2e2bcd8739ae039) {
    /**
   * Returns an object representing a glyph image at the given point size.
   * The object has a data property with a Buffer containing the actual image data,
   * along with the image type, and origin.
   *
   * @param {number} size
   * @return {object}
   */ getImageForSize(size) {
        for(let i = 0; i < this._font.sbix.imageTables.length; i++){
            var table = this._font.sbix.imageTables[i];
            if (table.ppem >= size) break;
        }
        let offsets = table.imageOffsets;
        let start = offsets[this.id];
        let end = offsets[this.id + 1];
        if (start === end) return null;
        this._font.stream.pos = start;
        return $55855d6d316b015e$var$SBIXImage.decode(this._font.stream, {
            buflen: end - start
        });
    }
    render(ctx, size) {
        let img = this.getImageForSize(size);
        if (img != null) {
            let scale = size / this._font.unitsPerEm;
            ctx.image(img.data, {
                height: size,
                x: img.originX,
                y: (this.bbox.minY - img.originY) * scale
            });
        }
        if (this._font.sbix.flags.renderOutlines) super.render(ctx, size);
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "SBIX");
    }
}
class $42d9dbd2de9ee2d8$var$COLRLayer {
    constructor(glyph, color){
        this.glyph = glyph;
        this.color = color;
    }
}
class $42d9dbd2de9ee2d8$export$2e2bcd8739ae039 extends (0, $0e4f52d7996e478b$export$2e2bcd8739ae039) {
    _getBBox() {
        let bbox = new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039);
        for(let i = 0; i < this.layers.length; i++){
            let layer = this.layers[i];
            let b = layer.glyph.bbox;
            bbox.addPoint(b.minX, b.minY);
            bbox.addPoint(b.maxX, b.maxY);
        }
        return bbox;
    }
    /**
   * Returns an array of objects containing the glyph and color for
   * each layer in the composite color glyph.
   * @type {object[]}
   */ get layers() {
        let cpal = this._font.CPAL;
        let colr = this._font.COLR;
        let low = 0;
        let high = colr.baseGlyphRecord.length - 1;
        while(low <= high){
            let mid = low + high >> 1;
            var rec = colr.baseGlyphRecord[mid];
            if (this.id < rec.gid) high = mid - 1;
            else if (this.id > rec.gid) low = mid + 1;
            else {
                var baseLayer = rec;
                break;
            }
        }
        // if base glyph not found in COLR table,
        // default to normal glyph from glyf or CFF
        if (baseLayer == null) {
            var g = this._font._getBaseGlyph(this.id);
            var color = {
                red: 0,
                green: 0,
                blue: 0,
                alpha: 255
            };
            return [
                new $42d9dbd2de9ee2d8$var$COLRLayer(g, color)
            ];
        }
        // otherwise, return an array of all the layers
        let layers = [];
        for(let i = baseLayer.firstLayerIndex; i < baseLayer.firstLayerIndex + baseLayer.numLayers; i++){
            var rec = colr.layerRecords[i];
            var color = cpal.colorRecords[rec.paletteIndex];
            var g = this._font._getBaseGlyph(rec.gid);
            layers.push(new $42d9dbd2de9ee2d8$var$COLRLayer(g, color));
        }
        return layers;
    }
    render(ctx, size) {
        for (let { glyph: glyph, color: color } of this.layers){
            ctx.fillColor([
                color.red,
                color.green,
                color.blue
            ], color.alpha / 255 * 100);
            glyph.render(ctx, size);
        }
        return;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "COLR");
    }
}
const $7586bb9ea67c41d8$var$TUPLES_SHARE_POINT_NUMBERS = 0x8000;
const $7586bb9ea67c41d8$var$TUPLE_COUNT_MASK = 0x0fff;
const $7586bb9ea67c41d8$var$EMBEDDED_TUPLE_COORD = 0x8000;
const $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE = 0x4000;
const $7586bb9ea67c41d8$var$PRIVATE_POINT_NUMBERS = 0x2000;
const $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK = 0x0fff;
const $7586bb9ea67c41d8$var$POINTS_ARE_WORDS = 0x80;
const $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK = 0x7f;
const $7586bb9ea67c41d8$var$DELTAS_ARE_ZERO = 0x80;
const $7586bb9ea67c41d8$var$DELTAS_ARE_WORDS = 0x40;
const $7586bb9ea67c41d8$var$DELTA_RUN_COUNT_MASK = 0x3f;
class $7586bb9ea67c41d8$export$2e2bcd8739ae039 {
    normalizeCoords(coords) {
        // the default mapping is linear along each axis, in two segments:
        // from the minValue to defaultValue, and from defaultValue to maxValue.
        let normalized = [];
        for(var i = 0; i < this.font.fvar.axis.length; i++){
            let axis = this.font.fvar.axis[i];
            if (coords[i] < axis.defaultValue) normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.defaultValue - axis.minValue + Number.EPSILON));
            else normalized.push((coords[i] - axis.defaultValue + Number.EPSILON) / (axis.maxValue - axis.defaultValue + Number.EPSILON));
        }
        // if there is an avar table, the normalized value is calculated
        // by interpolating between the two nearest mapped values.
        if (this.font.avar) for(var i = 0; i < this.font.avar.segment.length; i++){
            let segment = this.font.avar.segment[i];
            for(let j = 0; j < segment.correspondence.length; j++){
                let pair = segment.correspondence[j];
                if (j >= 1 && normalized[i] < pair.fromCoord) {
                    let prev = segment.correspondence[j - 1];
                    normalized[i] = ((normalized[i] - prev.fromCoord) * (pair.toCoord - prev.toCoord) + Number.EPSILON) / (pair.fromCoord - prev.fromCoord + Number.EPSILON) + prev.toCoord;
                    break;
                }
            }
        }
        return normalized;
    }
    transformPoints(gid, glyphPoints) {
        if (!this.font.fvar || !this.font.gvar) return;
        let { gvar: gvar } = this.font;
        if (gid >= gvar.glyphCount) return;
        let offset = gvar.offsets[gid];
        if (offset === gvar.offsets[gid + 1]) return;
        // Read the gvar data for this glyph
        let { stream: stream } = this.font;
        stream.pos = offset;
        if (stream.pos >= stream.length) return;
        let tupleCount = stream.readUInt16BE();
        let offsetToData = offset + stream.readUInt16BE();
        if (tupleCount & $7586bb9ea67c41d8$var$TUPLES_SHARE_POINT_NUMBERS) {
            var here = stream.pos;
            stream.pos = offsetToData;
            var sharedPoints = this.decodePoints();
            offsetToData = stream.pos;
            stream.pos = here;
        }
        let origPoints = glyphPoints.map((pt)=>pt.copy());
        tupleCount &= $7586bb9ea67c41d8$var$TUPLE_COUNT_MASK;
        for(let i = 0; i < tupleCount; i++){
            let tupleDataSize = stream.readUInt16BE();
            let tupleIndex = stream.readUInt16BE();
            if (tupleIndex & $7586bb9ea67c41d8$var$EMBEDDED_TUPLE_COORD) {
                var tupleCoords = [];
                for(let a = 0; a < gvar.axisCount; a++)tupleCoords.push(stream.readInt16BE() / 16384);
            } else {
                if ((tupleIndex & $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK) >= gvar.globalCoordCount) throw new Error("Invalid gvar table");
                var tupleCoords = gvar.globalCoords[tupleIndex & $7586bb9ea67c41d8$var$TUPLE_INDEX_MASK];
            }
            if (tupleIndex & $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE) {
                var startCoords = [];
                for(let a = 0; a < gvar.axisCount; a++)startCoords.push(stream.readInt16BE() / 16384);
                var endCoords = [];
                for(let a = 0; a < gvar.axisCount; a++)endCoords.push(stream.readInt16BE() / 16384);
            }
            // Get the factor at which to apply this tuple
            let factor = this.tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords);
            if (factor === 0) {
                offsetToData += tupleDataSize;
                continue;
            }
            var here = stream.pos;
            stream.pos = offsetToData;
            if (tupleIndex & $7586bb9ea67c41d8$var$PRIVATE_POINT_NUMBERS) var points = this.decodePoints();
            else var points = sharedPoints;
            // points.length = 0 means there are deltas for all points
            let nPoints = points.length === 0 ? glyphPoints.length : points.length;
            let xDeltas = this.decodeDeltas(nPoints);
            let yDeltas = this.decodeDeltas(nPoints);
            if (points.length === 0) for(let i = 0; i < glyphPoints.length; i++){
                var point = glyphPoints[i];
                point.x += Math.round(xDeltas[i] * factor);
                point.y += Math.round(yDeltas[i] * factor);
            }
            else {
                let outPoints = origPoints.map((pt)=>pt.copy());
                let hasDelta = glyphPoints.map(()=>false);
                for(let i = 0; i < points.length; i++){
                    let idx = points[i];
                    if (idx < glyphPoints.length) {
                        let point = outPoints[idx];
                        hasDelta[idx] = true;
                        point.x += xDeltas[i] * factor;
                        point.y += yDeltas[i] * factor;
                    }
                }
                this.interpolateMissingDeltas(outPoints, origPoints, hasDelta);
                for(let i = 0; i < glyphPoints.length; i++){
                    let deltaX = outPoints[i].x - origPoints[i].x;
                    let deltaY = outPoints[i].y - origPoints[i].y;
                    glyphPoints[i].x = Math.round(glyphPoints[i].x + deltaX);
                    glyphPoints[i].y = Math.round(glyphPoints[i].y + deltaY);
                }
            }
            offsetToData += tupleDataSize;
            stream.pos = here;
        }
    }
    decodePoints() {
        let stream = this.font.stream;
        let count = stream.readUInt8();
        if (count & $7586bb9ea67c41d8$var$POINTS_ARE_WORDS) count = (count & $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK) << 8 | stream.readUInt8();
        let points = new Uint16Array(count);
        let i = 0;
        let point = 0;
        while(i < count){
            let run = stream.readUInt8();
            let runCount = (run & $7586bb9ea67c41d8$var$POINT_RUN_COUNT_MASK) + 1;
            let fn = run & $7586bb9ea67c41d8$var$POINTS_ARE_WORDS ? stream.readUInt16 : stream.readUInt8;
            for(let j = 0; j < runCount && i < count; j++){
                point += fn.call(stream);
                points[i++] = point;
            }
        }
        return points;
    }
    decodeDeltas(count) {
        let stream = this.font.stream;
        let i = 0;
        let deltas = new Int16Array(count);
        while(i < count){
            let run = stream.readUInt8();
            let runCount = (run & $7586bb9ea67c41d8$var$DELTA_RUN_COUNT_MASK) + 1;
            if (run & $7586bb9ea67c41d8$var$DELTAS_ARE_ZERO) i += runCount;
            else {
                let fn = run & $7586bb9ea67c41d8$var$DELTAS_ARE_WORDS ? stream.readInt16BE : stream.readInt8;
                for(let j = 0; j < runCount && i < count; j++)deltas[i++] = fn.call(stream);
            }
        }
        return deltas;
    }
    tupleFactor(tupleIndex, tupleCoords, startCoords, endCoords) {
        let normalized = this.normalizedCoords;
        let { gvar: gvar } = this.font;
        let factor = 1;
        for(let i = 0; i < gvar.axisCount; i++){
            if (tupleCoords[i] === 0) continue;
            if (normalized[i] === 0) return 0;
            if ((tupleIndex & $7586bb9ea67c41d8$var$INTERMEDIATE_TUPLE) === 0) {
                if (normalized[i] < Math.min(0, tupleCoords[i]) || normalized[i] > Math.max(0, tupleCoords[i])) return 0;
                factor = (factor * normalized[i] + Number.EPSILON) / (tupleCoords[i] + Number.EPSILON);
            } else {
                if (normalized[i] < startCoords[i] || normalized[i] > endCoords[i]) return 0;
                else if (normalized[i] < tupleCoords[i]) factor = factor * (normalized[i] - startCoords[i] + Number.EPSILON) / (tupleCoords[i] - startCoords[i] + Number.EPSILON);
                else factor = factor * (endCoords[i] - normalized[i] + Number.EPSILON) / (endCoords[i] - tupleCoords[i] + Number.EPSILON);
            }
        }
        return factor;
    }
    // Interpolates points without delta values.
    // Needed for the Ø and Q glyphs in Skia.
    // Algorithm from Freetype.
    interpolateMissingDeltas(points, inPoints, hasDelta) {
        if (points.length === 0) return;
        let point = 0;
        while(point < points.length){
            let firstPoint = point;
            // find the end point of the contour
            let endPoint = point;
            let pt = points[endPoint];
            while(!pt.endContour)pt = points[++endPoint];
            // find the first point that has a delta
            while(point <= endPoint && !hasDelta[point])point++;
            if (point > endPoint) continue;
            let firstDelta = point;
            let curDelta = point;
            point++;
            while(point <= endPoint){
                // find the next point with a delta, and interpolate intermediate points
                if (hasDelta[point]) {
                    this.deltaInterpolate(curDelta + 1, point - 1, curDelta, point, inPoints, points);
                    curDelta = point;
                }
                point++;
            }
            // shift contour if we only have a single delta
            if (curDelta === firstDelta) this.deltaShift(firstPoint, endPoint, curDelta, inPoints, points);
            else {
                // otherwise, handle the remaining points at the end and beginning of the contour
                this.deltaInterpolate(curDelta + 1, endPoint, curDelta, firstDelta, inPoints, points);
                if (firstDelta > 0) this.deltaInterpolate(firstPoint, firstDelta - 1, curDelta, firstDelta, inPoints, points);
            }
            point = endPoint + 1;
        }
    }
    deltaInterpolate(p1, p2, ref1, ref2, inPoints, outPoints) {
        if (p1 > p2) return;
        let iterable = [
            "x",
            "y"
        ];
        for(let i = 0; i < iterable.length; i++){
            let k = iterable[i];
            if (inPoints[ref1][k] > inPoints[ref2][k]) {
                var p = ref1;
                ref1 = ref2;
                ref2 = p;
            }
            let in1 = inPoints[ref1][k];
            let in2 = inPoints[ref2][k];
            let out1 = outPoints[ref1][k];
            let out2 = outPoints[ref2][k];
            // If the reference points have the same coordinate but different
            // delta, inferred delta is zero.  Otherwise interpolate.
            if (in1 !== in2 || out1 === out2) {
                let scale = in1 === in2 ? 0 : (out2 - out1) / (in2 - in1);
                for(let p = p1; p <= p2; p++){
                    let out = inPoints[p][k];
                    if (out <= in1) out += out1 - in1;
                    else if (out >= in2) out += out2 - in2;
                    else out = out1 + (out - in1) * scale;
                    outPoints[p][k] = out;
                }
            }
        }
    }
    deltaShift(p1, p2, ref, inPoints, outPoints) {
        let deltaX = outPoints[ref].x - inPoints[ref].x;
        let deltaY = outPoints[ref].y - inPoints[ref].y;
        if (deltaX === 0 && deltaY === 0) return;
        for(let p = p1; p <= p2; p++)if (p !== ref) {
            outPoints[p].x += deltaX;
            outPoints[p].y += deltaY;
        }
    }
    getAdvanceAdjustment(gid, table) {
        let outerIndex, innerIndex;
        if (table.advanceWidthMapping) {
            let idx = gid;
            if (idx >= table.advanceWidthMapping.mapCount) idx = table.advanceWidthMapping.mapCount - 1;
            let entryFormat = table.advanceWidthMapping.entryFormat;
            ({ outerIndex: outerIndex, innerIndex: innerIndex } = table.advanceWidthMapping.mapData[idx]);
        } else {
            outerIndex = 0;
            innerIndex = gid;
        }
        return this.getDelta(table.itemVariationStore, outerIndex, innerIndex);
    }
    // See pseudo code from `Font Variations Overview'
    // in the OpenType specification.
    getDelta(itemStore, outerIndex, innerIndex) {
        if (outerIndex >= itemStore.itemVariationData.length) return 0;
        let varData = itemStore.itemVariationData[outerIndex];
        if (innerIndex >= varData.deltaSets.length) return 0;
        let deltaSet = varData.deltaSets[innerIndex];
        let blendVector = this.getBlendVector(itemStore, outerIndex);
        let netAdjustment = 0;
        for(let master = 0; master < varData.regionIndexCount; master++)netAdjustment += deltaSet.deltas[master] * blendVector[master];
        return netAdjustment;
    }
    getBlendVector(itemStore, outerIndex) {
        let varData = itemStore.itemVariationData[outerIndex];
        if (this.blendVectors.has(varData)) return this.blendVectors.get(varData);
        let normalizedCoords = this.normalizedCoords;
        let blendVector = [];
        // outer loop steps through master designs to be blended
        for(let master = 0; master < varData.regionIndexCount; master++){
            let scalar = 1;
            let regionIndex = varData.regionIndexes[master];
            let axes = itemStore.variationRegionList.variationRegions[regionIndex];
            // inner loop steps through axes in this region
            for(let j = 0; j < axes.length; j++){
                let axis = axes[j];
                let axisScalar;
                // compute the scalar contribution of this axis
                // ignore invalid ranges
                if (axis.startCoord > axis.peakCoord || axis.peakCoord > axis.endCoord) axisScalar = 1;
                else if (axis.startCoord < 0 && axis.endCoord > 0 && axis.peakCoord !== 0) axisScalar = 1;
                else if (axis.peakCoord === 0) axisScalar = 1;
                else if (normalizedCoords[j] < axis.startCoord || normalizedCoords[j] > axis.endCoord) axisScalar = 0;
                else {
                    if (normalizedCoords[j] === axis.peakCoord) axisScalar = 1;
                    else if (normalizedCoords[j] < axis.peakCoord) axisScalar = (normalizedCoords[j] - axis.startCoord + Number.EPSILON) / (axis.peakCoord - axis.startCoord + Number.EPSILON);
                    else axisScalar = (axis.endCoord - normalizedCoords[j] + Number.EPSILON) / (axis.endCoord - axis.peakCoord + Number.EPSILON);
                }
                // take product of all the axis scalars
                scalar *= axisScalar;
            }
            blendVector[master] = scalar;
        }
        this.blendVectors.set(varData, blendVector);
        return blendVector;
    }
    constructor(font, coords){
        this.font = font;
        this.normalizedCoords = this.normalizeCoords(coords);
        this.blendVectors = new Map;
    }
}
const $a8ac370803cb82cf$var$resolved = Promise.resolve();
class $a8ac370803cb82cf$export$2e2bcd8739ae039 {
    includeGlyph(glyph) {
        if (typeof glyph === "object") glyph = glyph.id;
        if (this.mapping[glyph] == null) {
            this.glyphs.push(glyph);
            this.mapping[glyph] = this.glyphs.length - 1;
        }
        return this.mapping[glyph];
    }
    constructor(font){
        this.font = font;
        this.glyphs = [];
        this.mapping = {};
        // always include the missing glyph
        this.includeGlyph(0);
    }
}
// Flags for simple glyphs
const $2784eedf0b35a048$var$ON_CURVE = 1;
const $2784eedf0b35a048$var$X_SHORT_VECTOR = 2;
const $2784eedf0b35a048$var$Y_SHORT_VECTOR = 4;
const $2784eedf0b35a048$var$REPEAT = 8;
const $2784eedf0b35a048$var$SAME_X = 16;
const $2784eedf0b35a048$var$SAME_Y = 32;
class $2784eedf0b35a048$var$Point {
    static size(val) {
        return val >= 0 && val <= 255 ? 1 : 2;
    }
    static encode(stream, value) {
        if (value >= 0 && value <= 255) stream.writeUInt8(value);
        else stream.writeInt16BE(value);
    }
}
let $2784eedf0b35a048$var$Glyf = new $elh9A$restructure.Struct({
    numberOfContours: $elh9A$restructure.int16,
    xMin: $elh9A$restructure.int16,
    yMin: $elh9A$restructure.int16,
    xMax: $elh9A$restructure.int16,
    yMax: $elh9A$restructure.int16,
    endPtsOfContours: new $elh9A$restructure.Array($elh9A$restructure.uint16, "numberOfContours"),
    instructions: new $elh9A$restructure.Array($elh9A$restructure.uint8, $elh9A$restructure.uint16),
    flags: new $elh9A$restructure.Array($elh9A$restructure.uint8, 0),
    xPoints: new $elh9A$restructure.Array($2784eedf0b35a048$var$Point, 0),
    yPoints: new $elh9A$restructure.Array($2784eedf0b35a048$var$Point, 0)
});
class $2784eedf0b35a048$export$2e2bcd8739ae039 {
    encodeSimple(path, instructions = []) {
        let endPtsOfContours = [];
        let xPoints = [];
        let yPoints = [];
        let flags = [];
        let same = 0;
        let lastX = 0, lastY = 0, lastFlag = 0;
        let pointCount = 0;
        for(let i = 0; i < path.commands.length; i++){
            let c = path.commands[i];
            for(let j = 0; j < c.args.length; j += 2){
                let x = c.args[j];
                let y = c.args[j + 1];
                let flag = 0;
                // If the ending point of a quadratic curve is the midpoint
                // between the control point and the control point of the next
                // quadratic curve, we can omit the ending point.
                if (c.command === "quadraticCurveTo" && j === 2) {
                    let next = path.commands[i + 1];
                    if (next && next.command === "quadraticCurveTo") {
                        let midX = (lastX + next.args[0]) / 2;
                        let midY = (lastY + next.args[1]) / 2;
                        if (x === midX && y === midY) continue;
                    }
                }
                // All points except control points are on curve.
                if (!(c.command === "quadraticCurveTo" && j === 0)) flag |= $2784eedf0b35a048$var$ON_CURVE;
                flag = this._encodePoint(x, lastX, xPoints, flag, $2784eedf0b35a048$var$X_SHORT_VECTOR, $2784eedf0b35a048$var$SAME_X);
                flag = this._encodePoint(y, lastY, yPoints, flag, $2784eedf0b35a048$var$Y_SHORT_VECTOR, $2784eedf0b35a048$var$SAME_Y);
                if (flag === lastFlag && same < 255) {
                    flags[flags.length - 1] |= $2784eedf0b35a048$var$REPEAT;
                    same++;
                } else {
                    if (same > 0) {
                        flags.push(same);
                        same = 0;
                    }
                    flags.push(flag);
                    lastFlag = flag;
                }
                lastX = x;
                lastY = y;
                pointCount++;
            }
            if (c.command === "closePath") endPtsOfContours.push(pointCount - 1);
        }
        // Close the path if the last command didn't already
        if (path.commands.length > 1 && path.commands[path.commands.length - 1].command !== "closePath") endPtsOfContours.push(pointCount - 1);
        let bbox = path.bbox;
        let glyf = {
            numberOfContours: endPtsOfContours.length,
            xMin: bbox.minX,
            yMin: bbox.minY,
            xMax: bbox.maxX,
            yMax: bbox.maxY,
            endPtsOfContours: endPtsOfContours,
            instructions: instructions,
            flags: flags,
            xPoints: xPoints,
            yPoints: yPoints
        };
        let size = $2784eedf0b35a048$var$Glyf.size(glyf);
        let tail = 4 - size % 4;
        let stream = new $elh9A$restructure.EncodeStream(size + tail);
        $2784eedf0b35a048$var$Glyf.encode(stream, glyf);
        // Align to 4-byte length
        if (tail !== 0) stream.fill(0, tail);
        return stream.buffer;
    }
    _encodePoint(value, last, points, flag, shortFlag, sameFlag) {
        let diff = value - last;
        if (value === last) flag |= sameFlag;
        else {
            if (-255 <= diff && diff <= 255) {
                flag |= shortFlag;
                if (diff < 0) diff = -diff;
                else flag |= sameFlag;
            }
            points.push(diff);
        }
        return flag;
    }
}
class $fe042f4b88f46896$export$2e2bcd8739ae039 extends (0, $a8ac370803cb82cf$export$2e2bcd8739ae039) {
    _addGlyph(gid) {
        let glyph = this.font.getGlyph(gid);
        let glyf = glyph._decode();
        // get the offset to the glyph from the loca table
        let curOffset = this.font.loca.offsets[gid];
        let nextOffset = this.font.loca.offsets[gid + 1];
        let stream = this.font._getTableStream("glyf");
        stream.pos += curOffset;
        let buffer = stream.readBuffer(nextOffset - curOffset);
        // if it is a compound glyph, include its components
        if (glyf && glyf.numberOfContours < 0) {
            buffer = new Uint8Array(buffer);
            let view = new DataView(buffer.buffer);
            for (let component of glyf.components){
                gid = this.includeGlyph(component.glyphID);
                view.setUint16(component.pos, gid);
            }
        } else if (glyf && this.font._variationProcessor) buffer = this.glyphEncoder.encodeSimple(glyph.path, glyf.instructions);
        this.glyf.push(buffer);
        this.loca.offsets.push(this.offset);
        this.hmtx.metrics.push({
            advance: glyph.advanceWidth,
            bearing: glyph._getMetrics().leftBearing
        });
        this.offset += buffer.length;
        return this.glyf.length - 1;
    }
    encode() {
        // tables required by PDF spec:
        //   head, hhea, loca, maxp, cvt , prep, glyf, hmtx, fpgm
        //
        // additional tables required for standalone fonts:
        //   name, cmap, OS/2, post
        this.glyf = [];
        this.offset = 0;
        this.loca = {
            offsets: [],
            version: this.font.loca.version
        };
        this.hmtx = {
            metrics: [],
            bearings: []
        };
        // include all the glyphs
        // not using a for loop because we need to support adding more
        // glyphs to the array as we go, and CoffeeScript caches the length.
        let i = 0;
        while(i < this.glyphs.length)this._addGlyph(this.glyphs[i++]);
        let maxp = (0, $parcel$interopDefault($elh9A$clone))(this.font.maxp);
        maxp.numGlyphs = this.glyf.length;
        this.loca.offsets.push(this.offset);
        let head = (0, $parcel$interopDefault($elh9A$clone))(this.font.head);
        head.indexToLocFormat = this.loca.version;
        let hhea = (0, $parcel$interopDefault($elh9A$clone))(this.font.hhea);
        hhea.numberOfMetrics = this.hmtx.metrics.length;
        // map = []
        // for index in [0...256]
        //     if index < @numGlyphs
        //         map[index] = index
        //     else
        //         map[index] = 0
        //
        // cmapTable =
        //     version: 0
        //     length: 262
        //     language: 0
        //     codeMap: map
        //
        // cmap =
        //     version: 0
        //     numSubtables: 1
        //     tables: [
        //         platformID: 1
        //         encodingID: 0
        //         table: cmapTable
        //     ]
        // TODO: subset prep, cvt, fpgm?
        return (0, $df50e1efe10a1247$export$2e2bcd8739ae039).toBuffer({
            tables: {
                head: head,
                hhea: hhea,
                loca: this.loca,
                maxp: maxp,
                "cvt ": this.font["cvt "],
                prep: this.font.prep,
                glyf: this.glyf,
                hmtx: this.hmtx,
                fpgm: this.font.fpgm
            }
        });
    }
    constructor(font){
        super(font);
        this.glyphEncoder = new (0, $2784eedf0b35a048$export$2e2bcd8739ae039);
    }
}
class $ec40f80c07a4e08a$export$2e2bcd8739ae039 extends (0, $a8ac370803cb82cf$export$2e2bcd8739ae039) {
    subsetCharstrings() {
        this.charstrings = [];
        let gsubrs = {};
        for (let gid of this.glyphs){
            this.charstrings.push(this.cff.getCharString(gid));
            let glyph = this.font.getGlyph(gid);
            let path = glyph.path; // this causes the glyph to be parsed
            for(let subr in glyph._usedGsubrs)gsubrs[subr] = true;
        }
        this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, gsubrs);
    }
    subsetSubrs(subrs, used) {
        let res = [];
        for(let i = 0; i < subrs.length; i++){
            let subr = subrs[i];
            if (used[i]) {
                this.cff.stream.pos = subr.offset;
                res.push(this.cff.stream.readBuffer(subr.length));
            } else res.push(new Uint8Array([
                11
            ])); // return
        }
        return res;
    }
    subsetFontdict(topDict) {
        topDict.FDArray = [];
        topDict.FDSelect = {
            version: 0,
            fds: []
        };
        let used_fds = {};
        let used_subrs = [];
        let fd_select = {};
        for (let gid of this.glyphs){
            let fd = this.cff.fdForGlyph(gid);
            if (fd == null) continue;
            if (!used_fds[fd]) {
                topDict.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[fd]));
                used_subrs.push({});
                fd_select[fd] = topDict.FDArray.length - 1;
            }
            used_fds[fd] = true;
            topDict.FDSelect.fds.push(fd_select[fd]);
            let glyph = this.font.getGlyph(gid);
            let path = glyph.path; // this causes the glyph to be parsed
            for(let subr in glyph._usedSubrs)used_subrs[fd_select[fd]][subr] = true;
        }
        for(let i = 0; i < topDict.FDArray.length; i++){
            let dict = topDict.FDArray[i];
            delete dict.FontName;
            if (dict.Private && dict.Private.Subrs) {
                dict.Private = Object.assign({}, dict.Private);
                dict.Private.Subrs = this.subsetSubrs(dict.Private.Subrs, used_subrs[i]);
            }
        }
        return;
    }
    createCIDFontdict(topDict) {
        let used_subrs = {};
        for (let gid of this.glyphs){
            let glyph = this.font.getGlyph(gid);
            let path = glyph.path; // this causes the glyph to be parsed
            for(let subr in glyph._usedSubrs)used_subrs[subr] = true;
        }
        let privateDict = Object.assign({}, this.cff.topDict.Private);
        if (this.cff.topDict.Private && this.cff.topDict.Private.Subrs) privateDict.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, used_subrs);
        topDict.FDArray = [
            {
                Private: privateDict
            }
        ];
        return topDict.FDSelect = {
            version: 3,
            nRanges: 1,
            ranges: [
                {
                    first: 0,
                    fd: 0
                }
            ],
            sentinel: this.charstrings.length
        };
    }
    addString(string) {
        if (!string) return null;
        if (!this.strings) this.strings = [];
        this.strings.push(string);
        return (0, $860d3574d7fa3a51$export$2e2bcd8739ae039).length + this.strings.length - 1;
    }
    encode() {
        this.subsetCharstrings();
        let charset = {
            version: this.charstrings.length > 255 ? 2 : 1,
            ranges: [
                {
                    first: 1,
                    nLeft: this.charstrings.length - 2
                }
            ]
        };
        let topDict = Object.assign({}, this.cff.topDict);
        topDict.Private = null;
        topDict.charset = charset;
        topDict.Encoding = null;
        topDict.CharStrings = this.charstrings;
        for (let key of [
            "version",
            "Notice",
            "Copyright",
            "FullName",
            "FamilyName",
            "Weight",
            "PostScript",
            "BaseFontName",
            "FontName"
        ])topDict[key] = this.addString(this.cff.string(topDict[key]));
        topDict.ROS = [
            this.addString("Adobe"),
            this.addString("Identity"),
            0
        ];
        topDict.CIDCount = this.charstrings.length;
        if (this.cff.isCIDFont) this.subsetFontdict(topDict);
        else this.createCIDFontdict(topDict);
        let top = {
            version: 1,
            hdrSize: this.cff.hdrSize,
            offSize: 4,
            header: this.cff.header,
            nameIndex: [
                this.cff.postscriptName
            ],
            topDictIndex: [
                topDict
            ],
            stringIndex: this.strings,
            globalSubrIndex: this.gsubrs
        };
        return (0, $5b547cf9e5da519b$export$2e2bcd8739ae039).toBuffer(top);
    }
    constructor(font){
        super(font);
        this.cff = this.font["CFF "];
        if (!this.cff) throw new Error("Not a CFF Font");
    }
}
class $0a8ef2660a6ce4b6$export$2e2bcd8739ae039 {
    static probe(buffer) {
        let format = (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4));
        return format === "true" || format === "OTTO" || format === String.fromCharCode(0, 1, 0, 0);
    }
    setDefaultLanguage(lang = null) {
        this.defaultLanguage = lang;
    }
    _getTable(table) {
        if (!(table.tag in this._tables)) try {
            this._tables[table.tag] = this._decodeTable(table);
        } catch (e) {
            if ($59aa4ed98453e1d4$export$bd5c5d8b8dcafd78) {
                console.error(`Error decoding table ${table.tag}`);
                console.error(e.stack);
            }
        }
        return this._tables[table.tag];
    }
    _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
            this.stream.pos = table.offset;
            return this.stream;
        }
        return null;
    }
    _decodeDirectory() {
        return this.directory = (0, $df50e1efe10a1247$export$2e2bcd8739ae039).decode(this.stream, {
            _startOffset: 0
        });
    }
    _decodeTable(table) {
        let pos = this.stream.pos;
        let stream = this._getTableStream(table.tag);
        let result = (0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[table.tag].decode(stream, this, table.length);
        this.stream.pos = pos;
        return result;
    }
    /**
   * Gets a string from the font's `name` table
   * `lang` is a BCP-47 language code.
   * @return {string}
   */ getName(key, lang = this.defaultLanguage || $59aa4ed98453e1d4$export$42940898df819940) {
        let record = this.name && this.name.records[key];
        if (record) return record[lang] || record[this.defaultLanguage] || record[$59aa4ed98453e1d4$export$42940898df819940] || record["en"] || record[Object.keys(record)[0]] // Seriously, ANY language would be fine
         || null;
        return null;
    }
    /**
   * The unique PostScript name for this font, e.g. "Helvetica-Bold"
   * @type {string}
   */ get postscriptName() {
        return this.getName("postscriptName");
    }
    /**
   * The font's full name, e.g. "Helvetica Bold"
   * @type {string}
   */ get fullName() {
        return this.getName("fullName");
    }
    /**
   * The font's family name, e.g. "Helvetica"
   * @type {string}
   */ get familyName() {
        return this.getName("fontFamily");
    }
    /**
   * The font's sub-family, e.g. "Bold".
   * @type {string}
   */ get subfamilyName() {
        return this.getName("fontSubfamily");
    }
    /**
   * The font's copyright information
   * @type {string}
   */ get copyright() {
        return this.getName("copyright");
    }
    /**
   * The font's version number
   * @type {string}
   */ get version() {
        return this.getName("version");
    }
    /**
   * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
   * @type {number}
   */ get ascent() {
        return this.hhea.ascent;
    }
    /**
   * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
   * @type {number}
   */ get descent() {
        return this.hhea.descent;
    }
    /**
   * The amount of space that should be included between lines
   * @type {number}
   */ get lineGap() {
        return this.hhea.lineGap;
    }
    /**
   * The offset from the normal underline position that should be used
   * @type {number}
   */ get underlinePosition() {
        return this.post.underlinePosition;
    }
    /**
   * The weight of the underline that should be used
   * @type {number}
   */ get underlineThickness() {
        return this.post.underlineThickness;
    }
    /**
   * If this is an italic font, the angle the cursor should be drawn at to match the font design
   * @type {number}
   */ get italicAngle() {
        return this.post.italicAngle;
    }
    /**
   * The height of capital letters above the baseline.
   * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
   * @type {number}
   */ get capHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.capHeight : this.ascent;
    }
    /**
   * The height of lower case letters in the font.
   * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
   * @type {number}
   */ get xHeight() {
        let os2 = this["OS/2"];
        return os2 ? os2.xHeight : 0;
    }
    /**
   * The number of glyphs in the font.
   * @type {number}
   */ get numGlyphs() {
        return this.maxp.numGlyphs;
    }
    /**
   * The size of the font’s internal coordinate grid
   * @type {number}
   */ get unitsPerEm() {
        return this.head.unitsPerEm;
    }
    /**
   * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
   * @type {BBox}
   */ get bbox() {
        return Object.freeze(new (0, $0e2da1c4ce69e8ad$export$2e2bcd8739ae039)(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
    }
    get _cmapProcessor() {
        return new (0, $0d6e160064c86e50$export$2e2bcd8739ae039)(this.cmap);
    }
    /**
   * An array of all of the unicode code points supported by the font.
   * @type {number[]}
   */ get characterSet() {
        return this._cmapProcessor.getCharacterSet();
    }
    /**
   * Returns whether there is glyph in the font for the given unicode code point.
   *
   * @param {number} codePoint
   * @return {boolean}
   */ hasGlyphForCodePoint(codePoint) {
        return !!this._cmapProcessor.lookup(codePoint);
    }
    /**
   * Maps a single unicode code point to a Glyph object.
   * Does not perform any advanced substitutions (there is no context to do so).
   *
   * @param {number} codePoint
   * @return {Glyph}
   */ glyphForCodePoint(codePoint) {
        return this.getGlyph(this._cmapProcessor.lookup(codePoint), [
            codePoint
        ]);
    }
    /**
   * Returns an array of Glyph objects for the given string.
   * This is only a one-to-one mapping from characters to glyphs.
   * For most uses, you should use font.layout (described below), which
   * provides a much more advanced mapping supporting AAT and OpenType shaping.
   *
   * @param {string} string
   * @return {Glyph[]}
   */ glyphsForString(string) {
        let glyphs = [];
        let len = string.length;
        let idx = 0;
        let last = -1;
        let state = -1;
        while(idx <= len){
            let code = 0;
            let nextState = 0;
            if (idx < len) {
                // Decode the next codepoint from UTF 16
                code = string.charCodeAt(idx++);
                if (0xd800 <= code && code <= 0xdbff && idx < len) {
                    let next = string.charCodeAt(idx);
                    if (0xdc00 <= next && next <= 0xdfff) {
                        idx++;
                        code = ((code & 0x3ff) << 10) + (next & 0x3ff) + 0x10000;
                    }
                }
                // Compute the next state: 1 if the next codepoint is a variation selector, 0 otherwise.
                nextState = 0xfe00 <= code && code <= 0xfe0f || 0xe0100 <= code && code <= 0xe01ef ? 1 : 0;
            } else idx++;
            if (state === 0 && nextState === 1) glyphs.push(this.getGlyph(this._cmapProcessor.lookup(last, code), [
                last,
                code
            ]));
            else if (state === 0 && nextState === 0) glyphs.push(this.glyphForCodePoint(last));
            last = code;
            state = nextState;
        }
        return glyphs;
    }
    get _layoutEngine() {
        return new (0, $9d641258c9d7180d$export$2e2bcd8739ae039)(this);
    }
    /**
   * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
   *
   * @param {string} string
   * @param {string[]} [userFeatures]
   * @param {string} [script]
   * @param {string} [language]
   * @param {string} [direction]
   * @return {GlyphRun}
   */ layout(string, userFeatures, script, language, direction) {
        return this._layoutEngine.layout(string, userFeatures, script, language, direction);
    }
    /**
   * Returns an array of strings that map to the given glyph id.
   * @param {number} gid - glyph id
   */ stringsForGlyph(gid) {
        return this._layoutEngine.stringsForGlyph(gid);
    }
    /**
   * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
   * (or mapped AAT tags) supported by the font.
   * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
   * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
   *
   * @type {string[]}
   */ get availableFeatures() {
        return this._layoutEngine.getAvailableFeatures();
    }
    getAvailableFeatures(script, language) {
        return this._layoutEngine.getAvailableFeatures(script, language);
    }
    _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.glyf) this._glyphs[glyph] = new (0, $f680320fa07ef53d$export$2e2bcd8739ae039)(glyph, characters, this);
            else if (this.directory.tables["CFF "] || this.directory.tables.CFF2) this._glyphs[glyph] = new (0, $7ee0705195f3b047$export$2e2bcd8739ae039)(glyph, characters, this);
        }
        return this._glyphs[glyph] || null;
    }
    /**
   * Returns a glyph object for the given glyph id.
   * You can pass the array of code points this glyph represents for
   * your use later, and it will be stored in the glyph object.
   *
   * @param {number} glyph
   * @param {number[]} characters
   * @return {Glyph}
   */ getGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.sbix) this._glyphs[glyph] = new (0, $55855d6d316b015e$export$2e2bcd8739ae039)(glyph, characters, this);
            else if (this.directory.tables.COLR && this.directory.tables.CPAL) this._glyphs[glyph] = new (0, $42d9dbd2de9ee2d8$export$2e2bcd8739ae039)(glyph, characters, this);
            else this._getBaseGlyph(glyph, characters);
        }
        return this._glyphs[glyph] || null;
    }
    /**
   * Returns a Subset for this font.
   * @return {Subset}
   */ createSubset() {
        if (this.directory.tables["CFF "]) return new (0, $ec40f80c07a4e08a$export$2e2bcd8739ae039)(this);
        return new (0, $fe042f4b88f46896$export$2e2bcd8739ae039)(this);
    }
    /**
   * Returns an object describing the available variation axes
   * that this font supports. Keys are setting tags, and values
   * contain the axis name, range, and default value.
   *
   * @type {object}
   */ get variationAxes() {
        let res = {};
        if (!this.fvar) return res;
        for (let axis of this.fvar.axis)res[axis.axisTag.trim()] = {
            name: axis.name.en,
            min: axis.minValue,
            default: axis.defaultValue,
            max: axis.maxValue
        };
        return res;
    }
    /**
   * Returns an object describing the named variation instances
   * that the font designer has specified. Keys are variation names
   * and values are the variation settings for this instance.
   *
   * @type {object}
   */ get namedVariations() {
        let res = {};
        if (!this.fvar) return res;
        for (let instance of this.fvar.instance){
            let settings = {};
            for(let i = 0; i < this.fvar.axis.length; i++){
                let axis = this.fvar.axis[i];
                settings[axis.axisTag.trim()] = instance.coord[i];
            }
            res[instance.name.en] = settings;
        }
        return res;
    }
    /**
   * Returns a new font with the given variation settings applied.
   * Settings can either be an instance name, or an object containing
   * variation tags as specified by the `variationAxes` property.
   *
   * @param {object} settings
   * @return {TTFFont}
   */ getVariation(settings) {
        if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
        if (typeof settings === "string") settings = this.namedVariations[settings];
        if (typeof settings !== "object") throw new Error("Variation settings must be either a variation name or settings object.");
        // normalize the coordinates
        let coords = this.fvar.axis.map((axis, i)=>{
            let axisTag = axis.axisTag.trim();
            if (axisTag in settings) return Math.max(axis.minValue, Math.min(axis.maxValue, settings[axisTag]));
            else return axis.defaultValue;
        });
        let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
        stream.pos = this._directoryPos;
        let font = new $0a8ef2660a6ce4b6$export$2e2bcd8739ae039(stream, coords);
        font._tables = this._tables;
        return font;
    }
    get _variationProcessor() {
        if (!this.fvar) return null;
        let variationCoords = this.variationCoords;
        // Ignore if no variation coords and not CFF2
        if (!variationCoords && !this.CFF2) return null;
        if (!variationCoords) variationCoords = this.fvar.axis.map((axis)=>axis.defaultValue);
        return new (0, $7586bb9ea67c41d8$export$2e2bcd8739ae039)(this, variationCoords);
    }
    // Standardized format plugin API
    getFont(name) {
        return this.getVariation(name);
    }
    constructor(stream, variationCoords = null){
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTF");
        this.defaultLanguage = null;
        this.stream = stream;
        this.variationCoords = variationCoords;
        this._directoryPos = this.stream.pos;
        this._tables = {};
        this._glyphs = {};
        this._decodeDirectory();
        // define properties for each table to lazily parse
        for(let tag in this.directory.tables){
            let table = this.directory.tables[tag];
            if ((0, $5825c04ce8f7102d$export$2e2bcd8739ae039)[tag] && table.length > 0) Object.defineProperty(this, tag, {
                get: this._getTable.bind(this, table)
            });
        }
    }
}
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "bbox", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_cmapProcessor", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "characterSet", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_layoutEngine", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "variationAxes", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "namedVariations", null);
(0, $elh9A$swchelperscjs_ts_decoratecjs._)([
    (0, $3bda6911913b43f0$export$69a3209f1a06c04d)
], $0a8ef2660a6ce4b6$export$2e2bcd8739ae039.prototype, "_variationProcessor", null);
let $89f72d2d7c9afc0d$var$WOFFDirectoryEntry = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    offset: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, "void", {
        type: "global"
    }),
    compLength: $elh9A$restructure.uint32,
    length: $elh9A$restructure.uint32,
    origChecksum: $elh9A$restructure.uint32
});
let $89f72d2d7c9afc0d$var$WOFFDirectory = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    flavor: $elh9A$restructure.uint32,
    length: $elh9A$restructure.uint32,
    numTables: $elh9A$restructure.uint16,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    totalSfntSize: $elh9A$restructure.uint32,
    majorVersion: $elh9A$restructure.uint16,
    minorVersion: $elh9A$restructure.uint16,
    metaOffset: $elh9A$restructure.uint32,
    metaLength: $elh9A$restructure.uint32,
    metaOrigLength: $elh9A$restructure.uint32,
    privOffset: $elh9A$restructure.uint32,
    privLength: $elh9A$restructure.uint32,
    tables: new $elh9A$restructure.Array($89f72d2d7c9afc0d$var$WOFFDirectoryEntry, "numTables")
});
$89f72d2d7c9afc0d$var$WOFFDirectory.process = function() {
    let tables = {};
    for (let table of this.tables)tables[table.tag] = table;
    this.tables = tables;
};
var $89f72d2d7c9afc0d$export$2e2bcd8739ae039 = $89f72d2d7c9afc0d$var$WOFFDirectory;
class $8a0a49baaf5d834d$export$2e2bcd8739ae039 extends (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039) {
    static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "wOFF";
    }
    _decodeDirectory() {
        this.directory = (0, $89f72d2d7c9afc0d$export$2e2bcd8739ae039).decode(this.stream, {
            _startOffset: 0
        });
    }
    _getTableStream(tag) {
        let table = this.directory.tables[tag];
        if (table) {
            this.stream.pos = table.offset;
            if (table.compLength < table.length) {
                this.stream.pos += 2; // skip deflate header
                let outBuffer = new Uint8Array(table.length);
                let buf = (0, $parcel$interopDefault($elh9A$tinyinflate))(this.stream.readBuffer(table.compLength - 2), outBuffer);
                return new $elh9A$restructure.DecodeStream(buf);
            } else return this.stream;
        }
        return null;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF");
    }
}
class $44b9edca0e403d6d$export$2e2bcd8739ae039 extends (0, $f680320fa07ef53d$export$2e2bcd8739ae039) {
    _decode() {
        // We have to decode in advance (in WOFF2Font), so just return the pre-decoded data.
        return this._font._transformedGlyphs[this.id];
    }
    _getCBox() {
        return this.path.bbox;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF2");
    }
}
const $2f0bfd9a5c1d7b58$var$Base128 = {
    decode (stream) {
        let result = 0;
        let iterable = [
            0,
            1,
            2,
            3,
            4
        ];
        for(let j = 0; j < iterable.length; j++){
            let i = iterable[j];
            let code = stream.readUInt8();
            // If any of the top seven bits are set then we're about to overflow.
            if (result & 0xe0000000) throw new Error("Overflow");
            result = result << 7 | code & 0x7f;
            if ((code & 0x80) === 0) return result;
        }
        throw new Error("Bad base 128 number");
    }
};
let $2f0bfd9a5c1d7b58$var$knownTags = [
    "cmap",
    "head",
    "hhea",
    "hmtx",
    "maxp",
    "name",
    "OS/2",
    "post",
    "cvt ",
    "fpgm",
    "glyf",
    "loca",
    "prep",
    "CFF ",
    "VORG",
    "EBDT",
    "EBLC",
    "gasp",
    "hdmx",
    "kern",
    "LTSH",
    "PCLT",
    "VDMX",
    "vhea",
    "vmtx",
    "BASE",
    "GDEF",
    "GPOS",
    "GSUB",
    "EBSC",
    "JSTF",
    "MATH",
    "CBDT",
    "CBLC",
    "COLR",
    "CPAL",
    "SVG ",
    "sbix",
    "acnt",
    "avar",
    "bdat",
    "bloc",
    "bsln",
    "cvar",
    "fdsc",
    "feat",
    "fmtx",
    "fvar",
    "gvar",
    "hsty",
    "just",
    "lcar",
    "mort",
    "morx",
    "opbd",
    "prop",
    "trak",
    "Zapf",
    "Silf",
    "Glat",
    "Gloc",
    "Feat",
    "Sill"
];
let $2f0bfd9a5c1d7b58$var$WOFF2DirectoryEntry = new $elh9A$restructure.Struct({
    flags: $elh9A$restructure.uint8,
    customTag: new $elh9A$restructure.Optional(new $elh9A$restructure.String(4), (t)=>(t.flags & 0x3f) === 0x3f),
    tag: (t)=>t.customTag || $2f0bfd9a5c1d7b58$var$knownTags[t.flags & 0x3f],
    length: $2f0bfd9a5c1d7b58$var$Base128,
    transformVersion: (t)=>t.flags >>> 6 & 0x03,
    transformed: (t)=>t.tag === "glyf" || t.tag === "loca" ? t.transformVersion === 0 : t.transformVersion !== 0,
    transformLength: new $elh9A$restructure.Optional($2f0bfd9a5c1d7b58$var$Base128, (t)=>t.transformed)
});
let $2f0bfd9a5c1d7b58$var$WOFF2Directory = new $elh9A$restructure.Struct({
    tag: new $elh9A$restructure.String(4),
    flavor: $elh9A$restructure.uint32,
    length: $elh9A$restructure.uint32,
    numTables: $elh9A$restructure.uint16,
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint16),
    totalSfntSize: $elh9A$restructure.uint32,
    totalCompressedSize: $elh9A$restructure.uint32,
    majorVersion: $elh9A$restructure.uint16,
    minorVersion: $elh9A$restructure.uint16,
    metaOffset: $elh9A$restructure.uint32,
    metaLength: $elh9A$restructure.uint32,
    metaOrigLength: $elh9A$restructure.uint32,
    privOffset: $elh9A$restructure.uint32,
    privLength: $elh9A$restructure.uint32,
    tables: new $elh9A$restructure.Array($2f0bfd9a5c1d7b58$var$WOFF2DirectoryEntry, "numTables")
});
$2f0bfd9a5c1d7b58$var$WOFF2Directory.process = function() {
    let tables = {};
    for(let i = 0; i < this.tables.length; i++){
        let table = this.tables[i];
        tables[table.tag] = table;
    }
    return this.tables = tables;
};
var $2f0bfd9a5c1d7b58$export$2e2bcd8739ae039 = $2f0bfd9a5c1d7b58$var$WOFF2Directory;
class $333fb94547d9fb5c$export$2e2bcd8739ae039 extends (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039) {
    static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "wOF2";
    }
    _decodeDirectory() {
        this.directory = (0, $2f0bfd9a5c1d7b58$export$2e2bcd8739ae039).decode(this.stream);
        this._dataPos = this.stream.pos;
    }
    _decompress() {
        // decompress data and setup table offsets if we haven't already
        if (!this._decompressed) {
            this.stream.pos = this._dataPos;
            let buffer = this.stream.readBuffer(this.directory.totalCompressedSize);
            let decompressedSize = 0;
            for(let tag in this.directory.tables){
                let entry = this.directory.tables[tag];
                entry.offset = decompressedSize;
                decompressedSize += entry.transformLength != null ? entry.transformLength : entry.length;
            }
            let decompressed = (0, $parcel$interopDefault($elh9A$brotlidecompressjs))(buffer, decompressedSize);
            if (!decompressed) throw new Error("Error decoding compressed data in WOFF2");
            this.stream = new $elh9A$restructure.DecodeStream(decompressed);
            this._decompressed = true;
        }
    }
    _decodeTable(table) {
        this._decompress();
        return super._decodeTable(table);
    }
    // Override this method to get a glyph and return our
    // custom subclass if there is a glyf table.
    _getBaseGlyph(glyph, characters = []) {
        if (!this._glyphs[glyph]) {
            if (this.directory.tables.glyf && this.directory.tables.glyf.transformed) {
                if (!this._transformedGlyphs) this._transformGlyfTable();
                return this._glyphs[glyph] = new (0, $44b9edca0e403d6d$export$2e2bcd8739ae039)(glyph, characters, this);
            } else return super._getBaseGlyph(glyph, characters);
        }
    }
    _transformGlyfTable() {
        this._decompress();
        this.stream.pos = this.directory.tables.glyf.offset;
        let table = $333fb94547d9fb5c$var$GlyfTable.decode(this.stream);
        let glyphs = [];
        for(let index = 0; index < table.numGlyphs; index++){
            let glyph = {};
            let nContours = table.nContours.readInt16BE();
            glyph.numberOfContours = nContours;
            if (nContours > 0) {
                let nPoints = [];
                let totalPoints = 0;
                for(let i = 0; i < nContours; i++){
                    let r = $333fb94547d9fb5c$var$read255UInt16(table.nPoints);
                    totalPoints += r;
                    nPoints.push(totalPoints);
                }
                glyph.points = $333fb94547d9fb5c$var$decodeTriplet(table.flags, table.glyphs, totalPoints);
                for(let i = 0; i < nContours; i++)glyph.points[nPoints[i] - 1].endContour = true;
                var instructionSize = $333fb94547d9fb5c$var$read255UInt16(table.glyphs);
            } else if (nContours < 0) {
                let haveInstructions = (0, $f680320fa07ef53d$export$2e2bcd8739ae039).prototype._decodeComposite.call({
                    _font: this
                }, glyph, table.composites);
                if (haveInstructions) var instructionSize = $333fb94547d9fb5c$var$read255UInt16(table.glyphs);
            }
            glyphs.push(glyph);
        }
        this._transformedGlyphs = glyphs;
    }
    constructor(...args){
        super(...args);
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "WOFF2");
    }
}
// Special class that accepts a length and returns a sub-stream for that data
class $333fb94547d9fb5c$var$Substream {
    decode(stream, parent) {
        return new $elh9A$restructure.DecodeStream(this._buf.decode(stream, parent));
    }
    constructor(length){
        this.length = length;
        this._buf = new $elh9A$restructure.Buffer(length);
    }
}
// This struct represents the entire glyf table
let $333fb94547d9fb5c$var$GlyfTable = new $elh9A$restructure.Struct({
    version: $elh9A$restructure.uint32,
    numGlyphs: $elh9A$restructure.uint16,
    indexFormat: $elh9A$restructure.uint16,
    nContourStreamSize: $elh9A$restructure.uint32,
    nPointsStreamSize: $elh9A$restructure.uint32,
    flagStreamSize: $elh9A$restructure.uint32,
    glyphStreamSize: $elh9A$restructure.uint32,
    compositeStreamSize: $elh9A$restructure.uint32,
    bboxStreamSize: $elh9A$restructure.uint32,
    instructionStreamSize: $elh9A$restructure.uint32,
    nContours: new $333fb94547d9fb5c$var$Substream("nContourStreamSize"),
    nPoints: new $333fb94547d9fb5c$var$Substream("nPointsStreamSize"),
    flags: new $333fb94547d9fb5c$var$Substream("flagStreamSize"),
    glyphs: new $333fb94547d9fb5c$var$Substream("glyphStreamSize"),
    composites: new $333fb94547d9fb5c$var$Substream("compositeStreamSize"),
    bboxes: new $333fb94547d9fb5c$var$Substream("bboxStreamSize"),
    instructions: new $333fb94547d9fb5c$var$Substream("instructionStreamSize")
});
const $333fb94547d9fb5c$var$WORD_CODE = 253;
const $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE2 = 254;
const $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE1 = 255;
const $333fb94547d9fb5c$var$LOWEST_U_CODE = 253;
function $333fb94547d9fb5c$var$read255UInt16(stream) {
    let code = stream.readUInt8();
    if (code === $333fb94547d9fb5c$var$WORD_CODE) return stream.readUInt16BE();
    if (code === $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE1) return stream.readUInt8() + $333fb94547d9fb5c$var$LOWEST_U_CODE;
    if (code === $333fb94547d9fb5c$var$ONE_MORE_BYTE_CODE2) return stream.readUInt8() + $333fb94547d9fb5c$var$LOWEST_U_CODE * 2;
    return code;
}
function $333fb94547d9fb5c$var$withSign(flag, baseval) {
    return flag & 1 ? baseval : -baseval;
}
function $333fb94547d9fb5c$var$decodeTriplet(flags, glyphs, nPoints) {
    let y;
    let x = y = 0;
    let res = [];
    for(let i = 0; i < nPoints; i++){
        let dx = 0, dy = 0;
        let flag = flags.readUInt8();
        let onCurve = !(flag >> 7);
        flag &= 0x7f;
        if (flag < 10) {
            dx = 0;
            dy = $333fb94547d9fb5c$var$withSign(flag, ((flag & 14) << 7) + glyphs.readUInt8());
        } else if (flag < 20) {
            dx = $333fb94547d9fb5c$var$withSign(flag, ((flag - 10 & 14) << 7) + glyphs.readUInt8());
            dy = 0;
        } else if (flag < 84) {
            var b0 = flag - 20;
            var b1 = glyphs.readUInt8();
            dx = $333fb94547d9fb5c$var$withSign(flag, 1 + (b0 & 0x30) + (b1 >> 4));
            dy = $333fb94547d9fb5c$var$withSign(flag >> 1, 1 + ((b0 & 0x0c) << 2) + (b1 & 0x0f));
        } else if (flag < 120) {
            var b0 = flag - 84;
            dx = $333fb94547d9fb5c$var$withSign(flag, 1 + (b0 / 12 << 8) + glyphs.readUInt8());
            dy = $333fb94547d9fb5c$var$withSign(flag >> 1, 1 + (b0 % 12 >> 2 << 8) + glyphs.readUInt8());
        } else if (flag < 124) {
            var b1 = glyphs.readUInt8();
            let b2 = glyphs.readUInt8();
            dx = $333fb94547d9fb5c$var$withSign(flag, (b1 << 4) + (b2 >> 4));
            dy = $333fb94547d9fb5c$var$withSign(flag >> 1, ((b2 & 0x0f) << 8) + glyphs.readUInt8());
        } else {
            dx = $333fb94547d9fb5c$var$withSign(flag, glyphs.readUInt16BE());
            dy = $333fb94547d9fb5c$var$withSign(flag >> 1, glyphs.readUInt16BE());
        }
        x += dx;
        y += dy;
        res.push(new (0, $f680320fa07ef53d$export$baf26146a414f24a)(onCurve, false, x, y));
    }
    return res;
}
let $e0b2de9958441c02$var$TTCHeader = new $elh9A$restructure.VersionedStruct($elh9A$restructure.uint32, {
    0x00010000: {
        numFonts: $elh9A$restructure.uint32,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32, "numFonts")
    },
    0x00020000: {
        numFonts: $elh9A$restructure.uint32,
        offsets: new $elh9A$restructure.Array($elh9A$restructure.uint32, "numFonts"),
        dsigTag: $elh9A$restructure.uint32,
        dsigLength: $elh9A$restructure.uint32,
        dsigOffset: $elh9A$restructure.uint32
    }
});
class $e0b2de9958441c02$export$2e2bcd8739ae039 {
    static probe(buffer) {
        return (0, $66a5b9fb5318558a$export$3d28c1996ced1f14).decode(buffer.slice(0, 4)) === "ttcf";
    }
    getFont(name) {
        for (let offset of this.header.offsets){
            let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
            stream.pos = offset;
            let font = new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream);
            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;
        }
        return null;
    }
    get fonts() {
        let fonts = [];
        for (let offset of this.header.offsets){
            let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer);
            stream.pos = offset;
            fonts.push(new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream));
        }
        return fonts;
    }
    constructor(stream){
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "TTC");
        this.stream = stream;
        if (stream.readString(4) !== "ttcf") throw new Error("Not a TrueType collection");
        this.header = $e0b2de9958441c02$var$TTCHeader.decode(stream);
    }
}
let $d0fe640dc6c78783$var$DFontName = new $elh9A$restructure.String($elh9A$restructure.uint8);
let $d0fe640dc6c78783$var$DFontData = new $elh9A$restructure.Struct({
    len: $elh9A$restructure.uint32,
    buf: new $elh9A$restructure.Buffer("len")
});
let $d0fe640dc6c78783$var$Ref = new $elh9A$restructure.Struct({
    id: $elh9A$restructure.uint16,
    nameOffset: $elh9A$restructure.int16,
    attr: $elh9A$restructure.uint8,
    dataOffset: $elh9A$restructure.uint24,
    handle: $elh9A$restructure.uint32
});
let $d0fe640dc6c78783$var$Type = new $elh9A$restructure.Struct({
    name: new $elh9A$restructure.String(4),
    maxTypeIndex: $elh9A$restructure.uint16,
    refList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, new $elh9A$restructure.Array($d0fe640dc6c78783$var$Ref, (t)=>t.maxTypeIndex + 1), {
        type: "parent"
    })
});
let $d0fe640dc6c78783$var$TypeList = new $elh9A$restructure.Struct({
    length: $elh9A$restructure.uint16,
    types: new $elh9A$restructure.Array($d0fe640dc6c78783$var$Type, (t)=>t.length + 1)
});
let $d0fe640dc6c78783$var$DFontMap = new $elh9A$restructure.Struct({
    reserved: new $elh9A$restructure.Reserved($elh9A$restructure.uint8, 24),
    typeList: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, $d0fe640dc6c78783$var$TypeList),
    nameListOffset: new $elh9A$restructure.Pointer($elh9A$restructure.uint16, "void")
});
let $d0fe640dc6c78783$var$DFontHeader = new $elh9A$restructure.Struct({
    dataOffset: $elh9A$restructure.uint32,
    map: new $elh9A$restructure.Pointer($elh9A$restructure.uint32, $d0fe640dc6c78783$var$DFontMap),
    dataLength: $elh9A$restructure.uint32,
    mapLength: $elh9A$restructure.uint32
});
class $d0fe640dc6c78783$export$2e2bcd8739ae039 {
    static probe(buffer) {
        let stream = new $elh9A$restructure.DecodeStream(buffer);
        try {
            var header = $d0fe640dc6c78783$var$DFontHeader.decode(stream);
        } catch (e) {
            return false;
        }
        for (let type of header.map.typeList.types){
            if (type.name === "sfnt") return true;
        }
        return false;
    }
    getFont(name) {
        if (!this.sfnt) return null;
        for (let ref of this.sfnt.refList){
            let pos = this.header.dataOffset + ref.dataOffset + 4;
            let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer.slice(pos));
            let font = new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream);
            if (font.postscriptName === name || font.postscriptName instanceof Uint8Array && name instanceof Uint8Array && font.postscriptName.every((v, i)=>name[i] === v)) return font;
        }
        return null;
    }
    get fonts() {
        let fonts = [];
        for (let ref of this.sfnt.refList){
            let pos = this.header.dataOffset + ref.dataOffset + 4;
            let stream = new $elh9A$restructure.DecodeStream(this.stream.buffer.slice(pos));
            fonts.push(new (0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039)(stream));
        }
        return fonts;
    }
    constructor(stream){
        (0, $elh9A$swchelperscjs_define_propertycjs._)(this, "type", "DFont");
        this.stream = stream;
        this.header = $d0fe640dc6c78783$var$DFontHeader.decode(this.stream);
        for (let type of this.header.map.typeList.types){
            for (let ref of type.refList)if (ref.nameOffset >= 0) {
                this.stream.pos = ref.nameOffset + this.header.map.nameListOffset;
                ref.name = $d0fe640dc6c78783$var$DFontName.decode(this.stream);
            } else ref.name = null;
            if (type.name === "sfnt") this.sfnt = type;
        }
    }
}
// Register font formats
(0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $0a8ef2660a6ce4b6$export$2e2bcd8739ae039));
(0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $8a0a49baaf5d834d$export$2e2bcd8739ae039));
(0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $333fb94547d9fb5c$export$2e2bcd8739ae039));
(0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $e0b2de9958441c02$export$2e2bcd8739ae039));
(0, $59aa4ed98453e1d4$export$36b2f24e97d43be)((0, $d0fe640dc6c78783$export$2e2bcd8739ae039));
$parcel$exportWildcard(module.exports, $59aa4ed98453e1d4$exports);
$parcel$exportWildcard(module.exports, $f39726ff40304956$exports); //# sourceMappingURL=main.cjs.map


/***/ }),

/***/ 9336:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else obj[key] = value;
    return obj;
}
exports._ = _define_property;


/***/ }),

/***/ 6382:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

exports._ = __webpack_require__(7422).__decorate;


/***/ }),

/***/ 5035:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $kQ2hT$unicodetrie = __webpack_require__(5331);
var $kQ2hT$base64js = __webpack_require__(8034);
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
const $60ff486a304db230$export$af862512e23cb54 = 0; // Opening punctuation
const $60ff486a304db230$export$9bf3043cb7503aa1 = 1; // Closing punctuation
const $60ff486a304db230$export$6d0b2a5dd774590a = 2; // Closing parenthesis
const $60ff486a304db230$export$bf0b2277bd569ea1 = 3; // Ambiguous quotation
const $60ff486a304db230$export$bad2a840ccda93b6 = 4; // Glue
const $60ff486a304db230$export$fb4028874a74450 = 5; // Non-starters
const $60ff486a304db230$export$463bd1ce0149c55e = 6; // Exclamation/Interrogation
const $60ff486a304db230$export$2e8caadc521d7cbb = 7; // Symbols allowing break after
const $60ff486a304db230$export$bfe27467c1de9413 = 8; // Infix separator
const $60ff486a304db230$export$af5f8d68aad3cd3a = 9; // Prefix
const $60ff486a304db230$export$6b7e017d6825d38f = 10; // Postfix
const $60ff486a304db230$export$8227ca023eb0daaa = 11; // Numeric
const $60ff486a304db230$export$1bb1140fe1358b00 = 12; // Alphabetic
const $60ff486a304db230$export$f3e416a182673355 = 13; // Hebrew Letter
const $60ff486a304db230$export$8be180ec26319f9f = 14; // Ideographic
const $60ff486a304db230$export$70824c8942178d60 = 15; // Inseparable characters
const $60ff486a304db230$export$24aa617c849a894a = 16; // Hyphen
const $60ff486a304db230$export$a73c4d14459b698d = 17; // Break after
const $60ff486a304db230$export$921068d8846a1559 = 18; // Break before
const $60ff486a304db230$export$8b85a4f193482778 = 19; // Break on either side (but not pair)
const $60ff486a304db230$export$b2fd9c01d360241f = 20; // Zero-width space
const $60ff486a304db230$export$dcd191669c0a595f = 21; // Combining marks
const $60ff486a304db230$export$9e5d732f3676a9ba = 22; // Word joiner
const $60ff486a304db230$export$cb94397127ac9363 = 23; // Hangul LV
const $60ff486a304db230$export$746be9e3a3dfff1f = 24; // Hangul LVT
const $60ff486a304db230$export$96e3e682276c47cf = 25; // Hangul L Jamo
const $60ff486a304db230$export$fc2ff69ee2cb01bf = 26; // Hangul V Jamo
const $60ff486a304db230$export$8999624a7bae9d04 = 27; // Hangul T Jamo
const $60ff486a304db230$export$1dff41d5c0caca01 = 28; // Regional Indicator
const $60ff486a304db230$export$ddb7a6c76d9d93eb = 29; // Emoji Base
const $60ff486a304db230$export$7e93eb3105e4786d = 30; // Emoji Modifier
const $60ff486a304db230$export$30a74a373318dec6 = 31; // Zero Width Joiner
const $60ff486a304db230$export$54caeea5e6dab1f = 32; // Contingent break
const $60ff486a304db230$export$d710c5f50fc7496a = 33; // Ambiguous (Alphabetic or Ideograph)
const $60ff486a304db230$export$66498d28055820a9 = 34; // Break (mandatory)
const $60ff486a304db230$export$eb6c6d0b7c8826f2 = 35; // Conditional Japanese Starter
const $60ff486a304db230$export$de92be486109a1df = 36; // Carriage return
const $60ff486a304db230$export$606cfc2a8896c91f = 37; // Line feed
const $60ff486a304db230$export$e51d3c675bb0140d = 38; // Next line
const $60ff486a304db230$export$da51c6332ad11d7b = 39; // South-East Asian
const $60ff486a304db230$export$bea437c40441867d = 40; // Surrogates
const $60ff486a304db230$export$c4c7eecbfed13dc9 = 41; // Space
const $60ff486a304db230$export$98e1f8a379849661 = 42; // Unknown
const $1b6fba3281342923$export$98f50d781a474745 = 0; // Direct break opportunity
const $1b6fba3281342923$export$12ee1f8f5315ca7e = 1; // Indirect break opportunity
const $1b6fba3281342923$export$e4965ce242860454 = 2; // Indirect break opportunity for combining marks
const $1b6fba3281342923$export$8f14048969dcd45e = 3; // Prohibited break for combining marks
const $1b6fba3281342923$export$133eb141bf58aff4 = 4; // Prohibited break
const $1b6fba3281342923$export$5bdb8ccbf5c57afc = [
    //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB
    [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$8f14048969dcd45e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ],
    [
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$e4965ce242860454,
        $1b6fba3281342923$export$133eb141bf58aff4,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$98f50d781a474745,
        $1b6fba3281342923$export$12ee1f8f5315ca7e,
        $1b6fba3281342923$export$98f50d781a474745
    ] // CB
];
const $f898ea50f3b38ab8$var$data = $parcel$interopDefault($kQ2hT$base64js).toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/");
const $f898ea50f3b38ab8$var$classTrie = new ($parcel$interopDefault($kQ2hT$unicodetrie))($f898ea50f3b38ab8$var$data);
const $f898ea50f3b38ab8$var$mapClass = function(c) {
    switch(c){
        case $60ff486a304db230$export$d710c5f50fc7496a:
            return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$da51c6332ad11d7b:
        case $60ff486a304db230$export$bea437c40441867d:
        case $60ff486a304db230$export$98e1f8a379849661:
            return $60ff486a304db230$export$1bb1140fe1358b00;
        case $60ff486a304db230$export$eb6c6d0b7c8826f2:
            return $60ff486a304db230$export$fb4028874a74450;
        default:
            return c;
    }
};
const $f898ea50f3b38ab8$var$mapFirst = function(c) {
    switch(c){
        case $60ff486a304db230$export$606cfc2a8896c91f:
        case $60ff486a304db230$export$e51d3c675bb0140d:
            return $60ff486a304db230$export$66498d28055820a9;
        case $60ff486a304db230$export$c4c7eecbfed13dc9:
            return $60ff486a304db230$export$9e5d732f3676a9ba;
        default:
            return c;
    }
};
class $f898ea50f3b38ab8$var$Break {
    constructor(position, required = false){
        this.position = position;
        this.required = required;
    }
}
class $f898ea50f3b38ab8$var$LineBreaker {
    nextCodePoint() {
        const code = this.string.charCodeAt(this.pos++);
        const next = this.string.charCodeAt(this.pos);
        // If a surrogate pair
        if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {
            this.pos++;
            return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;
        }
        return code;
    }
    nextCharClass() {
        return $f898ea50f3b38ab8$var$mapClass($f898ea50f3b38ab8$var$classTrie.get(this.nextCodePoint()));
    }
    getSimpleBreak() {
        // handle classes not handled by the pair table
        switch(this.nextClass){
            case $60ff486a304db230$export$c4c7eecbfed13dc9:
                return false;
            case $60ff486a304db230$export$66498d28055820a9:
            case $60ff486a304db230$export$606cfc2a8896c91f:
            case $60ff486a304db230$export$e51d3c675bb0140d:
                this.curClass = $60ff486a304db230$export$66498d28055820a9;
                return false;
            case $60ff486a304db230$export$de92be486109a1df:
                this.curClass = $60ff486a304db230$export$de92be486109a1df;
                return false;
        }
        return null;
    }
    getPairTableBreak(lastClass) {
        // if not handled already, use the pair table
        let shouldBreak = false;
        switch($1b6fba3281342923$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]){
            case $1b6fba3281342923$export$98f50d781a474745:
                shouldBreak = true;
                break;
            case $1b6fba3281342923$export$12ee1f8f5315ca7e:
                shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
                break;
            case $1b6fba3281342923$export$e4965ce242860454:
                shouldBreak = lastClass === $60ff486a304db230$export$c4c7eecbfed13dc9;
                if (!shouldBreak) {
                    shouldBreak = false;
                    return shouldBreak;
                }
                break;
            case $1b6fba3281342923$export$8f14048969dcd45e:
                if (lastClass !== $60ff486a304db230$export$c4c7eecbfed13dc9) return shouldBreak;
                break;
            case $1b6fba3281342923$export$133eb141bf58aff4:
                break;
        }
        if (this.LB8a) shouldBreak = false;
        // Rule LB21a
        if (this.LB21a && (this.curClass === $60ff486a304db230$export$24aa617c849a894a || this.curClass === $60ff486a304db230$export$a73c4d14459b698d)) {
            shouldBreak = false;
            this.LB21a = false;
        } else this.LB21a = this.curClass === $60ff486a304db230$export$f3e416a182673355;
        // Rule LB30a
        if (this.curClass === $60ff486a304db230$export$1dff41d5c0caca01) {
            this.LB30a++;
            if (this.LB30a == 2 && this.nextClass === $60ff486a304db230$export$1dff41d5c0caca01) {
                shouldBreak = true;
                this.LB30a = 0;
            }
        } else this.LB30a = 0;
        this.curClass = this.nextClass;
        return shouldBreak;
    }
    nextBreak() {
        // get the first char if we're at the beginning of the string
        if (this.curClass == null) {
            let firstClass = this.nextCharClass();
            this.curClass = $f898ea50f3b38ab8$var$mapFirst(firstClass);
            this.nextClass = firstClass;
            this.LB8a = firstClass === $60ff486a304db230$export$30a74a373318dec6;
            this.LB30a = 0;
        }
        while(this.pos < this.string.length){
            this.lastPos = this.pos;
            const lastClass = this.nextClass;
            this.nextClass = this.nextCharClass();
            // explicit newline
            if (this.curClass === $60ff486a304db230$export$66498d28055820a9 || this.curClass === $60ff486a304db230$export$de92be486109a1df && this.nextClass !== $60ff486a304db230$export$606cfc2a8896c91f) {
                this.curClass = $f898ea50f3b38ab8$var$mapFirst($f898ea50f3b38ab8$var$mapClass(this.nextClass));
                return new $f898ea50f3b38ab8$var$Break(this.lastPos, true);
            }
            let shouldBreak = this.getSimpleBreak();
            if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);
            // Rule LB8a
            this.LB8a = this.nextClass === $60ff486a304db230$export$30a74a373318dec6;
            if (shouldBreak) return new $f898ea50f3b38ab8$var$Break(this.lastPos);
        }
        if (this.lastPos < this.string.length) {
            this.lastPos = this.string.length;
            return new $f898ea50f3b38ab8$var$Break(this.string.length);
        }
        return null;
    }
    constructor(string){
        this.string = string;
        this.pos = 0;
        this.lastPos = 0;
        this.curClass = null;
        this.nextClass = null;
        this.LB8a = false;
        this.LB21a = false;
        this.LB30a = 0;
    }
}
module.exports = $f898ea50f3b38ab8$var$LineBreaker; //# sourceMappingURL=main.cjs.map


/***/ }),

/***/ 6094:
/***/ ((module) => {

function $parcel$exportWildcard(dest, source) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) {
            return;
        }
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function get() {
                return source[key];
            }
        });
    });
    return dest;
}
function $parcel$export(e, n, v, s) {
    Object.defineProperty(e, n, {
        get: v,
        set: s,
        enumerable: true,
        configurable: true
    });
}
$parcel$export(module.exports, "EncodeStream", ()=>$1ed46182c1410e1d$export$9b4f661deaa36c3e);
$parcel$export(module.exports, "DecodeStream", ()=>$8ae20583b93e4933$export$c18b354bac7948e9);
$parcel$export(module.exports, "Array", ()=>$8ea28a08eae2a116$export$c4be6576ca6fe4aa);
$parcel$export(module.exports, "LazyArray", ()=>$444f112d3cbc7e9f$export$5576c026028d4983);
$parcel$export(module.exports, "Bitfield", ()=>$3def237a34a226b5$export$96b43b8a49f688ea);
$parcel$export(module.exports, "Boolean", ()=>$8415e91bb83faf74$export$ff887cefee4d61ec);
$parcel$export(module.exports, "Buffer", ()=>$08d28604119af47e$export$7d22a0eea6656474);
$parcel$export(module.exports, "Enum", ()=>$070ce31ea947467f$export$deb82508dd66d288);
$parcel$export(module.exports, "Optional", ()=>$80703542fcfb6ff0$export$7acb7b24c478f9c6);
$parcel$export(module.exports, "Reserved", ()=>$f4fd49878232508a$export$da9b5fe187a9aa1);
$parcel$export(module.exports, "String", ()=>$d8705cd4022e7dcf$export$89b8e0fa65f6a914);
$parcel$export(module.exports, "Struct", ()=>$aa8b66bae6abe658$export$eabc71f011df675a);
$parcel$export(module.exports, "VersionedStruct", ()=>$fcb208a95f6d048b$export$95a8b60f4da7dec8);
// Node back-compat.
const $8ae20583b93e4933$var$ENCODING_MAPPING = {
    utf16le: "utf-16le",
    ucs2: "utf-16le",
    utf16be: "utf-16be"
};
class $8ae20583b93e4933$export$c18b354bac7948e9 {
    constructor(buffer){
        this.buffer = buffer;
        this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
        this.pos = 0;
        this.length = this.buffer.length;
    }
    readString(length, encoding = "ascii") {
        encoding = $8ae20583b93e4933$var$ENCODING_MAPPING[encoding] || encoding;
        let buf = this.readBuffer(length);
        try {
            let decoder = new TextDecoder(encoding);
            return decoder.decode(buf);
        } catch (err) {
            return buf;
        }
    }
    readBuffer(length) {
        return this.buffer.slice(this.pos, this.pos += length);
    }
    readUInt24BE() {
        return (this.readUInt16BE() << 8) + this.readUInt8();
    }
    readUInt24LE() {
        return this.readUInt16LE() + (this.readUInt8() << 16);
    }
    readInt24BE() {
        return (this.readInt16BE() << 8) + this.readUInt8();
    }
    readInt24LE() {
        return this.readUInt16LE() + (this.readInt8() << 16);
    }
}
$8ae20583b93e4933$export$c18b354bac7948e9.TYPES = {
    UInt8: 1,
    UInt16: 2,
    UInt24: 3,
    UInt32: 4,
    Int8: 1,
    Int16: 2,
    Int24: 3,
    Int32: 4,
    Float: 4,
    Double: 8
};
for (let key of Object.getOwnPropertyNames(DataView.prototype))if (key.slice(0, 3) === "get") {
    let type = key.slice(3).replace("Ui", "UI");
    if (type === "Float32") type = "Float";
    else if (type === "Float64") type = "Double";
    let bytes = $8ae20583b93e4933$export$c18b354bac7948e9.TYPES[type];
    $8ae20583b93e4933$export$c18b354bac7948e9.prototype["read" + type + (bytes === 1 ? "" : "BE")] = function() {
        const ret = this.view[key](this.pos, false);
        this.pos += bytes;
        return ret;
    };
    if (bytes !== 1) $8ae20583b93e4933$export$c18b354bac7948e9.prototype["read" + type + "LE"] = function() {
        const ret = this.view[key](this.pos, true);
        this.pos += bytes;
        return ret;
    };
}
const $1ed46182c1410e1d$var$textEncoder = new TextEncoder();
const $1ed46182c1410e1d$var$isBigEndian = new Uint8Array(new Uint16Array([
    0x1234
]).buffer)[0] == 0x12;
class $1ed46182c1410e1d$export$9b4f661deaa36c3e {
    constructor(buffer){
        this.buffer = buffer;
        this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
        this.pos = 0;
    }
    writeBuffer(buffer) {
        this.buffer.set(buffer, this.pos);
        this.pos += buffer.length;
    }
    writeString(string, encoding = "ascii") {
        let buf;
        switch(encoding){
            case "utf16le":
            case "utf16-le":
            case "ucs2":
                buf = $1ed46182c1410e1d$var$stringToUtf16(string, $1ed46182c1410e1d$var$isBigEndian);
                break;
            case "utf16be":
            case "utf16-be":
                buf = $1ed46182c1410e1d$var$stringToUtf16(string, !$1ed46182c1410e1d$var$isBigEndian);
                break;
            case "utf8":
                buf = $1ed46182c1410e1d$var$textEncoder.encode(string);
                break;
            case "ascii":
                buf = $1ed46182c1410e1d$var$stringToAscii(string);
                break;
            default:
                throw new Error(`Unsupported encoding: ${encoding}`);
        }
        this.writeBuffer(buf);
    }
    writeUInt24BE(val) {
        this.buffer[this.pos++] = val >>> 16 & 0xff;
        this.buffer[this.pos++] = val >>> 8 & 0xff;
        this.buffer[this.pos++] = val & 0xff;
    }
    writeUInt24LE(val) {
        this.buffer[this.pos++] = val & 0xff;
        this.buffer[this.pos++] = val >>> 8 & 0xff;
        this.buffer[this.pos++] = val >>> 16 & 0xff;
    }
    writeInt24BE(val) {
        if (val >= 0) this.writeUInt24BE(val);
        else this.writeUInt24BE(val + 0xffffff + 1);
    }
    writeInt24LE(val) {
        if (val >= 0) this.writeUInt24LE(val);
        else this.writeUInt24LE(val + 0xffffff + 1);
    }
    fill(val, length) {
        if (length < this.buffer.length) {
            this.buffer.fill(val, this.pos, this.pos + length);
            this.pos += length;
        } else {
            const buf = new Uint8Array(length);
            buf.fill(val);
            this.writeBuffer(buf);
        }
    }
}
function $1ed46182c1410e1d$var$stringToUtf16(string, swap) {
    let buf = new Uint16Array(string.length);
    for(let i = 0; i < string.length; i++){
        let code = string.charCodeAt(i);
        if (swap) code = code >> 8 | (code & 0xff) << 8;
        buf[i] = code;
    }
    return new Uint8Array(buf.buffer);
}
function $1ed46182c1410e1d$var$stringToAscii(string) {
    let buf = new Uint8Array(string.length);
    for(let i = 0; i < string.length; i++)buf[i] = string.charCodeAt(i);
    return buf;
}
for (let key of Object.getOwnPropertyNames(DataView.prototype))if (key.slice(0, 3) === "set") {
    let type = key.slice(3).replace("Ui", "UI");
    if (type === "Float32") type = "Float";
    else if (type === "Float64") type = "Double";
    let bytes = (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[type];
    $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype["write" + type + (bytes === 1 ? "" : "BE")] = function(value) {
        this.view[key](this.pos, value, false);
        this.pos += bytes;
    };
    if (bytes !== 1) $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype["write" + type + "LE"] = function(value) {
        this.view[key](this.pos, value, true);
        this.pos += bytes;
    };
}
class $8d21f7fa58802901$export$ef88aa0d34c34520 {
    fromBuffer(buffer) {
        let stream = new (0, $8ae20583b93e4933$export$c18b354bac7948e9)(buffer);
        return this.decode(stream);
    }
    toBuffer(value) {
        let size = this.size(value);
        let buffer = new Uint8Array(size);
        let stream = new (0, $1ed46182c1410e1d$export$9b4f661deaa36c3e)(buffer);
        this.encode(stream, value);
        return buffer;
    }
}
var $af65abf7bf65ac42$exports = {};
$parcel$export($af65abf7bf65ac42$exports, "Number", ()=>$af65abf7bf65ac42$export$fffa67e515d04022);
$parcel$export($af65abf7bf65ac42$exports, "uint8", ()=>$af65abf7bf65ac42$export$52e103c63c4e68cf);
$parcel$export($af65abf7bf65ac42$exports, "uint16be", ()=>$af65abf7bf65ac42$export$60dfe43c8297a8f8);
$parcel$export($af65abf7bf65ac42$exports, "uint16", ()=>$af65abf7bf65ac42$export$56bd24b5a3ee8456);
$parcel$export($af65abf7bf65ac42$exports, "uint16le", ()=>$af65abf7bf65ac42$export$b92d76f0ca6d1789);
$parcel$export($af65abf7bf65ac42$exports, "uint24be", ()=>$af65abf7bf65ac42$export$255f45171f96b50c);
$parcel$export($af65abf7bf65ac42$exports, "uint24", ()=>$af65abf7bf65ac42$export$1925298fbd719b21);
$parcel$export($af65abf7bf65ac42$exports, "uint24le", ()=>$af65abf7bf65ac42$export$758e1dafc8dc7271);
$parcel$export($af65abf7bf65ac42$exports, "uint32be", ()=>$af65abf7bf65ac42$export$74c16dba6c885532);
$parcel$export($af65abf7bf65ac42$exports, "uint32", ()=>$af65abf7bf65ac42$export$de9ffb9418dd7d0d);
$parcel$export($af65abf7bf65ac42$exports, "uint32le", ()=>$af65abf7bf65ac42$export$5f744bb30a534bc9);
$parcel$export($af65abf7bf65ac42$exports, "int8", ()=>$af65abf7bf65ac42$export$5984f25eab09961f);
$parcel$export($af65abf7bf65ac42$exports, "int16be", ()=>$af65abf7bf65ac42$export$198ae7d10d26a900);
$parcel$export($af65abf7bf65ac42$exports, "int16", ()=>$af65abf7bf65ac42$export$c35c15c7caeff2b6);
$parcel$export($af65abf7bf65ac42$exports, "int16le", ()=>$af65abf7bf65ac42$export$399cc4b7169e5aed);
$parcel$export($af65abf7bf65ac42$exports, "int24be", ()=>$af65abf7bf65ac42$export$3676d1f71eca2ec0);
$parcel$export($af65abf7bf65ac42$exports, "int24", ()=>$af65abf7bf65ac42$export$73f695d681ac61f9);
$parcel$export($af65abf7bf65ac42$exports, "int24le", ()=>$af65abf7bf65ac42$export$671f8672dbd40a4);
$parcel$export($af65abf7bf65ac42$exports, "int32be", ()=>$af65abf7bf65ac42$export$78a2ac3d09dd42d5);
$parcel$export($af65abf7bf65ac42$exports, "int32", ()=>$af65abf7bf65ac42$export$1d95835383bb05a);
$parcel$export($af65abf7bf65ac42$exports, "int32le", ()=>$af65abf7bf65ac42$export$5ec1f146e759329a);
$parcel$export($af65abf7bf65ac42$exports, "floatbe", ()=>$af65abf7bf65ac42$export$92b5c14c6abb5c97);
$parcel$export($af65abf7bf65ac42$exports, "float", ()=>$af65abf7bf65ac42$export$6b5cd3983e3ee5ab);
$parcel$export($af65abf7bf65ac42$exports, "floatle", ()=>$af65abf7bf65ac42$export$6d20592bc4cb19d9);
$parcel$export($af65abf7bf65ac42$exports, "doublebe", ()=>$af65abf7bf65ac42$export$e50b9e97e4d43631);
$parcel$export($af65abf7bf65ac42$exports, "double", ()=>$af65abf7bf65ac42$export$7b3cbda67be88f5f);
$parcel$export($af65abf7bf65ac42$exports, "doublele", ()=>$af65abf7bf65ac42$export$6f53315aa512b751);
$parcel$export($af65abf7bf65ac42$exports, "Fixed", ()=>$af65abf7bf65ac42$export$13475bbd2a37a9b4);
$parcel$export($af65abf7bf65ac42$exports, "fixed16be", ()=>$af65abf7bf65ac42$export$f87b441e6bd90278);
$parcel$export($af65abf7bf65ac42$exports, "fixed16", ()=>$af65abf7bf65ac42$export$a3abada75ef55921);
$parcel$export($af65abf7bf65ac42$exports, "fixed16le", ()=>$af65abf7bf65ac42$export$3752a2886837dc22);
$parcel$export($af65abf7bf65ac42$exports, "fixed32be", ()=>$af65abf7bf65ac42$export$dd71d8d9bc792632);
$parcel$export($af65abf7bf65ac42$exports, "fixed32", ()=>$af65abf7bf65ac42$export$e913265d48471f2d);
$parcel$export($af65abf7bf65ac42$exports, "fixed32le", ()=>$af65abf7bf65ac42$export$7fc47db6a5fc8223);
class $af65abf7bf65ac42$export$fffa67e515d04022 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, endian = "BE"){
        super();
        this.type = type;
        this.endian = endian;
        this.fn = this.type;
        if (this.type[this.type.length - 1] !== "8") this.fn += this.endian;
    }
    size() {
        return (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[this.type];
    }
    decode(stream) {
        return stream[`read${this.fn}`]();
    }
    encode(stream, val) {
        return stream[`write${this.fn}`](val);
    }
}
const $af65abf7bf65ac42$export$52e103c63c4e68cf = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt8");
const $af65abf7bf65ac42$export$60dfe43c8297a8f8 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt16", "BE");
const $af65abf7bf65ac42$export$56bd24b5a3ee8456 = $af65abf7bf65ac42$export$60dfe43c8297a8f8;
const $af65abf7bf65ac42$export$b92d76f0ca6d1789 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt16", "LE");
const $af65abf7bf65ac42$export$255f45171f96b50c = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt24", "BE");
const $af65abf7bf65ac42$export$1925298fbd719b21 = $af65abf7bf65ac42$export$255f45171f96b50c;
const $af65abf7bf65ac42$export$758e1dafc8dc7271 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt24", "LE");
const $af65abf7bf65ac42$export$74c16dba6c885532 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt32", "BE");
const $af65abf7bf65ac42$export$de9ffb9418dd7d0d = $af65abf7bf65ac42$export$74c16dba6c885532;
const $af65abf7bf65ac42$export$5f744bb30a534bc9 = new $af65abf7bf65ac42$export$fffa67e515d04022("UInt32", "LE");
const $af65abf7bf65ac42$export$5984f25eab09961f = new $af65abf7bf65ac42$export$fffa67e515d04022("Int8");
const $af65abf7bf65ac42$export$198ae7d10d26a900 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int16", "BE");
const $af65abf7bf65ac42$export$c35c15c7caeff2b6 = $af65abf7bf65ac42$export$198ae7d10d26a900;
const $af65abf7bf65ac42$export$399cc4b7169e5aed = new $af65abf7bf65ac42$export$fffa67e515d04022("Int16", "LE");
const $af65abf7bf65ac42$export$3676d1f71eca2ec0 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int24", "BE");
const $af65abf7bf65ac42$export$73f695d681ac61f9 = $af65abf7bf65ac42$export$3676d1f71eca2ec0;
const $af65abf7bf65ac42$export$671f8672dbd40a4 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int24", "LE");
const $af65abf7bf65ac42$export$78a2ac3d09dd42d5 = new $af65abf7bf65ac42$export$fffa67e515d04022("Int32", "BE");
const $af65abf7bf65ac42$export$1d95835383bb05a = $af65abf7bf65ac42$export$78a2ac3d09dd42d5;
const $af65abf7bf65ac42$export$5ec1f146e759329a = new $af65abf7bf65ac42$export$fffa67e515d04022("Int32", "LE");
const $af65abf7bf65ac42$export$92b5c14c6abb5c97 = new $af65abf7bf65ac42$export$fffa67e515d04022("Float", "BE");
const $af65abf7bf65ac42$export$6b5cd3983e3ee5ab = $af65abf7bf65ac42$export$92b5c14c6abb5c97;
const $af65abf7bf65ac42$export$6d20592bc4cb19d9 = new $af65abf7bf65ac42$export$fffa67e515d04022("Float", "LE");
const $af65abf7bf65ac42$export$e50b9e97e4d43631 = new $af65abf7bf65ac42$export$fffa67e515d04022("Double", "BE");
const $af65abf7bf65ac42$export$7b3cbda67be88f5f = $af65abf7bf65ac42$export$e50b9e97e4d43631;
const $af65abf7bf65ac42$export$6f53315aa512b751 = new $af65abf7bf65ac42$export$fffa67e515d04022("Double", "LE");
class $af65abf7bf65ac42$export$13475bbd2a37a9b4 extends $af65abf7bf65ac42$export$fffa67e515d04022 {
    constructor(size, endian, fracBits = size >> 1){
        super(`Int${size}`, endian);
        this._point = 1 << fracBits;
    }
    decode(stream) {
        return super.decode(stream) / this._point;
    }
    encode(stream, val) {
        return super.encode(stream, val * this._point | 0);
    }
}
const $af65abf7bf65ac42$export$f87b441e6bd90278 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, "BE");
const $af65abf7bf65ac42$export$a3abada75ef55921 = $af65abf7bf65ac42$export$f87b441e6bd90278;
const $af65abf7bf65ac42$export$3752a2886837dc22 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, "LE");
const $af65abf7bf65ac42$export$dd71d8d9bc792632 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, "BE");
const $af65abf7bf65ac42$export$e913265d48471f2d = $af65abf7bf65ac42$export$dd71d8d9bc792632;
const $af65abf7bf65ac42$export$7fc47db6a5fc8223 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, "LE");
var $4559ecf940edc78d$exports = {};
$parcel$export($4559ecf940edc78d$exports, "resolveLength", ()=>$4559ecf940edc78d$export$83b6dc3503c1fda6);
$parcel$export($4559ecf940edc78d$exports, "PropertyDescriptor", ()=>$4559ecf940edc78d$export$41705b1d644e0f14);
function $4559ecf940edc78d$export$83b6dc3503c1fda6(length, stream, parent) {
    let res;
    if (typeof length === "number") res = length;
    else if (typeof length === "function") res = length.call(parent, parent);
    else if (parent && typeof length === "string") res = parent[length];
    else if (stream && length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) res = length.decode(stream);
    if (isNaN(res)) throw new Error("Not a fixed size");
    return res;
}
class $4559ecf940edc78d$export$41705b1d644e0f14 {
    constructor(opts = {}){
        this.enumerable = true;
        this.configurable = true;
        for(let key in opts){
            const val = opts[key];
            this[key] = val;
        }
    }
}
class $8ea28a08eae2a116$export$c4be6576ca6fe4aa extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, length, lengthType = "count"){
        super();
        this.type = type;
        this.length = length;
        this.lengthType = lengthType;
    }
    decode(stream, parent) {
        let length;
        const { pos: pos } = stream;
        const res = [];
        let ctx = parent;
        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
            // define hidden properties
            Object.defineProperties(res, {
                parent: {
                    value: parent
                },
                _startOffset: {
                    value: pos
                },
                _currentOffset: {
                    value: 0,
                    writable: true
                },
                _length: {
                    value: length
                }
            });
            ctx = res;
        }
        if (length == null || this.lengthType === "bytes") {
            const target = length != null ? stream.pos + length : (parent != null ? parent._length : undefined) ? parent._startOffset + parent._length : stream.length;
            while(stream.pos < target)res.push(this.type.decode(stream, ctx));
        } else for(let i = 0, end = length; i < end; i++)res.push(this.type.decode(stream, ctx));
        return res;
    }
    size(array, ctx, includePointers = true) {
        if (!array) return this.type.size(null, ctx) * $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, ctx);
        let size = 0;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
            size += this.length.size();
            ctx = {
                parent: ctx,
                pointerSize: 0
            };
        }
        for (let item of array)size += this.type.size(item, ctx);
        if (ctx && includePointers && this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += ctx.pointerSize;
        return size;
    }
    encode(stream, array, parent) {
        let ctx = parent;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
            ctx = {
                pointers: [],
                startOffset: stream.pos,
                parent: parent
            };
            ctx.pointerOffset = stream.pos + this.size(array, ctx, false);
            this.length.encode(stream, array.length);
        }
        for (let item of array)this.type.encode(stream, item, ctx);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {
            let i = 0;
            while(i < ctx.pointers.length){
                const ptr = ctx.pointers[i++];
                ptr.type.encode(stream, ptr.val, ptr.parent);
            }
        }
    }
}
class $444f112d3cbc7e9f$export$5576c026028d4983 extends (0, $8ea28a08eae2a116$export$c4be6576ca6fe4aa) {
    decode(stream, parent) {
        const { pos: pos } = stream;
        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) parent = {
            parent: parent,
            _startOffset: pos,
            _currentOffset: 0,
            _length: length
        };
        const res = new $444f112d3cbc7e9f$var$LazyArrayValue(this.type, length, stream, parent);
        stream.pos += length * this.type.size(null, parent);
        return res;
    }
    size(val, ctx) {
        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();
        return super.size(val, ctx);
    }
    encode(stream, val, ctx) {
        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();
        return super.encode(stream, val, ctx);
    }
}
class $444f112d3cbc7e9f$var$LazyArrayValue {
    constructor(type, length, stream, ctx){
        this.type = type;
        this.length = length;
        this.stream = stream;
        this.ctx = ctx;
        this.base = this.stream.pos;
        this.items = [];
    }
    get(index) {
        if (index < 0 || index >= this.length) return undefined;
        if (this.items[index] == null) {
            const { pos: pos } = this.stream;
            this.stream.pos = this.base + this.type.size(null, this.ctx) * index;
            this.items[index] = this.type.decode(this.stream, this.ctx);
            this.stream.pos = pos;
        }
        return this.items[index];
    }
    toArray() {
        const result = [];
        for(let i = 0, end = this.length; i < end; i++)result.push(this.get(i));
        return result;
    }
}
class $3def237a34a226b5$export$96b43b8a49f688ea extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, flags = []){
        super();
        this.type = type;
        this.flags = flags;
    }
    decode(stream) {
        const val = this.type.decode(stream);
        const res = {};
        for(let i = 0; i < this.flags.length; i++){
            const flag = this.flags[i];
            if (flag != null) res[flag] = !!(val & 1 << i);
        }
        return res;
    }
    size() {
        return this.type.size();
    }
    encode(stream, keys) {
        let val = 0;
        for(let i = 0; i < this.flags.length; i++){
            const flag = this.flags[i];
            if (flag != null) {
                if (keys[flag]) val |= 1 << i;
            }
        }
        return this.type.encode(stream, val);
    }
}
class $8415e91bb83faf74$export$ff887cefee4d61ec extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type){
        super();
        this.type = type;
    }
    decode(stream, parent) {
        return !!this.type.decode(stream, parent);
    }
    size(val, parent) {
        return this.type.size(val, parent);
    }
    encode(stream, val, parent) {
        return this.type.encode(stream, +val, parent);
    }
}
class $08d28604119af47e$export$7d22a0eea6656474 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(length){
        super();
        this.length = length;
    }
    decode(stream, parent) {
        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        return stream.readBuffer(length);
    }
    size(val, parent) {
        if (!val) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);
        let len = val.length;
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) len += this.length.size();
        return len;
    }
    encode(stream, buf, parent) {
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, buf.length);
        return stream.writeBuffer(buf);
    }
}
class $070ce31ea947467f$export$deb82508dd66d288 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, options = []){
        super();
        this.type = type;
        this.options = options;
    }
    decode(stream) {
        const index = this.type.decode(stream);
        return this.options[index] || index;
    }
    size() {
        return this.type.size();
    }
    encode(stream, val) {
        const index = this.options.indexOf(val);
        if (index === -1) throw new Error(`Unknown option in enum: ${val}`);
        return this.type.encode(stream, index);
    }
}
class $80703542fcfb6ff0$export$7acb7b24c478f9c6 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, condition = true){
        super();
        this.type = type;
        this.condition = condition;
    }
    decode(stream, parent) {
        let { condition: condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.decode(stream, parent);
    }
    size(val, parent) {
        let { condition: condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.size(val, parent);
        else return 0;
    }
    encode(stream, val, parent) {
        let { condition: condition } = this;
        if (typeof condition === "function") condition = condition.call(parent, parent);
        if (condition) return this.type.encode(stream, val, parent);
    }
}
class $f4fd49878232508a$export$da9b5fe187a9aa1 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(type, count = 1){
        super();
        this.type = type;
        this.count = count;
    }
    decode(stream, parent) {
        stream.pos += this.size(null, parent);
        return undefined;
    }
    size(data, parent) {
        const count = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.count, null, parent);
        return this.type.size() * count;
    }
    encode(stream, val, parent) {
        return stream.fill(0, this.size(val, parent));
    }
}
class $d8705cd4022e7dcf$export$89b8e0fa65f6a914 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(length, encoding = "ascii"){
        super();
        this.length = length;
        this.encoding = encoding;
    }
    decode(stream, parent) {
        let length, pos;
        let { encoding: encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent, parent) || "ascii";
        let width = $d8705cd4022e7dcf$var$encodingWidth(encoding);
        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);
        else {
            let buffer;
            ({ buffer: buffer, length: length, pos: pos } = stream);
            while(pos < length - width + 1 && (buffer[pos] !== 0x00 || width === 2 && buffer[pos + 1] !== 0x00))pos += width;
            length = pos - stream.pos;
        }
        const string = stream.readString(length, encoding);
        if (this.length == null && stream.pos < stream.length) stream.pos += width;
        return string;
    }
    size(val, parent) {
        // Use the defined value if no value was given
        if (val === undefined || val === null) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);
        let { encoding: encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || "ascii";
        if (encoding === "utf16be") encoding = "utf16le";
        let size = $d8705cd4022e7dcf$var$byteLength(val, encoding);
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += this.length.size();
        if (this.length == null) size += $d8705cd4022e7dcf$var$encodingWidth(encoding);
        return size;
    }
    encode(stream, val, parent) {
        let { encoding: encoding } = this;
        if (typeof encoding === "function") encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || "ascii";
        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, $d8705cd4022e7dcf$var$byteLength(val, encoding));
        stream.writeString(val, encoding);
        if (this.length == null) return $d8705cd4022e7dcf$var$encodingWidth(encoding) == 2 ? stream.writeUInt16LE(0x0000) : stream.writeUInt8(0x00);
    }
}
function $d8705cd4022e7dcf$var$encodingWidth(encoding) {
    switch(encoding){
        case "ascii":
        case "utf8":
            return 1;
        case "utf16le":
        case "utf16-le":
        case "utf-16be":
        case "utf-16le":
        case "utf16be":
        case "utf16-be":
        case "ucs2":
            return 2;
        default:
            //TODO: assume all other encodings are 1-byters
            //throw new Error('Unknown encoding ' + encoding);
            return 1;
    }
}
function $d8705cd4022e7dcf$var$byteLength(string, encoding) {
    switch(encoding){
        case "ascii":
            return string.length;
        case "utf8":
            let len = 0;
            for(let i = 0; i < string.length; i++){
                let c = string.charCodeAt(i);
                if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {
                    let c2 = string.charCodeAt(++i);
                    if ((c2 & 0xfc00) === 0xdc00) c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;
                    else i--;
                }
                if ((c & 0xffffff80) === 0) len++;
                else if ((c & 0xfffff800) === 0) len += 2;
                else if ((c & 0xffff0000) === 0) len += 3;
                else if ((c & 0xffe00000) === 0) len += 4;
            }
            return len;
        case "utf16le":
        case "utf16-le":
        case "utf16be":
        case "utf16-be":
        case "ucs2":
            return string.length * 2;
        default:
            throw new Error("Unknown encoding " + encoding);
    }
}
class $aa8b66bae6abe658$export$eabc71f011df675a extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(fields = {}){
        super();
        this.fields = fields;
    }
    decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        this._parseFields(stream, res, this.fields);
        if (this.process != null) this.process.call(res, stream);
        return res;
    }
    _setup(stream, parent, length) {
        const res = {};
        // define hidden properties
        Object.defineProperties(res, {
            parent: {
                value: parent
            },
            _startOffset: {
                value: stream.pos
            },
            _currentOffset: {
                value: 0,
                writable: true
            },
            _length: {
                value: length
            }
        });
        return res;
    }
    _parseFields(stream, res, fields) {
        for(let key in fields){
            var val;
            const type = fields[key];
            if (typeof type === "function") val = type.call(res, res);
            else val = type.decode(stream, res);
            if (val !== undefined) {
                if (val instanceof $4559ecf940edc78d$export$41705b1d644e0f14) Object.defineProperty(res, key, val);
                else res[key] = val;
            }
            res._currentOffset = stream.pos - res._startOffset;
        }
    }
    size(val, parent, includePointers = true) {
        if (val == null) val = {};
        const ctx = {
            parent: parent,
            val: val,
            pointerSize: 0
        };
        if (this.preEncode != null) this.preEncode.call(val);
        let size = 0;
        for(let key in this.fields){
            const type = this.fields[key];
            if (type.size != null) size += type.size(val[key], ctx);
        }
        if (includePointers) size += ctx.pointerSize;
        return size;
    }
    encode(stream, val, parent) {
        let type;
        if (this.preEncode != null) this.preEncode.call(val, stream);
        const ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent: parent,
            val: val,
            pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        for(let key in this.fields){
            type = this.fields[key];
            if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        let i = 0;
        while(i < ctx.pointers.length){
            const ptr = ctx.pointers[i++];
            ptr.type.encode(stream, ptr.val, ptr.parent);
        }
    }
}
const $fcb208a95f6d048b$var$getPath = (object, pathArray)=>{
    return pathArray.reduce((prevObj, key)=>prevObj && prevObj[key], object);
};
class $fcb208a95f6d048b$export$95a8b60f4da7dec8 extends (0, $aa8b66bae6abe658$export$eabc71f011df675a) {
    constructor(type, versions = {}){
        super();
        this.type = type;
        this.versions = versions;
        if (typeof type === "string") this.versionPath = type.split(".");
    }
    decode(stream, parent, length = 0) {
        const res = this._setup(stream, parent, length);
        if (typeof this.type === "string") res.version = $fcb208a95f6d048b$var$getPath(parent, this.versionPath);
        else res.version = this.type.decode(stream);
        if (this.versions.header) this._parseFields(stream, res, this.versions.header);
        const fields = this.versions[res.version];
        if (fields == null) throw new Error(`Unknown version ${res.version}`);
        if (fields instanceof $fcb208a95f6d048b$export$95a8b60f4da7dec8) return fields.decode(stream, parent);
        this._parseFields(stream, res, fields);
        if (this.process != null) this.process.call(res, stream);
        return res;
    }
    size(val, parent, includePointers = true) {
        let key, type;
        if (!val) throw new Error("Not a fixed size");
        if (this.preEncode != null) this.preEncode.call(val);
        const ctx = {
            parent: parent,
            val: val,
            pointerSize: 0
        };
        let size = 0;
        if (typeof this.type !== "string") size += this.type.size(val.version, ctx);
        if (this.versions.header) for(key in this.versions.header){
            type = this.versions.header[key];
            if (type.size != null) size += type.size(val[key], ctx);
        }
        const fields = this.versions[val.version];
        if (fields == null) throw new Error(`Unknown version ${val.version}`);
        for(key in fields){
            type = fields[key];
            if (type.size != null) size += type.size(val[key], ctx);
        }
        if (includePointers) size += ctx.pointerSize;
        return size;
    }
    encode(stream, val, parent) {
        let key, type;
        if (this.preEncode != null) this.preEncode.call(val, stream);
        const ctx = {
            pointers: [],
            startOffset: stream.pos,
            parent: parent,
            val: val,
            pointerSize: 0
        };
        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);
        if (typeof this.type !== "string") this.type.encode(stream, val.version);
        if (this.versions.header) for(key in this.versions.header){
            type = this.versions.header[key];
            if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        const fields = this.versions[val.version];
        for(key in fields){
            type = fields[key];
            if (type.encode != null) type.encode(stream, val[key], ctx);
        }
        let i = 0;
        while(i < ctx.pointers.length){
            const ptr = ctx.pointers[i++];
            ptr.type.encode(stream, ptr.val, ptr.parent);
        }
    }
}
var $92184962f8f0d5e2$exports = {};
$parcel$export($92184962f8f0d5e2$exports, "Pointer", ()=>$92184962f8f0d5e2$export$b56007f12edf0c17);
$parcel$export($92184962f8f0d5e2$exports, "VoidPointer", ()=>$92184962f8f0d5e2$export$df5cb1f3d04f5a0f);
class $92184962f8f0d5e2$export$b56007f12edf0c17 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {
    constructor(offsetType, type, options = {}){
        super();
        this.offsetType = offsetType;
        this.type = type;
        this.options = options;
        if (this.type === "void") this.type = null;
        if (this.options.type == null) this.options.type = "local";
        if (this.options.allowNull == null) this.options.allowNull = true;
        if (this.options.nullValue == null) this.options.nullValue = 0;
        if (this.options.lazy == null) this.options.lazy = false;
        if (this.options.relativeTo) {
            if (typeof this.options.relativeTo !== "function") throw new Error("relativeTo option must be a function");
            this.relativeToGetter = options.relativeTo;
        }
    }
    decode(stream, ctx) {
        const offset = this.offsetType.decode(stream, ctx);
        // handle NULL pointers
        if (offset === this.options.nullValue && this.options.allowNull) return null;
        let relative;
        switch(this.options.type){
            case "local":
                relative = ctx._startOffset;
                break;
            case "immediate":
                relative = stream.pos - this.offsetType.size();
                break;
            case "parent":
                relative = ctx.parent._startOffset;
                break;
            default:
                var c = ctx;
                while(c.parent)c = c.parent;
                relative = c._startOffset || 0;
        }
        if (this.options.relativeTo) relative += this.relativeToGetter(ctx);
        const ptr = offset + relative;
        if (this.type != null) {
            let val = null;
            const decodeValue = ()=>{
                if (val != null) return val;
                const { pos: pos } = stream;
                stream.pos = ptr;
                val = this.type.decode(stream, ctx);
                stream.pos = pos;
                return val;
            };
            // If this is a lazy pointer, define a getter to decode only when needed.
            // This obviously only works when the pointer is contained by a Struct.
            if (this.options.lazy) return new $4559ecf940edc78d$export$41705b1d644e0f14({
                get: decodeValue
            });
            return decodeValue();
        } else return ptr;
    }
    size(val, ctx) {
        const parent = ctx;
        switch(this.options.type){
            case "local":
            case "immediate":
                break;
            case "parent":
                ctx = ctx.parent;
                break;
            default:
                while(ctx.parent)ctx = ctx.parent;
        }
        let { type: type } = this;
        if (type == null) {
            if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error("Must be a VoidPointer");
            ({ type: type } = val);
            val = val.value;
        }
        if (val && ctx) {
            // Must be written as two separate lines rather than += in case `type.size` mutates ctx.pointerSize.
            let size = type.size(val, parent);
            ctx.pointerSize += size;
        }
        return this.offsetType.size();
    }
    encode(stream, val, ctx) {
        let relative;
        const parent = ctx;
        if (val == null) {
            this.offsetType.encode(stream, this.options.nullValue);
            return;
        }
        switch(this.options.type){
            case "local":
                relative = ctx.startOffset;
                break;
            case "immediate":
                relative = stream.pos + this.offsetType.size(val, parent);
                break;
            case "parent":
                ctx = ctx.parent;
                relative = ctx.startOffset;
                break;
            default:
                relative = 0;
                while(ctx.parent)ctx = ctx.parent;
        }
        if (this.options.relativeTo) relative += this.relativeToGetter(parent.val);
        this.offsetType.encode(stream, ctx.pointerOffset - relative);
        let { type: type } = this;
        if (type == null) {
            if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error("Must be a VoidPointer");
            ({ type: type } = val);
            val = val.value;
        }
        ctx.pointers.push({
            type: type,
            val: val,
            parent: parent
        });
        return ctx.pointerOffset += type.size(val, parent);
    }
}
class $92184962f8f0d5e2$export$df5cb1f3d04f5a0f {
    constructor(type, value){
        this.type = type;
        this.value = value;
    }
}
$parcel$exportWildcard(module.exports, $4559ecf940edc78d$exports);
$parcel$exportWildcard(module.exports, $af65abf7bf65ac42$exports);
$parcel$exportWildcard(module.exports, $92184962f8f0d5e2$exports); //# sourceMappingURL=main.cjs.map


/***/ }),

/***/ 9031:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $c5L0i$base64js = __webpack_require__(6641);
var $c5L0i$unicodetrie = __webpack_require__(5331);
function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
    Object.defineProperty(a, "__esModule", {
        value: true,
        configurable: true
    });
}
function $parcel$export(e, n, v, s) {
    Object.defineProperty(e, n, {
        get: v,
        set: s,
        enumerable: true,
        configurable: true
    });
}
$parcel$defineInteropFlag(module.exports);
$parcel$export(module.exports, "getCategory", ()=>$43d7963e56408b24$export$410364bbb673ddbc);
$parcel$export(module.exports, "getCombiningClass", ()=>$43d7963e56408b24$export$c03b919c6651ed55);
$parcel$export(module.exports, "getScript", ()=>$43d7963e56408b24$export$941569448d136665);
$parcel$export(module.exports, "getEastAsianWidth", ()=>$43d7963e56408b24$export$92f6187db8ca6d26);
$parcel$export(module.exports, "getNumericValue", ()=>$43d7963e56408b24$export$7d1258ebb7625a0d);
$parcel$export(module.exports, "isAlphabetic", ()=>$43d7963e56408b24$export$52c8ea63abd07594);
$parcel$export(module.exports, "isDigit", ()=>$43d7963e56408b24$export$727d9dbc4fbb948f);
$parcel$export(module.exports, "isPunctuation", ()=>$43d7963e56408b24$export$a5b49f4dc6a07d2c);
$parcel$export(module.exports, "isLowerCase", ()=>$43d7963e56408b24$export$7b6804e8df61fcf5);
$parcel$export(module.exports, "isUpperCase", ()=>$43d7963e56408b24$export$aebd617640818cda);
$parcel$export(module.exports, "isTitleCase", ()=>$43d7963e56408b24$export$de8b4ee23b2cf823);
$parcel$export(module.exports, "isWhiteSpace", ()=>$43d7963e56408b24$export$3c52dd84024ae72c);
$parcel$export(module.exports, "isBaseForm", ()=>$43d7963e56408b24$export$a11bdcffe109e74b);
$parcel$export(module.exports, "isMark", ()=>$43d7963e56408b24$export$e33ad6871e762338);
$parcel$export(module.exports, "default", ()=>$43d7963e56408b24$export$2e2bcd8739ae039);
var $29668e65f2091c2c$exports = {};
$29668e65f2091c2c$exports = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
const $43d7963e56408b24$var$trie = new (0, $parcel$interopDefault($c5L0i$unicodetrie))((0, $parcel$interopDefault($c5L0i$base64js)).toByteArray("AAARAAAAAADwfAEAZXl5ONRt+/5bPVFZimRfKoTQJNm37CGE7Iw0j3UsTWKsoyI7kwyyTiEUzSD7NiEzhWYijH0wMVkHE4Mx49fzfo+3nuP4/fdZjvv+XNd5n/d9nef1WZvmKhTxiZndzDQBSEYQqxqKwnsKvGQucFh+6t6cJ792ePQBZv5S9yXSwkyjf/P4T7mTNnIAv1dOVhMlR9lflbUL9JeJguqsjvG9NTj/wLb566VAURnLo2vvRi89S3gW/33ihh2eXpDn40BIW7REl/7coRKIhAFlAiOtbLDTt6mMb4GzMF1gNnvX/sBxtbsAIjfztCNcQjcNDtLThRvuXu5M5g/CBjaLBE4lJm4qy/oZD97+IJryApcXfgWYlkvWbhfXgujOJKVu8B+ozqTLbxyJ5kNiR75CxDqfBM9eOlDMmGeoZ0iQbbS5VUplIwI+ZNXEKQVJxlwqjhOY7w3XwPesbLK5JZE+Tt4X8q8km0dzInsPPzbscrjBMVjF5mOHSeRdJVgKUjLTHiHqXSPkep8N/zFk8167KLp75f6RndkvzdfB6Uz3MmqvRArzdCbs1/iRZjYPLLF3U8Qs+H+Rb8iK51a6NIV2V9+07uJsTGFWpPz8J++7iRu2B6eAKlK/kujrLthwaD/7a6J5w90TusnH1JMAc+gNrql4aspOUG/RrsxUKmPzhHgP4Bleru+6Vfc/MBjgXVx7who94nPn7MPFrnwQP7g0k0Dq0h2GSKO6fTZ8nLodN1SiOUj/5EL/Xo1DBvRm0wmrh3x6phcJ20/9CuMr5h8WPqXMSasLoLHoufTmE7mzYrs6B0dY7KjuCogKqsvxnxAwXWvd9Puc9PnE8DOHT2INHxRlIyVHrqZahtfV2E/A2PDdtA3ewlRHMtFIBKO/T4IozWTQZ+mb+gdKuk/ZHrqloucKdsOSJmlWTSntWjcxVMjUmroXLM10I6TwDLnBq4LP69TxgVeyGsd8yHvhF8ydPlrNRSNs9EP7WmeuSE7Lu10JbOuQcJw/63sDp68wB9iwP5AO+mBpV0R5VDDeyQUFCel1G+4KHBgEVFS0YK+m2sXLWLuGTlkVAd97WwKKdacjWElRCuDRauf33l/yVcDF6sVPKeTes99FC1NpNWcpieGSV/IbO8PCTy5pbUR1U8lxzf4T+y6fZMxOz3LshkQLeeDSd0WmUrQgajmbktrxsb2AZ0ACw2Vgni+gV/m+KvCRWLg08Clx7uhql+v9XySGcjjOHlsp8vBw/e8HS7dtiqF6T/XcSXuaMW66GF1g4q9YyBadHqy3Y5jin1c7yZos6BBr6dsomSHxiUHanYtcYQwnMMZhRhOnaYJeyJzaRuukyCUh48+e/BUvk/aEfDp8ag+jD64BHxNnQ5v/E7WRk7eLjGV13I3oqy45YNONi/1op1oDr7rPjkhPsTXgUpQtGDPlIs55KhQaic9kSGs/UrZ2QKQOflB8MTEQxRF9pullToWO7Eplan6mcMRFnUu2441yxi23x+KqKlr7RWWsi9ZXMWlr8vfP3llk1m2PRj0yudccxBuoa7VfIgRmnFPGX6Pm1WIfMm/Rm4n/xTn8IGqA0GWuqgu48pEUO0U9nN+ZdIvFpPb7VDPphIfRZxznlHeVFebkd9l+raXy9BpTMcIUIvBfgHEb6ndGo8VUkxpief14KjzFOcaANfgvFpvyY8lE8lE4raHizLpluPzMks1hx/e1Hok5yV0p7qQH7GaYeMzzZTFvRpv6k6iaJ4yNqzBvN8J7B430h2wFm1IBPcqbou33G7/NWPgopl4Mllla6e24L3TOTVNkza2zv3QKuDWTeDpClCEYgTQ+5vEBSQZs/rMF50+sm4jofTgWLqgX1x3TkrDEVaRqfY/xZizFZ3Y8/DFEFD31VSfBQ5raEB6nHnZh6ddehtclQJ8fBrldyIh99LNnV32HzKEej04hk6SYjdauCa4aYW0ru/QxvQRGzLKOAQszf3ixJypTW3WWL6BLSF2EMCMIw7OUvWBC6A/gDc2D1jvBapMCc7ztx6jYczwTKsRLL6dMNXb83HS8kdD0pTMMj161zbVHkU0mhSHo9SlBDDXdN6hDvRGizmohtIyR3ot8tF5iUG4GLNcXeGvBudSFrHu+bVZb9jirNVG+rQPI51A7Hu8/b0UeaIaZ4UgDO68PkYx3PE2HWpKapJ764Kxt5TFYpywMy4DLQqVRy11I7SOLhxUFmqiEK52NaijWArIfCg6qG8q5eSiwRCJb1R7GDJG74TrYgx/lVq7w9++Kh929xSJEaoSse5fUOQg9nMAnIZv+7fwVRcNv3gOHI46Vb5jYUC66PYHO6lS+TOmvEQjuYmx4RkffYGxqZIp/DPWNHAixbRBc+XKE3JEOgs4jIwu/dSAwhydruOGF39co91aTs85JJ3Z/LpXoF43hUwJsb/M1Chzdn8HX8vLXnqWUKvRhNLpfAF4PTFqva1sBQG0J+59HyYfmQ3oa4/sxZdapVLlo/fooxSXi/dOEQWIWq8E0FkttEyTFXR2aNMPINMIzZwCNEheYTVltsdaLkMyKoEUluPNAYCM2IG3br0DLy0fVNWKHtbSKbBjfiw7Lu06gQFalC7RC9BwRMSpLYDUo9pDtDfzwUiPJKLJ2LGcSphWBadOI/iJjNqUHV7ucG8yC6+iNM9QYElqBR7ECFXrcTgWQ3eG/tCWacT9bxIkfmxPmi3vOd36KxihAJA73vWNJ+Y9oapXNscVSVqS5g15xOWND/WuUCcA9YAAg6WFbjHamrblZ5c0L6Zx1X58ZittGcfDKU697QRSqW/g+RofNRyvrWMrBn44cPvkRe2HdTu/Cq01C5/riWPHZyXPKHuSDDdW8c1XPgd6ogvLh20qEIu8c19sqr4ufyHrwh37ZN5MkvY1dsGmEz9pUBTxWrvvhNyODyX2Q1k/fbX/T/vbHNcBrmjgDtvBdtZrVtiIg5iXQuzO/DEMvRX8Mi1zymSlt92BGILeKItjoShJXE/H7xwnf0Iewb8BFieJ9MflEBCQYEDm8eZniiEPfGoaYiiEdhQxHQNr2AuRdmbL9mcl18Kumh+HEZLp6z+j35ML9zTbUwahUZCyQQOgQrGfdfQtaR/OYJ/9dYXb2TWZFMijfCA8Nov4sa5FFDUe1T68h4q08WDE7JbbDiej4utRMR9ontevxlXv6LuJTXt1YEv8bDzEt683PuSsIN0afvu0rcBu9AbXZbkOG3K3AhtqQ28N23lXm7S3Yn6KXmAhBhz+GeorJJ4XxO/b3vZk2LXp42+QvsVxGSNVpfSctIFMTR1bD9t70i6sfNF3WKz/uKDEDCpzzztwhL45lsw89H2IpWN10sXHRlhDse9KCdpP5qNNpU84cTY+aiqswqR8XZ9ea0KbVRwRuOGQU3csAtV2fSbnq47U6es6rKlWLWhg3s/B9C9g+oTyp6RtIldR51OOkP5/6nSy6itUVPcMNOp4M/hDdKOz3uK6srbdxOrc2cJgr1Sg02oBxxSky6V7JaG+ziNwlfqnjnvh2/uq1lKfbp+qpwq/D/5OI5gkFl5CejKGxfc2YVJfGqc4E0x5e9PHK2ukbHNI7/RZV6LNe65apbTGjoCaQls0txPPbmQbCQn+/upCoXRZy9yzorWJvZ0KWcbXlBxU/d5I4ERUTxMuVWhSMmF677LNN7NnLwsmKawXkCgbrpcluOl0WChR1qhtSrxGXHu251dEItYhYX3snvn1gS2uXuzdTxCJjZtjsip0iT2sDC0qMS7Bk9su2NyXjFK5/f5ZoWwofg3DtTyjaFqspnOOTSh8xK/CKUFS57guVEkw9xoQuRCwwEO9Lu9z2vYxSa9NFV8DvSxv2C4WYLYF8Nrc4DzWkzNsk81JJOlZ/LYJrGCoj4MmZpnf3AXmzxT4rtl9jsqljEyedz468SGKdBiQzyz/qWKEhFg45ZczlZZ3KGL3l6sn+3TTa3zMVMhPa1obGp/z+fvY0QXTrJTf1XAT3EtQdUfYYlmWZyvPZ/6rWwU7UOQei7pVE0osgN94Iy+T1+omE6z4Rh2O20FjgBeK2y1mcoFiMDOJvuZPn5Moy9fmFH3wyfKvn4+TwfLvt/lHTTVnvrtoUWRBiQXhiNM8nE6ZoWeux/Z0b2unRcdUzdDpmL7CAgd1ToRXwgmHTZOgiGtVT+xr1QH9ObebRTT4NzL+XSpLuuWp62GqQvJVTPoZOeJCb6gIwd9XHMftQ+Kc08IKKdKQANSJ1a2gve3JdRhO0+tNiYzWAZfd7isoeBu67W7xuK8WX7nhJURld98Inb0t/dWOSau/kDvV4DJo/cImw9AO2Gvq0F2n0M7yIZKL8amMbjYld+qFls7hq8Acvq97K2PrCaomuUiesu7qNanGupEl6J/iem8lyr/NMnsTr6o41PO0yhQh3hPFN0wJP7S830je9iTBLzUNgYH+gUZpROo3rN2qgCI+6GewpX8w8CH+ro6QrWiStqmcMzVa3vEel+3/dDxMp0rDv1Q6wTMS3K64zTT6RWzK1y643im25Ja7X2ePCV2mTswd/4jshZPo4bLnerqIosq/hy2bKUAmVn9n4oun1+a0DIZ56UhVwmZHdUNpLa8gmPvxS1eNvCF1T0wo1wKPdCJi0qOrWz7oYRTzgTtkzEzZn308XSLwUog4OWGKJzCn/3FfF9iA32dZHSv30pRCM3KBY9WZoRhtdK/ChHk6DEQBsfV6tN2o1Cn0mLtPBfnkS+qy1L2xfFe9TQPtDE1Be44RTl82E9hPT2rS2+93LFbzhQQO3C/hD2jRFH3BWWbasAfuMhRJFcTri73eE835y016s22DjoFJ862WvLj69fu2TgSF3RHia9D5DSitlQAXYCnbdqjPkR287Lh6dCHDapos+eFDvcZPP2edPmTFxznJE/EBLoQQ0Qmn9EkZOyJmHxMbvKYb8o21ZHmv5YLqgsEPk9gWZwYQY9wLqGXuax/8QlV5qDaPbq9pLPT1yp+zOWKmraEy1OUJI7zdEcEmvBpbdwLrDCgEb2xX8S/nxZgjK4bRi+pbOmbh8bEeoPvU/L9ndx9kntlDALbdAvp0O8ZC3zSUnFg4cePsw7jxewWvL7HRSBLUn6J7vTH9uld5N76JFPgBCdXGF221oEJk++XfRwXplLSyrVO7HFWBEs99nTazKveW3HpbD4dH/YmdAl+lwbSt8BQWyTG7jAsACI7bPPUU9hI9XUHWqQOuezHzUjnx5Qqs6T1qNHfTTHleDtmqK7flA9a0gz2nycIpz1FHBuWxKNtUeTdqP29Fb3tv+tl5JyBqXoR+vCsdzZwZUhf6Lu8bvkB9yQP4x7GGegB0ym0Lpl03Q7e+C0cDsm9GSDepCDji7nUslLyYyluPfvLyKaDSX4xpR+nVYQjQQn5F8KbY1gbIVLiK1J3mW90zTyR1bqApX2BlWh7KG8LAY9/S9nWC0XXh9pZZo6xuir12T43rkaGfQssbQyIslA7uJnSHOV22NhlNtUo0czxPAsXhh8tIQYaTM4l/yAlZlydTcXhlG22Gs/n3BxKBd/3ZjYwg3NaUurVXhNB+afVnFfNr9TbC9ksNdvwpNfeHanyJ8M6GrIVfLlYAPv0ILe4dn0Z+BJSbJkN7eZY/c6+6ttDYcIDeUKIDXqUSE42Xdh5nRbuaObozjht0HJ5H1e+em+NJi/+8kQlyjCbJpPckwThZeIF9/u7lrVIKNeJLCN/TpPAeXxvd31/CUDWHK9MuP1V1TJgngzi4V0qzS3SW3Qy5UiGHqg02wQa5tsEl9s/X9nNMosgLlUgZSfCBj1DiypLfhr9/r0nR0XY2tmhDOcUS4E7cqa4EJBhzqvpbZa35Q5Iz5EqmhYiOGDAYk606Tv74+KGfPjKVuP15rIzgW0I7/niOu9el/sn2bRye0gV+GrePDRDMHjwO1lEdeXH8N+UTO3IoN18kpI3tPxz+fY+n2MGMSGFHAx/83tKeJOl+2i+f1O9v6FfEDBbqrw+lpM8Anav7zHNr7hE78nXUtPNodMbCnITWA7Ma/IHlZ50F9hWge/wzOvSbtqFVFtkS8Of2nssjZwbSFdU+VO8z6tCEc9UA9ACxT5zIUeSrkBB/v1krOpm7bVMrGxEKfI6LcnpB4D8bvn2hDKGqKrJaVAJuDaBEY3F7eXyqnFWlOoFV/8ZLspZiZd7orXLhd4mhHQgbuKbHjJWUzrnm0Dxw/LJLzXCkh7slMxKo8uxZIWZfdKHlfI7uj3LP6ARAuWdF7ZmZ7daOKqKGbz5LxOggTgS39oEioYmrqkCeUDvbxkBYKeHhcLmMN8dMF01ZMb32IpL/cH8R7VHQSI5I0YfL14g9d7P/6cjB1JXXxbozEDbsrPdmL8ph7QW10jio+v7YsqHKQ6xrBbOVtxU0/nFfzUGZwIBLwyUvg49ii+54nv9FyECBpURnQK4Ox6N7lw5fsjdd5l/2SwBcAHMJoyjO1Pifye2dagaOwCVMqdJWAo77pvBe0zdJcTWu5fdzPNfV2p1pc7/JKQ8zhKkwsOELUDhXygPJ5oR8Vpk2lsCen3D3QOQp2zdrSZHjVBstDF/wWO98rrkQ6/7zt/Drip7OHIug1lomNdmRaHRrjmqeodn22sesQQPgzimPOMqC60a5+i/UYh51uZm+ijWkkaI2xjrBO2558DZNZMiuDQlaVAvBy2wLn/bR3FrNzfnO/9oDztYqxZrr7JMIhqmrochbqmQnKowxW29bpqTaJu7kW1VotC72QkYX8OoDDdMDwV1kJRk3mufgJBzf+iwFRJ7XWQwO5ujVglgFgHtycWiMLx5N+6XU+TulLabWjOzoao03fniUW0xvIJNPbk7CQlFZd/RCOPvgQbLjh5ITE8NVJeKt3HGr6JTnFdIzcVOlEtwqbIIX0IM7saC+4N5047MTJ9+Wn11EhyEPIlwsHE5utCeXRjQzlrR+R1Cf/qDzcNbqLXdk3J7gQ39VUrrEkS/VMWjjg+t2oYrqB0tUZClcUF6+LBC3EQ7KnGIwm/qjZX4GKPtjTX1zQKV6nPAb2t/Rza5IqKRf8i2DFEhV/YSifX0YwsiF6TQnp48Gr65TFq0zUe6LGjiY7fq0LSGKL1VnC6ESI2yxvt3XqBx53B3gSlGFeJcPbUbonW1E9E9m4NfuwPh+t5QjRxX34lvBPVxwQd7aeTd+r9dw5CiP1pt8wMZoMdni7GapYdo6KPgeQKcmlFfq4UYhvV0IBgeiR3RnTMBaqDqpZrTRyLdsp4l0IXZTdErfH0sN3dqBG5vRIx3VgCYcHmmkqJ8Hyu3s9K9uBD1d8cZUEx3qYcF5vsqeRpF1GOg8emeWM2OmBlWPdZ6qAXwm3nENFyh+kvXk132PfWAlN0kb7yh4fz2T7VWUY/hEXX5DvxGABC03XRpyOG8t/u3Gh5tZdpsSV9AWaxJN7zwhVglgII1gV28tUViyqn4UMdIh5t+Ea2zo7PO48oba0TwQbiSZOH4YhD578kPF3reuaP7LujPMsjHmaDuId9XEaZBCJhbXJbRg5VCk3KJpryH/+8S3wdhR47pdFcmpZG2p0Bpjp/VbvalgIZMllYX5L31aMPdt1J7r/7wbixt0Mnz2ZvNGTARHPVD+2O1D8SGpWXlVnP2ekgon55YiinADDynyaXtZDXueVqbuTi8z8cHHK325pgqM+mWZwzHeEreMvhZopAScXM14SJHpGwZyRljMlDvcMm9FZ/1e9+r/puOnpXOtc9Iu2fmgBfEP9cGW1Fzb1rGlfJ08pACtq1ZW18bf2cevebzVeHbaA50G9qoUp39JWdPHbYkPCRXjt4gzlq3Cxge28Mky8MoS/+On72kc+ZI2xBtgJytpAQHQ1zrEddMIVyR5urX6yBNu8v5lKC8eLdGKTJtbgIZ3ZyTzSfWmx9f+cvcJe8yM39K/djkp2aUTE/9m2Lj5jg7b8vdRAer7DO3SyLNHs1CAm5x5iAdh2yGJYivArZbCBNY88Tw+w+C1Tbt7wK3zl2rzTHo/D8/gb3c3mYrnEIEipYqPUcdWjnTsSw471O3EUN7Gtg4NOAs9PJrxm03VuZKa5xwXAYCjt7Gs01Km6T2DhOYUMoFcCSu7Hk1p3yP1eG+M3v3Q5luAze6WwBnZIYO0TCucPWK+UJ36KoJ8Y+vpavhLO8g5ed704IjlQdfemrMu//EvPYXTQSGIPPfiagJS9nMqP5IvkxN9pvuJz7h8carPXTKMq8jnTeL0STan6dnLTAqwIswcIwWDR2KwbGddAVN8SYWRB7kfBfBRkSXzvHlIF8D6jo64kUzYk5o/n8oLjKqat0rdXvQ86MkwQGMnnlcasqPPT2+mVtUGb32KuH6cyZQenrRG11TArcAl27+nvOMBDe++EKHf4YdyGf7mznzOz33cFFGEcv329p4qG2hoaQ8ULiMyVz6ENcxhoqGnFIdupcn7GICQWuw3yO3W8S33mzCcMYJ8ywc7U7rmaQf/W5K63Gr4bVTpXOyOp4tbaPyIaatBNpXqlmQUTSZXjxPr19+73PSaT+QnI35YsWn6WpfJjRtK8vlJZoTSgjaRU39AGCkWOZtifJrnefCrqwTKDFmuWUCukEsYcRrMzCoit28wYpP7kSVjMD8WJYQiNc2blMjuqYegmf6SsfC1jqz8XzghMlOX+gn/MKZmgljszrmehEa4V98VreJDxYvHr3j7IeJB9/sBZV41BWT/AZAjuC5XorlIPnZgBAniBEhanp0/0+qZmEWDpu8ige1hUPIyTo6T6gDEcFhWSoduNh8YSu65KgMOGBw7VlNYzNIgwHtq9KP2yyTVysqX5v12sf7D+vQUdR2dRDvCV40rIInXSLWT/yrC6ExOQxBJwIDbeZcl3z1yR5Rj3l8IGpxspapnvBL+fwupA3b6fkFceID9wgiM1ILB0cHVdvo/R4xg8yqKXT8efl0GnGX1/27FUYeUW2L/GNRGGWVGp3i91oaJkb4rybENHre9a2P5viz/yqk8ngWUUS+Kv+fu+9BLFnfLiLXOFcIeBJLhnayCiuDRSqcx0Qu68gVsGYc6EHD500Fkt+gpDj6gvr884n8wZ5o6q7xtL5wA0beXQnffWYkZrs2NGIRgQbsc5NB302SVx+R4ROvmgZaR8wBcji128BMfJ9kcvJ4DC+bQ57kRmv5yxgU4ngZfn0/JNZ8JBwxjTqS+s9kjJFG1unGUGLwMiIuXUD9EFhNIJuyCEAmVZSIGKH4G6v1gRR1LyzQKH2ZqiI1DnHMoDEZspbDjTeaFIAbSvjSq3A+n46y9hhVM8wIpnARSXyzmOD96d9UXvFroSPgGw1dq2vdEqDq9fJN1EbL2WulNmHkFDvxSO9ZT/RX/Bw2gA/BrF90XrJACereVfbV/YXaKfp77Nmx5NjEIUlxojsy7iN7nBHSZigfsbFyVOX1ZTeCCxvqnRSExP4lk5ZeYlRu9caaa743TWNdchRIhEWwadsBIe245C8clpaZ4zrPsk+OwXzxWCvRRumyNSLW5KWaSJyJU95cwheK76gr7228spZ3hmTtLyrfM2QRFqZFMR8/Q6yWfVgwTdfX2Ry4w3+eAO/5VT5nFb5NlzXPvBEAWrNZ6Q3jbH0RF4vcbp+fDngf/ywpoyNQtjrfvcq93AVb1RDWRghvyqgI2BkMr1rwYi8gizZ0G9GmPpMeqPerAQ0dJbzx+KAFM4IBq6iSLpZHUroeyfd9o5o+4fR2EtsZBoJORQEA4SW0CmeXSnblx2e9QkCHIodyqV6+g5ETEpZsLqnd/Na60EKPX/tQpPEcO+COIBPcQdszDzSiHGyQFPly/7KciUh1u+mFfxTCHGv9nn2WqndGgeGjQ/kr02qmTBX7Hc1qiEvgiSz1Tz/sy7Es29wvn6FrDGPP7asXlhOaiHxOctPvTptFA1kHFUk8bME7SsTSnGbFbUrssxrq70LhoSh5OwvQna+w84XdXhZb2sloJ4ZsCg3j+PrjJL08/JBi5zGd6ud/ZxhmcGKLOXPcNunQq5ESW92iJvfsuRrNYtawWwSmNhPYoFj2QqWNF0ffLpGt/ad24RJ8vkb5sXkpyKXmvFG5Vcdzf/44k3PBL/ojJ52+kWGzOArnyp5f969oV3J2c4Li27Nkova9VwRNVKqN0V+gV+mTHitgkXV30aWd3A1RSildEleiNPA+5cp+3+T7X+xfHiRZXQ1s4FA9TxIcnveQs9JSZ5r5qNmgqlW4zMtZ6rYNvgmyVcywKtu8ZxnSbS5vXlBV+NXdIfi3+xzrnJ0TkFL+Un8v1PWOC2PPFCjVPq7qTH7mOpzOYj/b4h0ceT+eHgr97Jqhb1ziVfeANzfN8bFUhPKBi7hJBCukQnB0aGjFTYLJPXL26lQ2b80xrOD5cFWgA8hz3St0e69kwNnD3+nX3gy12FjrjO+ddRvvvfyV3SWbXcxqNHfmsb9u1TV+wHTb9B07/L2sB8WUHJ9eeNomDyysEWZ0deqEhH/oWI2oiEh526gvAK1Nx2kIhNvkYR+tPYHEa9j+nd1VBpQP1uzSjIDO+fDDB7uy029rRjDC5Sk6aKczyz1D5uA9Lu+Rrrapl8JXNL3VRllNQH2K1ZFxOpX8LprttfqQ56MbPM0IttUheXWD/mROOeFqGUbL+kUOVlXLTFX/525g4faLEFO4qWWdmOXMNvVjpIVTWt650HfQjX9oT3Dg5Au6+v1/Ci78La6ZOngYCFPT1AUwxQuZ0yt5xKdNXLaDTISMTeCj16XTryhM36K2mfGRIgot71voWs8tTpL/f1rvcwv3LSDf+/G8THCT7NpfHWcW+lsF/ol8q9Bi6MezNTqp0rpp/kJRiVfNrX/w27cRRTu8RIIqtUblBMkxy4jwAVqCjUJkiPBj2cAoVloG8B2/N5deLdMhDb7xs5nhd3dubJhuj8WbaFRyu1L678DHhhA+rMimNo4C1kGpp0tD/qnCfCFHejpf0LJX43OTr578PY0tnIIrlWyNYyuR/ie6j2xNb1OV6u0dOX/1Dtcd7+ya9W+rY2LmnyQMtk8SMLTon8RAdwOaN2tNg5zVnDKlmVeOxPV2vhHIo9QEPV7jc3f+zVDquiNg1OaHX3cZXJDRY5MJpo+VanAcmqp4oasYLG+wrXUL5vJU0kqk2hGEskhP+Jjigrz1l6QnEwp6n8PMVeJp70Ii6ppeaK9GhF6fJE00ceLyxv08tKiPat4QdxZFgSbQknnEiCLD8Qc1rjazVKM3r3gXnnMeONgdz/yFV1q+haaN+wnF3Fn4uYCI9XsKOuVwDD0LsCO/f0gj5cmxCFcr7sclIcefWjvore+3aSU474cyqDVxH7w1RX3CHsaqsMRX17ZLgjsDXws3kLm2XJdM3Ku383UXqaHqsywzPhx7NFir0Fqjym/w6cxD2U9ypa3dx7Z12w/fi3Jps8sqJ8f8Ah8aZAvkHXvIRyrsxK7rrFaNNdNvjI8+3Emri195DCNa858anj2Qdny6Czshkn4N2+1m+k5S8sunX3Ja7I+JutRzg1mc2e9Yc0Zv9PZn1SwhxIdU9sXwZRTd/J5FoUm0e+PYREeHg3oc2YYzGf2xfJxXExt4pT3RfDRHvMXLUmoXOy63xv5pLuhOEax0dRgSywZ/GH+YBXFgCeTU0hZ8SPEFsn8punp1Kurd1KgXxUZ+la3R5+4ePGR4ZF5UQtOa83+Vj8zh80dfzbhxWCeoJnQ4dkZJM4drzknZOOKx2n3WrvJnzFIS8p0xeic+M3ZRVXIp10tV2DyYKwRxLzulPwzHcLlYTxl4PF7v8l106Azr+6wBFejbq/3P72C/0j78cepY9990/d4eAurn2lqdGKLU8FffnMw7cY7pVeXJRMU73Oxwi2g2vh/+4gX8dvbjfojn/eLVhhYl8GthwCQ50KcZq4z2JeW5eeOnJWFQEnVxDoG459TaC4zXybECEoJ0V5q1tXrQbDMtUxeTV6Pdt1/zJuc7TJoV/9YZFWxUtCf6Ou3Vd/vR/vG0138hJQrHkNeoep5dLe+6umcSquKvMaFpm3EZHDBOvCi0XYyIFHMgX7Cqp3JVXlxJFwQfHSaIUEbI2u1lBVUdlNw4Qa9UsLPEK94Qiln3pyKxQVCeNlx8yd7EegVNQBkFLabKvnietYVB4IPZ1fSor82arbgYec8aSdFMaIluYTYuNx32SxfrjKUdPGq+UNp5YpydoEG3xVLixtmHO9zXxKAnHnPuH2fPGrjx0GcuCDEU+yXUtXh6nfUL+cykws1gJ5vkfYFaFBr9PdCXvVf35OJQxzUMmWjv0W6uGJK11uAGDqSpOwCf6rouSIjPVgw57cJCOQ4b9tkI/Y5WNon9Swe72aZryKo8d+HyHBEdWJKrkary0LIGczA4Irq353Wc0Zga3om7UQiAGCvIl8GGyaqz5zH+1gMP5phWUCpKtttWIyicz09vXg76GxkmiGSMQ06Z9X8BUwqOtauDbPIf4rpK/yYoeAHxJ9soXS9VDe1Aw+awOOxaN8foLrif0TXBvQ55dtRtulRq9emFDBxlQcqKCaD8NeTSE7FOHvcjf/+oKbbtRqz9gbofoc2EzQ3pL6W5JdfJzAWmOk8oeoECe90lVMruwl/ltM015P/zIPazqvdvFmLNVHMIZrwiQ2tIKtGh6PDVH+85ew3caqVt2BsDv5rOcu3G9srQWd7NmgtzCRUXLYknYRSwtH9oUtkqyN3CfP20xQ1faXQl4MEmjQehWR6GmGnkdpYNQYeIG408yAX7uCZmYUic9juOfb+Re28+OVOB+scYK4DaPcBe+5wmji9gymtkMpKo4UKqCz7yxzuN8VIlx9yNozpRJpNaWHtaZVEqP45n2JemTlYBSmNIK1FuSYAUQ1yBLnKxevrjayd+h2i8PjdB3YY6b0nr3JuOXGpPMyh4V2dslpR3DFEvgpsBLqhqLDOWP4yEvIL6f21PpA7/8B"));
const $43d7963e56408b24$var$log2 = Math.log2 || ((n)=>Math.log(n) / Math.LN2);
const $43d7963e56408b24$var$bits = (n)=>$43d7963e56408b24$var$log2(n) + 1 | 0;
// compute the number of bits stored for each field
const $43d7963e56408b24$var$CATEGORY_BITS = $43d7963e56408b24$var$bits((0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).categories.length - 1);
const $43d7963e56408b24$var$COMBINING_BITS = $43d7963e56408b24$var$bits((0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses.length - 1);
const $43d7963e56408b24$var$SCRIPT_BITS = $43d7963e56408b24$var$bits((0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts.length - 1);
const $43d7963e56408b24$var$EAW_BITS = $43d7963e56408b24$var$bits((0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw.length - 1);
const $43d7963e56408b24$var$NUMBER_BITS = 10;
// compute shift and mask values for each field
const $43d7963e56408b24$var$CATEGORY_SHIFT = $43d7963e56408b24$var$COMBINING_BITS + $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
const $43d7963e56408b24$var$COMBINING_SHIFT = $43d7963e56408b24$var$SCRIPT_BITS + $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
const $43d7963e56408b24$var$SCRIPT_SHIFT = $43d7963e56408b24$var$EAW_BITS + $43d7963e56408b24$var$NUMBER_BITS;
const $43d7963e56408b24$var$EAW_SHIFT = $43d7963e56408b24$var$NUMBER_BITS;
const $43d7963e56408b24$var$CATEGORY_MASK = (1 << $43d7963e56408b24$var$CATEGORY_BITS) - 1;
const $43d7963e56408b24$var$COMBINING_MASK = (1 << $43d7963e56408b24$var$COMBINING_BITS) - 1;
const $43d7963e56408b24$var$SCRIPT_MASK = (1 << $43d7963e56408b24$var$SCRIPT_BITS) - 1;
const $43d7963e56408b24$var$EAW_MASK = (1 << $43d7963e56408b24$var$EAW_BITS) - 1;
const $43d7963e56408b24$var$NUMBER_MASK = (1 << $43d7963e56408b24$var$NUMBER_BITS) - 1;
function $43d7963e56408b24$export$410364bbb673ddbc(codePoint) {
    const val = $43d7963e56408b24$var$trie.get(codePoint);
    return (0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).categories[val >> $43d7963e56408b24$var$CATEGORY_SHIFT & $43d7963e56408b24$var$CATEGORY_MASK];
}
function $43d7963e56408b24$export$c03b919c6651ed55(codePoint) {
    const val = $43d7963e56408b24$var$trie.get(codePoint);
    return (0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).combiningClasses[val >> $43d7963e56408b24$var$COMBINING_SHIFT & $43d7963e56408b24$var$COMBINING_MASK];
}
function $43d7963e56408b24$export$941569448d136665(codePoint) {
    const val = $43d7963e56408b24$var$trie.get(codePoint);
    return (0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).scripts[val >> $43d7963e56408b24$var$SCRIPT_SHIFT & $43d7963e56408b24$var$SCRIPT_MASK];
}
function $43d7963e56408b24$export$92f6187db8ca6d26(codePoint) {
    const val = $43d7963e56408b24$var$trie.get(codePoint);
    return (0, /*@__PURE__*/ $parcel$interopDefault($29668e65f2091c2c$exports)).eaw[val >> $43d7963e56408b24$var$EAW_SHIFT & $43d7963e56408b24$var$EAW_MASK];
}
function $43d7963e56408b24$export$7d1258ebb7625a0d(codePoint) {
    let val = $43d7963e56408b24$var$trie.get(codePoint);
    let num = val & $43d7963e56408b24$var$NUMBER_MASK;
    if (num === 0) return null;
    else if (num <= 50) return num - 1;
    else if (num < 0x1e0) {
        const numerator = (num >> 4) - 12;
        const denominator = (num & 0xf) + 1;
        return numerator / denominator;
    } else if (num < 0x300) {
        val = (num >> 5) - 14;
        let exp = (num & 0x1f) + 2;
        while(exp > 0){
            val *= 10;
            exp--;
        }
        return val;
    } else {
        val = (num >> 2) - 0xbf;
        let exp = (num & 3) + 1;
        while(exp > 0){
            val *= 60;
            exp--;
        }
        return val;
    }
}
function $43d7963e56408b24$export$52c8ea63abd07594(codePoint) {
    const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
    return category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Nl";
}
function $43d7963e56408b24$export$727d9dbc4fbb948f(codePoint) {
    return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Nd";
}
function $43d7963e56408b24$export$a5b49f4dc6a07d2c(codePoint) {
    const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
    return category === "Pc" || category === "Pd" || category === "Pe" || category === "Pf" || category === "Pi" || category === "Po" || category === "Ps";
}
function $43d7963e56408b24$export$7b6804e8df61fcf5(codePoint) {
    return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Ll";
}
function $43d7963e56408b24$export$aebd617640818cda(codePoint) {
    return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lu";
}
function $43d7963e56408b24$export$de8b4ee23b2cf823(codePoint) {
    return $43d7963e56408b24$export$410364bbb673ddbc(codePoint) === "Lt";
}
function $43d7963e56408b24$export$3c52dd84024ae72c(codePoint) {
    const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
    return category === "Zs" || category === "Zl" || category === "Zp";
}
function $43d7963e56408b24$export$a11bdcffe109e74b(codePoint) {
    const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
    return category === "Nd" || category === "No" || category === "Nl" || category === "Lu" || category === "Ll" || category === "Lt" || category === "Lm" || category === "Lo" || category === "Me" || category === "Mc";
}
function $43d7963e56408b24$export$e33ad6871e762338(codePoint) {
    const category = $43d7963e56408b24$export$410364bbb673ddbc(codePoint);
    return category === "Mn" || category === "Me" || category === "Mc";
}
var $43d7963e56408b24$export$2e2bcd8739ae039 = {
    getCategory: $43d7963e56408b24$export$410364bbb673ddbc,
    getCombiningClass: $43d7963e56408b24$export$c03b919c6651ed55,
    getScript: $43d7963e56408b24$export$941569448d136665,
    getEastAsianWidth: $43d7963e56408b24$export$92f6187db8ca6d26,
    getNumericValue: $43d7963e56408b24$export$7d1258ebb7625a0d,
    isAlphabetic: $43d7963e56408b24$export$52c8ea63abd07594,
    isDigit: $43d7963e56408b24$export$727d9dbc4fbb948f,
    isPunctuation: $43d7963e56408b24$export$a5b49f4dc6a07d2c,
    isLowerCase: $43d7963e56408b24$export$7b6804e8df61fcf5,
    isUpperCase: $43d7963e56408b24$export$aebd617640818cda,
    isTitleCase: $43d7963e56408b24$export$de8b4ee23b2cf823,
    isWhiteSpace: $43d7963e56408b24$export$3c52dd84024ae72c,
    isBaseForm: $43d7963e56408b24$export$a11bdcffe109e74b,
    isMark: $43d7963e56408b24$export$e33ad6871e762338
}; //# sourceMappingURL=main.cjs.map


/***/ }),

/***/ 7422:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __decorate: () => (/* binding */ __decorate)
/* harmony export */ });
/* unused harmony exports __extends, __assign, __rest, __param, __esDecorate, __runInitializers, __propKey, __setFunctionName, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet, __classPrivateFieldIn, __addDisposableResource, __disposeResources, __rewriteRelativeImportExtension */
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){
        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
;
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++){
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
}
;
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
;
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
;
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
/** @deprecated */ function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
/** @deprecated */ function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {
            value: raw
        });
    } else {
        cooked.raw = raw;
    }
    return cooked;
}
;
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
var ownKeys = function(o) {
    ownKeys = Object.getOwnPropertyNames || function(o) {
        var ar = [];
        for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
        return ar;
    };
    return ownKeys(o);
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) {
        env.stack.push({
            async: true
        });
    }
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop()){
            try {
                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                if (r.dispose) {
                    var result = r.dispose.call(r.value);
                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                        fail(e);
                        return next();
                    });
                } else s |= 1;
            } catch (e) {
                fail(e);
            }
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
    if (typeof path === "string" && /^\.\.?\//.test(path)) {
        return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
            return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
        });
    }
    return path;
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __esDecorate,
    __runInitializers,
    __propKey,
    __setFunctionName,
    __metadata,
    __awaiter,
    __generator,
    __createBinding,
    __exportStar,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn,
    __addDisposableResource,
    __disposeResources,
    __rewriteRelativeImportExtension
});


/***/ }),

/***/ 2413:
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"ifd":{"8298":"Copyright","8769":"ExifIFDPointer","8822":"ExposureProgram","8824":"SpectralSensitivity","8825":"GPSInfoIFDPointer","8827":"PhotographicSensitivity","8828":"OECF","8830":"SensitivityType","8831":"StandardOutputSensitivity","8832":"RecommendedExposureIndex","8833":"ISOSpeed","8834":"ISOSpeedLatitudeyyy","8835":"ISOSpeedLatitudezzz","9000":"ExifVersion","9003":"DateTimeOriginal","9004":"DateTimeDigitized","9101":"ComponentsConfiguration","9102":"CompressedBitsPerPixel","9201":"ShutterSpeedValue","9202":"ApertureValue","9203":"BrightnessValue","9204":"ExposureBiasValue","9205":"MaxApertureValue","9206":"SubjectDistance","9207":"MeteringMode","9208":"LightSource","9209":"Flash","9214":"SubjectArea","9286":"UserComment","9290":"SubSecTime","9291":"SubSecTimeOriginal","9292":"SubSecTimeDigitized","010e":"ImageDescription","010f":"Make","011a":"XResolution","011b":"YResolution","011c":"PlanarConfiguration","012d":"TransferFunction","013b":"Artist","013e":"WhitePoint","013f":"PrimaryChromaticities","0100":"ImageWidth","0101":"ImageHeight","0102":"BitsPerSample","0103":"Compression","0106":"PhotometricInterpretation","0110":"Model","0111":"StripOffsets","0112":"Orientation","0115":"SamplesPerPixel","0116":"RowsPerStrip","0117":"StripByteCounts","0128":"ResolutionUnit","0131":"Software","0132":"DateTime","0201":"JPEGInterchangeFormat","0202":"JPEGInterchangeFormatLength","0211":"YCbCrCoefficients","0212":"YCbCrSubSampling","0213":"YCbCrPositioning","0214":"ReferenceBlackWhite","829a":"ExposureTime","829d":"FNumber","920a":"FocalLength","927c":"MakerNote","a000":"FlashpixVersion","a001":"ColorSpace","a002":"PixelXDimension","a003":"PixelYDimension","a004":"RelatedSoundFile","a005":"InteroperabilityIFDPointer","a20b":"FlashEnergy","a20c":"SpatialFrequencyResponse","a20e":"FocalPlaneXResolution","a20f":"FocalPlaneYResolution","a40a":"Sharpness","a40b":"DeviceSettingDescription","a40c":"SubjectDistanceRange","a210":"FocalPlaneResolutionUnit","a214":"SubjectLocation","a215":"ExposureIndex","a217":"SensingMethod","a300":"FileSource","a301":"SceneType","a302":"CFAPattern","a401":"CustomRendered","a402":"ExposureMode","a403":"WhiteBalance","a404":"DigitalZoomRatio","a405":"FocalLengthIn35mmFilm","a406":"SceneCaptureType","a407":"GainControl","a408":"Contrast","a409":"Saturation","a420":"ImageUniqueID","a430":"CameraOwnerName","a431":"BodySerialNumber","a432":"LensSpecification","a433":"LensMake","a434":"LensModel","a435":"LensSerialNumber","a500":"Gamma"},"gps":{"0000":"GPSVersionID","0001":"GPSLatitudeRef","0002":"GPSLatitude","0003":"GPSLongitudeRef","0004":"GPSLongitude","0005":"GPSAltitudeRef","0006":"GPSAltitude","0007":"GPSTimeStamp","0008":"GPSSatellites","0009":"GPSStatus","000a":"GPSMeasureMode","000b":"GPSDOP","000c":"GPSSpeedRef","000d":"GPSSpeed","000e":"GPSTrackRef","000f":"GPSTrack","0010":"GPSImgDirectionRef","0011":"GPSImgDirection","0012":"GPSMapDatum","0013":"GPSDestLatitudeRef","0014":"GPSDestLatitude","0015":"GPSDestLongitudeRef","0016":"GPSDestLongitude","0017":"GPSDestBearingRef","0018":"GPSDestBearing","0019":"GPSDestDistanceRef","001a":"GPSDestDistance","001b":"GPSProcessingMethod","001c":"GPSAreaInformation","001d":"GPSDateStamp","001e":"GPSDifferential","001f":"GPSHPositioningError"}}');

/***/ })

};
;